//This file was generated at 7/5/2018 8:16:57 PM using version 1.1.4.0 the SqT data access toolset.
namespace SqlT.Proxies.Z0
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using SqlT.Core;

    public sealed class Z0TableTypeNames
    {
        public const string CollationDescriptor = "[Z0].[CollationDescriptor]";
        public const string QueryDescriptor = "[Z0].[QueryDescriptor]";
        public const string RefactorStepExec = "[Z0].[RefactorStepExec]";
        public const string RenameIndexSelection = "[Z0].[RenameIndexSelection]";
        public const string TableStatsRecord = "[Z0].[TableStatsRecord]";
        public const string TriggerEventType = "[Z0].[TriggerEventType]";
    }

    public sealed class Z0ViewNames
    {
        public const string all_columns = "[Z0].[all_columns]";
        public const string all_objects = "[Z0].[all_objects]";
        public const string all_parameters = "[Z0].[all_parameters]";
        public const string all_sql_modules = "[Z0].[all_sql_modules]";
        public const string all_views = "[Z0].[all_views]";
        public const string allocation_units = "[Z0].[allocation_units]";
        public const string assemblies = "[Z0].[assemblies]";
        public const string assembly_files = "[Z0].[assembly_files]";
        public const string assembly_modules = "[Z0].[assembly_modules]";
        public const string assembly_references = "[Z0].[assembly_references]";
        public const string assembly_types = "[Z0].[assembly_types]";
        public const string asymmetric_keys = "[Z0].[asymmetric_keys]";
        public const string AvailableCollation = "[Z0].[AvailableCollation]";
        public const string backup_devices = "[Z0].[backup_devices]";
        public const string certificates = "[Z0].[certificates]";
        public const string change_tracking_databases = "[Z0].[change_tracking_databases]";
        public const string change_tracking_tables = "[Z0].[change_tracking_tables]";
        public const string check_constraints = "[Z0].[check_constraints]";
        public const string column_encryption_key_values = "[Z0].[column_encryption_key_values]";
        public const string column_encryption_keys = "[Z0].[column_encryption_keys]";
        public const string column_master_keys = "[Z0].[column_master_keys]";
        public const string column_store_dictionaries = "[Z0].[column_store_dictionaries]";
        public const string column_store_row_groups = "[Z0].[column_store_row_groups]";
        public const string column_store_segments = "[Z0].[column_store_segments]";
        public const string column_type_usages = "[Z0].[column_type_usages]";
        public const string column_xml_schema_collection_usages = "[Z0].[column_xml_schema_collection_usages]";
        public const string columns = "[Z0].[columns]";
        public const string computed_columns = "[Z0].[computed_columns]";
        public const string configurations = "[Z0].[configurations]";
        public const string conversation_endpoints = "[Z0].[conversation_endpoints]";
        public const string conversation_groups = "[Z0].[conversation_groups]";
        public const string conversation_priorities = "[Z0].[conversation_priorities]";
        public const string credentials = "[Z0].[credentials]";
        public const string crypt_properties = "[Z0].[crypt_properties]";
        public const string cryptographic_providers = "[Z0].[cryptographic_providers]";
        public const string data_spaces = "[Z0].[data_spaces]";
        public const string database_audit_specification_details = "[Z0].[database_audit_specification_details]";
        public const string database_audit_specifications = "[Z0].[database_audit_specifications]";
        public const string database_credentials = "[Z0].[database_credentials]";
        public const string database_files = "[Z0].[database_files]";
        public const string database_filestream_options = "[Z0].[database_filestream_options]";
        public const string database_mirroring = "[Z0].[database_mirroring]";
        public const string database_mirroring_endpoints = "[Z0].[database_mirroring_endpoints]";
        public const string database_mirroring_witnesses = "[Z0].[database_mirroring_witnesses]";
        public const string database_permissions = "[Z0].[database_permissions]";
        public const string database_principals = "[Z0].[database_principals]";
        public const string database_query_store_options = "[Z0].[database_query_store_options]";
        public const string database_recovery_status = "[Z0].[database_recovery_status]";
        public const string database_role_members = "[Z0].[database_role_members]";
        public const string database_scoped_configurations = "[Z0].[database_scoped_configurations]";
        public const string database_scoped_credentials = "[Z0].[database_scoped_credentials]";
        public const string databases = "[Z0].[databases]";
        public const string default_constraints = "[Z0].[default_constraints]";
        public const string destination_data_spaces = "[Z0].[destination_data_spaces]";
        public const string dm_audit_actions = "[Z0].[dm_audit_actions]";
        public const string dm_audit_class_type_map = "[Z0].[dm_audit_class_type_map]";
        public const string dm_broker_activated_tasks = "[Z0].[dm_broker_activated_tasks]";
        public const string dm_broker_connections = "[Z0].[dm_broker_connections]";
        public const string dm_broker_forwarded_messages = "[Z0].[dm_broker_forwarded_messages]";
        public const string dm_broker_queue_monitors = "[Z0].[dm_broker_queue_monitors]";
        public const string dm_cdc_errors = "[Z0].[dm_cdc_errors]";
        public const string dm_cdc_log_scan_sessions = "[Z0].[dm_cdc_log_scan_sessions]";
        public const string dm_clr_appdomains = "[Z0].[dm_clr_appdomains]";
        public const string dm_clr_loaded_assemblies = "[Z0].[dm_clr_loaded_assemblies]";
        public const string dm_clr_properties = "[Z0].[dm_clr_properties]";
        public const string dm_clr_tasks = "[Z0].[dm_clr_tasks]";
        public const string dm_column_store_object_pool = "[Z0].[dm_column_store_object_pool]";
        public const string dm_cryptographic_provider_properties = "[Z0].[dm_cryptographic_provider_properties]";
        public const string dm_database_encryption_keys = "[Z0].[dm_database_encryption_keys]";
        public const string dm_db_column_store_row_group_operational_stats = "[Z0].[dm_db_column_store_row_group_operational_stats]";
        public const string dm_db_column_store_row_group_physical_stats = "[Z0].[dm_db_column_store_row_group_physical_stats]";
        public const string dm_db_file_space_usage = "[Z0].[dm_db_file_space_usage]";
        public const string dm_db_fts_index_physical_stats = "[Z0].[dm_db_fts_index_physical_stats]";
        public const string dm_db_index_usage_stats = "[Z0].[dm_db_index_usage_stats]";
        public const string dm_db_log_space_usage = "[Z0].[dm_db_log_space_usage]";
        public const string dm_db_partition_stats = "[Z0].[dm_db_partition_stats]";
        public const string dm_server_audit_status = "[Z0].[dm_server_audit_status]";
        public const string dm_server_registry = "[Z0].[dm_server_registry]";
        public const string dm_server_services = "[Z0].[dm_server_services]";
        public const string dm_xe_map_values = "[Z0].[dm_xe_map_values]";
        public const string dm_xe_object_columns = "[Z0].[dm_xe_object_columns]";
        public const string dm_xe_objects = "[Z0].[dm_xe_objects]";
        public const string dm_xe_packages = "[Z0].[dm_xe_packages]";
        public const string dm_xe_session_event_actions = "[Z0].[dm_xe_session_event_actions]";
        public const string dm_xe_session_events = "[Z0].[dm_xe_session_events]";
        public const string dm_xe_session_object_columns = "[Z0].[dm_xe_session_object_columns]";
        public const string dm_xe_session_targets = "[Z0].[dm_xe_session_targets]";
        public const string dm_xe_sessions = "[Z0].[dm_xe_sessions]";
        public const string endpoints = "[Z0].[endpoints]";
        public const string event_notification_event_types = "[Z0].[event_notification_event_types]";
        public const string event_notifications = "[Z0].[event_notifications]";
        public const string events = "[Z0].[events]";
        public const string extended_properties = "[Z0].[extended_properties]";
        public const string filegroups = "[Z0].[filegroups]";
        public const string filetable_system_defined_objects = "[Z0].[filetable_system_defined_objects]";
        public const string FileTableDescription = "[Z0].[FileTableDescription]";
        public const string filetables = "[Z0].[filetables]";
        public const string foreign_key_columns = "[Z0].[foreign_key_columns]";
        public const string foreign_keys = "[Z0].[foreign_keys]";
        public const string ForeignKeyDescription = "[Z0].[ForeignKeyDescription]";
        public const string function_order_columns = "[Z0].[function_order_columns]";
        public const string hash_indexes = "[Z0].[hash_indexes]";
        public const string http_endpoints = "[Z0].[http_endpoints]";
        public const string identity_columns = "[Z0].[identity_columns]";
        public const string index_columns = "[Z0].[index_columns]";
        public const string IndexColumn = "[Z0].[IndexColumn]";
        public const string IndexDescription = "[Z0].[IndexDescription]";
        public const string indexes = "[Z0].[indexes]";
        public const string internal_partitions = "[Z0].[internal_partitions]";
        public const string key_constraints = "[Z0].[key_constraints]";
        public const string linked_logins = "[Z0].[linked_logins]";
        public const string message_type_xml_schema_collection_usages = "[Z0].[message_type_xml_schema_collection_usages]";
        public const string messages = "[Z0].[messages]";
        public const string module_assembly_usages = "[Z0].[module_assembly_usages]";
        public const string numbered_procedure_parameters = "[Z0].[numbered_procedure_parameters]";
        public const string numbered_procedures = "[Z0].[numbered_procedures]";
        public const string objects = "[Z0].[objects]";
        public const string openkeys = "[Z0].[openkeys]";
        public const string parameter_type_usages = "[Z0].[parameter_type_usages]";
        public const string parameter_xml_schema_collection_usages = "[Z0].[parameter_xml_schema_collection_usages]";
        public const string parameters = "[Z0].[parameters]";
        public const string partition_functions = "[Z0].[partition_functions]";
        public const string partition_parameters = "[Z0].[partition_parameters]";
        public const string partition_range_values = "[Z0].[partition_range_values]";
        public const string partition_schemes = "[Z0].[partition_schemes]";
        public const string partitions = "[Z0].[partitions]";
        public const string periods = "[Z0].[periods]";
        public const string plan_guides = "[Z0].[plan_guides]";
        public const string procedures = "[Z0].[procedures]";
        public const string query_context_settings = "[Z0].[query_context_settings]";
        public const string query_store_plan = "[Z0].[query_store_plan]";
        public const string query_store_query = "[Z0].[query_store_query]";
        public const string query_store_query_text = "[Z0].[query_store_query_text]";
        public const string query_store_runtime_stats = "[Z0].[query_store_runtime_stats]";
        public const string query_store_runtime_stats_interval = "[Z0].[query_store_runtime_stats_interval]";
        public const string QueryStoreSummary = "[Z0].[QueryStoreSummary]";
        public const string remote_service_bindings = "[Z0].[remote_service_bindings]";
        public const string routes = "[Z0].[routes]";
        public const string schemas = "[Z0].[schemas]";
        public const string securable_classes = "[Z0].[securable_classes]";
        public const string security_policies = "[Z0].[security_policies]";
        public const string security_predicates = "[Z0].[security_predicates]";
        public const string selective_xml_index_namespaces = "[Z0].[selective_xml_index_namespaces]";
        public const string selective_xml_index_paths = "[Z0].[selective_xml_index_paths]";
        public const string SequenceDescription = "[Z0].[SequenceDescription]";
        public const string sequences = "[Z0].[sequences]";
        public const string server_assembly_modules = "[Z0].[server_assembly_modules]";
        public const string server_audit_specification_details = "[Z0].[server_audit_specification_details]";
        public const string server_audit_specifications = "[Z0].[server_audit_specifications]";
        public const string server_audits = "[Z0].[server_audits]";
        public const string server_event_notifications = "[Z0].[server_event_notifications]";
        public const string server_event_session_actions = "[Z0].[server_event_session_actions]";
        public const string server_event_session_events = "[Z0].[server_event_session_events]";
        public const string server_event_session_fields = "[Z0].[server_event_session_fields]";
        public const string server_event_session_targets = "[Z0].[server_event_session_targets]";
        public const string server_event_sessions = "[Z0].[server_event_sessions]";
        public const string server_events = "[Z0].[server_events]";
        public const string server_file_audits = "[Z0].[server_file_audits]";
        public const string server_permissions = "[Z0].[server_permissions]";
        public const string server_principal_credentials = "[Z0].[server_principal_credentials]";
        public const string server_principals = "[Z0].[server_principals]";
        public const string server_role_members = "[Z0].[server_role_members]";
        public const string server_sql_modules = "[Z0].[server_sql_modules]";
        public const string server_trigger_events = "[Z0].[server_trigger_events]";
        public const string server_triggers = "[Z0].[server_triggers]";
        public const string servers = "[Z0].[servers]";
        public const string service_broker_endpoints = "[Z0].[service_broker_endpoints]";
        public const string service_contract_message_usages = "[Z0].[service_contract_message_usages]";
        public const string service_contract_usages = "[Z0].[service_contract_usages]";
        public const string service_contracts = "[Z0].[service_contracts]";
        public const string service_message_types = "[Z0].[service_message_types]";
        public const string service_queue_usages = "[Z0].[service_queue_usages]";
        public const string service_queues = "[Z0].[service_queues]";
        public const string services = "[Z0].[services]";
        public const string soap_endpoints = "[Z0].[soap_endpoints]";
        public const string sql_dependencies = "[Z0].[sql_dependencies]";
        public const string sql_expression_dependencies = "[Z0].[sql_expression_dependencies]";
        public const string sql_logins = "[Z0].[sql_logins]";
        public const string sql_modules = "[Z0].[sql_modules]";
        public const string SqlCollation = "[Z0].[SqlCollation]";
        public const string stats = "[Z0].[stats]";
        public const string stats_columns = "[Z0].[stats_columns]";
        public const string symmetric_keys = "[Z0].[symmetric_keys]";
        public const string synonyms = "[Z0].[synonyms]";
        public const string syscolumns = "[Z0].[syscolumns]";
        public const string sysindexes = "[Z0].[sysindexes]";
        public const string system_columns = "[Z0].[system_columns]";
        public const string system_components_surface_area_configuration = "[Z0].[system_components_surface_area_configuration]";
        public const string system_objects = "[Z0].[system_objects]";
        public const string system_parameters = "[Z0].[system_parameters]";
        public const string system_sql_modules = "[Z0].[system_sql_modules]";
        public const string system_views = "[Z0].[system_views]";
        public const string table_types = "[Z0].[table_types]";
        public const string TableColumnDescription = "[Z0].[TableColumnDescription]";
        public const string TableDescription = "[Z0].[TableDescription]";
        public const string tables = "[Z0].[tables]";
        public const string TableStats = "[Z0].[TableStats]";
        public const string tcp_endpoints = "[Z0].[tcp_endpoints]";
        public const string time_zone_info = "[Z0].[time_zone_info]";
        public const string trace_categories = "[Z0].[trace_categories]";
        public const string trace_columns = "[Z0].[trace_columns]";
        public const string trace_event_bindings = "[Z0].[trace_event_bindings]";
        public const string trace_events = "[Z0].[trace_events]";
        public const string trace_subclass_values = "[Z0].[trace_subclass_values]";
        public const string traces = "[Z0].[traces]";
        public const string transmission_queue = "[Z0].[transmission_queue]";
        public const string trigger_event_types = "[Z0].[trigger_event_types]";
        public const string trigger_events = "[Z0].[trigger_events]";
        public const string TriggerEventTypeDescription = "[Z0].[TriggerEventTypeDescription]";
        public const string triggers = "[Z0].[triggers]";
        public const string type_assembly_usages = "[Z0].[type_assembly_usages]";
        public const string types = "[Z0].[types]";
        public const string user_token = "[Z0].[user_token]";
        public const string via_endpoints = "[Z0].[via_endpoints]";
        public const string ViewColumnDescription = "[Z0].[ViewColumnDescription]";
        public const string ViewDescription = "[Z0].[ViewDescription]";
        public const string views = "[Z0].[views]";
        public const string xml_indexes = "[Z0].[xml_indexes]";
        public const string xml_schema_attributes = "[Z0].[xml_schema_attributes]";
        public const string xml_schema_collections = "[Z0].[xml_schema_collections]";
        public const string xml_schema_component_placements = "[Z0].[xml_schema_component_placements]";
        public const string xml_schema_components = "[Z0].[xml_schema_components]";
        public const string xml_schema_elements = "[Z0].[xml_schema_elements]";
        public const string xml_schema_facets = "[Z0].[xml_schema_facets]";
        public const string xml_schema_model_groups = "[Z0].[xml_schema_model_groups]";
        public const string xml_schema_namespaces = "[Z0].[xml_schema_namespaces]";
        public const string xml_schema_types = "[Z0].[xml_schema_types]";
        public const string xml_schema_wildcard_namespaces = "[Z0].[xml_schema_wildcard_namespaces]";
        public const string xml_schema_wildcards = "[Z0].[xml_schema_wildcards]";
    }

    public sealed class Z0ProcedureNames
    {
        public const string DefineRenameIndexRefactorSteps = "[Z0].[DefineRenameIndexRefactorSteps]";
        public const string DefineSchemaRefactorOp = "[Z0].[DefineSchemaRefactorOp]";
    }

    public sealed class Z0TableFunctionNames
    {
        public const string CalcRenameIndexRefactorStep = "[Z0].[CalcRenameIndexRefactorStep]";
        public const string DescribeRecentQueries = "[Z0].[DescribeRecentQueries]";
        public const string GetTableStats = "[Z0].[GetTableStats]";
        public const string TriggerEventTypes = "[Z0].[TriggerEventTypes]";
    }

    [SqlRecord("Z0", "QueryDescriptor")]
    public partial class QueryDescriptor : SqlTableTypeProxy<QueryDescriptor>
    {
        [SqlColumn("QueryId", 0), SqlTypeFacets("int", false)]
        public int QueryId
        {
            get;
            set;
        }

        [SqlColumn("LastExecuted", 1), SqlTypeFacets("datetime2", false)]
        public DateTime LastExecuted
        {
            get;
            set;
        }

        [SqlColumn("QueryText", 2), SqlTypeFacets("nvarchar", false)]
        public string QueryText
        {
            get;
            set;
        }

        public QueryDescriptor()
        {
        }

        public QueryDescriptor(object[] items)
        {
            QueryId = (int)items[0];
            LastExecuted = (DateTime)items[1];
            QueryText = (string)items[2];
        }

        public QueryDescriptor(int QueryId, DateTime LastExecuted, string QueryText)
        {
            this.QueryId = QueryId;
            this.LastExecuted = LastExecuted;
            this.QueryText = QueryText;
        }

        public override object[] GetItemArray()
        {
            return new object[] { QueryId, LastExecuted, QueryText };
        }

        public override void SetItemArray(object[] items)
        {
            QueryId = (int)items[0];
            LastExecuted = (DateTime)items[1];
            QueryText = (string)items[2];
        }
    }

    [SqlRecord("Z0", "RefactorStepExec")]
    public partial class RefactorStepExec : SqlTableTypeProxy<RefactorStepExec>
    {
        [SqlColumn("ExecSql", 0), SqlTypeFacets("nvarchar", false)]
        public string ExecSql
        {
            get;
            set;
        }

        public RefactorStepExec()
        {
        }

        public RefactorStepExec(object[] items)
        {
            ExecSql = (string)items[0];
        }

        public RefactorStepExec(string ExecSql)
        {
            this.ExecSql = ExecSql;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ExecSql };
        }

        public override void SetItemArray(object[] items)
        {
            ExecSql = (string)items[0];
        }
    }

    [SqlRecord("Z0", "RenameIndexSelection")]
    public partial class RenameIndexSelection : SqlTableTypeProxy<RenameIndexSelection>
    {
        [SqlColumn("TableName", 0), SqlTypeFacets("nvarchar", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("OldIndexName", 1), SqlTypeFacets("nvarchar", false)]
        public string OldIndexName
        {
            get;
            set;
        }

        [SqlColumn("NewIndexName", 2), SqlTypeFacets("nvarchar", false)]
        public string NewIndexName
        {
            get;
            set;
        }

        public RenameIndexSelection()
        {
        }

        public RenameIndexSelection(object[] items)
        {
            TableName = (string)items[0];
            OldIndexName = (string)items[1];
            NewIndexName = (string)items[2];
        }

        public RenameIndexSelection(string TableName, string OldIndexName, string NewIndexName)
        {
            this.TableName = TableName;
            this.OldIndexName = OldIndexName;
            this.NewIndexName = NewIndexName;
        }

        public override object[] GetItemArray()
        {
            return new object[] { TableName, OldIndexName, NewIndexName };
        }

        public override void SetItemArray(object[] items)
        {
            TableName = (string)items[0];
            OldIndexName = (string)items[1];
            NewIndexName = (string)items[2];
        }
    }

    [SqlRecord("Z0", "TableStatsRecord")]
    public partial class TableStatsRecord : SqlTableTypeProxy<TableStatsRecord>
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("nvarchar", false)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("nvarchar", false)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("nvarchar", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("nvarchar", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("RecordCount", 4), SqlTypeFacets("bigint", false)]
        public long RecordCount
        {
            get;
            set;
        }

        [SqlColumn("DataStorage", 5), SqlTypeFacets("bigint", false)]
        public long DataStorage
        {
            get;
            set;
        }

        [SqlColumn("IndexStorage", 6), SqlTypeFacets("bigint", false)]
        public long IndexStorage
        {
            get;
            set;
        }

        [SqlColumn("TotalStorage", 7), SqlTypeFacets("bigint", false)]
        public long TotalStorage
        {
            get;
            set;
        }

        public TableStatsRecord()
        {
        }

        public TableStatsRecord(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            RecordCount = (long)items[4];
            DataStorage = (long)items[5];
            IndexStorage = (long)items[6];
            TotalStorage = (long)items[7];
        }

        public TableStatsRecord(string ServerName, string CatalogName, string SchemaName, string TableName, long RecordCount, long DataStorage, long IndexStorage, long TotalStorage)
        {
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.RecordCount = RecordCount;
            this.DataStorage = DataStorage;
            this.IndexStorage = IndexStorage;
            this.TotalStorage = TotalStorage;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, CatalogName, SchemaName, TableName, RecordCount, DataStorage, IndexStorage, TotalStorage };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            RecordCount = (long)items[4];
            DataStorage = (long)items[5];
            IndexStorage = (long)items[6];
            TotalStorage = (long)items[7];
        }
    }

    [SqlRecord("Z0", "CollationDescriptor")]
    public partial class CollationDescriptor : SqlTableTypeProxy<CollationDescriptor>
    {
        [SqlColumn("CollationName", 0), SqlTypeFacets("nvarchar", false)]
        public string CollationName
        {
            get;
            set;
        }

        [SqlColumn("CollationDescription", 1), SqlTypeFacets("nvarchar", false)]
        public string CollationDescription
        {
            get;
            set;
        }

        [SqlColumn("IsSqlCollation", 2), SqlTypeFacets("bit", false)]
        public bool IsSqlCollation
        {
            get;
            set;
        }

        public CollationDescriptor()
        {
        }

        public CollationDescriptor(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool)items[2];
        }

        public CollationDescriptor(string CollationName, string CollationDescription, bool IsSqlCollation)
        {
            this.CollationName = CollationName;
            this.CollationDescription = CollationDescription;
            this.IsSqlCollation = IsSqlCollation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { CollationName, CollationDescription, IsSqlCollation };
        }

        public override void SetItemArray(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool)items[2];
        }
    }

    [SqlRecord("Z0", "TriggerEventType")]
    public partial class TriggerEventType : SqlTableTypeProxy<TriggerEventType>
    {
        [SqlColumn("TypeNumber", 0), SqlTypeFacets("int", false)]
        public int TypeNumber
        {
            get;
            set;
        }

        [SqlColumn("TypeName", 1), SqlTypeFacets("nvarchar", false)]
        public string TypeName
        {
            get;
            set;
        }

        [SqlColumn("GroupNumber", 2), SqlTypeFacets("int", false)]
        public int GroupNumber
        {
            get;
            set;
        }

        public TriggerEventType()
        {
        }

        public TriggerEventType(object[] items)
        {
            TypeNumber = (int)items[0];
            TypeName = (string)items[1];
            GroupNumber = (int)items[2];
        }

        public TriggerEventType(int TypeNumber, string TypeName, int GroupNumber)
        {
            this.TypeNumber = TypeNumber;
            this.TypeName = TypeName;
            this.GroupNumber = GroupNumber;
        }

        public override object[] GetItemArray()
        {
            return new object[] { TypeNumber, TypeName, GroupNumber };
        }

        public override void SetItemArray(object[] items)
        {
            TypeNumber = (int)items[0];
            TypeName = (string)items[1];
            GroupNumber = (int)items[2];
        }
    }

    [SqlView("Z0", "periods")]
    public partial class periods : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("period_type", 1), SqlTypeFacets("tinyint", true)]
        public byte? period_type
        {
            get;
            set;
        }

        [SqlColumn("period_type_desc", 2), SqlTypeFacets("nvarchar", true)]
        public string period_type_desc
        {
            get;
            set;
        }

        [SqlColumn("object_id", 3), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("start_column_id", 4), SqlTypeFacets("int", false)]
        public int start_column_id
        {
            get;
            set;
        }

        [SqlColumn("end_column_id", 5), SqlTypeFacets("int", false)]
        public int end_column_id
        {
            get;
            set;
        }

        public periods()
        {
        }

        public periods(object[] items)
        {
            name = (string)items[0];
            period_type = (byte?)items[1];
            period_type_desc = (string)items[2];
            object_id = (int)items[3];
            start_column_id = (int)items[4];
            end_column_id = (int)items[5];
        }

        public periods(string name, byte? period_type, string period_type_desc, int object_id, int start_column_id, int end_column_id)
        {
            this.name = name;
            this.period_type = period_type;
            this.period_type_desc = period_type_desc;
            this.object_id = object_id;
            this.start_column_id = start_column_id;
            this.end_column_id = end_column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, period_type, period_type_desc, object_id, start_column_id, end_column_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            period_type = (byte?)items[1];
            period_type_desc = (string)items[2];
            object_id = (int)items[3];
            start_column_id = (int)items[4];
            end_column_id = (int)items[5];
        }
    }

    [SqlView("Z0", "plan_guides")]
    public partial class plan_guides : SqlViewProxy
    {
        [SqlColumn("plan_guide_id", 0), SqlTypeFacets("int", false)]
        public int plan_guide_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 4), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("query_text", 5), SqlTypeFacets("nvarchar", true)]
        public string query_text
        {
            get;
            set;
        }

        [SqlColumn("scope_type", 6), SqlTypeFacets("tinyint", false)]
        public byte scope_type
        {
            get;
            set;
        }

        [SqlColumn("scope_type_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string scope_type_desc
        {
            get;
            set;
        }

        [SqlColumn("scope_object_id", 8), SqlTypeFacets("int", true)]
        public int? scope_object_id
        {
            get;
            set;
        }

        [SqlColumn("scope_batch", 9), SqlTypeFacets("nvarchar", true)]
        public string scope_batch
        {
            get;
            set;
        }

        [SqlColumn("parameters", 10), SqlTypeFacets("nvarchar", true)]
        public string parameters
        {
            get;
            set;
        }

        [SqlColumn("hints", 11), SqlTypeFacets("nvarchar", true)]
        public string hints
        {
            get;
            set;
        }

        public plan_guides()
        {
        }

        public plan_guides(object[] items)
        {
            plan_guide_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            is_disabled = (bool)items[4];
            query_text = (string)items[5];
            scope_type = (byte)items[6];
            scope_type_desc = (string)items[7];
            scope_object_id = (int?)items[8];
            scope_batch = (string)items[9];
            parameters = (string)items[10];
            hints = (string)items[11];
        }

        public plan_guides(int plan_guide_id, string name, DateTime create_date, DateTime modify_date, bool is_disabled, string query_text, byte scope_type, string scope_type_desc, int? scope_object_id, string scope_batch, string parameters, string hints)
        {
            this.plan_guide_id = plan_guide_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_disabled = is_disabled;
            this.query_text = query_text;
            this.scope_type = scope_type;
            this.scope_type_desc = scope_type_desc;
            this.scope_object_id = scope_object_id;
            this.scope_batch = scope_batch;
            this.parameters = parameters;
            this.hints = hints;
        }

        public override object[] GetItemArray()
        {
            return new object[] { plan_guide_id, name, create_date, modify_date, is_disabled, query_text, scope_type, scope_type_desc, scope_object_id, scope_batch, parameters, hints };
        }

        public override void SetItemArray(object[] items)
        {
            plan_guide_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            is_disabled = (bool)items[4];
            query_text = (string)items[5];
            scope_type = (byte)items[6];
            scope_type_desc = (string)items[7];
            scope_object_id = (int?)items[8];
            scope_batch = (string)items[9];
            parameters = (string)items[10];
            hints = (string)items[11];
        }
    }

    [SqlView("Z0", "procedures")]
    public partial class procedures : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_auto_executed", 12), SqlTypeFacets("bit", false)]
        public bool is_auto_executed
        {
            get;
            set;
        }

        [SqlColumn("is_execution_replicated", 13), SqlTypeFacets("bit", true)]
        public bool? is_execution_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_repl_serializable_only", 14), SqlTypeFacets("bit", true)]
        public bool? is_repl_serializable_only
        {
            get;
            set;
        }

        [SqlColumn("skips_repl_constraints", 15), SqlTypeFacets("bit", true)]
        public bool? skips_repl_constraints
        {
            get;
            set;
        }

        public procedures()
        {
        }

        public procedures(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_auto_executed = (bool)items[12];
            is_execution_replicated = (bool?)items[13];
            is_repl_serializable_only = (bool?)items[14];
            skips_repl_constraints = (bool?)items[15];
        }

        public procedures(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool is_auto_executed, bool? is_execution_replicated, bool? is_repl_serializable_only, bool? skips_repl_constraints)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_auto_executed = is_auto_executed;
            this.is_execution_replicated = is_execution_replicated;
            this.is_repl_serializable_only = is_repl_serializable_only;
            this.skips_repl_constraints = skips_repl_constraints;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_auto_executed, is_execution_replicated, is_repl_serializable_only, skips_repl_constraints };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_auto_executed = (bool)items[12];
            is_execution_replicated = (bool?)items[13];
            is_repl_serializable_only = (bool?)items[14];
            skips_repl_constraints = (bool?)items[15];
        }
    }

    [SqlView("Z0", "query_context_settings")]
    public partial class query_context_settings : SqlViewProxy
    {
        [SqlColumn("context_settings_id", 0), SqlTypeFacets("bigint", false)]
        public long context_settings_id
        {
            get;
            set;
        }

        [SqlColumn("set_options", 1), SqlTypeFacets("varbinary", true)]
        public Byte[] set_options
        {
            get;
            set;
        }

        [SqlColumn("language_id", 2), SqlTypeFacets("smallint", false)]
        public short language_id
        {
            get;
            set;
        }

        [SqlColumn("date_format", 3), SqlTypeFacets("smallint", false)]
        public short date_format
        {
            get;
            set;
        }

        [SqlColumn("date_first", 4), SqlTypeFacets("tinyint", false)]
        public byte date_first
        {
            get;
            set;
        }

        [SqlColumn("status", 5), SqlTypeFacets("varbinary", true)]
        public Byte[] status
        {
            get;
            set;
        }

        [SqlColumn("required_cursor_options", 6), SqlTypeFacets("int", false)]
        public int required_cursor_options
        {
            get;
            set;
        }

        [SqlColumn("acceptable_cursor_options", 7), SqlTypeFacets("int", false)]
        public int acceptable_cursor_options
        {
            get;
            set;
        }

        [SqlColumn("merge_action_type", 8), SqlTypeFacets("smallint", false)]
        public short merge_action_type
        {
            get;
            set;
        }

        [SqlColumn("default_schema_id", 9), SqlTypeFacets("int", false)]
        public int default_schema_id
        {
            get;
            set;
        }

        [SqlColumn("is_replication_specific", 10), SqlTypeFacets("bit", false)]
        public bool is_replication_specific
        {
            get;
            set;
        }

        [SqlColumn("is_contained", 11), SqlTypeFacets("varbinary", true)]
        public Byte[] is_contained
        {
            get;
            set;
        }

        public query_context_settings()
        {
        }

        public query_context_settings(object[] items)
        {
            context_settings_id = (long)items[0];
            set_options = (Byte[])items[1];
            language_id = (short)items[2];
            date_format = (short)items[3];
            date_first = (byte)items[4];
            status = (Byte[])items[5];
            required_cursor_options = (int)items[6];
            acceptable_cursor_options = (int)items[7];
            merge_action_type = (short)items[8];
            default_schema_id = (int)items[9];
            is_replication_specific = (bool)items[10];
            is_contained = (Byte[])items[11];
        }

        public query_context_settings(long context_settings_id, Byte[] set_options, short language_id, short date_format, byte date_first, Byte[] status, int required_cursor_options, int acceptable_cursor_options, short merge_action_type, int default_schema_id, bool is_replication_specific, Byte[] is_contained)
        {
            this.context_settings_id = context_settings_id;
            this.set_options = set_options;
            this.language_id = language_id;
            this.date_format = date_format;
            this.date_first = date_first;
            this.status = status;
            this.required_cursor_options = required_cursor_options;
            this.acceptable_cursor_options = acceptable_cursor_options;
            this.merge_action_type = merge_action_type;
            this.default_schema_id = default_schema_id;
            this.is_replication_specific = is_replication_specific;
            this.is_contained = is_contained;
        }

        public override object[] GetItemArray()
        {
            return new object[] { context_settings_id, set_options, language_id, date_format, date_first, status, required_cursor_options, acceptable_cursor_options, merge_action_type, default_schema_id, is_replication_specific, is_contained };
        }

        public override void SetItemArray(object[] items)
        {
            context_settings_id = (long)items[0];
            set_options = (Byte[])items[1];
            language_id = (short)items[2];
            date_format = (short)items[3];
            date_first = (byte)items[4];
            status = (Byte[])items[5];
            required_cursor_options = (int)items[6];
            acceptable_cursor_options = (int)items[7];
            merge_action_type = (short)items[8];
            default_schema_id = (int)items[9];
            is_replication_specific = (bool)items[10];
            is_contained = (Byte[])items[11];
        }
    }

    [SqlView("Z0", "query_store_plan")]
    public partial class query_store_plan : SqlViewProxy
    {
        [SqlColumn("plan_id", 0), SqlTypeFacets("bigint", false)]
        public long plan_id
        {
            get;
            set;
        }

        [SqlColumn("query_id", 1), SqlTypeFacets("bigint", false)]
        public long query_id
        {
            get;
            set;
        }

        [SqlColumn("plan_group_id", 2), SqlTypeFacets("bigint", true)]
        public long? plan_group_id
        {
            get;
            set;
        }

        [SqlColumn("engine_version", 3), SqlTypeFacets("nvarchar", true)]
        public string engine_version
        {
            get;
            set;
        }

        [SqlColumn("compatibility_level", 4), SqlTypeFacets("smallint", false)]
        public short compatibility_level
        {
            get;
            set;
        }

        [SqlColumn("query_plan_hash", 5), SqlTypeFacets("binary", false)]
        public Byte[] query_plan_hash
        {
            get;
            set;
        }

        [SqlColumn("query_plan", 6), SqlTypeFacets("nvarchar", true)]
        public string query_plan
        {
            get;
            set;
        }

        [SqlColumn("is_online_index_plan", 7), SqlTypeFacets("bit", false)]
        public bool is_online_index_plan
        {
            get;
            set;
        }

        [SqlColumn("is_trivial_plan", 8), SqlTypeFacets("bit", false)]
        public bool is_trivial_plan
        {
            get;
            set;
        }

        [SqlColumn("is_parallel_plan", 9), SqlTypeFacets("bit", false)]
        public bool is_parallel_plan
        {
            get;
            set;
        }

        [SqlColumn("is_forced_plan", 10), SqlTypeFacets("bit", false)]
        public bool is_forced_plan
        {
            get;
            set;
        }

        [SqlColumn("is_natively_compiled", 11), SqlTypeFacets("bit", false)]
        public bool is_natively_compiled
        {
            get;
            set;
        }

        [SqlColumn("force_failure_count", 12), SqlTypeFacets("bigint", false)]
        public long force_failure_count
        {
            get;
            set;
        }

        [SqlColumn("last_force_failure_reason", 13), SqlTypeFacets("int", false)]
        public int last_force_failure_reason
        {
            get;
            set;
        }

        [SqlColumn("last_force_failure_reason_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string last_force_failure_reason_desc
        {
            get;
            set;
        }

        [SqlColumn("count_compiles", 15), SqlTypeFacets("bigint", true)]
        public long? count_compiles
        {
            get;
            set;
        }

        [SqlColumn("initial_compile_start_time", 16), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset initial_compile_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_compile_start_time", 17), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_compile_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 18), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("avg_compile_duration", 19), SqlTypeFacets("float", true)]
        public double? avg_compile_duration
        {
            get;
            set;
        }

        [SqlColumn("last_compile_duration", 20), SqlTypeFacets("bigint", true)]
        public long? last_compile_duration
        {
            get;
            set;
        }

        [SqlColumn("plan_forcing_type", 21), SqlTypeFacets("int", false)]
        public int plan_forcing_type
        {
            get;
            set;
        }

        [SqlColumn("plan_forcing_type_desc", 22), SqlTypeFacets("nvarchar", true)]
        public string plan_forcing_type_desc
        {
            get;
            set;
        }

        public query_store_plan()
        {
        }

        public query_store_plan(object[] items)
        {
            plan_id = (long)items[0];
            query_id = (long)items[1];
            plan_group_id = (long?)items[2];
            engine_version = (string)items[3];
            compatibility_level = (short)items[4];
            query_plan_hash = (Byte[])items[5];
            query_plan = (string)items[6];
            is_online_index_plan = (bool)items[7];
            is_trivial_plan = (bool)items[8];
            is_parallel_plan = (bool)items[9];
            is_forced_plan = (bool)items[10];
            is_natively_compiled = (bool)items[11];
            force_failure_count = (long)items[12];
            last_force_failure_reason = (int)items[13];
            last_force_failure_reason_desc = (string)items[14];
            count_compiles = (long?)items[15];
            initial_compile_start_time = (DateTimeOffset)items[16];
            last_compile_start_time = (DateTimeOffset?)items[17];
            last_execution_time = (DateTimeOffset?)items[18];
            avg_compile_duration = (double?)items[19];
            last_compile_duration = (long?)items[20];
            plan_forcing_type = (int)items[21];
            plan_forcing_type_desc = (string)items[22];
        }

        public query_store_plan(long plan_id, long query_id, long? plan_group_id, string engine_version, short compatibility_level, Byte[] query_plan_hash, string query_plan, bool is_online_index_plan, bool is_trivial_plan, bool is_parallel_plan, bool is_forced_plan, bool is_natively_compiled, long force_failure_count, int last_force_failure_reason, string last_force_failure_reason_desc, long? count_compiles, DateTimeOffset initial_compile_start_time, DateTimeOffset? last_compile_start_time, DateTimeOffset? last_execution_time, double? avg_compile_duration, long? last_compile_duration, int plan_forcing_type, string plan_forcing_type_desc)
        {
            this.plan_id = plan_id;
            this.query_id = query_id;
            this.plan_group_id = plan_group_id;
            this.engine_version = engine_version;
            this.compatibility_level = compatibility_level;
            this.query_plan_hash = query_plan_hash;
            this.query_plan = query_plan;
            this.is_online_index_plan = is_online_index_plan;
            this.is_trivial_plan = is_trivial_plan;
            this.is_parallel_plan = is_parallel_plan;
            this.is_forced_plan = is_forced_plan;
            this.is_natively_compiled = is_natively_compiled;
            this.force_failure_count = force_failure_count;
            this.last_force_failure_reason = last_force_failure_reason;
            this.last_force_failure_reason_desc = last_force_failure_reason_desc;
            this.count_compiles = count_compiles;
            this.initial_compile_start_time = initial_compile_start_time;
            this.last_compile_start_time = last_compile_start_time;
            this.last_execution_time = last_execution_time;
            this.avg_compile_duration = avg_compile_duration;
            this.last_compile_duration = last_compile_duration;
            this.plan_forcing_type = plan_forcing_type;
            this.plan_forcing_type_desc = plan_forcing_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { plan_id, query_id, plan_group_id, engine_version, compatibility_level, query_plan_hash, query_plan, is_online_index_plan, is_trivial_plan, is_parallel_plan, is_forced_plan, is_natively_compiled, force_failure_count, last_force_failure_reason, last_force_failure_reason_desc, count_compiles, initial_compile_start_time, last_compile_start_time, last_execution_time, avg_compile_duration, last_compile_duration, plan_forcing_type, plan_forcing_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            plan_id = (long)items[0];
            query_id = (long)items[1];
            plan_group_id = (long?)items[2];
            engine_version = (string)items[3];
            compatibility_level = (short)items[4];
            query_plan_hash = (Byte[])items[5];
            query_plan = (string)items[6];
            is_online_index_plan = (bool)items[7];
            is_trivial_plan = (bool)items[8];
            is_parallel_plan = (bool)items[9];
            is_forced_plan = (bool)items[10];
            is_natively_compiled = (bool)items[11];
            force_failure_count = (long)items[12];
            last_force_failure_reason = (int)items[13];
            last_force_failure_reason_desc = (string)items[14];
            count_compiles = (long?)items[15];
            initial_compile_start_time = (DateTimeOffset)items[16];
            last_compile_start_time = (DateTimeOffset?)items[17];
            last_execution_time = (DateTimeOffset?)items[18];
            avg_compile_duration = (double?)items[19];
            last_compile_duration = (long?)items[20];
            plan_forcing_type = (int)items[21];
            plan_forcing_type_desc = (string)items[22];
        }
    }

    [SqlView("Z0", "query_store_query")]
    public partial class query_store_query : SqlViewProxy
    {
        [SqlColumn("query_id", 0), SqlTypeFacets("bigint", false)]
        public long query_id
        {
            get;
            set;
        }

        [SqlColumn("query_text_id", 1), SqlTypeFacets("bigint", false)]
        public long query_text_id
        {
            get;
            set;
        }

        [SqlColumn("context_settings_id", 2), SqlTypeFacets("bigint", false)]
        public long context_settings_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 3), SqlTypeFacets("bigint", true)]
        public long? object_id
        {
            get;
            set;
        }

        [SqlColumn("batch_sql_handle", 4), SqlTypeFacets("varbinary", true)]
        public Byte[] batch_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("query_hash", 5), SqlTypeFacets("binary", false)]
        public Byte[] query_hash
        {
            get;
            set;
        }

        [SqlColumn("is_internal_query", 6), SqlTypeFacets("bit", false)]
        public bool is_internal_query
        {
            get;
            set;
        }

        [SqlColumn("query_parameterization_type", 7), SqlTypeFacets("tinyint", false)]
        public byte query_parameterization_type
        {
            get;
            set;
        }

        [SqlColumn("query_parameterization_type_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string query_parameterization_type_desc
        {
            get;
            set;
        }

        [SqlColumn("initial_compile_start_time", 9), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset initial_compile_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_compile_start_time", 10), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_compile_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 11), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("last_compile_batch_sql_handle", 12), SqlTypeFacets("varbinary", true)]
        public Byte[] last_compile_batch_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("last_compile_batch_offset_start", 13), SqlTypeFacets("bigint", true)]
        public long? last_compile_batch_offset_start
        {
            get;
            set;
        }

        [SqlColumn("last_compile_batch_offset_end", 14), SqlTypeFacets("bigint", true)]
        public long? last_compile_batch_offset_end
        {
            get;
            set;
        }

        [SqlColumn("count_compiles", 15), SqlTypeFacets("bigint", true)]
        public long? count_compiles
        {
            get;
            set;
        }

        [SqlColumn("avg_compile_duration", 16), SqlTypeFacets("float", true)]
        public double? avg_compile_duration
        {
            get;
            set;
        }

        [SqlColumn("last_compile_duration", 17), SqlTypeFacets("bigint", true)]
        public long? last_compile_duration
        {
            get;
            set;
        }

        [SqlColumn("avg_bind_duration", 18), SqlTypeFacets("float", true)]
        public double? avg_bind_duration
        {
            get;
            set;
        }

        [SqlColumn("last_bind_duration", 19), SqlTypeFacets("bigint", true)]
        public long? last_bind_duration
        {
            get;
            set;
        }

        [SqlColumn("avg_bind_cpu_time", 20), SqlTypeFacets("float", true)]
        public double? avg_bind_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("last_bind_cpu_time", 21), SqlTypeFacets("bigint", true)]
        public long? last_bind_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("avg_optimize_duration", 22), SqlTypeFacets("float", true)]
        public double? avg_optimize_duration
        {
            get;
            set;
        }

        [SqlColumn("last_optimize_duration", 23), SqlTypeFacets("bigint", true)]
        public long? last_optimize_duration
        {
            get;
            set;
        }

        [SqlColumn("avg_optimize_cpu_time", 24), SqlTypeFacets("float", true)]
        public double? avg_optimize_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("last_optimize_cpu_time", 25), SqlTypeFacets("bigint", true)]
        public long? last_optimize_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("avg_compile_memory_kb", 26), SqlTypeFacets("float", true)]
        public double? avg_compile_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("last_compile_memory_kb", 27), SqlTypeFacets("bigint", true)]
        public long? last_compile_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("max_compile_memory_kb", 28), SqlTypeFacets("bigint", true)]
        public long? max_compile_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("is_clouddb_internal_query", 29), SqlTypeFacets("bit", true)]
        public bool? is_clouddb_internal_query
        {
            get;
            set;
        }

        public query_store_query()
        {
        }

        public query_store_query(object[] items)
        {
            query_id = (long)items[0];
            query_text_id = (long)items[1];
            context_settings_id = (long)items[2];
            object_id = (long?)items[3];
            batch_sql_handle = (Byte[])items[4];
            query_hash = (Byte[])items[5];
            is_internal_query = (bool)items[6];
            query_parameterization_type = (byte)items[7];
            query_parameterization_type_desc = (string)items[8];
            initial_compile_start_time = (DateTimeOffset)items[9];
            last_compile_start_time = (DateTimeOffset?)items[10];
            last_execution_time = (DateTimeOffset?)items[11];
            last_compile_batch_sql_handle = (Byte[])items[12];
            last_compile_batch_offset_start = (long?)items[13];
            last_compile_batch_offset_end = (long?)items[14];
            count_compiles = (long?)items[15];
            avg_compile_duration = (double?)items[16];
            last_compile_duration = (long?)items[17];
            avg_bind_duration = (double?)items[18];
            last_bind_duration = (long?)items[19];
            avg_bind_cpu_time = (double?)items[20];
            last_bind_cpu_time = (long?)items[21];
            avg_optimize_duration = (double?)items[22];
            last_optimize_duration = (long?)items[23];
            avg_optimize_cpu_time = (double?)items[24];
            last_optimize_cpu_time = (long?)items[25];
            avg_compile_memory_kb = (double?)items[26];
            last_compile_memory_kb = (long?)items[27];
            max_compile_memory_kb = (long?)items[28];
            is_clouddb_internal_query = (bool?)items[29];
        }

        public query_store_query(long query_id, long query_text_id, long context_settings_id, long? object_id, Byte[] batch_sql_handle, Byte[] query_hash, bool is_internal_query, byte query_parameterization_type, string query_parameterization_type_desc, DateTimeOffset initial_compile_start_time, DateTimeOffset? last_compile_start_time, DateTimeOffset? last_execution_time, Byte[] last_compile_batch_sql_handle, long? last_compile_batch_offset_start, long? last_compile_batch_offset_end, long? count_compiles, double? avg_compile_duration, long? last_compile_duration, double? avg_bind_duration, long? last_bind_duration, double? avg_bind_cpu_time, long? last_bind_cpu_time, double? avg_optimize_duration, long? last_optimize_duration, double? avg_optimize_cpu_time, long? last_optimize_cpu_time, double? avg_compile_memory_kb, long? last_compile_memory_kb, long? max_compile_memory_kb, bool? is_clouddb_internal_query)
        {
            this.query_id = query_id;
            this.query_text_id = query_text_id;
            this.context_settings_id = context_settings_id;
            this.object_id = object_id;
            this.batch_sql_handle = batch_sql_handle;
            this.query_hash = query_hash;
            this.is_internal_query = is_internal_query;
            this.query_parameterization_type = query_parameterization_type;
            this.query_parameterization_type_desc = query_parameterization_type_desc;
            this.initial_compile_start_time = initial_compile_start_time;
            this.last_compile_start_time = last_compile_start_time;
            this.last_execution_time = last_execution_time;
            this.last_compile_batch_sql_handle = last_compile_batch_sql_handle;
            this.last_compile_batch_offset_start = last_compile_batch_offset_start;
            this.last_compile_batch_offset_end = last_compile_batch_offset_end;
            this.count_compiles = count_compiles;
            this.avg_compile_duration = avg_compile_duration;
            this.last_compile_duration = last_compile_duration;
            this.avg_bind_duration = avg_bind_duration;
            this.last_bind_duration = last_bind_duration;
            this.avg_bind_cpu_time = avg_bind_cpu_time;
            this.last_bind_cpu_time = last_bind_cpu_time;
            this.avg_optimize_duration = avg_optimize_duration;
            this.last_optimize_duration = last_optimize_duration;
            this.avg_optimize_cpu_time = avg_optimize_cpu_time;
            this.last_optimize_cpu_time = last_optimize_cpu_time;
            this.avg_compile_memory_kb = avg_compile_memory_kb;
            this.last_compile_memory_kb = last_compile_memory_kb;
            this.max_compile_memory_kb = max_compile_memory_kb;
            this.is_clouddb_internal_query = is_clouddb_internal_query;
        }

        public override object[] GetItemArray()
        {
            return new object[] { query_id, query_text_id, context_settings_id, object_id, batch_sql_handle, query_hash, is_internal_query, query_parameterization_type, query_parameterization_type_desc, initial_compile_start_time, last_compile_start_time, last_execution_time, last_compile_batch_sql_handle, last_compile_batch_offset_start, last_compile_batch_offset_end, count_compiles, avg_compile_duration, last_compile_duration, avg_bind_duration, last_bind_duration, avg_bind_cpu_time, last_bind_cpu_time, avg_optimize_duration, last_optimize_duration, avg_optimize_cpu_time, last_optimize_cpu_time, avg_compile_memory_kb, last_compile_memory_kb, max_compile_memory_kb, is_clouddb_internal_query };
        }

        public override void SetItemArray(object[] items)
        {
            query_id = (long)items[0];
            query_text_id = (long)items[1];
            context_settings_id = (long)items[2];
            object_id = (long?)items[3];
            batch_sql_handle = (Byte[])items[4];
            query_hash = (Byte[])items[5];
            is_internal_query = (bool)items[6];
            query_parameterization_type = (byte)items[7];
            query_parameterization_type_desc = (string)items[8];
            initial_compile_start_time = (DateTimeOffset)items[9];
            last_compile_start_time = (DateTimeOffset?)items[10];
            last_execution_time = (DateTimeOffset?)items[11];
            last_compile_batch_sql_handle = (Byte[])items[12];
            last_compile_batch_offset_start = (long?)items[13];
            last_compile_batch_offset_end = (long?)items[14];
            count_compiles = (long?)items[15];
            avg_compile_duration = (double?)items[16];
            last_compile_duration = (long?)items[17];
            avg_bind_duration = (double?)items[18];
            last_bind_duration = (long?)items[19];
            avg_bind_cpu_time = (double?)items[20];
            last_bind_cpu_time = (long?)items[21];
            avg_optimize_duration = (double?)items[22];
            last_optimize_duration = (long?)items[23];
            avg_optimize_cpu_time = (double?)items[24];
            last_optimize_cpu_time = (long?)items[25];
            avg_compile_memory_kb = (double?)items[26];
            last_compile_memory_kb = (long?)items[27];
            max_compile_memory_kb = (long?)items[28];
            is_clouddb_internal_query = (bool?)items[29];
        }
    }

    [SqlView("Z0", "query_store_query_text")]
    public partial class query_store_query_text : SqlViewProxy
    {
        [SqlColumn("query_text_id", 0), SqlTypeFacets("bigint", false)]
        public long query_text_id
        {
            get;
            set;
        }

        [SqlColumn("query_sql_text", 1), SqlTypeFacets("nvarchar", true)]
        public string query_sql_text
        {
            get;
            set;
        }

        [SqlColumn("statement_sql_handle", 2), SqlTypeFacets("varbinary", true)]
        public Byte[] statement_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("is_part_of_encrypted_module", 3), SqlTypeFacets("bit", false)]
        public bool is_part_of_encrypted_module
        {
            get;
            set;
        }

        [SqlColumn("has_restricted_text", 4), SqlTypeFacets("bit", false)]
        public bool has_restricted_text
        {
            get;
            set;
        }

        public query_store_query_text()
        {
        }

        public query_store_query_text(object[] items)
        {
            query_text_id = (long)items[0];
            query_sql_text = (string)items[1];
            statement_sql_handle = (Byte[])items[2];
            is_part_of_encrypted_module = (bool)items[3];
            has_restricted_text = (bool)items[4];
        }

        public query_store_query_text(long query_text_id, string query_sql_text, Byte[] statement_sql_handle, bool is_part_of_encrypted_module, bool has_restricted_text)
        {
            this.query_text_id = query_text_id;
            this.query_sql_text = query_sql_text;
            this.statement_sql_handle = statement_sql_handle;
            this.is_part_of_encrypted_module = is_part_of_encrypted_module;
            this.has_restricted_text = has_restricted_text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { query_text_id, query_sql_text, statement_sql_handle, is_part_of_encrypted_module, has_restricted_text };
        }

        public override void SetItemArray(object[] items)
        {
            query_text_id = (long)items[0];
            query_sql_text = (string)items[1];
            statement_sql_handle = (Byte[])items[2];
            is_part_of_encrypted_module = (bool)items[3];
            has_restricted_text = (bool)items[4];
        }
    }

    [SqlView("Z0", "query_store_runtime_stats")]
    public partial class query_store_runtime_stats : SqlViewProxy
    {
        [SqlColumn("runtime_stats_id", 0), SqlTypeFacets("bigint", false)]
        public long runtime_stats_id
        {
            get;
            set;
        }

        [SqlColumn("plan_id", 1), SqlTypeFacets("bigint", false)]
        public long plan_id
        {
            get;
            set;
        }

        [SqlColumn("runtime_stats_interval_id", 2), SqlTypeFacets("bigint", false)]
        public long runtime_stats_interval_id
        {
            get;
            set;
        }

        [SqlColumn("execution_type", 3), SqlTypeFacets("tinyint", false)]
        public byte execution_type
        {
            get;
            set;
        }

        [SqlColumn("execution_type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string execution_type_desc
        {
            get;
            set;
        }

        [SqlColumn("first_execution_time", 5), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset first_execution_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 6), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("count_executions", 7), SqlTypeFacets("bigint", false)]
        public long count_executions
        {
            get;
            set;
        }

        [SqlColumn("avg_duration", 8), SqlTypeFacets("float", true)]
        public double? avg_duration
        {
            get;
            set;
        }

        [SqlColumn("last_duration", 9), SqlTypeFacets("bigint", false)]
        public long last_duration
        {
            get;
            set;
        }

        [SqlColumn("min_duration", 10), SqlTypeFacets("bigint", false)]
        public long min_duration
        {
            get;
            set;
        }

        [SqlColumn("max_duration", 11), SqlTypeFacets("bigint", false)]
        public long max_duration
        {
            get;
            set;
        }

        [SqlColumn("stdev_duration", 12), SqlTypeFacets("float", true)]
        public double? stdev_duration
        {
            get;
            set;
        }

        [SqlColumn("avg_cpu_time", 13), SqlTypeFacets("float", true)]
        public double? avg_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("last_cpu_time", 14), SqlTypeFacets("bigint", false)]
        public long last_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("min_cpu_time", 15), SqlTypeFacets("bigint", false)]
        public long min_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("max_cpu_time", 16), SqlTypeFacets("bigint", false)]
        public long max_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("stdev_cpu_time", 17), SqlTypeFacets("float", true)]
        public double? stdev_cpu_time
        {
            get;
            set;
        }

        [SqlColumn("avg_logical_io_reads", 18), SqlTypeFacets("float", true)]
        public double? avg_logical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("last_logical_io_reads", 19), SqlTypeFacets("bigint", false)]
        public long last_logical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("min_logical_io_reads", 20), SqlTypeFacets("bigint", false)]
        public long min_logical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("max_logical_io_reads", 21), SqlTypeFacets("bigint", false)]
        public long max_logical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("stdev_logical_io_reads", 22), SqlTypeFacets("float", true)]
        public double? stdev_logical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("avg_logical_io_writes", 23), SqlTypeFacets("float", true)]
        public double? avg_logical_io_writes
        {
            get;
            set;
        }

        [SqlColumn("last_logical_io_writes", 24), SqlTypeFacets("bigint", false)]
        public long last_logical_io_writes
        {
            get;
            set;
        }

        [SqlColumn("min_logical_io_writes", 25), SqlTypeFacets("bigint", false)]
        public long min_logical_io_writes
        {
            get;
            set;
        }

        [SqlColumn("max_logical_io_writes", 26), SqlTypeFacets("bigint", false)]
        public long max_logical_io_writes
        {
            get;
            set;
        }

        [SqlColumn("stdev_logical_io_writes", 27), SqlTypeFacets("float", true)]
        public double? stdev_logical_io_writes
        {
            get;
            set;
        }

        [SqlColumn("avg_physical_io_reads", 28), SqlTypeFacets("float", true)]
        public double? avg_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("last_physical_io_reads", 29), SqlTypeFacets("bigint", false)]
        public long last_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("min_physical_io_reads", 30), SqlTypeFacets("bigint", false)]
        public long min_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("max_physical_io_reads", 31), SqlTypeFacets("bigint", false)]
        public long max_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("stdev_physical_io_reads", 32), SqlTypeFacets("float", true)]
        public double? stdev_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("avg_clr_time", 33), SqlTypeFacets("float", true)]
        public double? avg_clr_time
        {
            get;
            set;
        }

        [SqlColumn("last_clr_time", 34), SqlTypeFacets("bigint", false)]
        public long last_clr_time
        {
            get;
            set;
        }

        [SqlColumn("min_clr_time", 35), SqlTypeFacets("bigint", false)]
        public long min_clr_time
        {
            get;
            set;
        }

        [SqlColumn("max_clr_time", 36), SqlTypeFacets("bigint", false)]
        public long max_clr_time
        {
            get;
            set;
        }

        [SqlColumn("stdev_clr_time", 37), SqlTypeFacets("float", true)]
        public double? stdev_clr_time
        {
            get;
            set;
        }

        [SqlColumn("avg_dop", 38), SqlTypeFacets("float", true)]
        public double? avg_dop
        {
            get;
            set;
        }

        [SqlColumn("last_dop", 39), SqlTypeFacets("bigint", false)]
        public long last_dop
        {
            get;
            set;
        }

        [SqlColumn("min_dop", 40), SqlTypeFacets("bigint", false)]
        public long min_dop
        {
            get;
            set;
        }

        [SqlColumn("max_dop", 41), SqlTypeFacets("bigint", false)]
        public long max_dop
        {
            get;
            set;
        }

        [SqlColumn("stdev_dop", 42), SqlTypeFacets("float", true)]
        public double? stdev_dop
        {
            get;
            set;
        }

        [SqlColumn("avg_query_max_used_memory", 43), SqlTypeFacets("float", true)]
        public double? avg_query_max_used_memory
        {
            get;
            set;
        }

        [SqlColumn("last_query_max_used_memory", 44), SqlTypeFacets("bigint", false)]
        public long last_query_max_used_memory
        {
            get;
            set;
        }

        [SqlColumn("min_query_max_used_memory", 45), SqlTypeFacets("bigint", false)]
        public long min_query_max_used_memory
        {
            get;
            set;
        }

        [SqlColumn("max_query_max_used_memory", 46), SqlTypeFacets("bigint", false)]
        public long max_query_max_used_memory
        {
            get;
            set;
        }

        [SqlColumn("stdev_query_max_used_memory", 47), SqlTypeFacets("float", true)]
        public double? stdev_query_max_used_memory
        {
            get;
            set;
        }

        [SqlColumn("avg_rowcount", 48), SqlTypeFacets("float", true)]
        public double? avg_rowcount
        {
            get;
            set;
        }

        [SqlColumn("last_rowcount", 49), SqlTypeFacets("bigint", false)]
        public long last_rowcount
        {
            get;
            set;
        }

        [SqlColumn("min_rowcount", 50), SqlTypeFacets("bigint", false)]
        public long min_rowcount
        {
            get;
            set;
        }

        [SqlColumn("max_rowcount", 51), SqlTypeFacets("bigint", false)]
        public long max_rowcount
        {
            get;
            set;
        }

        [SqlColumn("stdev_rowcount", 52), SqlTypeFacets("float", true)]
        public double? stdev_rowcount
        {
            get;
            set;
        }

        [SqlColumn("avg_num_physical_io_reads", 53), SqlTypeFacets("float", true)]
        public double? avg_num_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("last_num_physical_io_reads", 54), SqlTypeFacets("bigint", true)]
        public long? last_num_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("min_num_physical_io_reads", 55), SqlTypeFacets("bigint", true)]
        public long? min_num_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("max_num_physical_io_reads", 56), SqlTypeFacets("bigint", true)]
        public long? max_num_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("stdev_num_physical_io_reads", 57), SqlTypeFacets("float", true)]
        public double? stdev_num_physical_io_reads
        {
            get;
            set;
        }

        [SqlColumn("avg_log_bytes_used", 58), SqlTypeFacets("float", true)]
        public double? avg_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("last_log_bytes_used", 59), SqlTypeFacets("bigint", true)]
        public long? last_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("min_log_bytes_used", 60), SqlTypeFacets("bigint", true)]
        public long? min_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("max_log_bytes_used", 61), SqlTypeFacets("bigint", true)]
        public long? max_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("stdev_log_bytes_used", 62), SqlTypeFacets("float", true)]
        public double? stdev_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("avg_tempdb_space_used", 63), SqlTypeFacets("float", true)]
        public double? avg_tempdb_space_used
        {
            get;
            set;
        }

        [SqlColumn("last_tempdb_space_used", 64), SqlTypeFacets("bigint", true)]
        public long? last_tempdb_space_used
        {
            get;
            set;
        }

        [SqlColumn("min_tempdb_space_used", 65), SqlTypeFacets("bigint", true)]
        public long? min_tempdb_space_used
        {
            get;
            set;
        }

        [SqlColumn("max_tempdb_space_used", 66), SqlTypeFacets("bigint", true)]
        public long? max_tempdb_space_used
        {
            get;
            set;
        }

        [SqlColumn("stdev_tempdb_space_used", 67), SqlTypeFacets("float", true)]
        public double? stdev_tempdb_space_used
        {
            get;
            set;
        }

        public query_store_runtime_stats()
        {
        }

        public query_store_runtime_stats(object[] items)
        {
            runtime_stats_id = (long)items[0];
            plan_id = (long)items[1];
            runtime_stats_interval_id = (long)items[2];
            execution_type = (byte)items[3];
            execution_type_desc = (string)items[4];
            first_execution_time = (DateTimeOffset)items[5];
            last_execution_time = (DateTimeOffset)items[6];
            count_executions = (long)items[7];
            avg_duration = (double?)items[8];
            last_duration = (long)items[9];
            min_duration = (long)items[10];
            max_duration = (long)items[11];
            stdev_duration = (double?)items[12];
            avg_cpu_time = (double?)items[13];
            last_cpu_time = (long)items[14];
            min_cpu_time = (long)items[15];
            max_cpu_time = (long)items[16];
            stdev_cpu_time = (double?)items[17];
            avg_logical_io_reads = (double?)items[18];
            last_logical_io_reads = (long)items[19];
            min_logical_io_reads = (long)items[20];
            max_logical_io_reads = (long)items[21];
            stdev_logical_io_reads = (double?)items[22];
            avg_logical_io_writes = (double?)items[23];
            last_logical_io_writes = (long)items[24];
            min_logical_io_writes = (long)items[25];
            max_logical_io_writes = (long)items[26];
            stdev_logical_io_writes = (double?)items[27];
            avg_physical_io_reads = (double?)items[28];
            last_physical_io_reads = (long)items[29];
            min_physical_io_reads = (long)items[30];
            max_physical_io_reads = (long)items[31];
            stdev_physical_io_reads = (double?)items[32];
            avg_clr_time = (double?)items[33];
            last_clr_time = (long)items[34];
            min_clr_time = (long)items[35];
            max_clr_time = (long)items[36];
            stdev_clr_time = (double?)items[37];
            avg_dop = (double?)items[38];
            last_dop = (long)items[39];
            min_dop = (long)items[40];
            max_dop = (long)items[41];
            stdev_dop = (double?)items[42];
            avg_query_max_used_memory = (double?)items[43];
            last_query_max_used_memory = (long)items[44];
            min_query_max_used_memory = (long)items[45];
            max_query_max_used_memory = (long)items[46];
            stdev_query_max_used_memory = (double?)items[47];
            avg_rowcount = (double?)items[48];
            last_rowcount = (long)items[49];
            min_rowcount = (long)items[50];
            max_rowcount = (long)items[51];
            stdev_rowcount = (double?)items[52];
            avg_num_physical_io_reads = (double?)items[53];
            last_num_physical_io_reads = (long?)items[54];
            min_num_physical_io_reads = (long?)items[55];
            max_num_physical_io_reads = (long?)items[56];
            stdev_num_physical_io_reads = (double?)items[57];
            avg_log_bytes_used = (double?)items[58];
            last_log_bytes_used = (long?)items[59];
            min_log_bytes_used = (long?)items[60];
            max_log_bytes_used = (long?)items[61];
            stdev_log_bytes_used = (double?)items[62];
            avg_tempdb_space_used = (double?)items[63];
            last_tempdb_space_used = (long?)items[64];
            min_tempdb_space_used = (long?)items[65];
            max_tempdb_space_used = (long?)items[66];
            stdev_tempdb_space_used = (double?)items[67];
        }

        public query_store_runtime_stats(long runtime_stats_id, long plan_id, long runtime_stats_interval_id, byte execution_type, string execution_type_desc, DateTimeOffset first_execution_time, DateTimeOffset last_execution_time, long count_executions, double? avg_duration, long last_duration, long min_duration, long max_duration, double? stdev_duration, double? avg_cpu_time, long last_cpu_time, long min_cpu_time, long max_cpu_time, double? stdev_cpu_time, double? avg_logical_io_reads, long last_logical_io_reads, long min_logical_io_reads, long max_logical_io_reads, double? stdev_logical_io_reads, double? avg_logical_io_writes, long last_logical_io_writes, long min_logical_io_writes, long max_logical_io_writes, double? stdev_logical_io_writes, double? avg_physical_io_reads, long last_physical_io_reads, long min_physical_io_reads, long max_physical_io_reads, double? stdev_physical_io_reads, double? avg_clr_time, long last_clr_time, long min_clr_time, long max_clr_time, double? stdev_clr_time, double? avg_dop, long last_dop, long min_dop, long max_dop, double? stdev_dop, double? avg_query_max_used_memory, long last_query_max_used_memory, long min_query_max_used_memory, long max_query_max_used_memory, double? stdev_query_max_used_memory, double? avg_rowcount, long last_rowcount, long min_rowcount, long max_rowcount, double? stdev_rowcount, double? avg_num_physical_io_reads, long? last_num_physical_io_reads, long? min_num_physical_io_reads, long? max_num_physical_io_reads, double? stdev_num_physical_io_reads, double? avg_log_bytes_used, long? last_log_bytes_used, long? min_log_bytes_used, long? max_log_bytes_used, double? stdev_log_bytes_used, double? avg_tempdb_space_used, long? last_tempdb_space_used, long? min_tempdb_space_used, long? max_tempdb_space_used, double? stdev_tempdb_space_used)
        {
            this.runtime_stats_id = runtime_stats_id;
            this.plan_id = plan_id;
            this.runtime_stats_interval_id = runtime_stats_interval_id;
            this.execution_type = execution_type;
            this.execution_type_desc = execution_type_desc;
            this.first_execution_time = first_execution_time;
            this.last_execution_time = last_execution_time;
            this.count_executions = count_executions;
            this.avg_duration = avg_duration;
            this.last_duration = last_duration;
            this.min_duration = min_duration;
            this.max_duration = max_duration;
            this.stdev_duration = stdev_duration;
            this.avg_cpu_time = avg_cpu_time;
            this.last_cpu_time = last_cpu_time;
            this.min_cpu_time = min_cpu_time;
            this.max_cpu_time = max_cpu_time;
            this.stdev_cpu_time = stdev_cpu_time;
            this.avg_logical_io_reads = avg_logical_io_reads;
            this.last_logical_io_reads = last_logical_io_reads;
            this.min_logical_io_reads = min_logical_io_reads;
            this.max_logical_io_reads = max_logical_io_reads;
            this.stdev_logical_io_reads = stdev_logical_io_reads;
            this.avg_logical_io_writes = avg_logical_io_writes;
            this.last_logical_io_writes = last_logical_io_writes;
            this.min_logical_io_writes = min_logical_io_writes;
            this.max_logical_io_writes = max_logical_io_writes;
            this.stdev_logical_io_writes = stdev_logical_io_writes;
            this.avg_physical_io_reads = avg_physical_io_reads;
            this.last_physical_io_reads = last_physical_io_reads;
            this.min_physical_io_reads = min_physical_io_reads;
            this.max_physical_io_reads = max_physical_io_reads;
            this.stdev_physical_io_reads = stdev_physical_io_reads;
            this.avg_clr_time = avg_clr_time;
            this.last_clr_time = last_clr_time;
            this.min_clr_time = min_clr_time;
            this.max_clr_time = max_clr_time;
            this.stdev_clr_time = stdev_clr_time;
            this.avg_dop = avg_dop;
            this.last_dop = last_dop;
            this.min_dop = min_dop;
            this.max_dop = max_dop;
            this.stdev_dop = stdev_dop;
            this.avg_query_max_used_memory = avg_query_max_used_memory;
            this.last_query_max_used_memory = last_query_max_used_memory;
            this.min_query_max_used_memory = min_query_max_used_memory;
            this.max_query_max_used_memory = max_query_max_used_memory;
            this.stdev_query_max_used_memory = stdev_query_max_used_memory;
            this.avg_rowcount = avg_rowcount;
            this.last_rowcount = last_rowcount;
            this.min_rowcount = min_rowcount;
            this.max_rowcount = max_rowcount;
            this.stdev_rowcount = stdev_rowcount;
            this.avg_num_physical_io_reads = avg_num_physical_io_reads;
            this.last_num_physical_io_reads = last_num_physical_io_reads;
            this.min_num_physical_io_reads = min_num_physical_io_reads;
            this.max_num_physical_io_reads = max_num_physical_io_reads;
            this.stdev_num_physical_io_reads = stdev_num_physical_io_reads;
            this.avg_log_bytes_used = avg_log_bytes_used;
            this.last_log_bytes_used = last_log_bytes_used;
            this.min_log_bytes_used = min_log_bytes_used;
            this.max_log_bytes_used = max_log_bytes_used;
            this.stdev_log_bytes_used = stdev_log_bytes_used;
            this.avg_tempdb_space_used = avg_tempdb_space_used;
            this.last_tempdb_space_used = last_tempdb_space_used;
            this.min_tempdb_space_used = min_tempdb_space_used;
            this.max_tempdb_space_used = max_tempdb_space_used;
            this.stdev_tempdb_space_used = stdev_tempdb_space_used;
        }

        public override object[] GetItemArray()
        {
            return new object[] { runtime_stats_id, plan_id, runtime_stats_interval_id, execution_type, execution_type_desc, first_execution_time, last_execution_time, count_executions, avg_duration, last_duration, min_duration, max_duration, stdev_duration, avg_cpu_time, last_cpu_time, min_cpu_time, max_cpu_time, stdev_cpu_time, avg_logical_io_reads, last_logical_io_reads, min_logical_io_reads, max_logical_io_reads, stdev_logical_io_reads, avg_logical_io_writes, last_logical_io_writes, min_logical_io_writes, max_logical_io_writes, stdev_logical_io_writes, avg_physical_io_reads, last_physical_io_reads, min_physical_io_reads, max_physical_io_reads, stdev_physical_io_reads, avg_clr_time, last_clr_time, min_clr_time, max_clr_time, stdev_clr_time, avg_dop, last_dop, min_dop, max_dop, stdev_dop, avg_query_max_used_memory, last_query_max_used_memory, min_query_max_used_memory, max_query_max_used_memory, stdev_query_max_used_memory, avg_rowcount, last_rowcount, min_rowcount, max_rowcount, stdev_rowcount, avg_num_physical_io_reads, last_num_physical_io_reads, min_num_physical_io_reads, max_num_physical_io_reads, stdev_num_physical_io_reads, avg_log_bytes_used, last_log_bytes_used, min_log_bytes_used, max_log_bytes_used, stdev_log_bytes_used, avg_tempdb_space_used, last_tempdb_space_used, min_tempdb_space_used, max_tempdb_space_used, stdev_tempdb_space_used };
        }

        public override void SetItemArray(object[] items)
        {
            runtime_stats_id = (long)items[0];
            plan_id = (long)items[1];
            runtime_stats_interval_id = (long)items[2];
            execution_type = (byte)items[3];
            execution_type_desc = (string)items[4];
            first_execution_time = (DateTimeOffset)items[5];
            last_execution_time = (DateTimeOffset)items[6];
            count_executions = (long)items[7];
            avg_duration = (double?)items[8];
            last_duration = (long)items[9];
            min_duration = (long)items[10];
            max_duration = (long)items[11];
            stdev_duration = (double?)items[12];
            avg_cpu_time = (double?)items[13];
            last_cpu_time = (long)items[14];
            min_cpu_time = (long)items[15];
            max_cpu_time = (long)items[16];
            stdev_cpu_time = (double?)items[17];
            avg_logical_io_reads = (double?)items[18];
            last_logical_io_reads = (long)items[19];
            min_logical_io_reads = (long)items[20];
            max_logical_io_reads = (long)items[21];
            stdev_logical_io_reads = (double?)items[22];
            avg_logical_io_writes = (double?)items[23];
            last_logical_io_writes = (long)items[24];
            min_logical_io_writes = (long)items[25];
            max_logical_io_writes = (long)items[26];
            stdev_logical_io_writes = (double?)items[27];
            avg_physical_io_reads = (double?)items[28];
            last_physical_io_reads = (long)items[29];
            min_physical_io_reads = (long)items[30];
            max_physical_io_reads = (long)items[31];
            stdev_physical_io_reads = (double?)items[32];
            avg_clr_time = (double?)items[33];
            last_clr_time = (long)items[34];
            min_clr_time = (long)items[35];
            max_clr_time = (long)items[36];
            stdev_clr_time = (double?)items[37];
            avg_dop = (double?)items[38];
            last_dop = (long)items[39];
            min_dop = (long)items[40];
            max_dop = (long)items[41];
            stdev_dop = (double?)items[42];
            avg_query_max_used_memory = (double?)items[43];
            last_query_max_used_memory = (long)items[44];
            min_query_max_used_memory = (long)items[45];
            max_query_max_used_memory = (long)items[46];
            stdev_query_max_used_memory = (double?)items[47];
            avg_rowcount = (double?)items[48];
            last_rowcount = (long)items[49];
            min_rowcount = (long)items[50];
            max_rowcount = (long)items[51];
            stdev_rowcount = (double?)items[52];
            avg_num_physical_io_reads = (double?)items[53];
            last_num_physical_io_reads = (long?)items[54];
            min_num_physical_io_reads = (long?)items[55];
            max_num_physical_io_reads = (long?)items[56];
            stdev_num_physical_io_reads = (double?)items[57];
            avg_log_bytes_used = (double?)items[58];
            last_log_bytes_used = (long?)items[59];
            min_log_bytes_used = (long?)items[60];
            max_log_bytes_used = (long?)items[61];
            stdev_log_bytes_used = (double?)items[62];
            avg_tempdb_space_used = (double?)items[63];
            last_tempdb_space_used = (long?)items[64];
            min_tempdb_space_used = (long?)items[65];
            max_tempdb_space_used = (long?)items[66];
            stdev_tempdb_space_used = (double?)items[67];
        }
    }

    [SqlView("Z0", "query_store_runtime_stats_interval")]
    public partial class query_store_runtime_stats_interval : SqlViewProxy
    {
        [SqlColumn("runtime_stats_interval_id", 0), SqlTypeFacets("bigint", false)]
        public long runtime_stats_interval_id
        {
            get;
            set;
        }

        [SqlColumn("start_time", 1), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset start_time
        {
            get;
            set;
        }

        [SqlColumn("end_time", 2), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset end_time
        {
            get;
            set;
        }

        [SqlColumn("comment", 3), SqlTypeFacets("nvarchar", true)]
        public string comment
        {
            get;
            set;
        }

        public query_store_runtime_stats_interval()
        {
        }

        public query_store_runtime_stats_interval(object[] items)
        {
            runtime_stats_interval_id = (long)items[0];
            start_time = (DateTimeOffset)items[1];
            end_time = (DateTimeOffset)items[2];
            comment = (string)items[3];
        }

        public query_store_runtime_stats_interval(long runtime_stats_interval_id, DateTimeOffset start_time, DateTimeOffset end_time, string comment)
        {
            this.runtime_stats_interval_id = runtime_stats_interval_id;
            this.start_time = start_time;
            this.end_time = end_time;
            this.comment = comment;
        }

        public override object[] GetItemArray()
        {
            return new object[] { runtime_stats_interval_id, start_time, end_time, comment };
        }

        public override void SetItemArray(object[] items)
        {
            runtime_stats_interval_id = (long)items[0];
            start_time = (DateTimeOffset)items[1];
            end_time = (DateTimeOffset)items[2];
            comment = (string)items[3];
        }
    }

    [SqlView("Z0", "QueryStoreSummary")]
    public partial class QueryStoreSummary : SqlViewProxy
    {
        [SqlColumn("query_id", 0), SqlTypeFacets("bigint", false)]
        public long query_id
        {
            get;
            set;
        }

        [SqlColumn("query_sql_text", 1), SqlTypeFacets("nvarchar", true)]
        public string query_sql_text
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 2), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("avg_bind_cpu_time", 3), SqlTypeFacets("float", true)]
        public double? avg_bind_cpu_time
        {
            get;
            set;
        }

        public QueryStoreSummary()
        {
        }

        public QueryStoreSummary(object[] items)
        {
            query_id = (long)items[0];
            query_sql_text = (string)items[1];
            last_execution_time = (DateTimeOffset?)items[2];
            avg_bind_cpu_time = (double?)items[3];
        }

        public QueryStoreSummary(long query_id, string query_sql_text, DateTimeOffset? last_execution_time, double? avg_bind_cpu_time)
        {
            this.query_id = query_id;
            this.query_sql_text = query_sql_text;
            this.last_execution_time = last_execution_time;
            this.avg_bind_cpu_time = avg_bind_cpu_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { query_id, query_sql_text, last_execution_time, avg_bind_cpu_time };
        }

        public override void SetItemArray(object[] items)
        {
            query_id = (long)items[0];
            query_sql_text = (string)items[1];
            last_execution_time = (DateTimeOffset?)items[2];
            avg_bind_cpu_time = (double?)items[3];
        }
    }

    [SqlView("Z0", "remote_service_bindings")]
    public partial class remote_service_bindings : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("remote_service_binding_id", 1), SqlTypeFacets("int", false)]
        public int remote_service_binding_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 3), SqlTypeFacets("nvarchar", true)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 4), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("remote_principal_id", 5), SqlTypeFacets("int", true)]
        public int? remote_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_anonymous_on", 6), SqlTypeFacets("bit", false)]
        public bool is_anonymous_on
        {
            get;
            set;
        }

        public remote_service_bindings()
        {
        }

        public remote_service_bindings(object[] items)
        {
            name = (string)items[0];
            remote_service_binding_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            service_contract_id = (int)items[4];
            remote_principal_id = (int?)items[5];
            is_anonymous_on = (bool)items[6];
        }

        public remote_service_bindings(string name, int remote_service_binding_id, int? principal_id, string remote_service_name, int service_contract_id, int? remote_principal_id, bool is_anonymous_on)
        {
            this.name = name;
            this.remote_service_binding_id = remote_service_binding_id;
            this.principal_id = principal_id;
            this.remote_service_name = remote_service_name;
            this.service_contract_id = service_contract_id;
            this.remote_principal_id = remote_principal_id;
            this.is_anonymous_on = is_anonymous_on;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, remote_service_binding_id, principal_id, remote_service_name, service_contract_id, remote_principal_id, is_anonymous_on };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            remote_service_binding_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            service_contract_id = (int)items[4];
            remote_principal_id = (int?)items[5];
            is_anonymous_on = (bool)items[6];
        }
    }

    [SqlView("Z0", "routes")]
    public partial class routes : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("route_id", 1), SqlTypeFacets("int", false)]
        public int route_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 3), SqlTypeFacets("nvarchar", true)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 4), SqlTypeFacets("nvarchar", true)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("lifetime", 5), SqlTypeFacets("datetime", true)]
        public DateTime? lifetime
        {
            get;
            set;
        }

        [SqlColumn("address", 6), SqlTypeFacets("nvarchar", true)]
        public string address
        {
            get;
            set;
        }

        [SqlColumn("mirror_address", 7), SqlTypeFacets("nvarchar", true)]
        public string mirror_address
        {
            get;
            set;
        }

        public routes()
        {
        }

        public routes(object[] items)
        {
            name = (string)items[0];
            route_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            broker_instance = (string)items[4];
            lifetime = (DateTime?)items[5];
            address = (string)items[6];
            mirror_address = (string)items[7];
        }

        public routes(string name, int route_id, int? principal_id, string remote_service_name, string broker_instance, DateTime? lifetime, string address, string mirror_address)
        {
            this.name = name;
            this.route_id = route_id;
            this.principal_id = principal_id;
            this.remote_service_name = remote_service_name;
            this.broker_instance = broker_instance;
            this.lifetime = lifetime;
            this.address = address;
            this.mirror_address = mirror_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, route_id, principal_id, remote_service_name, broker_instance, lifetime, address, mirror_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            route_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            broker_instance = (string)items[4];
            lifetime = (DateTime?)items[5];
            address = (string)items[6];
            mirror_address = (string)items[7];
        }
    }

    [SqlView("Z0", "schemas")]
    public partial class schemas : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 1), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public schemas()
        {
        }

        public schemas(object[] items)
        {
            name = (string)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
        }

        public schemas(string name, int schema_id, int? principal_id)
        {
            this.name = name;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, schema_id, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
        }
    }

    [SqlView("Z0", "securable_classes")]
    public partial class securable_classes : SqlViewProxy
    {
        [SqlColumn("class_desc", 0), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("class", 1), SqlTypeFacets("int", true)]
        public int? @class
        {
            get;
            set;
        }

        public securable_classes()
        {
        }

        public securable_classes(object[] items)
        {
            class_desc = (string)items[0];
            @class = (int?)items[1];
        }

        public securable_classes(string class_desc, int? @class)
        {
            this.class_desc = class_desc;
            this.@class = @class;
        }

        public override object[] GetItemArray()
        {
            return new object[] { class_desc, @class };
        }

        public override void SetItemArray(object[] items)
        {
            class_desc = (string)items[0];
            @class = (int?)items[1];
        }
    }

    [SqlView("Z0", "all_columns")]
    public partial class all_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", true)]
        public bool? is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", true)]
        public bool? is_column_set
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type", 25), SqlTypeFacets("tinyint", true)]
        public byte? generated_always_type
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type_desc", 26), SqlTypeFacets("nvarchar", true)]
        public string generated_always_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 27), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 28), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 29), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 30), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 31), SqlTypeFacets("nvarchar", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 32), SqlTypeFacets("bit", true)]
        public bool? is_hidden
        {
            get;
            set;
        }

        [SqlColumn("is_masked", 33), SqlTypeFacets("bit", true)]
        public bool? is_masked
        {
            get;
            set;
        }

        [SqlColumn("graph_type", 34), SqlTypeFacets("int", true)]
        public int? graph_type
        {
            get;
            set;
        }

        [SqlColumn("graph_type_desc", 35), SqlTypeFacets("nvarchar", true)]
        public string graph_type_desc
        {
            get;
            set;
        }

        public all_columns()
        {
        }

        public all_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool?)items[32];
            is_masked = (bool?)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }

        public all_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool? is_sparse, bool? is_column_set, byte? generated_always_type, string generated_always_type_desc, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name, bool? is_hidden, bool? is_masked, int? graph_type, string graph_type_desc)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.generated_always_type = generated_always_type;
            this.generated_always_type_desc = generated_always_type_desc;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
            this.is_hidden = is_hidden;
            this.is_masked = is_masked;
            this.graph_type = graph_type;
            this.graph_type_desc = graph_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set, generated_always_type, generated_always_type_desc, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name, is_hidden, is_masked, graph_type, graph_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool?)items[32];
            is_masked = (bool?)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }
    }

    [SqlView("Z0", "security_policies")]
    public partial class security_policies : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 10), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 11), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 12), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 13), SqlTypeFacets("bit", false)]
        public bool is_schema_bound
        {
            get;
            set;
        }

        public security_policies()
        {
        }

        public security_policies(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_enabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            uses_database_collation = (bool?)items[12];
            is_schema_bound = (bool)items[13];
        }

        public security_policies(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_enabled, bool is_not_for_replication, bool? uses_database_collation, bool is_schema_bound)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_enabled = is_enabled;
            this.is_not_for_replication = is_not_for_replication;
            this.uses_database_collation = uses_database_collation;
            this.is_schema_bound = is_schema_bound;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_enabled, is_not_for_replication, uses_database_collation, is_schema_bound };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_enabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            uses_database_collation = (bool?)items[12];
            is_schema_bound = (bool)items[13];
        }
    }

    [SqlView("Z0", "all_objects")]
    public partial class all_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        public all_objects()
        {
        }

        public all_objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }

        public all_objects(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }
    }

    [SqlView("Z0", "security_predicates")]
    public partial class security_predicates : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("security_predicate_id", 1), SqlTypeFacets("int", false)]
        public int security_predicate_id
        {
            get;
            set;
        }

        [SqlColumn("target_object_id", 2), SqlTypeFacets("int", false)]
        public int target_object_id
        {
            get;
            set;
        }

        [SqlColumn("predicate_definition", 3), SqlTypeFacets("nvarchar", true)]
        public string predicate_definition
        {
            get;
            set;
        }

        [SqlColumn("predicate_type", 4), SqlTypeFacets("int", true)]
        public int? predicate_type
        {
            get;
            set;
        }

        [SqlColumn("predicate_type_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string predicate_type_desc
        {
            get;
            set;
        }

        [SqlColumn("operation", 6), SqlTypeFacets("int", true)]
        public int? operation
        {
            get;
            set;
        }

        [SqlColumn("operation_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string operation_desc
        {
            get;
            set;
        }

        public security_predicates()
        {
        }

        public security_predicates(object[] items)
        {
            object_id = (int)items[0];
            security_predicate_id = (int)items[1];
            target_object_id = (int)items[2];
            predicate_definition = (string)items[3];
            predicate_type = (int?)items[4];
            predicate_type_desc = (string)items[5];
            operation = (int?)items[6];
            operation_desc = (string)items[7];
        }

        public security_predicates(int object_id, int security_predicate_id, int target_object_id, string predicate_definition, int? predicate_type, string predicate_type_desc, int? operation, string operation_desc)
        {
            this.object_id = object_id;
            this.security_predicate_id = security_predicate_id;
            this.target_object_id = target_object_id;
            this.predicate_definition = predicate_definition;
            this.predicate_type = predicate_type;
            this.predicate_type_desc = predicate_type_desc;
            this.operation = operation;
            this.operation_desc = operation_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, security_predicate_id, target_object_id, predicate_definition, predicate_type, predicate_type_desc, operation, operation_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            security_predicate_id = (int)items[1];
            target_object_id = (int)items[2];
            predicate_definition = (string)items[3];
            predicate_type = (int?)items[4];
            predicate_type_desc = (string)items[5];
            operation = (int?)items[6];
            operation_desc = (string)items[7];
        }
    }

    [SqlView("Z0", "all_parameters")]
    public partial class all_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 16), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 17), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 18), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 19), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 20), SqlTypeFacets("nvarchar", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        public all_parameters()
        {
        }

        public all_parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }

        public all_parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }
    }

    [SqlView("Z0", "selective_xml_index_namespaces")]
    public partial class selective_xml_index_namespaces : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_uri", 2), SqlTypeFacets("bit", true)]
        public bool? is_default_uri
        {
            get;
            set;
        }

        [SqlColumn("uri", 3), SqlTypeFacets("nvarchar", true)]
        public string uri
        {
            get;
            set;
        }

        [SqlColumn("prefix", 4), SqlTypeFacets("sysname", true)]
        public string prefix
        {
            get;
            set;
        }

        public selective_xml_index_namespaces()
        {
        }

        public selective_xml_index_namespaces(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            is_default_uri = (bool?)items[2];
            uri = (string)items[3];
            prefix = (string)items[4];
        }

        public selective_xml_index_namespaces(int object_id, int index_id, bool? is_default_uri, string uri, string prefix)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.is_default_uri = is_default_uri;
            this.uri = uri;
            this.prefix = prefix;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, is_default_uri, uri, prefix };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            is_default_uri = (bool?)items[2];
            uri = (string)items[3];
            prefix = (string)items[4];
        }
    }

    [SqlView("Z0", "all_sql_modules")]
    public partial class all_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", true)]
        public bool? is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", true)]
        public bool? is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", true)]
        public bool? uses_native_compilation
        {
            get;
            set;
        }

        public all_sql_modules()
        {
        }

        public all_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }

        public all_sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, bool? is_schema_bound, bool? uses_database_collation, bool? is_recompiled, bool? null_on_null_input, int? execute_as_principal_id, bool? uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }
    }

    [SqlView("Z0", "selective_xml_index_paths")]
    public partial class selective_xml_index_paths : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("path_id", 2), SqlTypeFacets("int", true)]
        public int? path_id
        {
            get;
            set;
        }

        [SqlColumn("path", 3), SqlTypeFacets("nvarchar", true)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("path_type", 5), SqlTypeFacets("tinyint", true)]
        public byte? path_type
        {
            get;
            set;
        }

        [SqlColumn("path_type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string path_type_desc
        {
            get;
            set;
        }

        [SqlColumn("xml_component_id", 7), SqlTypeFacets("int", true)]
        public int? xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xquery_type_description", 8), SqlTypeFacets("nvarchar", true)]
        public string xquery_type_description
        {
            get;
            set;
        }

        [SqlColumn("is_xquery_type_inferred", 9), SqlTypeFacets("bit", true)]
        public bool? is_xquery_type_inferred
        {
            get;
            set;
        }

        [SqlColumn("xquery_max_length", 10), SqlTypeFacets("int", true)]
        public int? xquery_max_length
        {
            get;
            set;
        }

        [SqlColumn("is_xquery_max_length_inferred", 11), SqlTypeFacets("bit", true)]
        public bool? is_xquery_max_length_inferred
        {
            get;
            set;
        }

        [SqlColumn("is_node", 12), SqlTypeFacets("bit", true)]
        public bool? is_node
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 13), SqlTypeFacets("tinyint", true)]
        public byte? system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 14), SqlTypeFacets("tinyint", true)]
        public byte? user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 15), SqlTypeFacets("smallint", true)]
        public short? max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 16), SqlTypeFacets("tinyint", true)]
        public byte? precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 17), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 18), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_singleton", 19), SqlTypeFacets("bit", true)]
        public bool? is_singleton
        {
            get;
            set;
        }

        public selective_xml_index_paths()
        {
        }

        public selective_xml_index_paths(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            path_id = (int?)items[2];
            path = (string)items[3];
            name = (string)items[4];
            path_type = (byte?)items[5];
            path_type_desc = (string)items[6];
            xml_component_id = (int?)items[7];
            xquery_type_description = (string)items[8];
            is_xquery_type_inferred = (bool?)items[9];
            xquery_max_length = (int?)items[10];
            is_xquery_max_length_inferred = (bool?)items[11];
            is_node = (bool?)items[12];
            system_type_id = (byte?)items[13];
            user_type_id = (byte?)items[14];
            max_length = (short?)items[15];
            precision = (byte?)items[16];
            scale = (byte?)items[17];
            collation_name = (string)items[18];
            is_singleton = (bool?)items[19];
        }

        public selective_xml_index_paths(int object_id, int index_id, int? path_id, string path, string name, byte? path_type, string path_type_desc, int? xml_component_id, string xquery_type_description, bool? is_xquery_type_inferred, int? xquery_max_length, bool? is_xquery_max_length_inferred, bool? is_node, byte? system_type_id, byte? user_type_id, short? max_length, byte? precision, byte? scale, string collation_name, bool? is_singleton)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.path_id = path_id;
            this.path = path;
            this.name = name;
            this.path_type = path_type;
            this.path_type_desc = path_type_desc;
            this.xml_component_id = xml_component_id;
            this.xquery_type_description = xquery_type_description;
            this.is_xquery_type_inferred = is_xquery_type_inferred;
            this.xquery_max_length = xquery_max_length;
            this.is_xquery_max_length_inferred = is_xquery_max_length_inferred;
            this.is_node = is_node;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_singleton = is_singleton;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, path_id, path, name, path_type, path_type_desc, xml_component_id, xquery_type_description, is_xquery_type_inferred, xquery_max_length, is_xquery_max_length_inferred, is_node, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_singleton };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            path_id = (int?)items[2];
            path = (string)items[3];
            name = (string)items[4];
            path_type = (byte?)items[5];
            path_type_desc = (string)items[6];
            xml_component_id = (int?)items[7];
            xquery_type_description = (string)items[8];
            is_xquery_type_inferred = (bool?)items[9];
            xquery_max_length = (int?)items[10];
            is_xquery_max_length_inferred = (bool?)items[11];
            is_node = (bool?)items[12];
            system_type_id = (byte?)items[13];
            user_type_id = (byte?)items[14];
            max_length = (short?)items[15];
            precision = (byte?)items[16];
            scale = (byte?)items[17];
            collation_name = (string)items[18];
            is_singleton = (bool?)items[19];
        }
    }

    [SqlView("Z0", "all_views")]
    public partial class all_views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", true)]
        public bool? has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", true)]
        public bool? has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", true)]
        public bool? with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", true)]
        public bool? is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        public all_views()
        {
        }

        public all_views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool?)items[14];
            has_unchecked_assembly_data = (bool?)items[15];
            with_check_option = (bool?)items[16];
            is_date_correlation_view = (bool?)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }

        public all_views(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published, bool? is_replicated, bool? has_replication_filter, bool? has_opaque_metadata, bool? has_unchecked_assembly_data, bool? with_check_option, bool? is_date_correlation_view, bool? is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool?)items[14];
            has_unchecked_assembly_data = (bool?)items[15];
            with_check_option = (bool?)items[16];
            is_date_correlation_view = (bool?)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }
    }

    [SqlView("Z0", "sequences")]
    public partial class sequences : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("start_value", 12), SqlTypeFacets("sql_variant", false)]
        public Object start_value
        {
            get;
            set;
        }

        [SqlColumn("increment", 13), SqlTypeFacets("sql_variant", false)]
        public Object increment
        {
            get;
            set;
        }

        [SqlColumn("minimum_value", 14), SqlTypeFacets("sql_variant", false)]
        public Object minimum_value
        {
            get;
            set;
        }

        [SqlColumn("maximum_value", 15), SqlTypeFacets("sql_variant", false)]
        public Object maximum_value
        {
            get;
            set;
        }

        [SqlColumn("is_cycling", 16), SqlTypeFacets("bit", true)]
        public bool? is_cycling
        {
            get;
            set;
        }

        [SqlColumn("is_cached", 17), SqlTypeFacets("bit", true)]
        public bool? is_cached
        {
            get;
            set;
        }

        [SqlColumn("cache_size", 18), SqlTypeFacets("int", true)]
        public int? cache_size
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 19), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 20), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("precision", 21), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 22), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("current_value", 23), SqlTypeFacets("sql_variant", false)]
        public Object current_value
        {
            get;
            set;
        }

        [SqlColumn("is_exhausted", 24), SqlTypeFacets("bit", false)]
        public bool is_exhausted
        {
            get;
            set;
        }

        [SqlColumn("last_used_value", 25), SqlTypeFacets("sql_variant", true)]
        public Object last_used_value
        {
            get;
            set;
        }

        public sequences()
        {
        }

        public sequences(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            start_value = (Object)items[12];
            increment = (Object)items[13];
            minimum_value = (Object)items[14];
            maximum_value = (Object)items[15];
            is_cycling = (bool?)items[16];
            is_cached = (bool?)items[17];
            cache_size = (int?)items[18];
            system_type_id = (byte)items[19];
            user_type_id = (int)items[20];
            precision = (byte)items[21];
            scale = (byte?)items[22];
            current_value = (Object)items[23];
            is_exhausted = (bool)items[24];
            last_used_value = (Object)items[25];
        }

        public sequences(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, Object start_value, Object increment, Object minimum_value, Object maximum_value, bool? is_cycling, bool? is_cached, int? cache_size, byte system_type_id, int user_type_id, byte precision, byte? scale, Object current_value, bool is_exhausted, Object last_used_value)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.start_value = start_value;
            this.increment = increment;
            this.minimum_value = minimum_value;
            this.maximum_value = maximum_value;
            this.is_cycling = is_cycling;
            this.is_cached = is_cached;
            this.cache_size = cache_size;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.precision = precision;
            this.scale = scale;
            this.current_value = current_value;
            this.is_exhausted = is_exhausted;
            this.last_used_value = last_used_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, start_value, increment, minimum_value, maximum_value, is_cycling, is_cached, cache_size, system_type_id, user_type_id, precision, scale, current_value, is_exhausted, last_used_value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            start_value = (Object)items[12];
            increment = (Object)items[13];
            minimum_value = (Object)items[14];
            maximum_value = (Object)items[15];
            is_cycling = (bool?)items[16];
            is_cached = (bool?)items[17];
            cache_size = (int?)items[18];
            system_type_id = (byte)items[19];
            user_type_id = (int)items[20];
            precision = (byte)items[21];
            scale = (byte?)items[22];
            current_value = (Object)items[23];
            is_exhausted = (bool)items[24];
            last_used_value = (Object)items[25];
        }
    }

    [SqlView("Z0", "allocation_units")]
    public partial class allocation_units : SqlViewProxy
    {
        [SqlColumn("allocation_unit_id", 0), SqlTypeFacets("bigint", false)]
        public long allocation_unit_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("container_id", 3), SqlTypeFacets("bigint", false)]
        public long container_id
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 4), SqlTypeFacets("int", true)]
        public int? data_space_id
        {
            get;
            set;
        }

        [SqlColumn("total_pages", 5), SqlTypeFacets("bigint", false)]
        public long total_pages
        {
            get;
            set;
        }

        [SqlColumn("used_pages", 6), SqlTypeFacets("bigint", false)]
        public long used_pages
        {
            get;
            set;
        }

        [SqlColumn("data_pages", 7), SqlTypeFacets("bigint", false)]
        public long data_pages
        {
            get;
            set;
        }

        public allocation_units()
        {
        }

        public allocation_units(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            data_space_id = (int?)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
        }

        public allocation_units(long allocation_unit_id, byte type, string type_desc, long container_id, int? data_space_id, long total_pages, long used_pages, long data_pages)
        {
            this.allocation_unit_id = allocation_unit_id;
            this.type = type;
            this.type_desc = type_desc;
            this.container_id = container_id;
            this.data_space_id = data_space_id;
            this.total_pages = total_pages;
            this.used_pages = used_pages;
            this.data_pages = data_pages;
        }

        public override object[] GetItemArray()
        {
            return new object[] { allocation_unit_id, type, type_desc, container_id, data_space_id, total_pages, used_pages, data_pages };
        }

        public override void SetItemArray(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            data_space_id = (int?)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
        }
    }

    [SqlView("Z0", "server_assembly_modules")]
    public partial class server_assembly_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 2), SqlTypeFacets("nvarchar", true)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("assembly_method", 3), SqlTypeFacets("nvarchar", true)]
        public string assembly_method
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 4), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public server_assembly_modules()
        {
        }

        public server_assembly_modules(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            execute_as_principal_id = (int?)items[4];
        }

        public server_assembly_modules(int object_id, int assembly_id, string assembly_class, string assembly_method, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.assembly_method = assembly_method;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id, assembly_class, assembly_method, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            execute_as_principal_id = (int?)items[4];
        }
    }

    [SqlView("Z0", "assemblies")]
    public partial class assemblies : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 2), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("clr_name", 3), SqlTypeFacets("nvarchar", true)]
        public string clr_name
        {
            get;
            set;
        }

        [SqlColumn("permission_set", 4), SqlTypeFacets("tinyint", true)]
        public byte? permission_set
        {
            get;
            set;
        }

        [SqlColumn("permission_set_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string permission_set_desc
        {
            get;
            set;
        }

        [SqlColumn("is_visible", 6), SqlTypeFacets("bit", false)]
        public bool is_visible
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 9), SqlTypeFacets("bit", true)]
        public bool? is_user_defined
        {
            get;
            set;
        }

        public assemblies()
        {
        }

        public assemblies(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            assembly_id = (int)items[2];
            clr_name = (string)items[3];
            permission_set = (byte?)items[4];
            permission_set_desc = (string)items[5];
            is_visible = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_user_defined = (bool?)items[9];
        }

        public assemblies(string name, int? principal_id, int assembly_id, string clr_name, byte? permission_set, string permission_set_desc, bool is_visible, DateTime create_date, DateTime modify_date, bool? is_user_defined)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.assembly_id = assembly_id;
            this.clr_name = clr_name;
            this.permission_set = permission_set;
            this.permission_set_desc = permission_set_desc;
            this.is_visible = is_visible;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_user_defined = is_user_defined;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, assembly_id, clr_name, permission_set, permission_set_desc, is_visible, create_date, modify_date, is_user_defined };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            assembly_id = (int)items[2];
            clr_name = (string)items[3];
            permission_set = (byte?)items[4];
            permission_set_desc = (string)items[5];
            is_visible = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_user_defined = (bool?)items[9];
        }
    }

    [SqlView("Z0", "AvailableCollation")]
    public partial class AvailableCollation : SqlViewProxy
    {
        [SqlColumn("CollationName", 0), SqlTypeFacets("sysname", false)]
        public string CollationName
        {
            get;
            set;
        }

        [SqlColumn("CollationDescription", 1), SqlTypeFacets("nvarchar", false)]
        public string CollationDescription
        {
            get;
            set;
        }

        [SqlColumn("IsSqlCollation", 2), SqlTypeFacets("bit", true)]
        public bool? IsSqlCollation
        {
            get;
            set;
        }

        public AvailableCollation()
        {
        }

        public AvailableCollation(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool?)items[2];
        }

        public AvailableCollation(string CollationName, string CollationDescription, bool? IsSqlCollation)
        {
            this.CollationName = CollationName;
            this.CollationDescription = CollationDescription;
            this.IsSqlCollation = IsSqlCollation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { CollationName, CollationDescription, IsSqlCollation };
        }

        public override void SetItemArray(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool?)items[2];
        }
    }

    [SqlView("Z0", "server_audit_specification_details")]
    public partial class server_audit_specification_details : SqlViewProxy
    {
        [SqlColumn("server_specification_id", 0), SqlTypeFacets("int", false)]
        public int server_specification_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_id", 1), SqlTypeFacets("char", false)]
        public string audit_action_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_name", 2), SqlTypeFacets("nvarchar", true)]
        public string audit_action_name
        {
            get;
            set;
        }

        [SqlColumn("class", 3), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 5), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 6), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("audited_principal_id", 7), SqlTypeFacets("int", false)]
        public int audited_principal_id
        {
            get;
            set;
        }

        [SqlColumn("audited_result", 8), SqlTypeFacets("nvarchar", true)]
        public string audited_result
        {
            get;
            set;
        }

        [SqlColumn("is_group", 9), SqlTypeFacets("bit", true)]
        public bool? is_group
        {
            get;
            set;
        }

        public server_audit_specification_details()
        {
        }

        public server_audit_specification_details(object[] items)
        {
            server_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }

        public server_audit_specification_details(int server_specification_id, string audit_action_id, string audit_action_name, byte @class, string class_desc, int major_id, int minor_id, int audited_principal_id, string audited_result, bool? is_group)
        {
            this.server_specification_id = server_specification_id;
            this.audit_action_id = audit_action_id;
            this.audit_action_name = audit_action_name;
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.audited_principal_id = audited_principal_id;
            this.audited_result = audited_result;
            this.is_group = is_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_specification_id, audit_action_id, audit_action_name, @class, class_desc, major_id, minor_id, audited_principal_id, audited_result, is_group };
        }

        public override void SetItemArray(object[] items)
        {
            server_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }
    }

    [SqlView("Z0", "assembly_files")]
    public partial class assembly_files : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("file_id", 2), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("content", 3), SqlTypeFacets("varbinary", true)]
        public Byte[] content
        {
            get;
            set;
        }

        public assembly_files()
        {
        }

        public assembly_files(object[] items)
        {
            assembly_id = (int)items[0];
            name = (string)items[1];
            file_id = (int)items[2];
            content = (Byte[])items[3];
        }

        public assembly_files(int assembly_id, string name, int file_id, Byte[] content)
        {
            this.assembly_id = assembly_id;
            this.name = name;
            this.file_id = file_id;
            this.content = content;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, name, file_id, content };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int)items[0];
            name = (string)items[1];
            file_id = (int)items[2];
            content = (Byte[])items[3];
        }
    }

    [SqlView("Z0", "server_audit_specifications")]
    public partial class server_audit_specifications : SqlViewProxy
    {
        [SqlColumn("server_specification_id", 0), SqlTypeFacets("int", false)]
        public int server_specification_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        public server_audit_specifications()
        {
        }

        public server_audit_specifications(object[] items)
        {
            server_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }

        public server_audit_specifications(int server_specification_id, string name, DateTime create_date, DateTime modify_date, Guid? audit_guid, bool? is_state_enabled)
        {
            this.server_specification_id = server_specification_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.audit_guid = audit_guid;
            this.is_state_enabled = is_state_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_specification_id, name, create_date, modify_date, audit_guid, is_state_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            server_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }
    }

    [SqlView("Z0", "assembly_modules")]
    public partial class assembly_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 2), SqlTypeFacets("nvarchar", true)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("assembly_method", 3), SqlTypeFacets("nvarchar", true)]
        public string assembly_method
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 4), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 5), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public assembly_modules()
        {
        }

        public assembly_modules(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            null_on_null_input = (bool?)items[4];
            execute_as_principal_id = (int?)items[5];
        }

        public assembly_modules(int object_id, int assembly_id, string assembly_class, string assembly_method, bool? null_on_null_input, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.assembly_method = assembly_method;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id, assembly_class, assembly_method, null_on_null_input, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            null_on_null_input = (bool?)items[4];
            execute_as_principal_id = (int?)items[5];
        }
    }

    [SqlView("Z0", "SqlCollation")]
    public partial class SqlCollation : SqlViewProxy
    {
        [SqlColumn("CollationName", 0), SqlTypeFacets("sysname", false)]
        public string CollationName
        {
            get;
            set;
        }

        [SqlColumn("CollationDescription", 1), SqlTypeFacets("nvarchar", false)]
        public string CollationDescription
        {
            get;
            set;
        }

        [SqlColumn("IsSqlCollation", 2), SqlTypeFacets("bit", true)]
        public bool? IsSqlCollation
        {
            get;
            set;
        }

        public SqlCollation()
        {
        }

        public SqlCollation(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool?)items[2];
        }

        public SqlCollation(string CollationName, string CollationDescription, bool? IsSqlCollation)
        {
            this.CollationName = CollationName;
            this.CollationDescription = CollationDescription;
            this.IsSqlCollation = IsSqlCollation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { CollationName, CollationDescription, IsSqlCollation };
        }

        public override void SetItemArray(object[] items)
        {
            CollationName = (string)items[0];
            CollationDescription = (string)items[1];
            IsSqlCollation = (bool?)items[2];
        }
    }

    [SqlView("Z0", "server_audits")]
    public partial class server_audits : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 5), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("on_failure", 8), SqlTypeFacets("tinyint", true)]
        public byte? on_failure
        {
            get;
            set;
        }

        [SqlColumn("on_failure_desc", 9), SqlTypeFacets("nvarchar", true)]
        public string on_failure_desc
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 10), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        [SqlColumn("queue_delay", 11), SqlTypeFacets("int", true)]
        public int? queue_delay
        {
            get;
            set;
        }

        [SqlColumn("predicate", 12), SqlTypeFacets("nvarchar", true)]
        public string predicate
        {
            get;
            set;
        }

        public server_audits()
        {
        }

        public server_audits(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
        }

        public server_audits(int audit_id, string name, Guid? audit_guid, DateTime create_date, DateTime modify_date, int? principal_id, string type, string type_desc, byte? on_failure, string on_failure_desc, bool? is_state_enabled, int? queue_delay, string predicate)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.audit_guid = audit_guid;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.on_failure = on_failure;
            this.on_failure_desc = on_failure_desc;
            this.is_state_enabled = is_state_enabled;
            this.queue_delay = queue_delay;
            this.predicate = predicate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, audit_guid, create_date, modify_date, principal_id, type, type_desc, on_failure, on_failure_desc, is_state_enabled, queue_delay, predicate };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
        }
    }

    [SqlView("Z0", "assembly_references")]
    public partial class assembly_references : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_assembly_id", 1), SqlTypeFacets("int", false)]
        public int referenced_assembly_id
        {
            get;
            set;
        }

        public assembly_references()
        {
        }

        public assembly_references(object[] items)
        {
            assembly_id = (int)items[0];
            referenced_assembly_id = (int)items[1];
        }

        public assembly_references(int assembly_id, int referenced_assembly_id)
        {
            this.assembly_id = assembly_id;
            this.referenced_assembly_id = referenced_assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, referenced_assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int)items[0];
            referenced_assembly_id = (int)items[1];
        }
    }

    [SqlView("Z0", "TriggerEventTypeDescription")]
    public partial class TriggerEventTypeDescription : SqlViewProxy
    {
        [SqlColumn("TypeNumber", 0), SqlTypeFacets("int", true)]
        public int? TypeNumber
        {
            get;
            set;
        }

        [SqlColumn("TypeName", 1), SqlTypeFacets("nvarchar", true)]
        public string TypeName
        {
            get;
            set;
        }

        [SqlColumn("GroupNumber", 2), SqlTypeFacets("int", true)]
        public int? GroupNumber
        {
            get;
            set;
        }

        [SqlColumn("Level", 3), SqlTypeFacets("int", true)]
        public int? Level
        {
            get;
            set;
        }

        [SqlColumn("IndentedTypeName", 4), SqlTypeFacets("nvarchar", true)]
        public string IndentedTypeName
        {
            get;
            set;
        }

        public TriggerEventTypeDescription()
        {
        }

        public TriggerEventTypeDescription(object[] items)
        {
            TypeNumber = (int?)items[0];
            TypeName = (string)items[1];
            GroupNumber = (int?)items[2];
            Level = (int?)items[3];
            IndentedTypeName = (string)items[4];
        }

        public TriggerEventTypeDescription(int? TypeNumber, string TypeName, int? GroupNumber, int? Level, string IndentedTypeName)
        {
            this.TypeNumber = TypeNumber;
            this.TypeName = TypeName;
            this.GroupNumber = GroupNumber;
            this.Level = Level;
            this.IndentedTypeName = IndentedTypeName;
        }

        public override object[] GetItemArray()
        {
            return new object[] { TypeNumber, TypeName, GroupNumber, Level, IndentedTypeName };
        }

        public override void SetItemArray(object[] items)
        {
            TypeNumber = (int?)items[0];
            TypeName = (string)items[1];
            GroupNumber = (int?)items[2];
            Level = (int?)items[3];
            IndentedTypeName = (string)items[4];
        }
    }

    [SqlView("Z0", "server_event_notifications")]
    public partial class server_event_notifications : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("service_name", 7), SqlTypeFacets("nvarchar", true)]
        public string service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 8), SqlTypeFacets("nvarchar", true)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("creator_sid", 9), SqlTypeFacets("varbinary", true)]
        public Byte[] creator_sid
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 10), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public server_event_notifications()
        {
        }

        public server_event_notifications(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }

        public server_event_notifications(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, DateTime create_date, DateTime modify_date, string service_name, string broker_instance, Byte[] creator_sid, int? principal_id)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.service_name = service_name;
            this.broker_instance = broker_instance;
            this.creator_sid = creator_sid;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, create_date, modify_date, service_name, broker_instance, creator_sid, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }
    }

    [SqlView("Z0", "assembly_types")]
    public partial class assembly_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 14), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 15), SqlTypeFacets("sysname", true)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("is_binary_ordered", 16), SqlTypeFacets("bit", true)]
        public bool? is_binary_ordered
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_length", 17), SqlTypeFacets("bit", true)]
        public bool? is_fixed_length
        {
            get;
            set;
        }

        [SqlColumn("prog_id", 18), SqlTypeFacets("nvarchar", true)]
        public string prog_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_qualified_name", 19), SqlTypeFacets("nvarchar", true)]
        public string assembly_qualified_name
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 20), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        public assembly_types()
        {
        }

        public assembly_types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            assembly_id = (int)items[14];
            assembly_class = (string)items[15];
            is_binary_ordered = (bool?)items[16];
            is_fixed_length = (bool?)items[17];
            prog_id = (string)items[18];
            assembly_qualified_name = (string)items[19];
            is_table_type = (bool)items[20];
        }

        public assembly_types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, int assembly_id, string assembly_class, bool? is_binary_ordered, bool? is_fixed_length, string prog_id, string assembly_qualified_name, bool is_table_type)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.is_binary_ordered = is_binary_ordered;
            this.is_fixed_length = is_fixed_length;
            this.prog_id = prog_id;
            this.assembly_qualified_name = assembly_qualified_name;
            this.is_table_type = is_table_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, assembly_id, assembly_class, is_binary_ordered, is_fixed_length, prog_id, assembly_qualified_name, is_table_type };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            assembly_id = (int)items[14];
            assembly_class = (string)items[15];
            is_binary_ordered = (bool?)items[16];
            is_fixed_length = (bool?)items[17];
            prog_id = (string)items[18];
            assembly_qualified_name = (string)items[19];
            is_table_type = (bool)items[20];
        }
    }

    [SqlView("Z0", "server_event_session_actions")]
    public partial class server_event_session_actions : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("event_id", 1), SqlTypeFacets("int", false)]
        public int event_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true)]
        public string module
        {
            get;
            set;
        }

        public server_event_session_actions()
        {
        }

        public server_event_session_actions(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }

        public server_event_session_actions(int event_session_id, int event_id, string name, string package, string module)
        {
            this.event_session_id = event_session_id;
            this.event_id = event_id;
            this.name = name;
            this.package = package;
            this.module = module;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, event_id, name, package, module };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }
    }

    [SqlView("Z0", "asymmetric_keys")]
    public partial class asymmetric_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_id", 2), SqlTypeFacets("int", false)]
        public int asymmetric_key_id
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type", 3), SqlTypeFacets("char", false)]
        public string pvt_key_encryption_type
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string pvt_key_encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 5), SqlTypeFacets("varbinary", false)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("algorithm", 6), SqlTypeFacets("char", false)]
        public string algorithm
        {
            get;
            set;
        }

        [SqlColumn("algorithm_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("key_length", 8), SqlTypeFacets("int", false)]
        public int key_length
        {
            get;
            set;
        }

        [SqlColumn("sid", 9), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("string_sid", 10), SqlTypeFacets("nvarchar", true)]
        public string string_sid
        {
            get;
            set;
        }

        [SqlColumn("public_key", 11), SqlTypeFacets("varbinary", false)]
        public Byte[] public_key
        {
            get;
            set;
        }

        [SqlColumn("attested_by", 12), SqlTypeFacets("nvarchar", true)]
        public string attested_by
        {
            get;
            set;
        }

        [SqlColumn("provider_type", 13), SqlTypeFacets("nvarchar", true)]
        public string provider_type
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_guid", 14), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? cryptographic_provider_guid
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_algid", 15), SqlTypeFacets("sql_variant", true)]
        public Object cryptographic_provider_algid
        {
            get;
            set;
        }

        public asymmetric_keys()
        {
        }

        public asymmetric_keys(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            asymmetric_key_id = (int)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            thumbprint = (Byte[])items[5];
            algorithm = (string)items[6];
            algorithm_desc = (string)items[7];
            key_length = (int)items[8];
            sid = (Byte[])items[9];
            string_sid = (string)items[10];
            public_key = (Byte[])items[11];
            attested_by = (string)items[12];
            provider_type = (string)items[13];
            cryptographic_provider_guid = (Guid?)items[14];
            cryptographic_provider_algid = (Object)items[15];
        }

        public asymmetric_keys(string name, int? principal_id, int asymmetric_key_id, string pvt_key_encryption_type, string pvt_key_encryption_type_desc, Byte[] thumbprint, string algorithm, string algorithm_desc, int key_length, Byte[] sid, string string_sid, Byte[] public_key, string attested_by, string provider_type, Guid? cryptographic_provider_guid, Object cryptographic_provider_algid)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.asymmetric_key_id = asymmetric_key_id;
            this.pvt_key_encryption_type = pvt_key_encryption_type;
            this.pvt_key_encryption_type_desc = pvt_key_encryption_type_desc;
            this.thumbprint = thumbprint;
            this.algorithm = algorithm;
            this.algorithm_desc = algorithm_desc;
            this.key_length = key_length;
            this.sid = sid;
            this.string_sid = string_sid;
            this.public_key = public_key;
            this.attested_by = attested_by;
            this.provider_type = provider_type;
            this.cryptographic_provider_guid = cryptographic_provider_guid;
            this.cryptographic_provider_algid = cryptographic_provider_algid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, asymmetric_key_id, pvt_key_encryption_type, pvt_key_encryption_type_desc, thumbprint, algorithm, algorithm_desc, key_length, sid, string_sid, public_key, attested_by, provider_type, cryptographic_provider_guid, cryptographic_provider_algid };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            asymmetric_key_id = (int)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            thumbprint = (Byte[])items[5];
            algorithm = (string)items[6];
            algorithm_desc = (string)items[7];
            key_length = (int)items[8];
            sid = (Byte[])items[9];
            string_sid = (string)items[10];
            public_key = (Byte[])items[11];
            attested_by = (string)items[12];
            provider_type = (string)items[13];
            cryptographic_provider_guid = (Guid?)items[14];
            cryptographic_provider_algid = (Object)items[15];
        }
    }

    [SqlView("Z0", "server_event_session_events")]
    public partial class server_event_session_events : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("event_id", 1), SqlTypeFacets("int", false)]
        public int event_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true)]
        public string module
        {
            get;
            set;
        }

        [SqlColumn("predicate", 5), SqlTypeFacets("nvarchar", true)]
        public string predicate
        {
            get;
            set;
        }

        [SqlColumn("predicate_xml", 6), SqlTypeFacets("nvarchar", true)]
        public string predicate_xml
        {
            get;
            set;
        }

        public server_event_session_events()
        {
        }

        public server_event_session_events(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
            predicate = (string)items[5];
            predicate_xml = (string)items[6];
        }

        public server_event_session_events(int event_session_id, int event_id, string name, string package, string module, string predicate, string predicate_xml)
        {
            this.event_session_id = event_session_id;
            this.event_id = event_id;
            this.name = name;
            this.package = package;
            this.module = module;
            this.predicate = predicate;
            this.predicate_xml = predicate_xml;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, event_id, name, package, module, predicate, predicate_xml };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
            predicate = (string)items[5];
            predicate_xml = (string)items[6];
        }
    }

    [SqlView("Z0", "backup_devices")]
    public partial class backup_devices : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("tinyint", true)]
        public byte? type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("physical_name", 3), SqlTypeFacets("nvarchar", true)]
        public string physical_name
        {
            get;
            set;
        }

        public backup_devices()
        {
        }

        public backup_devices(object[] items)
        {
            name = (string)items[0];
            type = (byte?)items[1];
            type_desc = (string)items[2];
            physical_name = (string)items[3];
        }

        public backup_devices(string name, byte? type, string type_desc, string physical_name)
        {
            this.name = name;
            this.type = type;
            this.type_desc = type_desc;
            this.physical_name = physical_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, type, type_desc, physical_name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            type = (byte?)items[1];
            type_desc = (string)items[2];
            physical_name = (string)items[3];
        }
    }

    [SqlView("Z0", "server_event_session_fields")]
    public partial class server_event_session_fields : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public server_event_session_fields()
        {
        }

        public server_event_session_fields(object[] items)
        {
            event_session_id = (int)items[0];
            object_id = (int)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }

        public server_event_session_fields(int event_session_id, int object_id, string name, Object value)
        {
            this.event_session_id = event_session_id;
            this.object_id = object_id;
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, object_id, name, value };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            object_id = (int)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }
    }

    [SqlView("Z0", "certificates")]
    public partial class certificates : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 1), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type", 3), SqlTypeFacets("char", false)]
        public string pvt_key_encryption_type
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string pvt_key_encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_active_for_begin_dialog", 5), SqlTypeFacets("bit", true)]
        public bool? is_active_for_begin_dialog
        {
            get;
            set;
        }

        [SqlColumn("issuer_name", 6), SqlTypeFacets("nvarchar", true)]
        public string issuer_name
        {
            get;
            set;
        }

        [SqlColumn("cert_serial_number", 7), SqlTypeFacets("nvarchar", true)]
        public string cert_serial_number
        {
            get;
            set;
        }

        [SqlColumn("sid", 8), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("string_sid", 9), SqlTypeFacets("nvarchar", true)]
        public string string_sid
        {
            get;
            set;
        }

        [SqlColumn("subject", 10), SqlTypeFacets("nvarchar", true)]
        public string subject
        {
            get;
            set;
        }

        [SqlColumn("expiry_date", 11), SqlTypeFacets("datetime", true)]
        public DateTime? expiry_date
        {
            get;
            set;
        }

        [SqlColumn("start_date", 12), SqlTypeFacets("datetime", true)]
        public DateTime? start_date
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 13), SqlTypeFacets("varbinary", false)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("attested_by", 14), SqlTypeFacets("nvarchar", true)]
        public string attested_by
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_last_backup_date", 15), SqlTypeFacets("datetime", true)]
        public DateTime? pvt_key_last_backup_date
        {
            get;
            set;
        }

        [SqlColumn("key_length", 16), SqlTypeFacets("int", true)]
        public int? key_length
        {
            get;
            set;
        }

        public certificates()
        {
        }

        public certificates(object[] items)
        {
            name = (string)items[0];
            certificate_id = (int)items[1];
            principal_id = (int?)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            is_active_for_begin_dialog = (bool?)items[5];
            issuer_name = (string)items[6];
            cert_serial_number = (string)items[7];
            sid = (Byte[])items[8];
            string_sid = (string)items[9];
            subject = (string)items[10];
            expiry_date = (DateTime?)items[11];
            start_date = (DateTime?)items[12];
            thumbprint = (Byte[])items[13];
            attested_by = (string)items[14];
            pvt_key_last_backup_date = (DateTime?)items[15];
            key_length = (int?)items[16];
        }

        public certificates(string name, int certificate_id, int? principal_id, string pvt_key_encryption_type, string pvt_key_encryption_type_desc, bool? is_active_for_begin_dialog, string issuer_name, string cert_serial_number, Byte[] sid, string string_sid, string subject, DateTime? expiry_date, DateTime? start_date, Byte[] thumbprint, string attested_by, DateTime? pvt_key_last_backup_date, int? key_length)
        {
            this.name = name;
            this.certificate_id = certificate_id;
            this.principal_id = principal_id;
            this.pvt_key_encryption_type = pvt_key_encryption_type;
            this.pvt_key_encryption_type_desc = pvt_key_encryption_type_desc;
            this.is_active_for_begin_dialog = is_active_for_begin_dialog;
            this.issuer_name = issuer_name;
            this.cert_serial_number = cert_serial_number;
            this.sid = sid;
            this.string_sid = string_sid;
            this.subject = subject;
            this.expiry_date = expiry_date;
            this.start_date = start_date;
            this.thumbprint = thumbprint;
            this.attested_by = attested_by;
            this.pvt_key_last_backup_date = pvt_key_last_backup_date;
            this.key_length = key_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, certificate_id, principal_id, pvt_key_encryption_type, pvt_key_encryption_type_desc, is_active_for_begin_dialog, issuer_name, cert_serial_number, sid, string_sid, subject, expiry_date, start_date, thumbprint, attested_by, pvt_key_last_backup_date, key_length };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            certificate_id = (int)items[1];
            principal_id = (int?)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            is_active_for_begin_dialog = (bool?)items[5];
            issuer_name = (string)items[6];
            cert_serial_number = (string)items[7];
            sid = (Byte[])items[8];
            string_sid = (string)items[9];
            subject = (string)items[10];
            expiry_date = (DateTime?)items[11];
            start_date = (DateTime?)items[12];
            thumbprint = (Byte[])items[13];
            attested_by = (string)items[14];
            pvt_key_last_backup_date = (DateTime?)items[15];
            key_length = (int?)items[16];
        }
    }

    [SqlView("Z0", "server_event_session_targets")]
    public partial class server_event_session_targets : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("target_id", 1), SqlTypeFacets("int", false)]
        public int target_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true)]
        public string module
        {
            get;
            set;
        }

        public server_event_session_targets()
        {
        }

        public server_event_session_targets(object[] items)
        {
            event_session_id = (int)items[0];
            target_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }

        public server_event_session_targets(int event_session_id, int target_id, string name, string package, string module)
        {
            this.event_session_id = event_session_id;
            this.target_id = target_id;
            this.name = name;
            this.package = package;
            this.module = module;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, target_id, name, package, module };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            target_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }
    }

    [SqlView("Z0", "change_tracking_databases")]
    public partial class change_tracking_databases : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("is_auto_cleanup_on", 1), SqlTypeFacets("tinyint", true)]
        public byte? is_auto_cleanup_on
        {
            get;
            set;
        }

        [SqlColumn("retention_period", 2), SqlTypeFacets("int", true)]
        public int? retention_period
        {
            get;
            set;
        }

        [SqlColumn("retention_period_units", 3), SqlTypeFacets("tinyint", true)]
        public byte? retention_period_units
        {
            get;
            set;
        }

        [SqlColumn("retention_period_units_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string retention_period_units_desc
        {
            get;
            set;
        }

        [SqlColumn("max_cleanup_version", 5), SqlTypeFacets("bigint", true)]
        public long? max_cleanup_version
        {
            get;
            set;
        }

        public change_tracking_databases()
        {
        }

        public change_tracking_databases(object[] items)
        {
            database_id = (int)items[0];
            is_auto_cleanup_on = (byte?)items[1];
            retention_period = (int?)items[2];
            retention_period_units = (byte?)items[3];
            retention_period_units_desc = (string)items[4];
            max_cleanup_version = (long?)items[5];
        }

        public change_tracking_databases(int database_id, byte? is_auto_cleanup_on, int? retention_period, byte? retention_period_units, string retention_period_units_desc, long? max_cleanup_version)
        {
            this.database_id = database_id;
            this.is_auto_cleanup_on = is_auto_cleanup_on;
            this.retention_period = retention_period;
            this.retention_period_units = retention_period_units;
            this.retention_period_units_desc = retention_period_units_desc;
            this.max_cleanup_version = max_cleanup_version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, is_auto_cleanup_on, retention_period, retention_period_units, retention_period_units_desc, max_cleanup_version };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            is_auto_cleanup_on = (byte?)items[1];
            retention_period = (int?)items[2];
            retention_period_units = (byte?)items[3];
            retention_period_units_desc = (string)items[4];
            max_cleanup_version = (long?)items[5];
        }
    }

    [SqlView("Z0", "server_event_sessions")]
    public partial class server_event_sessions : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("event_retention_mode", 2), SqlTypeFacets("char", true)]
        public string event_retention_mode
        {
            get;
            set;
        }

        [SqlColumn("event_retention_mode_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string event_retention_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("max_dispatch_latency", 4), SqlTypeFacets("int", true)]
        public int? max_dispatch_latency
        {
            get;
            set;
        }

        [SqlColumn("max_memory", 5), SqlTypeFacets("int", true)]
        public int? max_memory
        {
            get;
            set;
        }

        [SqlColumn("max_event_size", 6), SqlTypeFacets("int", true)]
        public int? max_event_size
        {
            get;
            set;
        }

        [SqlColumn("memory_partition_mode", 7), SqlTypeFacets("char", true)]
        public string memory_partition_mode
        {
            get;
            set;
        }

        [SqlColumn("memory_partition_mode_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string memory_partition_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("track_causality", 9), SqlTypeFacets("bit", true)]
        public bool? track_causality
        {
            get;
            set;
        }

        [SqlColumn("startup_state", 10), SqlTypeFacets("bit", true)]
        public bool? startup_state
        {
            get;
            set;
        }

        public server_event_sessions()
        {
        }

        public server_event_sessions(object[] items)
        {
            event_session_id = (int)items[0];
            name = (string)items[1];
            event_retention_mode = (string)items[2];
            event_retention_mode_desc = (string)items[3];
            max_dispatch_latency = (int?)items[4];
            max_memory = (int?)items[5];
            max_event_size = (int?)items[6];
            memory_partition_mode = (string)items[7];
            memory_partition_mode_desc = (string)items[8];
            track_causality = (bool?)items[9];
            startup_state = (bool?)items[10];
        }

        public server_event_sessions(int event_session_id, string name, string event_retention_mode, string event_retention_mode_desc, int? max_dispatch_latency, int? max_memory, int? max_event_size, string memory_partition_mode, string memory_partition_mode_desc, bool? track_causality, bool? startup_state)
        {
            this.event_session_id = event_session_id;
            this.name = name;
            this.event_retention_mode = event_retention_mode;
            this.event_retention_mode_desc = event_retention_mode_desc;
            this.max_dispatch_latency = max_dispatch_latency;
            this.max_memory = max_memory;
            this.max_event_size = max_event_size;
            this.memory_partition_mode = memory_partition_mode;
            this.memory_partition_mode_desc = memory_partition_mode_desc;
            this.track_causality = track_causality;
            this.startup_state = startup_state;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, name, event_retention_mode, event_retention_mode_desc, max_dispatch_latency, max_memory, max_event_size, memory_partition_mode, memory_partition_mode_desc, track_causality, startup_state };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            name = (string)items[1];
            event_retention_mode = (string)items[2];
            event_retention_mode_desc = (string)items[3];
            max_dispatch_latency = (int?)items[4];
            max_memory = (int?)items[5];
            max_event_size = (int?)items[6];
            memory_partition_mode = (string)items[7];
            memory_partition_mode_desc = (string)items[8];
            track_causality = (bool?)items[9];
            startup_state = (bool?)items[10];
        }
    }

    [SqlView("Z0", "change_tracking_tables")]
    public partial class change_tracking_tables : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("is_track_columns_updated_on", 1), SqlTypeFacets("bit", false)]
        public bool is_track_columns_updated_on
        {
            get;
            set;
        }

        [SqlColumn("min_valid_version", 2), SqlTypeFacets("bigint", true)]
        public long? min_valid_version
        {
            get;
            set;
        }

        [SqlColumn("begin_version", 3), SqlTypeFacets("bigint", true)]
        public long? begin_version
        {
            get;
            set;
        }

        [SqlColumn("cleanup_version", 4), SqlTypeFacets("bigint", true)]
        public long? cleanup_version
        {
            get;
            set;
        }

        public change_tracking_tables()
        {
        }

        public change_tracking_tables(object[] items)
        {
            object_id = (int)items[0];
            is_track_columns_updated_on = (bool)items[1];
            min_valid_version = (long?)items[2];
            begin_version = (long?)items[3];
            cleanup_version = (long?)items[4];
        }

        public change_tracking_tables(int object_id, bool is_track_columns_updated_on, long? min_valid_version, long? begin_version, long? cleanup_version)
        {
            this.object_id = object_id;
            this.is_track_columns_updated_on = is_track_columns_updated_on;
            this.min_valid_version = min_valid_version;
            this.begin_version = begin_version;
            this.cleanup_version = cleanup_version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, is_track_columns_updated_on, min_valid_version, begin_version, cleanup_version };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            is_track_columns_updated_on = (bool)items[1];
            min_valid_version = (long?)items[2];
            begin_version = (long?)items[3];
            cleanup_version = (long?)items[4];
        }
    }

    [SqlView("Z0", "server_events")]
    public partial class server_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 4), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public server_events()
        {
        }

        public server_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }

        public server_events(int object_id, int type, string type_desc, bool? is_trigger_event, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }
    }

    [SqlView("Z0", "check_constraints")]
    public partial class check_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 13), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_not_trusted", 14), SqlTypeFacets("bit", false)]
        public bool is_not_trusted
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 15), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 16), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 17), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 18), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public check_constraints()
        {
        }

        public check_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_disabled = (bool)items[12];
            is_not_for_replication = (bool)items[13];
            is_not_trusted = (bool)items[14];
            parent_column_id = (int)items[15];
            definition = (string)items[16];
            uses_database_collation = (bool?)items[17];
            is_system_named = (bool)items[18];
        }

        public check_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool is_disabled, bool is_not_for_replication, bool is_not_trusted, int parent_column_id, string definition, bool? uses_database_collation, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_not_trusted = is_not_trusted;
            this.parent_column_id = parent_column_id;
            this.definition = definition;
            this.uses_database_collation = uses_database_collation;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_disabled, is_not_for_replication, is_not_trusted, parent_column_id, definition, uses_database_collation, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_disabled = (bool)items[12];
            is_not_for_replication = (bool)items[13];
            is_not_trusted = (bool)items[14];
            parent_column_id = (int)items[15];
            definition = (string)items[16];
            uses_database_collation = (bool?)items[17];
            is_system_named = (bool)items[18];
        }
    }

    [SqlView("Z0", "server_file_audits")]
    public partial class server_file_audits : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 5), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("on_failure", 8), SqlTypeFacets("tinyint", true)]
        public byte? on_failure
        {
            get;
            set;
        }

        [SqlColumn("on_failure_desc", 9), SqlTypeFacets("nvarchar", true)]
        public string on_failure_desc
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 10), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        [SqlColumn("queue_delay", 11), SqlTypeFacets("int", true)]
        public int? queue_delay
        {
            get;
            set;
        }

        [SqlColumn("predicate", 12), SqlTypeFacets("nvarchar", true)]
        public string predicate
        {
            get;
            set;
        }

        [SqlColumn("max_file_size", 13), SqlTypeFacets("bigint", true)]
        public long? max_file_size
        {
            get;
            set;
        }

        [SqlColumn("max_rollover_files", 14), SqlTypeFacets("int", true)]
        public int? max_rollover_files
        {
            get;
            set;
        }

        [SqlColumn("max_files", 15), SqlTypeFacets("int", true)]
        public int? max_files
        {
            get;
            set;
        }

        [SqlColumn("reserve_disk_space", 16), SqlTypeFacets("bit", true)]
        public bool? reserve_disk_space
        {
            get;
            set;
        }

        [SqlColumn("log_file_path", 17), SqlTypeFacets("nvarchar", true)]
        public string log_file_path
        {
            get;
            set;
        }

        [SqlColumn("log_file_name", 18), SqlTypeFacets("nvarchar", true)]
        public string log_file_name
        {
            get;
            set;
        }

        public server_file_audits()
        {
        }

        public server_file_audits(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
            max_file_size = (long?)items[13];
            max_rollover_files = (int?)items[14];
            max_files = (int?)items[15];
            reserve_disk_space = (bool?)items[16];
            log_file_path = (string)items[17];
            log_file_name = (string)items[18];
        }

        public server_file_audits(int audit_id, string name, Guid? audit_guid, DateTime create_date, DateTime modify_date, int? principal_id, string type, string type_desc, byte? on_failure, string on_failure_desc, bool? is_state_enabled, int? queue_delay, string predicate, long? max_file_size, int? max_rollover_files, int? max_files, bool? reserve_disk_space, string log_file_path, string log_file_name)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.audit_guid = audit_guid;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.on_failure = on_failure;
            this.on_failure_desc = on_failure_desc;
            this.is_state_enabled = is_state_enabled;
            this.queue_delay = queue_delay;
            this.predicate = predicate;
            this.max_file_size = max_file_size;
            this.max_rollover_files = max_rollover_files;
            this.max_files = max_files;
            this.reserve_disk_space = reserve_disk_space;
            this.log_file_path = log_file_path;
            this.log_file_name = log_file_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, audit_guid, create_date, modify_date, principal_id, type, type_desc, on_failure, on_failure_desc, is_state_enabled, queue_delay, predicate, max_file_size, max_rollover_files, max_files, reserve_disk_space, log_file_path, log_file_name };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
            max_file_size = (long?)items[13];
            max_rollover_files = (int?)items[14];
            max_files = (int?)items[15];
            reserve_disk_space = (bool?)items[16];
            log_file_path = (string)items[17];
            log_file_name = (string)items[18];
        }
    }

    [SqlView("Z0", "column_encryption_key_values")]
    public partial class column_encryption_key_values : SqlViewProxy
    {
        [SqlColumn("column_encryption_key_id", 0), SqlTypeFacets("int", false)]
        public int column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_master_key_id", 1), SqlTypeFacets("int", false)]
        public int column_master_key_id
        {
            get;
            set;
        }

        [SqlColumn("encrypted_value", 2), SqlTypeFacets("varbinary", true)]
        public Byte[] encrypted_value
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 3), SqlTypeFacets("sysname", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        public column_encryption_key_values()
        {
        }

        public column_encryption_key_values(object[] items)
        {
            column_encryption_key_id = (int)items[0];
            column_master_key_id = (int)items[1];
            encrypted_value = (Byte[])items[2];
            encryption_algorithm_name = (string)items[3];
        }

        public column_encryption_key_values(int column_encryption_key_id, int column_master_key_id, Byte[] encrypted_value, string encryption_algorithm_name)
        {
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_master_key_id = column_master_key_id;
            this.encrypted_value = encrypted_value;
            this.encryption_algorithm_name = encryption_algorithm_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { column_encryption_key_id, column_master_key_id, encrypted_value, encryption_algorithm_name };
        }

        public override void SetItemArray(object[] items)
        {
            column_encryption_key_id = (int)items[0];
            column_master_key_id = (int)items[1];
            encrypted_value = (Byte[])items[2];
            encryption_algorithm_name = (string)items[3];
        }
    }

    [SqlView("Z0", "server_permissions")]
    public partial class server_permissions : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("grantee_principal_id", 4), SqlTypeFacets("int", false)]
        public int grantee_principal_id
        {
            get;
            set;
        }

        [SqlColumn("grantor_principal_id", 5), SqlTypeFacets("int", false)]
        public int grantor_principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 7), SqlTypeFacets("nvarchar", true)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("char", false)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        public server_permissions()
        {
        }

        public server_permissions(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }

        public server_permissions(byte @class, string class_desc, int major_id, int minor_id, int grantee_principal_id, int grantor_principal_id, string type, string permission_name, string state, string state_desc)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.grantee_principal_id = grantee_principal_id;
            this.grantor_principal_id = grantor_principal_id;
            this.type = type;
            this.permission_name = permission_name;
            this.state = state;
            this.state_desc = state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, grantee_principal_id, grantor_principal_id, type, permission_name, state, state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }
    }

    [SqlView("Z0", "column_encryption_keys")]
    public partial class column_encryption_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 1), SqlTypeFacets("int", false)]
        public int column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public column_encryption_keys()
        {
        }

        public column_encryption_keys(object[] items)
        {
            name = (string)items[0];
            column_encryption_key_id = (int)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
        }

        public column_encryption_keys(string name, int column_encryption_key_id, DateTime create_date, DateTime modify_date)
        {
            this.name = name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, column_encryption_key_id, create_date, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            column_encryption_key_id = (int)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
        }
    }

    [SqlView("Z0", "server_principal_credentials")]
    public partial class server_principal_credentials : SqlViewProxy
    {
        [SqlColumn("principal_id", 0), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 1), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        public server_principal_credentials()
        {
        }

        public server_principal_credentials(object[] items)
        {
            principal_id = (int)items[0];
            credential_id = (int)items[1];
        }

        public server_principal_credentials(int principal_id, int credential_id)
        {
            this.principal_id = principal_id;
            this.credential_id = credential_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { principal_id, credential_id };
        }

        public override void SetItemArray(object[] items)
        {
            principal_id = (int)items[0];
            credential_id = (int)items[1];
        }
    }

    [SqlView("Z0", "column_master_keys")]
    public partial class column_master_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_master_key_id", 1), SqlTypeFacets("int", false)]
        public int column_master_key_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("key_store_provider_name", 4), SqlTypeFacets("sysname", true)]
        public string key_store_provider_name
        {
            get;
            set;
        }

        [SqlColumn("key_path", 5), SqlTypeFacets("nvarchar", true)]
        public string key_path
        {
            get;
            set;
        }

        public column_master_keys()
        {
        }

        public column_master_keys(object[] items)
        {
            name = (string)items[0];
            column_master_key_id = (int)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            key_store_provider_name = (string)items[4];
            key_path = (string)items[5];
        }

        public column_master_keys(string name, int column_master_key_id, DateTime create_date, DateTime modify_date, string key_store_provider_name, string key_path)
        {
            this.name = name;
            this.column_master_key_id = column_master_key_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.key_store_provider_name = key_store_provider_name;
            this.key_path = key_path;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, column_master_key_id, create_date, modify_date, key_store_provider_name, key_path };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            column_master_key_id = (int)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            key_store_provider_name = (string)items[4];
            key_path = (string)items[5];
        }
    }

    [SqlView("Z0", "server_principals")]
    public partial class server_principals : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("default_database_name", 8), SqlTypeFacets("sysname", true)]
        public string default_database_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 9), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 10), SqlTypeFacets("int", true)]
        public int? credential_id
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_id", 11), SqlTypeFacets("int", true)]
        public int? owning_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_role", 12), SqlTypeFacets("bit", false)]
        public bool is_fixed_role
        {
            get;
            set;
        }

        public server_principals()
        {
        }

        public server_principals(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            owning_principal_id = (int?)items[11];
            is_fixed_role = (bool)items[12];
        }

        public server_principals(string name, int principal_id, Byte[] sid, string type, string type_desc, bool? is_disabled, DateTime create_date, DateTime modify_date, string default_database_name, string default_language_name, int? credential_id, int? owning_principal_id, bool is_fixed_role)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.sid = sid;
            this.type = type;
            this.type_desc = type_desc;
            this.is_disabled = is_disabled;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.default_database_name = default_database_name;
            this.default_language_name = default_language_name;
            this.credential_id = credential_id;
            this.owning_principal_id = owning_principal_id;
            this.is_fixed_role = is_fixed_role;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, sid, type, type_desc, is_disabled, create_date, modify_date, default_database_name, default_language_name, credential_id, owning_principal_id, is_fixed_role };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            owning_principal_id = (int?)items[11];
            is_fixed_role = (bool)items[12];
        }
    }

    [SqlView("Z0", "column_store_dictionaries")]
    public partial class column_store_dictionaries : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", true)]
        public long? partition_id
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 1), SqlTypeFacets("bigint", true)]
        public long? hobt_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", true)]
        public int? column_id
        {
            get;
            set;
        }

        [SqlColumn("dictionary_id", 3), SqlTypeFacets("int", true)]
        public int? dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("version", 4), SqlTypeFacets("int", true)]
        public int? version
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("int", true)]
        public int? type
        {
            get;
            set;
        }

        [SqlColumn("last_id", 6), SqlTypeFacets("int", true)]
        public int? last_id
        {
            get;
            set;
        }

        [SqlColumn("entry_count", 7), SqlTypeFacets("bigint", true)]
        public long? entry_count
        {
            get;
            set;
        }

        [SqlColumn("on_disk_size", 8), SqlTypeFacets("bigint", true)]
        public long? on_disk_size
        {
            get;
            set;
        }

        public column_store_dictionaries()
        {
        }

        public column_store_dictionaries(object[] items)
        {
            partition_id = (long?)items[0];
            hobt_id = (long?)items[1];
            column_id = (int?)items[2];
            dictionary_id = (int?)items[3];
            version = (int?)items[4];
            type = (int?)items[5];
            last_id = (int?)items[6];
            entry_count = (long?)items[7];
            on_disk_size = (long?)items[8];
        }

        public column_store_dictionaries(long? partition_id, long? hobt_id, int? column_id, int? dictionary_id, int? version, int? type, int? last_id, long? entry_count, long? on_disk_size)
        {
            this.partition_id = partition_id;
            this.hobt_id = hobt_id;
            this.column_id = column_id;
            this.dictionary_id = dictionary_id;
            this.version = version;
            this.type = type;
            this.last_id = last_id;
            this.entry_count = entry_count;
            this.on_disk_size = on_disk_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, hobt_id, column_id, dictionary_id, version, type, last_id, entry_count, on_disk_size };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long?)items[0];
            hobt_id = (long?)items[1];
            column_id = (int?)items[2];
            dictionary_id = (int?)items[3];
            version = (int?)items[4];
            type = (int?)items[5];
            last_id = (int?)items[6];
            entry_count = (long?)items[7];
            on_disk_size = (long?)items[8];
        }
    }

    [SqlView("Z0", "server_role_members")]
    public partial class server_role_members : SqlViewProxy
    {
        [SqlColumn("role_principal_id", 0), SqlTypeFacets("int", false)]
        public int role_principal_id
        {
            get;
            set;
        }

        [SqlColumn("member_principal_id", 1), SqlTypeFacets("int", false)]
        public int member_principal_id
        {
            get;
            set;
        }

        public server_role_members()
        {
        }

        public server_role_members(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }

        public server_role_members(int role_principal_id, int member_principal_id)
        {
            this.role_principal_id = role_principal_id;
            this.member_principal_id = member_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { role_principal_id, member_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }
    }

    [SqlView("Z0", "column_store_row_groups")]
    public partial class column_store_row_groups : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 2), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 3), SqlTypeFacets("int", true)]
        public int? row_group_id
        {
            get;
            set;
        }

        [SqlColumn("delta_store_hobt_id", 4), SqlTypeFacets("bigint", true)]
        public long? delta_store_hobt_id
        {
            get;
            set;
        }

        [SqlColumn("state", 5), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_description", 6), SqlTypeFacets("nvarchar", false)]
        public string state_description
        {
            get;
            set;
        }

        [SqlColumn("total_rows", 7), SqlTypeFacets("bigint", true)]
        public long? total_rows
        {
            get;
            set;
        }

        [SqlColumn("deleted_rows", 8), SqlTypeFacets("bigint", true)]
        public long? deleted_rows
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? size_in_bytes
        {
            get;
            set;
        }

        public column_store_row_groups()
        {
        }

        public column_store_row_groups(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }

        public column_store_row_groups(int? object_id, int? index_id, int? partition_number, int? row_group_id, long? delta_store_hobt_id, byte? state, string state_description, long? total_rows, long? deleted_rows, long? size_in_bytes)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.row_group_id = row_group_id;
            this.delta_store_hobt_id = delta_store_hobt_id;
            this.state = state;
            this.state_description = state_description;
            this.total_rows = total_rows;
            this.deleted_rows = deleted_rows;
            this.size_in_bytes = size_in_bytes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, partition_number, row_group_id, delta_store_hobt_id, state, state_description, total_rows, deleted_rows, size_in_bytes };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }
    }

    [SqlView("Z0", "server_sql_modules")]
    public partial class server_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 4), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public server_sql_modules()
        {
        }

        public server_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            execute_as_principal_id = (int?)items[4];
        }

        public server_sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            execute_as_principal_id = (int?)items[4];
        }
    }

    [SqlView("Z0", "column_store_segments")]
    public partial class column_store_segments : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", true)]
        public long? partition_id
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 1), SqlTypeFacets("bigint", true)]
        public long? hobt_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", true)]
        public int? column_id
        {
            get;
            set;
        }

        [SqlColumn("segment_id", 3), SqlTypeFacets("int", true)]
        public int? segment_id
        {
            get;
            set;
        }

        [SqlColumn("version", 4), SqlTypeFacets("int", true)]
        public int? version
        {
            get;
            set;
        }

        [SqlColumn("encoding_type", 5), SqlTypeFacets("int", true)]
        public int? encoding_type
        {
            get;
            set;
        }

        [SqlColumn("row_count", 6), SqlTypeFacets("int", true)]
        public int? row_count
        {
            get;
            set;
        }

        [SqlColumn("has_nulls", 7), SqlTypeFacets("int", true)]
        public int? has_nulls
        {
            get;
            set;
        }

        [SqlColumn("base_id", 8), SqlTypeFacets("bigint", true)]
        public long? base_id
        {
            get;
            set;
        }

        [SqlColumn("magnitude", 9), SqlTypeFacets("float", true)]
        public double? magnitude
        {
            get;
            set;
        }

        [SqlColumn("primary_dictionary_id", 10), SqlTypeFacets("int", true)]
        public int? primary_dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("secondary_dictionary_id", 11), SqlTypeFacets("int", true)]
        public int? secondary_dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("min_data_id", 12), SqlTypeFacets("bigint", true)]
        public long? min_data_id
        {
            get;
            set;
        }

        [SqlColumn("max_data_id", 13), SqlTypeFacets("bigint", true)]
        public long? max_data_id
        {
            get;
            set;
        }

        [SqlColumn("null_value", 14), SqlTypeFacets("bigint", true)]
        public long? null_value
        {
            get;
            set;
        }

        [SqlColumn("on_disk_size", 15), SqlTypeFacets("bigint", true)]
        public long? on_disk_size
        {
            get;
            set;
        }

        public column_store_segments()
        {
        }

        public column_store_segments(object[] items)
        {
            partition_id = (long?)items[0];
            hobt_id = (long?)items[1];
            column_id = (int?)items[2];
            segment_id = (int?)items[3];
            version = (int?)items[4];
            encoding_type = (int?)items[5];
            row_count = (int?)items[6];
            has_nulls = (int?)items[7];
            base_id = (long?)items[8];
            magnitude = (double?)items[9];
            primary_dictionary_id = (int?)items[10];
            secondary_dictionary_id = (int?)items[11];
            min_data_id = (long?)items[12];
            max_data_id = (long?)items[13];
            null_value = (long?)items[14];
            on_disk_size = (long?)items[15];
        }

        public column_store_segments(long? partition_id, long? hobt_id, int? column_id, int? segment_id, int? version, int? encoding_type, int? row_count, int? has_nulls, long? base_id, double? magnitude, int? primary_dictionary_id, int? secondary_dictionary_id, long? min_data_id, long? max_data_id, long? null_value, long? on_disk_size)
        {
            this.partition_id = partition_id;
            this.hobt_id = hobt_id;
            this.column_id = column_id;
            this.segment_id = segment_id;
            this.version = version;
            this.encoding_type = encoding_type;
            this.row_count = row_count;
            this.has_nulls = has_nulls;
            this.base_id = base_id;
            this.magnitude = magnitude;
            this.primary_dictionary_id = primary_dictionary_id;
            this.secondary_dictionary_id = secondary_dictionary_id;
            this.min_data_id = min_data_id;
            this.max_data_id = max_data_id;
            this.null_value = null_value;
            this.on_disk_size = on_disk_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, hobt_id, column_id, segment_id, version, encoding_type, row_count, has_nulls, base_id, magnitude, primary_dictionary_id, secondary_dictionary_id, min_data_id, max_data_id, null_value, on_disk_size };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long?)items[0];
            hobt_id = (long?)items[1];
            column_id = (int?)items[2];
            segment_id = (int?)items[3];
            version = (int?)items[4];
            encoding_type = (int?)items[5];
            row_count = (int?)items[6];
            has_nulls = (int?)items[7];
            base_id = (long?)items[8];
            magnitude = (double?)items[9];
            primary_dictionary_id = (int?)items[10];
            secondary_dictionary_id = (int?)items[11];
            min_data_id = (long?)items[12];
            max_data_id = (long?)items[13];
            null_value = (long?)items[14];
            on_disk_size = (long?)items[15];
        }
    }

    [SqlView("Z0", "server_trigger_events")]
    public partial class server_trigger_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("is_first", 4), SqlTypeFacets("bit", true)]
        public bool? is_first
        {
            get;
            set;
        }

        [SqlColumn("is_last", 5), SqlTypeFacets("bit", true)]
        public bool? is_last
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 6), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 7), SqlTypeFacets("nvarchar", true)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public server_trigger_events()
        {
        }

        public server_trigger_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            is_first = (bool?)items[4];
            is_last = (bool?)items[5];
            event_group_type = (int?)items[6];
            event_group_type_desc = (string)items[7];
        }

        public server_trigger_events(int object_id, int type, string type_desc, bool? is_trigger_event, bool? is_first, bool? is_last, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.is_first = is_first;
            this.is_last = is_last;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, is_first, is_last, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            is_first = (bool?)items[4];
            is_last = (bool?)items[5];
            event_group_type = (int?)items[6];
            event_group_type_desc = (string)items[7];
        }
    }

    [SqlView("Z0", "column_type_usages")]
    public partial class column_type_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public column_type_usages()
        {
        }

        public column_type_usages(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            user_type_id = (int)items[2];
        }

        public column_type_usages(int object_id, int column_id, int user_type_id)
        {
            this.object_id = object_id;
            this.column_id = column_id;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, column_id, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            user_type_id = (int)items[2];
        }
    }

    [SqlView("Z0", "server_triggers")]
    public partial class server_triggers : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 10), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        public server_triggers()
        {
        }

        public server_triggers(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
        }

        public server_triggers(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_disabled)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_disabled = is_disabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_disabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
        }
    }

    [SqlView("Z0", "column_xml_schema_collection_usages")]
    public partial class column_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 2), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public column_xml_schema_collection_usages()
        {
        }

        public column_xml_schema_collection_usages(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }

        public column_xml_schema_collection_usages(int object_id, int column_id, int xml_collection_id)
        {
            this.object_id = object_id;
            this.column_id = column_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, column_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }
    }

    [SqlView("Z0", "servers")]
    public partial class servers : SqlViewProxy
    {
        [SqlColumn("server_id", 0), SqlTypeFacets("int", false)]
        public int server_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("product", 2), SqlTypeFacets("sysname", false)]
        public string product
        {
            get;
            set;
        }

        [SqlColumn("provider", 3), SqlTypeFacets("sysname", false)]
        public string provider
        {
            get;
            set;
        }

        [SqlColumn("data_source", 4), SqlTypeFacets("nvarchar", true)]
        public string data_source
        {
            get;
            set;
        }

        [SqlColumn("location", 5), SqlTypeFacets("nvarchar", true)]
        public string location
        {
            get;
            set;
        }

        [SqlColumn("provider_string", 6), SqlTypeFacets("nvarchar", true)]
        public string provider_string
        {
            get;
            set;
        }

        [SqlColumn("catalog", 7), SqlTypeFacets("sysname", true)]
        public string catalog
        {
            get;
            set;
        }

        [SqlColumn("connect_timeout", 8), SqlTypeFacets("int", true)]
        public int? connect_timeout
        {
            get;
            set;
        }

        [SqlColumn("query_timeout", 9), SqlTypeFacets("int", true)]
        public int? query_timeout
        {
            get;
            set;
        }

        [SqlColumn("is_linked", 10), SqlTypeFacets("bit", false)]
        public bool is_linked
        {
            get;
            set;
        }

        [SqlColumn("is_remote_login_enabled", 11), SqlTypeFacets("bit", false)]
        public bool is_remote_login_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_rpc_out_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_rpc_out_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_data_access_enabled", 13), SqlTypeFacets("bit", false)]
        public bool is_data_access_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_collation_compatible", 14), SqlTypeFacets("bit", false)]
        public bool is_collation_compatible
        {
            get;
            set;
        }

        [SqlColumn("uses_remote_collation", 15), SqlTypeFacets("bit", false)]
        public bool uses_remote_collation
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 16), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("lazy_schema_validation", 17), SqlTypeFacets("bit", false)]
        public bool lazy_schema_validation
        {
            get;
            set;
        }

        [SqlColumn("is_system", 18), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("is_publisher", 19), SqlTypeFacets("bit", false)]
        public bool is_publisher
        {
            get;
            set;
        }

        [SqlColumn("is_subscriber", 20), SqlTypeFacets("bit", true)]
        public bool? is_subscriber
        {
            get;
            set;
        }

        [SqlColumn("is_distributor", 21), SqlTypeFacets("bit", true)]
        public bool? is_distributor
        {
            get;
            set;
        }

        [SqlColumn("is_nonsql_subscriber", 22), SqlTypeFacets("bit", true)]
        public bool? is_nonsql_subscriber
        {
            get;
            set;
        }

        [SqlColumn("is_remote_proc_transaction_promotion_enabled", 23), SqlTypeFacets("bit", true)]
        public bool? is_remote_proc_transaction_promotion_enabled
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 24), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_rda_server", 25), SqlTypeFacets("bit", true)]
        public bool? is_rda_server
        {
            get;
            set;
        }

        public servers()
        {
        }

        public servers(object[] items)
        {
            server_id = (int)items[0];
            name = (string)items[1];
            product = (string)items[2];
            provider = (string)items[3];
            data_source = (string)items[4];
            location = (string)items[5];
            provider_string = (string)items[6];
            catalog = (string)items[7];
            connect_timeout = (int?)items[8];
            query_timeout = (int?)items[9];
            is_linked = (bool)items[10];
            is_remote_login_enabled = (bool)items[11];
            is_rpc_out_enabled = (bool)items[12];
            is_data_access_enabled = (bool)items[13];
            is_collation_compatible = (bool)items[14];
            uses_remote_collation = (bool)items[15];
            collation_name = (string)items[16];
            lazy_schema_validation = (bool)items[17];
            is_system = (bool)items[18];
            is_publisher = (bool)items[19];
            is_subscriber = (bool?)items[20];
            is_distributor = (bool?)items[21];
            is_nonsql_subscriber = (bool?)items[22];
            is_remote_proc_transaction_promotion_enabled = (bool?)items[23];
            modify_date = (DateTime)items[24];
            is_rda_server = (bool?)items[25];
        }

        public servers(int server_id, string name, string product, string provider, string data_source, string location, string provider_string, string catalog, int? connect_timeout, int? query_timeout, bool is_linked, bool is_remote_login_enabled, bool is_rpc_out_enabled, bool is_data_access_enabled, bool is_collation_compatible, bool uses_remote_collation, string collation_name, bool lazy_schema_validation, bool is_system, bool is_publisher, bool? is_subscriber, bool? is_distributor, bool? is_nonsql_subscriber, bool? is_remote_proc_transaction_promotion_enabled, DateTime modify_date, bool? is_rda_server)
        {
            this.server_id = server_id;
            this.name = name;
            this.product = product;
            this.provider = provider;
            this.data_source = data_source;
            this.location = location;
            this.provider_string = provider_string;
            this.catalog = catalog;
            this.connect_timeout = connect_timeout;
            this.query_timeout = query_timeout;
            this.is_linked = is_linked;
            this.is_remote_login_enabled = is_remote_login_enabled;
            this.is_rpc_out_enabled = is_rpc_out_enabled;
            this.is_data_access_enabled = is_data_access_enabled;
            this.is_collation_compatible = is_collation_compatible;
            this.uses_remote_collation = uses_remote_collation;
            this.collation_name = collation_name;
            this.lazy_schema_validation = lazy_schema_validation;
            this.is_system = is_system;
            this.is_publisher = is_publisher;
            this.is_subscriber = is_subscriber;
            this.is_distributor = is_distributor;
            this.is_nonsql_subscriber = is_nonsql_subscriber;
            this.is_remote_proc_transaction_promotion_enabled = is_remote_proc_transaction_promotion_enabled;
            this.modify_date = modify_date;
            this.is_rda_server = is_rda_server;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_id, name, product, provider, data_source, location, provider_string, catalog, connect_timeout, query_timeout, is_linked, is_remote_login_enabled, is_rpc_out_enabled, is_data_access_enabled, is_collation_compatible, uses_remote_collation, collation_name, lazy_schema_validation, is_system, is_publisher, is_subscriber, is_distributor, is_nonsql_subscriber, is_remote_proc_transaction_promotion_enabled, modify_date, is_rda_server };
        }

        public override void SetItemArray(object[] items)
        {
            server_id = (int)items[0];
            name = (string)items[1];
            product = (string)items[2];
            provider = (string)items[3];
            data_source = (string)items[4];
            location = (string)items[5];
            provider_string = (string)items[6];
            catalog = (string)items[7];
            connect_timeout = (int?)items[8];
            query_timeout = (int?)items[9];
            is_linked = (bool)items[10];
            is_remote_login_enabled = (bool)items[11];
            is_rpc_out_enabled = (bool)items[12];
            is_data_access_enabled = (bool)items[13];
            is_collation_compatible = (bool)items[14];
            uses_remote_collation = (bool)items[15];
            collation_name = (string)items[16];
            lazy_schema_validation = (bool)items[17];
            is_system = (bool)items[18];
            is_publisher = (bool)items[19];
            is_subscriber = (bool?)items[20];
            is_distributor = (bool?)items[21];
            is_nonsql_subscriber = (bool?)items[22];
            is_remote_proc_transaction_promotion_enabled = (bool?)items[23];
            modify_date = (DateTime)items[24];
            is_rda_server = (bool?)items[25];
        }
    }

    [SqlView("Z0", "columns")]
    public partial class columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", true)]
        public bool? is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", true)]
        public bool? is_column_set
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type", 25), SqlTypeFacets("tinyint", true)]
        public byte? generated_always_type
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type_desc", 26), SqlTypeFacets("nvarchar", true)]
        public string generated_always_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 27), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 28), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 29), SqlTypeFacets("sysname", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 30), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 31), SqlTypeFacets("sysname", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 32), SqlTypeFacets("bit", true)]
        public bool? is_hidden
        {
            get;
            set;
        }

        [SqlColumn("is_masked", 33), SqlTypeFacets("bit", true)]
        public bool? is_masked
        {
            get;
            set;
        }

        [SqlColumn("graph_type", 34), SqlTypeFacets("int", true)]
        public int? graph_type
        {
            get;
            set;
        }

        [SqlColumn("graph_type_desc", 35), SqlTypeFacets("nvarchar", true)]
        public string graph_type_desc
        {
            get;
            set;
        }

        public columns()
        {
        }

        public columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool?)items[32];
            is_masked = (bool?)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }

        public columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool? is_sparse, bool? is_column_set, byte? generated_always_type, string generated_always_type_desc, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name, bool? is_hidden, bool? is_masked, int? graph_type, string graph_type_desc)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.generated_always_type = generated_always_type;
            this.generated_always_type_desc = generated_always_type_desc;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
            this.is_hidden = is_hidden;
            this.is_masked = is_masked;
            this.graph_type = graph_type;
            this.graph_type_desc = graph_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set, generated_always_type, generated_always_type_desc, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name, is_hidden, is_masked, graph_type, graph_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool?)items[32];
            is_masked = (bool?)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }
    }

    [SqlView("Z0", "service_broker_endpoints")]
    public partial class service_broker_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("is_message_forwarding_enabled", 10), SqlTypeFacets("bit", false)]
        public bool is_message_forwarding_enabled
        {
            get;
            set;
        }

        [SqlColumn("message_forwarding_size", 11), SqlTypeFacets("int", false)]
        public int message_forwarding_size
        {
            get;
            set;
        }

        [SqlColumn("connection_auth", 12), SqlTypeFacets("tinyint", false)]
        public byte connection_auth
        {
            get;
            set;
        }

        [SqlColumn("connection_auth_desc", 13), SqlTypeFacets("nvarchar", true)]
        public string connection_auth_desc
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 14), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 15), SqlTypeFacets("tinyint", false)]
        public byte encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 16), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        public service_broker_endpoints()
        {
        }

        public service_broker_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_message_forwarding_enabled = (bool)items[10];
            message_forwarding_size = (int)items[11];
            connection_auth = (byte)items[12];
            connection_auth_desc = (string)items[13];
            certificate_id = (int)items[14];
            encryption_algorithm = (byte)items[15];
            encryption_algorithm_desc = (string)items[16];
        }

        public service_broker_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, bool is_message_forwarding_enabled, int message_forwarding_size, byte connection_auth, string connection_auth_desc, int certificate_id, byte encryption_algorithm, string encryption_algorithm_desc)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.is_message_forwarding_enabled = is_message_forwarding_enabled;
            this.message_forwarding_size = message_forwarding_size;
            this.connection_auth = connection_auth;
            this.connection_auth_desc = connection_auth_desc;
            this.certificate_id = certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, is_message_forwarding_enabled, message_forwarding_size, connection_auth, connection_auth_desc, certificate_id, encryption_algorithm, encryption_algorithm_desc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_message_forwarding_enabled = (bool)items[10];
            message_forwarding_size = (int)items[11];
            connection_auth = (byte)items[12];
            connection_auth_desc = (string)items[13];
            certificate_id = (int)items[14];
            encryption_algorithm = (byte)items[15];
            encryption_algorithm_desc = (string)items[16];
        }
    }

    [SqlView("Z0", "computed_columns")]
    public partial class computed_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 13), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 14), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 15), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 16), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 18), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 19), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 20), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 21), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 22), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 23), SqlTypeFacets("bit", false)]
        public bool uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_persisted", 24), SqlTypeFacets("bit", false)]
        public bool is_persisted
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 25), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 26), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 27), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type", 28), SqlTypeFacets("tinyint", true)]
        public byte? generated_always_type
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type_desc", 29), SqlTypeFacets("nvarchar", true)]
        public string generated_always_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 30), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 31), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 32), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 33), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 34), SqlTypeFacets("sysname", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 35), SqlTypeFacets("bit", false)]
        public bool is_hidden
        {
            get;
            set;
        }

        [SqlColumn("is_masked", 36), SqlTypeFacets("bit", false)]
        public bool is_masked
        {
            get;
            set;
        }

        [SqlColumn("graph_type", 37), SqlTypeFacets("int", true)]
        public int? graph_type
        {
            get;
            set;
        }

        [SqlColumn("graph_type_desc", 38), SqlTypeFacets("nvarchar", true)]
        public string graph_type_desc
        {
            get;
            set;
        }

        public computed_columns()
        {
        }

        public computed_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            definition = (string)items[22];
            uses_database_collation = (bool)items[23];
            is_persisted = (bool)items[24];
            is_computed = (bool)items[25];
            is_sparse = (bool)items[26];
            is_column_set = (bool)items[27];
            generated_always_type = (byte?)items[28];
            generated_always_type_desc = (string)items[29];
            encryption_type = (int?)items[30];
            encryption_type_desc = (string)items[31];
            encryption_algorithm_name = (string)items[32];
            column_encryption_key_id = (int?)items[33];
            column_encryption_key_database_name = (string)items[34];
            is_hidden = (bool)items[35];
            is_masked = (bool)items[36];
            graph_type = (int?)items[37];
            graph_type_desc = (string)items[38];
        }

        public computed_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, string definition, bool uses_database_collation, bool is_persisted, bool is_computed, bool is_sparse, bool is_column_set, byte? generated_always_type, string generated_always_type_desc, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name, bool is_hidden, bool is_masked, int? graph_type, string graph_type_desc)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.definition = definition;
            this.uses_database_collation = uses_database_collation;
            this.is_persisted = is_persisted;
            this.is_computed = is_computed;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.generated_always_type = generated_always_type;
            this.generated_always_type_desc = generated_always_type_desc;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
            this.is_hidden = is_hidden;
            this.is_masked = is_masked;
            this.graph_type = graph_type;
            this.graph_type_desc = graph_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, definition, uses_database_collation, is_persisted, is_computed, is_sparse, is_column_set, generated_always_type, generated_always_type_desc, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name, is_hidden, is_masked, graph_type, graph_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            definition = (string)items[22];
            uses_database_collation = (bool)items[23];
            is_persisted = (bool)items[24];
            is_computed = (bool)items[25];
            is_sparse = (bool)items[26];
            is_column_set = (bool)items[27];
            generated_always_type = (byte?)items[28];
            generated_always_type_desc = (string)items[29];
            encryption_type = (int?)items[30];
            encryption_type_desc = (string)items[31];
            encryption_algorithm_name = (string)items[32];
            column_encryption_key_id = (int?)items[33];
            column_encryption_key_database_name = (string)items[34];
            is_hidden = (bool)items[35];
            is_masked = (bool)items[36];
            graph_type = (int?)items[37];
            graph_type_desc = (string)items[38];
        }
    }

    [SqlView("Z0", "service_contract_message_usages")]
    public partial class service_contract_message_usages : SqlViewProxy
    {
        [SqlColumn("service_contract_id", 0), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("message_type_id", 1), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("is_sent_by_initiator", 2), SqlTypeFacets("bit", false)]
        public bool is_sent_by_initiator
        {
            get;
            set;
        }

        [SqlColumn("is_sent_by_target", 3), SqlTypeFacets("bit", false)]
        public bool is_sent_by_target
        {
            get;
            set;
        }

        public service_contract_message_usages()
        {
        }

        public service_contract_message_usages(object[] items)
        {
            service_contract_id = (int)items[0];
            message_type_id = (int)items[1];
            is_sent_by_initiator = (bool)items[2];
            is_sent_by_target = (bool)items[3];
        }

        public service_contract_message_usages(int service_contract_id, int message_type_id, bool is_sent_by_initiator, bool is_sent_by_target)
        {
            this.service_contract_id = service_contract_id;
            this.message_type_id = message_type_id;
            this.is_sent_by_initiator = is_sent_by_initiator;
            this.is_sent_by_target = is_sent_by_target;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_contract_id, message_type_id, is_sent_by_initiator, is_sent_by_target };
        }

        public override void SetItemArray(object[] items)
        {
            service_contract_id = (int)items[0];
            message_type_id = (int)items[1];
            is_sent_by_initiator = (bool)items[2];
            is_sent_by_target = (bool)items[3];
        }
    }

    [SqlView("Z0", "configurations")]
    public partial class configurations : SqlViewProxy
    {
        [SqlColumn("configuration_id", 0), SqlTypeFacets("int", false)]
        public int configuration_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 2), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        [SqlColumn("minimum", 3), SqlTypeFacets("sql_variant", true)]
        public Object minimum
        {
            get;
            set;
        }

        [SqlColumn("maximum", 4), SqlTypeFacets("sql_variant", true)]
        public Object maximum
        {
            get;
            set;
        }

        [SqlColumn("value_in_use", 5), SqlTypeFacets("sql_variant", true)]
        public Object value_in_use
        {
            get;
            set;
        }

        [SqlColumn("description", 6), SqlTypeFacets("nvarchar", false)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("is_dynamic", 7), SqlTypeFacets("bit", false)]
        public bool is_dynamic
        {
            get;
            set;
        }

        [SqlColumn("is_advanced", 8), SqlTypeFacets("bit", false)]
        public bool is_advanced
        {
            get;
            set;
        }

        public configurations()
        {
        }

        public configurations(object[] items)
        {
            configuration_id = (int)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            minimum = (Object)items[3];
            maximum = (Object)items[4];
            value_in_use = (Object)items[5];
            description = (string)items[6];
            is_dynamic = (bool)items[7];
            is_advanced = (bool)items[8];
        }

        public configurations(int configuration_id, string name, Object value, Object minimum, Object maximum, Object value_in_use, string description, bool is_dynamic, bool is_advanced)
        {
            this.configuration_id = configuration_id;
            this.name = name;
            this.value = value;
            this.minimum = minimum;
            this.maximum = maximum;
            this.value_in_use = value_in_use;
            this.description = description;
            this.is_dynamic = is_dynamic;
            this.is_advanced = is_advanced;
        }

        public override object[] GetItemArray()
        {
            return new object[] { configuration_id, name, value, minimum, maximum, value_in_use, description, is_dynamic, is_advanced };
        }

        public override void SetItemArray(object[] items)
        {
            configuration_id = (int)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            minimum = (Object)items[3];
            maximum = (Object)items[4];
            value_in_use = (Object)items[5];
            description = (string)items[6];
            is_dynamic = (bool)items[7];
            is_advanced = (bool)items[8];
        }
    }

    [SqlView("Z0", "service_contract_usages")]
    public partial class service_contract_usages : SqlViewProxy
    {
        [SqlColumn("service_id", 0), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 1), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        public service_contract_usages()
        {
        }

        public service_contract_usages(object[] items)
        {
            service_id = (int)items[0];
            service_contract_id = (int)items[1];
        }

        public service_contract_usages(int service_id, int service_contract_id)
        {
            this.service_id = service_id;
            this.service_contract_id = service_contract_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_id, service_contract_id };
        }

        public override void SetItemArray(object[] items)
        {
            service_id = (int)items[0];
            service_contract_id = (int)items[1];
        }
    }

    [SqlView("Z0", "conversation_endpoints")]
    public partial class conversation_endpoints : SqlViewProxy
    {
        [SqlColumn("conversation_handle", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_handle
        {
            get;
            set;
        }

        [SqlColumn("conversation_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_id
        {
            get;
            set;
        }

        [SqlColumn("is_initiator", 2), SqlTypeFacets("bit", false)]
        public bool is_initiator
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 3), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("conversation_group_id", 4), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_group_id
        {
            get;
            set;
        }

        [SqlColumn("service_id", 5), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("lifetime", 6), SqlTypeFacets("datetime", false)]
        public DateTime lifetime
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("char", false)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("far_service", 9), SqlTypeFacets("nvarchar", false)]
        public string far_service
        {
            get;
            set;
        }

        [SqlColumn("far_broker_instance", 10), SqlTypeFacets("nvarchar", true)]
        public string far_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 11), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("far_principal_id", 12), SqlTypeFacets("int", false)]
        public int far_principal_id
        {
            get;
            set;
        }

        [SqlColumn("outbound_session_key_identifier", 13), SqlTypeFacets("uniqueidentifier", false)]
        public Guid outbound_session_key_identifier
        {
            get;
            set;
        }

        [SqlColumn("inbound_session_key_identifier", 14), SqlTypeFacets("uniqueidentifier", false)]
        public Guid inbound_session_key_identifier
        {
            get;
            set;
        }

        [SqlColumn("security_timestamp", 15), SqlTypeFacets("datetime", false)]
        public DateTime security_timestamp
        {
            get;
            set;
        }

        [SqlColumn("dialog_timer", 16), SqlTypeFacets("datetime", false)]
        public DateTime dialog_timer
        {
            get;
            set;
        }

        [SqlColumn("send_sequence", 17), SqlTypeFacets("bigint", false)]
        public long send_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_send_tran_id", 18), SqlTypeFacets("binary", false)]
        public Byte[] last_send_tran_id
        {
            get;
            set;
        }

        [SqlColumn("end_dialog_sequence", 19), SqlTypeFacets("bigint", false)]
        public long end_dialog_sequence
        {
            get;
            set;
        }

        [SqlColumn("receive_sequence", 20), SqlTypeFacets("bigint", false)]
        public long receive_sequence
        {
            get;
            set;
        }

        [SqlColumn("receive_sequence_frag", 21), SqlTypeFacets("int", false)]
        public int receive_sequence_frag
        {
            get;
            set;
        }

        [SqlColumn("system_sequence", 22), SqlTypeFacets("bigint", false)]
        public long system_sequence
        {
            get;
            set;
        }

        [SqlColumn("first_out_of_order_sequence", 23), SqlTypeFacets("bigint", false)]
        public long first_out_of_order_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_out_of_order_sequence", 24), SqlTypeFacets("bigint", false)]
        public long last_out_of_order_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_out_of_order_frag", 25), SqlTypeFacets("int", false)]
        public int last_out_of_order_frag
        {
            get;
            set;
        }

        [SqlColumn("is_system", 26), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("priority", 27), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public conversation_endpoints()
        {
        }

        public conversation_endpoints(object[] items)
        {
            conversation_handle = (Guid)items[0];
            conversation_id = (Guid)items[1];
            is_initiator = (bool)items[2];
            service_contract_id = (int)items[3];
            conversation_group_id = (Guid)items[4];
            service_id = (int)items[5];
            lifetime = (DateTime)items[6];
            state = (string)items[7];
            state_desc = (string)items[8];
            far_service = (string)items[9];
            far_broker_instance = (string)items[10];
            principal_id = (int)items[11];
            far_principal_id = (int)items[12];
            outbound_session_key_identifier = (Guid)items[13];
            inbound_session_key_identifier = (Guid)items[14];
            security_timestamp = (DateTime)items[15];
            dialog_timer = (DateTime)items[16];
            send_sequence = (long)items[17];
            last_send_tran_id = (Byte[])items[18];
            end_dialog_sequence = (long)items[19];
            receive_sequence = (long)items[20];
            receive_sequence_frag = (int)items[21];
            system_sequence = (long)items[22];
            first_out_of_order_sequence = (long)items[23];
            last_out_of_order_sequence = (long)items[24];
            last_out_of_order_frag = (int)items[25];
            is_system = (bool)items[26];
            priority = (byte)items[27];
        }

        public conversation_endpoints(Guid conversation_handle, Guid conversation_id, bool is_initiator, int service_contract_id, Guid conversation_group_id, int service_id, DateTime lifetime, string state, string state_desc, string far_service, string far_broker_instance, int principal_id, int far_principal_id, Guid outbound_session_key_identifier, Guid inbound_session_key_identifier, DateTime security_timestamp, DateTime dialog_timer, long send_sequence, Byte[] last_send_tran_id, long end_dialog_sequence, long receive_sequence, int receive_sequence_frag, long system_sequence, long first_out_of_order_sequence, long last_out_of_order_sequence, int last_out_of_order_frag, bool is_system, byte priority)
        {
            this.conversation_handle = conversation_handle;
            this.conversation_id = conversation_id;
            this.is_initiator = is_initiator;
            this.service_contract_id = service_contract_id;
            this.conversation_group_id = conversation_group_id;
            this.service_id = service_id;
            this.lifetime = lifetime;
            this.state = state;
            this.state_desc = state_desc;
            this.far_service = far_service;
            this.far_broker_instance = far_broker_instance;
            this.principal_id = principal_id;
            this.far_principal_id = far_principal_id;
            this.outbound_session_key_identifier = outbound_session_key_identifier;
            this.inbound_session_key_identifier = inbound_session_key_identifier;
            this.security_timestamp = security_timestamp;
            this.dialog_timer = dialog_timer;
            this.send_sequence = send_sequence;
            this.last_send_tran_id = last_send_tran_id;
            this.end_dialog_sequence = end_dialog_sequence;
            this.receive_sequence = receive_sequence;
            this.receive_sequence_frag = receive_sequence_frag;
            this.system_sequence = system_sequence;
            this.first_out_of_order_sequence = first_out_of_order_sequence;
            this.last_out_of_order_sequence = last_out_of_order_sequence;
            this.last_out_of_order_frag = last_out_of_order_frag;
            this.is_system = is_system;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_handle, conversation_id, is_initiator, service_contract_id, conversation_group_id, service_id, lifetime, state, state_desc, far_service, far_broker_instance, principal_id, far_principal_id, outbound_session_key_identifier, inbound_session_key_identifier, security_timestamp, dialog_timer, send_sequence, last_send_tran_id, end_dialog_sequence, receive_sequence, receive_sequence_frag, system_sequence, first_out_of_order_sequence, last_out_of_order_sequence, last_out_of_order_frag, is_system, priority };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_handle = (Guid)items[0];
            conversation_id = (Guid)items[1];
            is_initiator = (bool)items[2];
            service_contract_id = (int)items[3];
            conversation_group_id = (Guid)items[4];
            service_id = (int)items[5];
            lifetime = (DateTime)items[6];
            state = (string)items[7];
            state_desc = (string)items[8];
            far_service = (string)items[9];
            far_broker_instance = (string)items[10];
            principal_id = (int)items[11];
            far_principal_id = (int)items[12];
            outbound_session_key_identifier = (Guid)items[13];
            inbound_session_key_identifier = (Guid)items[14];
            security_timestamp = (DateTime)items[15];
            dialog_timer = (DateTime)items[16];
            send_sequence = (long)items[17];
            last_send_tran_id = (Byte[])items[18];
            end_dialog_sequence = (long)items[19];
            receive_sequence = (long)items[20];
            receive_sequence_frag = (int)items[21];
            system_sequence = (long)items[22];
            first_out_of_order_sequence = (long)items[23];
            last_out_of_order_sequence = (long)items[24];
            last_out_of_order_frag = (int)items[25];
            is_system = (bool)items[26];
            priority = (byte)items[27];
        }
    }

    [SqlView("Z0", "service_contracts")]
    public partial class service_contracts : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 1), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public service_contracts()
        {
        }

        public service_contracts(object[] items)
        {
            name = (string)items[0];
            service_contract_id = (int)items[1];
            principal_id = (int?)items[2];
        }

        public service_contracts(string name, int service_contract_id, int? principal_id)
        {
            this.name = name;
            this.service_contract_id = service_contract_id;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, service_contract_id, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            service_contract_id = (int)items[1];
            principal_id = (int?)items[2];
        }
    }

    [SqlView("Z0", "conversation_groups")]
    public partial class conversation_groups : SqlViewProxy
    {
        [SqlColumn("conversation_group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_group_id
        {
            get;
            set;
        }

        [SqlColumn("service_id", 1), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("is_system", 2), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        public conversation_groups()
        {
        }

        public conversation_groups(object[] items)
        {
            conversation_group_id = (Guid)items[0];
            service_id = (int)items[1];
            is_system = (bool?)items[2];
        }

        public conversation_groups(Guid conversation_group_id, int service_id, bool? is_system)
        {
            this.conversation_group_id = conversation_group_id;
            this.service_id = service_id;
            this.is_system = is_system;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_group_id, service_id, is_system };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_group_id = (Guid)items[0];
            service_id = (int)items[1];
            is_system = (bool?)items[2];
        }
    }

    [SqlView("Z0", "service_message_types")]
    public partial class service_message_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("message_type_id", 1), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("validation", 3), SqlTypeFacets("char", false)]
        public string validation
        {
            get;
            set;
        }

        [SqlColumn("validation_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string validation_desc
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 5), SqlTypeFacets("int", true)]
        public int? xml_collection_id
        {
            get;
            set;
        }

        public service_message_types()
        {
        }

        public service_message_types(object[] items)
        {
            name = (string)items[0];
            message_type_id = (int)items[1];
            principal_id = (int?)items[2];
            validation = (string)items[3];
            validation_desc = (string)items[4];
            xml_collection_id = (int?)items[5];
        }

        public service_message_types(string name, int message_type_id, int? principal_id, string validation, string validation_desc, int? xml_collection_id)
        {
            this.name = name;
            this.message_type_id = message_type_id;
            this.principal_id = principal_id;
            this.validation = validation;
            this.validation_desc = validation_desc;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, message_type_id, principal_id, validation, validation_desc, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            message_type_id = (int)items[1];
            principal_id = (int?)items[2];
            validation = (string)items[3];
            validation_desc = (string)items[4];
            xml_collection_id = (int?)items[5];
        }
    }

    [SqlView("Z0", "conversation_priorities")]
    public partial class conversation_priorities : SqlViewProxy
    {
        [SqlColumn("priority_id", 0), SqlTypeFacets("int", false)]
        public int priority_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 2), SqlTypeFacets("int", true)]
        public int? service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("local_service_id", 3), SqlTypeFacets("int", true)]
        public int? local_service_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 4), SqlTypeFacets("nvarchar", true)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("priority", 5), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public conversation_priorities()
        {
        }

        public conversation_priorities(object[] items)
        {
            priority_id = (int)items[0];
            name = (string)items[1];
            service_contract_id = (int?)items[2];
            local_service_id = (int?)items[3];
            remote_service_name = (string)items[4];
            priority = (byte)items[5];
        }

        public conversation_priorities(int priority_id, string name, int? service_contract_id, int? local_service_id, string remote_service_name, byte priority)
        {
            this.priority_id = priority_id;
            this.name = name;
            this.service_contract_id = service_contract_id;
            this.local_service_id = local_service_id;
            this.remote_service_name = remote_service_name;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { priority_id, name, service_contract_id, local_service_id, remote_service_name, priority };
        }

        public override void SetItemArray(object[] items)
        {
            priority_id = (int)items[0];
            name = (string)items[1];
            service_contract_id = (int?)items[2];
            local_service_id = (int?)items[3];
            remote_service_name = (string)items[4];
            priority = (byte)items[5];
        }
    }

    [SqlView("Z0", "service_queue_usages")]
    public partial class service_queue_usages : SqlViewProxy
    {
        [SqlColumn("service_id", 0), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("service_queue_id", 1), SqlTypeFacets("int", false)]
        public int service_queue_id
        {
            get;
            set;
        }

        public service_queue_usages()
        {
        }

        public service_queue_usages(object[] items)
        {
            service_id = (int)items[0];
            service_queue_id = (int)items[1];
        }

        public service_queue_usages(int service_id, int service_queue_id)
        {
            this.service_id = service_id;
            this.service_queue_id = service_queue_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_id, service_queue_id };
        }

        public override void SetItemArray(object[] items)
        {
            service_id = (int)items[0];
            service_queue_id = (int)items[1];
        }
    }

    [SqlView("Z0", "credentials")]
    public partial class credentials : SqlViewProxy
    {
        [SqlColumn("credential_id", 0), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("credential_identity", 2), SqlTypeFacets("nvarchar", true)]
        public string credential_identity
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("target_type", 5), SqlTypeFacets("nvarchar", true)]
        public string target_type
        {
            get;
            set;
        }

        [SqlColumn("target_id", 6), SqlTypeFacets("int", true)]
        public int? target_id
        {
            get;
            set;
        }

        public credentials()
        {
        }

        public credentials(object[] items)
        {
            credential_id = (int)items[0];
            name = (string)items[1];
            credential_identity = (string)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            target_type = (string)items[5];
            target_id = (int?)items[6];
        }

        public credentials(int credential_id, string name, string credential_identity, DateTime create_date, DateTime modify_date, string target_type, int? target_id)
        {
            this.credential_id = credential_id;
            this.name = name;
            this.credential_identity = credential_identity;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.target_type = target_type;
            this.target_id = target_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { credential_id, name, credential_identity, create_date, modify_date, target_type, target_id };
        }

        public override void SetItemArray(object[] items)
        {
            credential_id = (int)items[0];
            name = (string)items[1];
            credential_identity = (string)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            target_type = (string)items[5];
            target_id = (int?)items[6];
        }
    }

    [SqlView("Z0", "service_queues")]
    public partial class service_queues : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("max_readers", 12), SqlTypeFacets("smallint", true)]
        public short? max_readers
        {
            get;
            set;
        }

        [SqlColumn("activation_procedure", 13), SqlTypeFacets("nvarchar", true)]
        public string activation_procedure
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 14), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_activation_enabled", 15), SqlTypeFacets("bit", false)]
        public bool is_activation_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_receive_enabled", 16), SqlTypeFacets("bit", false)]
        public bool is_receive_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_enqueue_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_enqueue_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_retention_enabled", 18), SqlTypeFacets("bit", false)]
        public bool is_retention_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_poison_message_handling_enabled", 19), SqlTypeFacets("bit", true)]
        public bool? is_poison_message_handling_enabled
        {
            get;
            set;
        }

        public service_queues()
        {
        }

        public service_queues(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_readers = (short?)items[12];
            activation_procedure = (string)items[13];
            execute_as_principal_id = (int?)items[14];
            is_activation_enabled = (bool)items[15];
            is_receive_enabled = (bool)items[16];
            is_enqueue_enabled = (bool)items[17];
            is_retention_enabled = (bool)items[18];
            is_poison_message_handling_enabled = (bool?)items[19];
        }

        public service_queues(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, short? max_readers, string activation_procedure, int? execute_as_principal_id, bool is_activation_enabled, bool is_receive_enabled, bool is_enqueue_enabled, bool is_retention_enabled, bool? is_poison_message_handling_enabled)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.max_readers = max_readers;
            this.activation_procedure = activation_procedure;
            this.execute_as_principal_id = execute_as_principal_id;
            this.is_activation_enabled = is_activation_enabled;
            this.is_receive_enabled = is_receive_enabled;
            this.is_enqueue_enabled = is_enqueue_enabled;
            this.is_retention_enabled = is_retention_enabled;
            this.is_poison_message_handling_enabled = is_poison_message_handling_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, max_readers, activation_procedure, execute_as_principal_id, is_activation_enabled, is_receive_enabled, is_enqueue_enabled, is_retention_enabled, is_poison_message_handling_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_readers = (short?)items[12];
            activation_procedure = (string)items[13];
            execute_as_principal_id = (int?)items[14];
            is_activation_enabled = (bool)items[15];
            is_receive_enabled = (bool)items[16];
            is_enqueue_enabled = (bool)items[17];
            is_retention_enabled = (bool)items[18];
            is_poison_message_handling_enabled = (bool?)items[19];
        }
    }

    [SqlView("Z0", "crypt_properties")]
    public partial class crypt_properties : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 3), SqlTypeFacets("varbinary", false)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("crypt_type", 4), SqlTypeFacets("char", false)]
        public string crypt_type
        {
            get;
            set;
        }

        [SqlColumn("crypt_type_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string crypt_type_desc
        {
            get;
            set;
        }

        [SqlColumn("crypt_property", 6), SqlTypeFacets("varbinary", false)]
        public Byte[] crypt_property
        {
            get;
            set;
        }

        public crypt_properties()
        {
        }

        public crypt_properties(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            thumbprint = (Byte[])items[3];
            crypt_type = (string)items[4];
            crypt_type_desc = (string)items[5];
            crypt_property = (Byte[])items[6];
        }

        public crypt_properties(byte @class, string class_desc, int major_id, Byte[] thumbprint, string crypt_type, string crypt_type_desc, Byte[] crypt_property)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.thumbprint = thumbprint;
            this.crypt_type = crypt_type;
            this.crypt_type_desc = crypt_type_desc;
            this.crypt_property = crypt_property;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, thumbprint, crypt_type, crypt_type_desc, crypt_property };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            thumbprint = (Byte[])items[3];
            crypt_type = (string)items[4];
            crypt_type_desc = (string)items[5];
            crypt_property = (Byte[])items[6];
        }
    }

    [SqlView("Z0", "services")]
    public partial class services : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_id", 1), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("service_queue_id", 3), SqlTypeFacets("int", false)]
        public int service_queue_id
        {
            get;
            set;
        }

        public services()
        {
        }

        public services(object[] items)
        {
            name = (string)items[0];
            service_id = (int)items[1];
            principal_id = (int?)items[2];
            service_queue_id = (int)items[3];
        }

        public services(string name, int service_id, int? principal_id, int service_queue_id)
        {
            this.name = name;
            this.service_id = service_id;
            this.principal_id = principal_id;
            this.service_queue_id = service_queue_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, service_id, principal_id, service_queue_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            service_id = (int)items[1];
            principal_id = (int?)items[2];
            service_queue_id = (int)items[3];
        }
    }

    [SqlView("Z0", "cryptographic_providers")]
    public partial class cryptographic_providers : SqlViewProxy
    {
        [SqlColumn("provider_id", 0), SqlTypeFacets("int", false)]
        public int provider_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? guid
        {
            get;
            set;
        }

        [SqlColumn("version", 3), SqlTypeFacets("nvarchar", true)]
        public string version
        {
            get;
            set;
        }

        [SqlColumn("dll_path", 4), SqlTypeFacets("nvarchar", true)]
        public string dll_path
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 5), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        public cryptographic_providers()
        {
        }

        public cryptographic_providers(object[] items)
        {
            provider_id = (int)items[0];
            name = (string)items[1];
            guid = (Guid?)items[2];
            version = (string)items[3];
            dll_path = (string)items[4];
            is_enabled = (bool)items[5];
        }

        public cryptographic_providers(int provider_id, string name, Guid? guid, string version, string dll_path, bool is_enabled)
        {
            this.provider_id = provider_id;
            this.name = name;
            this.guid = guid;
            this.version = version;
            this.dll_path = dll_path;
            this.is_enabled = is_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { provider_id, name, guid, version, dll_path, is_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            provider_id = (int)items[0];
            name = (string)items[1];
            guid = (Guid?)items[2];
            version = (string)items[3];
            dll_path = (string)items[4];
            is_enabled = (bool)items[5];
        }
    }

    [SqlView("Z0", "soap_endpoints")]
    public partial class soap_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("is_sql_language_enabled", 10), SqlTypeFacets("bit", false)]
        public bool is_sql_language_enabled
        {
            get;
            set;
        }

        [SqlColumn("wsdl_generator_procedure", 11), SqlTypeFacets("nvarchar", true)]
        public string wsdl_generator_procedure
        {
            get;
            set;
        }

        [SqlColumn("default_database", 12), SqlTypeFacets("sysname", true)]
        public string default_database
        {
            get;
            set;
        }

        [SqlColumn("default_namespace", 13), SqlTypeFacets("nvarchar", true)]
        public string default_namespace
        {
            get;
            set;
        }

        [SqlColumn("default_result_schema", 14), SqlTypeFacets("tinyint", true)]
        public byte? default_result_schema
        {
            get;
            set;
        }

        [SqlColumn("default_result_schema_desc", 15), SqlTypeFacets("nvarchar", true)]
        public string default_result_schema_desc
        {
            get;
            set;
        }

        [SqlColumn("is_xml_charset_enforced", 16), SqlTypeFacets("bit", false)]
        public bool is_xml_charset_enforced
        {
            get;
            set;
        }

        [SqlColumn("is_session_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_session_enabled
        {
            get;
            set;
        }

        [SqlColumn("session_timeout", 18), SqlTypeFacets("int", false)]
        public int session_timeout
        {
            get;
            set;
        }

        [SqlColumn("login_type", 19), SqlTypeFacets("nvarchar", true)]
        public string login_type
        {
            get;
            set;
        }

        [SqlColumn("header_limit", 20), SqlTypeFacets("int", false)]
        public int header_limit
        {
            get;
            set;
        }

        public soap_endpoints()
        {
        }

        public soap_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_sql_language_enabled = (bool)items[10];
            wsdl_generator_procedure = (string)items[11];
            default_database = (string)items[12];
            default_namespace = (string)items[13];
            default_result_schema = (byte?)items[14];
            default_result_schema_desc = (string)items[15];
            is_xml_charset_enforced = (bool)items[16];
            is_session_enabled = (bool)items[17];
            session_timeout = (int)items[18];
            login_type = (string)items[19];
            header_limit = (int)items[20];
        }

        public soap_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, bool is_sql_language_enabled, string wsdl_generator_procedure, string default_database, string default_namespace, byte? default_result_schema, string default_result_schema_desc, bool is_xml_charset_enforced, bool is_session_enabled, int session_timeout, string login_type, int header_limit)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.is_sql_language_enabled = is_sql_language_enabled;
            this.wsdl_generator_procedure = wsdl_generator_procedure;
            this.default_database = default_database;
            this.default_namespace = default_namespace;
            this.default_result_schema = default_result_schema;
            this.default_result_schema_desc = default_result_schema_desc;
            this.is_xml_charset_enforced = is_xml_charset_enforced;
            this.is_session_enabled = is_session_enabled;
            this.session_timeout = session_timeout;
            this.login_type = login_type;
            this.header_limit = header_limit;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, is_sql_language_enabled, wsdl_generator_procedure, default_database, default_namespace, default_result_schema, default_result_schema_desc, is_xml_charset_enforced, is_session_enabled, session_timeout, login_type, header_limit };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_sql_language_enabled = (bool)items[10];
            wsdl_generator_procedure = (string)items[11];
            default_database = (string)items[12];
            default_namespace = (string)items[13];
            default_result_schema = (byte?)items[14];
            default_result_schema_desc = (string)items[15];
            is_xml_charset_enforced = (bool)items[16];
            is_session_enabled = (bool)items[17];
            session_timeout = (int)items[18];
            login_type = (string)items[19];
            header_limit = (int)items[20];
        }
    }

    [SqlView("Z0", "data_spaces")]
    public partial class data_spaces : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", false)]
        public bool is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        public data_spaces()
        {
        }

        public data_spaces(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool)items[4];
            is_system = (bool?)items[5];
        }

        public data_spaces(string name, int data_space_id, string type, string type_desc, bool is_default, bool? is_system)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool)items[4];
            is_system = (bool?)items[5];
        }
    }

    [SqlView("Z0", "sql_dependencies")]
    public partial class sql_dependencies : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("object_id", 2), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_major_id", 4), SqlTypeFacets("int", false)]
        public int referenced_major_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_id", 5), SqlTypeFacets("int", false)]
        public int referenced_minor_id
        {
            get;
            set;
        }

        [SqlColumn("is_selected", 6), SqlTypeFacets("bit", false)]
        public bool is_selected
        {
            get;
            set;
        }

        [SqlColumn("is_updated", 7), SqlTypeFacets("bit", false)]
        public bool is_updated
        {
            get;
            set;
        }

        [SqlColumn("is_select_all", 8), SqlTypeFacets("bit", false)]
        public bool is_select_all
        {
            get;
            set;
        }

        public sql_dependencies()
        {
        }

        public sql_dependencies(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            object_id = (int)items[2];
            column_id = (int)items[3];
            referenced_major_id = (int)items[4];
            referenced_minor_id = (int)items[5];
            is_selected = (bool)items[6];
            is_updated = (bool)items[7];
            is_select_all = (bool)items[8];
        }

        public sql_dependencies(byte @class, string class_desc, int object_id, int column_id, int referenced_major_id, int referenced_minor_id, bool is_selected, bool is_updated, bool is_select_all)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.object_id = object_id;
            this.column_id = column_id;
            this.referenced_major_id = referenced_major_id;
            this.referenced_minor_id = referenced_minor_id;
            this.is_selected = is_selected;
            this.is_updated = is_updated;
            this.is_select_all = is_select_all;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, object_id, column_id, referenced_major_id, referenced_minor_id, is_selected, is_updated, is_select_all };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            object_id = (int)items[2];
            column_id = (int)items[3];
            referenced_major_id = (int)items[4];
            referenced_minor_id = (int)items[5];
            is_selected = (bool)items[6];
            is_updated = (bool)items[7];
            is_select_all = (bool)items[8];
        }
    }

    [SqlView("Z0", "database_audit_specification_details")]
    public partial class database_audit_specification_details : SqlViewProxy
    {
        [SqlColumn("database_specification_id", 0), SqlTypeFacets("int", false)]
        public int database_specification_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_id", 1), SqlTypeFacets("char", false)]
        public string audit_action_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_name", 2), SqlTypeFacets("nvarchar", true)]
        public string audit_action_name
        {
            get;
            set;
        }

        [SqlColumn("class", 3), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 5), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 6), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("audited_principal_id", 7), SqlTypeFacets("int", false)]
        public int audited_principal_id
        {
            get;
            set;
        }

        [SqlColumn("audited_result", 8), SqlTypeFacets("nvarchar", true)]
        public string audited_result
        {
            get;
            set;
        }

        [SqlColumn("is_group", 9), SqlTypeFacets("bit", true)]
        public bool? is_group
        {
            get;
            set;
        }

        public database_audit_specification_details()
        {
        }

        public database_audit_specification_details(object[] items)
        {
            database_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }

        public database_audit_specification_details(int database_specification_id, string audit_action_id, string audit_action_name, byte @class, string class_desc, int major_id, int minor_id, int audited_principal_id, string audited_result, bool? is_group)
        {
            this.database_specification_id = database_specification_id;
            this.audit_action_id = audit_action_id;
            this.audit_action_name = audit_action_name;
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.audited_principal_id = audited_principal_id;
            this.audited_result = audited_result;
            this.is_group = is_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_specification_id, audit_action_id, audit_action_name, @class, class_desc, major_id, minor_id, audited_principal_id, audited_result, is_group };
        }

        public override void SetItemArray(object[] items)
        {
            database_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }
    }

    [SqlView("Z0", "sql_expression_dependencies")]
    public partial class sql_expression_dependencies : SqlViewProxy
    {
        [SqlColumn("referencing_id", 0), SqlTypeFacets("int", false)]
        public int referencing_id
        {
            get;
            set;
        }

        [SqlColumn("referencing_minor_id", 1), SqlTypeFacets("int", false)]
        public int referencing_minor_id
        {
            get;
            set;
        }

        [SqlColumn("referencing_class", 2), SqlTypeFacets("tinyint", true)]
        public byte? referencing_class
        {
            get;
            set;
        }

        [SqlColumn("referencing_class_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string referencing_class_desc
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound_reference", 4), SqlTypeFacets("bit", false)]
        public bool is_schema_bound_reference
        {
            get;
            set;
        }

        [SqlColumn("referenced_class", 5), SqlTypeFacets("tinyint", true)]
        public byte? referenced_class
        {
            get;
            set;
        }

        [SqlColumn("referenced_class_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string referenced_class_desc
        {
            get;
            set;
        }

        [SqlColumn("referenced_server_name", 7), SqlTypeFacets("nvarchar", true)]
        public string referenced_server_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_database_name", 8), SqlTypeFacets("nvarchar", true)]
        public string referenced_database_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_schema_name", 9), SqlTypeFacets("nvarchar", true)]
        public string referenced_schema_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_entity_name", 10), SqlTypeFacets("nvarchar", true)]
        public string referenced_entity_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_id", 11), SqlTypeFacets("int", true)]
        public int? referenced_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_id", 12), SqlTypeFacets("int", false)]
        public int referenced_minor_id
        {
            get;
            set;
        }

        [SqlColumn("is_caller_dependent", 13), SqlTypeFacets("bit", false)]
        public bool is_caller_dependent
        {
            get;
            set;
        }

        [SqlColumn("is_ambiguous", 14), SqlTypeFacets("bit", false)]
        public bool is_ambiguous
        {
            get;
            set;
        }

        public sql_expression_dependencies()
        {
        }

        public sql_expression_dependencies(object[] items)
        {
            referencing_id = (int)items[0];
            referencing_minor_id = (int)items[1];
            referencing_class = (byte?)items[2];
            referencing_class_desc = (string)items[3];
            is_schema_bound_reference = (bool)items[4];
            referenced_class = (byte?)items[5];
            referenced_class_desc = (string)items[6];
            referenced_server_name = (string)items[7];
            referenced_database_name = (string)items[8];
            referenced_schema_name = (string)items[9];
            referenced_entity_name = (string)items[10];
            referenced_id = (int?)items[11];
            referenced_minor_id = (int)items[12];
            is_caller_dependent = (bool)items[13];
            is_ambiguous = (bool)items[14];
        }

        public sql_expression_dependencies(int referencing_id, int referencing_minor_id, byte? referencing_class, string referencing_class_desc, bool is_schema_bound_reference, byte? referenced_class, string referenced_class_desc, string referenced_server_name, string referenced_database_name, string referenced_schema_name, string referenced_entity_name, int? referenced_id, int referenced_minor_id, bool is_caller_dependent, bool is_ambiguous)
        {
            this.referencing_id = referencing_id;
            this.referencing_minor_id = referencing_minor_id;
            this.referencing_class = referencing_class;
            this.referencing_class_desc = referencing_class_desc;
            this.is_schema_bound_reference = is_schema_bound_reference;
            this.referenced_class = referenced_class;
            this.referenced_class_desc = referenced_class_desc;
            this.referenced_server_name = referenced_server_name;
            this.referenced_database_name = referenced_database_name;
            this.referenced_schema_name = referenced_schema_name;
            this.referenced_entity_name = referenced_entity_name;
            this.referenced_id = referenced_id;
            this.referenced_minor_id = referenced_minor_id;
            this.is_caller_dependent = is_caller_dependent;
            this.is_ambiguous = is_ambiguous;
        }

        public override object[] GetItemArray()
        {
            return new object[] { referencing_id, referencing_minor_id, referencing_class, referencing_class_desc, is_schema_bound_reference, referenced_class, referenced_class_desc, referenced_server_name, referenced_database_name, referenced_schema_name, referenced_entity_name, referenced_id, referenced_minor_id, is_caller_dependent, is_ambiguous };
        }

        public override void SetItemArray(object[] items)
        {
            referencing_id = (int)items[0];
            referencing_minor_id = (int)items[1];
            referencing_class = (byte?)items[2];
            referencing_class_desc = (string)items[3];
            is_schema_bound_reference = (bool)items[4];
            referenced_class = (byte?)items[5];
            referenced_class_desc = (string)items[6];
            referenced_server_name = (string)items[7];
            referenced_database_name = (string)items[8];
            referenced_schema_name = (string)items[9];
            referenced_entity_name = (string)items[10];
            referenced_id = (int?)items[11];
            referenced_minor_id = (int)items[12];
            is_caller_dependent = (bool)items[13];
            is_ambiguous = (bool)items[14];
        }
    }

    [SqlView("Z0", "database_audit_specifications")]
    public partial class database_audit_specifications : SqlViewProxy
    {
        [SqlColumn("database_specification_id", 0), SqlTypeFacets("int", false)]
        public int database_specification_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        public database_audit_specifications()
        {
        }

        public database_audit_specifications(object[] items)
        {
            database_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }

        public database_audit_specifications(int database_specification_id, string name, DateTime create_date, DateTime modify_date, Guid? audit_guid, bool? is_state_enabled)
        {
            this.database_specification_id = database_specification_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.audit_guid = audit_guid;
            this.is_state_enabled = is_state_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_specification_id, name, create_date, modify_date, audit_guid, is_state_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            database_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }
    }

    [SqlView("Z0", "sql_logins")]
    public partial class sql_logins : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("default_database_name", 8), SqlTypeFacets("sysname", true)]
        public string default_database_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 9), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 10), SqlTypeFacets("int", true)]
        public int? credential_id
        {
            get;
            set;
        }

        [SqlColumn("is_policy_checked", 11), SqlTypeFacets("bit", true)]
        public bool? is_policy_checked
        {
            get;
            set;
        }

        [SqlColumn("is_expiration_checked", 12), SqlTypeFacets("bit", true)]
        public bool? is_expiration_checked
        {
            get;
            set;
        }

        [SqlColumn("password_hash", 13), SqlTypeFacets("varbinary", true)]
        public Byte[] password_hash
        {
            get;
            set;
        }

        public sql_logins()
        {
        }

        public sql_logins(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            is_policy_checked = (bool?)items[11];
            is_expiration_checked = (bool?)items[12];
            password_hash = (Byte[])items[13];
        }

        public sql_logins(string name, int principal_id, Byte[] sid, string type, string type_desc, bool? is_disabled, DateTime create_date, DateTime modify_date, string default_database_name, string default_language_name, int? credential_id, bool? is_policy_checked, bool? is_expiration_checked, Byte[] password_hash)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.sid = sid;
            this.type = type;
            this.type_desc = type_desc;
            this.is_disabled = is_disabled;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.default_database_name = default_database_name;
            this.default_language_name = default_language_name;
            this.credential_id = credential_id;
            this.is_policy_checked = is_policy_checked;
            this.is_expiration_checked = is_expiration_checked;
            this.password_hash = password_hash;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, sid, type, type_desc, is_disabled, create_date, modify_date, default_database_name, default_language_name, credential_id, is_policy_checked, is_expiration_checked, password_hash };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            is_policy_checked = (bool?)items[11];
            is_expiration_checked = (bool?)items[12];
            password_hash = (Byte[])items[13];
        }
    }

    [SqlView("Z0", "database_credentials")]
    public partial class database_credentials : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 2), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        [SqlColumn("credential_identity", 3), SqlTypeFacets("nvarchar", true)]
        public string credential_identity
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("target_type", 6), SqlTypeFacets("nvarchar", true)]
        public string target_type
        {
            get;
            set;
        }

        [SqlColumn("target_id", 7), SqlTypeFacets("int", true)]
        public int? target_id
        {
            get;
            set;
        }

        public database_credentials()
        {
        }

        public database_credentials(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            credential_id = (int)items[2];
            credential_identity = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
            target_type = (string)items[6];
            target_id = (int?)items[7];
        }

        public database_credentials(string name, int principal_id, int credential_id, string credential_identity, DateTime create_date, DateTime modify_date, string target_type, int? target_id)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.credential_id = credential_id;
            this.credential_identity = credential_identity;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.target_type = target_type;
            this.target_id = target_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, credential_id, credential_identity, create_date, modify_date, target_type, target_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            credential_id = (int)items[2];
            credential_identity = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
            target_type = (string)items[6];
            target_id = (int?)items[7];
        }
    }

    [SqlView("Z0", "sql_modules")]
    public partial class sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", true)]
        public bool? is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", true)]
        public bool? is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", true)]
        public bool? uses_native_compilation
        {
            get;
            set;
        }

        public sql_modules()
        {
        }

        public sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }

        public sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, bool? is_schema_bound, bool? uses_database_collation, bool? is_recompiled, bool? null_on_null_input, int? execute_as_principal_id, bool? uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }
    }

    [SqlView("Z0", "database_files")]
    public partial class database_files : SqlViewProxy
    {
        [SqlColumn("file_id", 0), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("file_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? file_guid
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 4), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("name", 5), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("physical_name", 6), SqlTypeFacets("nvarchar", true)]
        public string physical_name
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("size", 9), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("max_size", 10), SqlTypeFacets("int", false)]
        public int max_size
        {
            get;
            set;
        }

        [SqlColumn("growth", 11), SqlTypeFacets("int", false)]
        public int growth
        {
            get;
            set;
        }

        [SqlColumn("is_media_read_only", 12), SqlTypeFacets("bit", false)]
        public bool is_media_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 13), SqlTypeFacets("bit", false)]
        public bool is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 14), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_percent_growth", 15), SqlTypeFacets("bit", false)]
        public bool is_percent_growth
        {
            get;
            set;
        }

        [SqlColumn("is_name_reserved", 16), SqlTypeFacets("bit", false)]
        public bool is_name_reserved
        {
            get;
            set;
        }

        [SqlColumn("is_persistent_log_buffer", 17), SqlTypeFacets("bit", false)]
        public bool is_persistent_log_buffer
        {
            get;
            set;
        }

        [SqlColumn("create_lsn", 18), SqlTypeFacets("numeric", true)]
        public decimal? create_lsn
        {
            get;
            set;
        }

        [SqlColumn("drop_lsn", 19), SqlTypeFacets("numeric", true)]
        public decimal? drop_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_only_lsn", 20), SqlTypeFacets("numeric", true)]
        public decimal? read_only_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_write_lsn", 21), SqlTypeFacets("numeric", true)]
        public decimal? read_write_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_lsn", 22), SqlTypeFacets("numeric", true)]
        public decimal? differential_base_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_guid", 23), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? differential_base_guid
        {
            get;
            set;
        }

        [SqlColumn("differential_base_time", 24), SqlTypeFacets("datetime", true)]
        public DateTime? differential_base_time
        {
            get;
            set;
        }

        [SqlColumn("redo_start_lsn", 25), SqlTypeFacets("numeric", true)]
        public decimal? redo_start_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_start_fork_guid", 26), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_start_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("redo_target_lsn", 27), SqlTypeFacets("numeric", true)]
        public decimal? redo_target_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_target_fork_guid", 28), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_target_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("backup_lsn", 29), SqlTypeFacets("numeric", true)]
        public decimal? backup_lsn
        {
            get;
            set;
        }

        public database_files()
        {
        }

        public database_files(object[] items)
        {
            file_id = (int)items[0];
            file_guid = (Guid?)items[1];
            type = (byte)items[2];
            type_desc = (string)items[3];
            data_space_id = (int)items[4];
            name = (string)items[5];
            physical_name = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            size = (int)items[9];
            max_size = (int)items[10];
            growth = (int)items[11];
            is_media_read_only = (bool)items[12];
            is_read_only = (bool)items[13];
            is_sparse = (bool)items[14];
            is_percent_growth = (bool)items[15];
            is_name_reserved = (bool)items[16];
            is_persistent_log_buffer = (bool)items[17];
            create_lsn = (decimal?)items[18];
            drop_lsn = (decimal?)items[19];
            read_only_lsn = (decimal?)items[20];
            read_write_lsn = (decimal?)items[21];
            differential_base_lsn = (decimal?)items[22];
            differential_base_guid = (Guid?)items[23];
            differential_base_time = (DateTime?)items[24];
            redo_start_lsn = (decimal?)items[25];
            redo_start_fork_guid = (Guid?)items[26];
            redo_target_lsn = (decimal?)items[27];
            redo_target_fork_guid = (Guid?)items[28];
            backup_lsn = (decimal?)items[29];
        }

        public database_files(int file_id, Guid? file_guid, byte type, string type_desc, int data_space_id, string name, string physical_name, byte? state, string state_desc, int size, int max_size, int growth, bool is_media_read_only, bool is_read_only, bool is_sparse, bool is_percent_growth, bool is_name_reserved, bool is_persistent_log_buffer, decimal? create_lsn, decimal? drop_lsn, decimal? read_only_lsn, decimal? read_write_lsn, decimal? differential_base_lsn, Guid? differential_base_guid, DateTime? differential_base_time, decimal? redo_start_lsn, Guid? redo_start_fork_guid, decimal? redo_target_lsn, Guid? redo_target_fork_guid, decimal? backup_lsn)
        {
            this.file_id = file_id;
            this.file_guid = file_guid;
            this.type = type;
            this.type_desc = type_desc;
            this.data_space_id = data_space_id;
            this.name = name;
            this.physical_name = physical_name;
            this.state = state;
            this.state_desc = state_desc;
            this.size = size;
            this.max_size = max_size;
            this.growth = growth;
            this.is_media_read_only = is_media_read_only;
            this.is_read_only = is_read_only;
            this.is_sparse = is_sparse;
            this.is_percent_growth = is_percent_growth;
            this.is_name_reserved = is_name_reserved;
            this.is_persistent_log_buffer = is_persistent_log_buffer;
            this.create_lsn = create_lsn;
            this.drop_lsn = drop_lsn;
            this.read_only_lsn = read_only_lsn;
            this.read_write_lsn = read_write_lsn;
            this.differential_base_lsn = differential_base_lsn;
            this.differential_base_guid = differential_base_guid;
            this.differential_base_time = differential_base_time;
            this.redo_start_lsn = redo_start_lsn;
            this.redo_start_fork_guid = redo_start_fork_guid;
            this.redo_target_lsn = redo_target_lsn;
            this.redo_target_fork_guid = redo_target_fork_guid;
            this.backup_lsn = backup_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { file_id, file_guid, type, type_desc, data_space_id, name, physical_name, state, state_desc, size, max_size, growth, is_media_read_only, is_read_only, is_sparse, is_percent_growth, is_name_reserved, is_persistent_log_buffer, create_lsn, drop_lsn, read_only_lsn, read_write_lsn, differential_base_lsn, differential_base_guid, differential_base_time, redo_start_lsn, redo_start_fork_guid, redo_target_lsn, redo_target_fork_guid, backup_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            file_id = (int)items[0];
            file_guid = (Guid?)items[1];
            type = (byte)items[2];
            type_desc = (string)items[3];
            data_space_id = (int)items[4];
            name = (string)items[5];
            physical_name = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            size = (int)items[9];
            max_size = (int)items[10];
            growth = (int)items[11];
            is_media_read_only = (bool)items[12];
            is_read_only = (bool)items[13];
            is_sparse = (bool)items[14];
            is_percent_growth = (bool)items[15];
            is_name_reserved = (bool)items[16];
            is_persistent_log_buffer = (bool)items[17];
            create_lsn = (decimal?)items[18];
            drop_lsn = (decimal?)items[19];
            read_only_lsn = (decimal?)items[20];
            read_write_lsn = (decimal?)items[21];
            differential_base_lsn = (decimal?)items[22];
            differential_base_guid = (Guid?)items[23];
            differential_base_time = (DateTime?)items[24];
            redo_start_lsn = (decimal?)items[25];
            redo_start_fork_guid = (Guid?)items[26];
            redo_target_lsn = (decimal?)items[27];
            redo_target_fork_guid = (Guid?)items[28];
            backup_lsn = (decimal?)items[29];
        }
    }

    [SqlView("Z0", "stats")]
    public partial class stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 2), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("auto_created", 3), SqlTypeFacets("bit", true)]
        public bool? auto_created
        {
            get;
            set;
        }

        [SqlColumn("user_created", 4), SqlTypeFacets("bit", true)]
        public bool? user_created
        {
            get;
            set;
        }

        [SqlColumn("no_recompute", 5), SqlTypeFacets("bit", true)]
        public bool? no_recompute
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 6), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 7), SqlTypeFacets("nvarchar", true)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("is_temporary", 8), SqlTypeFacets("bit", true)]
        public bool? is_temporary
        {
            get;
            set;
        }

        [SqlColumn("is_incremental", 9), SqlTypeFacets("bit", true)]
        public bool? is_incremental
        {
            get;
            set;
        }

        public stats()
        {
        }

        public stats(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            stats_id = (int)items[2];
            auto_created = (bool?)items[3];
            user_created = (bool?)items[4];
            no_recompute = (bool?)items[5];
            has_filter = (bool?)items[6];
            filter_definition = (string)items[7];
            is_temporary = (bool?)items[8];
            is_incremental = (bool?)items[9];
        }

        public stats(int object_id, string name, int stats_id, bool? auto_created, bool? user_created, bool? no_recompute, bool? has_filter, string filter_definition, bool? is_temporary, bool? is_incremental)
        {
            this.object_id = object_id;
            this.name = name;
            this.stats_id = stats_id;
            this.auto_created = auto_created;
            this.user_created = user_created;
            this.no_recompute = no_recompute;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.is_temporary = is_temporary;
            this.is_incremental = is_incremental;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, stats_id, auto_created, user_created, no_recompute, has_filter, filter_definition, is_temporary, is_incremental };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            stats_id = (int)items[2];
            auto_created = (bool?)items[3];
            user_created = (bool?)items[4];
            no_recompute = (bool?)items[5];
            has_filter = (bool?)items[6];
            filter_definition = (string)items[7];
            is_temporary = (bool?)items[8];
            is_incremental = (bool?)items[9];
        }
    }

    [SqlView("Z0", "database_filestream_options")]
    public partial class database_filestream_options : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("non_transacted_access", 1), SqlTypeFacets("tinyint", false)]
        public byte non_transacted_access
        {
            get;
            set;
        }

        [SqlColumn("non_transacted_access_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string non_transacted_access_desc
        {
            get;
            set;
        }

        [SqlColumn("directory_name", 3), SqlTypeFacets("nvarchar", true)]
        public string directory_name
        {
            get;
            set;
        }

        public database_filestream_options()
        {
        }

        public database_filestream_options(object[] items)
        {
            database_id = (int)items[0];
            non_transacted_access = (byte)items[1];
            non_transacted_access_desc = (string)items[2];
            directory_name = (string)items[3];
        }

        public database_filestream_options(int database_id, byte non_transacted_access, string non_transacted_access_desc, string directory_name)
        {
            this.database_id = database_id;
            this.non_transacted_access = non_transacted_access;
            this.non_transacted_access_desc = non_transacted_access_desc;
            this.directory_name = directory_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, non_transacted_access, non_transacted_access_desc, directory_name };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            non_transacted_access = (byte)items[1];
            non_transacted_access_desc = (string)items[2];
            directory_name = (string)items[3];
        }
    }

    [SqlView("Z0", "stats_columns")]
    public partial class stats_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 1), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("stats_column_id", 2), SqlTypeFacets("int", true)]
        public int? stats_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", true)]
        public int? column_id
        {
            get;
            set;
        }

        public stats_columns()
        {
        }

        public stats_columns(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            stats_column_id = (int?)items[2];
            column_id = (int?)items[3];
        }

        public stats_columns(int object_id, int stats_id, int? stats_column_id, int? column_id)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
            this.stats_column_id = stats_column_id;
            this.column_id = column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id, stats_column_id, column_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            stats_column_id = (int?)items[2];
            column_id = (int?)items[3];
        }
    }

    [SqlView("Z0", "database_mirroring")]
    public partial class database_mirroring : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("mirroring_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? mirroring_guid
        {
            get;
            set;
        }

        [SqlColumn("mirroring_state", 2), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_state
        {
            get;
            set;
        }

        [SqlColumn("mirroring_state_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string mirroring_state_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role", 4), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_role
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string mirroring_role_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role_sequence", 6), SqlTypeFacets("int", true)]
        public int? mirroring_role_sequence
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_level", 7), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_safety_level
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_level_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string mirroring_safety_level_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_sequence", 9), SqlTypeFacets("int", true)]
        public int? mirroring_safety_sequence
        {
            get;
            set;
        }

        [SqlColumn("mirroring_partner_name", 10), SqlTypeFacets("nvarchar", true)]
        public string mirroring_partner_name
        {
            get;
            set;
        }

        [SqlColumn("mirroring_partner_instance", 11), SqlTypeFacets("nvarchar", true)]
        public string mirroring_partner_instance
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_name", 12), SqlTypeFacets("nvarchar", true)]
        public string mirroring_witness_name
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_state", 13), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_witness_state
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_state_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string mirroring_witness_state_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_failover_lsn", 15), SqlTypeFacets("numeric", true)]
        public decimal? mirroring_failover_lsn
        {
            get;
            set;
        }

        [SqlColumn("mirroring_connection_timeout", 16), SqlTypeFacets("int", true)]
        public int? mirroring_connection_timeout
        {
            get;
            set;
        }

        [SqlColumn("mirroring_redo_queue", 17), SqlTypeFacets("int", true)]
        public int? mirroring_redo_queue
        {
            get;
            set;
        }

        [SqlColumn("mirroring_redo_queue_type", 18), SqlTypeFacets("nvarchar", true)]
        public string mirroring_redo_queue_type
        {
            get;
            set;
        }

        [SqlColumn("mirroring_end_of_log_lsn", 19), SqlTypeFacets("numeric", true)]
        public decimal? mirroring_end_of_log_lsn
        {
            get;
            set;
        }

        [SqlColumn("mirroring_replication_lsn", 20), SqlTypeFacets("numeric", true)]
        public decimal? mirroring_replication_lsn
        {
            get;
            set;
        }

        public database_mirroring()
        {
        }

        public database_mirroring(object[] items)
        {
            database_id = (int)items[0];
            mirroring_guid = (Guid?)items[1];
            mirroring_state = (byte?)items[2];
            mirroring_state_desc = (string)items[3];
            mirroring_role = (byte?)items[4];
            mirroring_role_desc = (string)items[5];
            mirroring_role_sequence = (int?)items[6];
            mirroring_safety_level = (byte?)items[7];
            mirroring_safety_level_desc = (string)items[8];
            mirroring_safety_sequence = (int?)items[9];
            mirroring_partner_name = (string)items[10];
            mirroring_partner_instance = (string)items[11];
            mirroring_witness_name = (string)items[12];
            mirroring_witness_state = (byte?)items[13];
            mirroring_witness_state_desc = (string)items[14];
            mirroring_failover_lsn = (decimal?)items[15];
            mirroring_connection_timeout = (int?)items[16];
            mirroring_redo_queue = (int?)items[17];
            mirroring_redo_queue_type = (string)items[18];
            mirroring_end_of_log_lsn = (decimal?)items[19];
            mirroring_replication_lsn = (decimal?)items[20];
        }

        public database_mirroring(int database_id, Guid? mirroring_guid, byte? mirroring_state, string mirroring_state_desc, byte? mirroring_role, string mirroring_role_desc, int? mirroring_role_sequence, byte? mirroring_safety_level, string mirroring_safety_level_desc, int? mirroring_safety_sequence, string mirroring_partner_name, string mirroring_partner_instance, string mirroring_witness_name, byte? mirroring_witness_state, string mirroring_witness_state_desc, decimal? mirroring_failover_lsn, int? mirroring_connection_timeout, int? mirroring_redo_queue, string mirroring_redo_queue_type, decimal? mirroring_end_of_log_lsn, decimal? mirroring_replication_lsn)
        {
            this.database_id = database_id;
            this.mirroring_guid = mirroring_guid;
            this.mirroring_state = mirroring_state;
            this.mirroring_state_desc = mirroring_state_desc;
            this.mirroring_role = mirroring_role;
            this.mirroring_role_desc = mirroring_role_desc;
            this.mirroring_role_sequence = mirroring_role_sequence;
            this.mirroring_safety_level = mirroring_safety_level;
            this.mirroring_safety_level_desc = mirroring_safety_level_desc;
            this.mirroring_safety_sequence = mirroring_safety_sequence;
            this.mirroring_partner_name = mirroring_partner_name;
            this.mirroring_partner_instance = mirroring_partner_instance;
            this.mirroring_witness_name = mirroring_witness_name;
            this.mirroring_witness_state = mirroring_witness_state;
            this.mirroring_witness_state_desc = mirroring_witness_state_desc;
            this.mirroring_failover_lsn = mirroring_failover_lsn;
            this.mirroring_connection_timeout = mirroring_connection_timeout;
            this.mirroring_redo_queue = mirroring_redo_queue;
            this.mirroring_redo_queue_type = mirroring_redo_queue_type;
            this.mirroring_end_of_log_lsn = mirroring_end_of_log_lsn;
            this.mirroring_replication_lsn = mirroring_replication_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, mirroring_guid, mirroring_state, mirroring_state_desc, mirroring_role, mirroring_role_desc, mirroring_role_sequence, mirroring_safety_level, mirroring_safety_level_desc, mirroring_safety_sequence, mirroring_partner_name, mirroring_partner_instance, mirroring_witness_name, mirroring_witness_state, mirroring_witness_state_desc, mirroring_failover_lsn, mirroring_connection_timeout, mirroring_redo_queue, mirroring_redo_queue_type, mirroring_end_of_log_lsn, mirroring_replication_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            mirroring_guid = (Guid?)items[1];
            mirroring_state = (byte?)items[2];
            mirroring_state_desc = (string)items[3];
            mirroring_role = (byte?)items[4];
            mirroring_role_desc = (string)items[5];
            mirroring_role_sequence = (int?)items[6];
            mirroring_safety_level = (byte?)items[7];
            mirroring_safety_level_desc = (string)items[8];
            mirroring_safety_sequence = (int?)items[9];
            mirroring_partner_name = (string)items[10];
            mirroring_partner_instance = (string)items[11];
            mirroring_witness_name = (string)items[12];
            mirroring_witness_state = (byte?)items[13];
            mirroring_witness_state_desc = (string)items[14];
            mirroring_failover_lsn = (decimal?)items[15];
            mirroring_connection_timeout = (int?)items[16];
            mirroring_redo_queue = (int?)items[17];
            mirroring_redo_queue_type = (string)items[18];
            mirroring_end_of_log_lsn = (decimal?)items[19];
            mirroring_replication_lsn = (decimal?)items[20];
        }
    }

    [SqlView("Z0", "symmetric_keys")]
    public partial class symmetric_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_id", 2), SqlTypeFacets("int", false)]
        public int symmetric_key_id
        {
            get;
            set;
        }

        [SqlColumn("key_length", 3), SqlTypeFacets("int", false)]
        public int key_length
        {
            get;
            set;
        }

        [SqlColumn("key_algorithm", 4), SqlTypeFacets("char", false)]
        public string key_algorithm
        {
            get;
            set;
        }

        [SqlColumn("algorithm_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("key_guid", 8), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? key_guid
        {
            get;
            set;
        }

        [SqlColumn("key_thumbprint", 9), SqlTypeFacets("sql_variant", true)]
        public Object key_thumbprint
        {
            get;
            set;
        }

        [SqlColumn("provider_type", 10), SqlTypeFacets("nvarchar", true)]
        public string provider_type
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_guid", 11), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? cryptographic_provider_guid
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_algid", 12), SqlTypeFacets("sql_variant", true)]
        public Object cryptographic_provider_algid
        {
            get;
            set;
        }

        public symmetric_keys()
        {
        }

        public symmetric_keys(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            symmetric_key_id = (int)items[2];
            key_length = (int)items[3];
            key_algorithm = (string)items[4];
            algorithm_desc = (string)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            key_guid = (Guid?)items[8];
            key_thumbprint = (Object)items[9];
            provider_type = (string)items[10];
            cryptographic_provider_guid = (Guid?)items[11];
            cryptographic_provider_algid = (Object)items[12];
        }

        public symmetric_keys(string name, int? principal_id, int symmetric_key_id, int key_length, string key_algorithm, string algorithm_desc, DateTime create_date, DateTime modify_date, Guid? key_guid, Object key_thumbprint, string provider_type, Guid? cryptographic_provider_guid, Object cryptographic_provider_algid)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.symmetric_key_id = symmetric_key_id;
            this.key_length = key_length;
            this.key_algorithm = key_algorithm;
            this.algorithm_desc = algorithm_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.key_guid = key_guid;
            this.key_thumbprint = key_thumbprint;
            this.provider_type = provider_type;
            this.cryptographic_provider_guid = cryptographic_provider_guid;
            this.cryptographic_provider_algid = cryptographic_provider_algid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, symmetric_key_id, key_length, key_algorithm, algorithm_desc, create_date, modify_date, key_guid, key_thumbprint, provider_type, cryptographic_provider_guid, cryptographic_provider_algid };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            symmetric_key_id = (int)items[2];
            key_length = (int)items[3];
            key_algorithm = (string)items[4];
            algorithm_desc = (string)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            key_guid = (Guid?)items[8];
            key_thumbprint = (Object)items[9];
            provider_type = (string)items[10];
            cryptographic_provider_guid = (Guid?)items[11];
            cryptographic_provider_algid = (Object)items[12];
        }
    }

    [SqlView("Z0", "database_mirroring_endpoints")]
    public partial class database_mirroring_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("role", 10), SqlTypeFacets("tinyint", true)]
        public byte? role
        {
            get;
            set;
        }

        [SqlColumn("role_desc", 11), SqlTypeFacets("nvarchar", true)]
        public string role_desc
        {
            get;
            set;
        }

        [SqlColumn("is_encryption_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_encryption_enabled
        {
            get;
            set;
        }

        [SqlColumn("connection_auth", 13), SqlTypeFacets("tinyint", false)]
        public byte connection_auth
        {
            get;
            set;
        }

        [SqlColumn("connection_auth_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string connection_auth_desc
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 15), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 16), SqlTypeFacets("tinyint", false)]
        public byte encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 17), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        public database_mirroring_endpoints()
        {
        }

        public database_mirroring_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            role = (byte?)items[10];
            role_desc = (string)items[11];
            is_encryption_enabled = (bool)items[12];
            connection_auth = (byte)items[13];
            connection_auth_desc = (string)items[14];
            certificate_id = (int)items[15];
            encryption_algorithm = (byte)items[16];
            encryption_algorithm_desc = (string)items[17];
        }

        public database_mirroring_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, byte? role, string role_desc, bool is_encryption_enabled, byte connection_auth, string connection_auth_desc, int certificate_id, byte encryption_algorithm, string encryption_algorithm_desc)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.role = role;
            this.role_desc = role_desc;
            this.is_encryption_enabled = is_encryption_enabled;
            this.connection_auth = connection_auth;
            this.connection_auth_desc = connection_auth_desc;
            this.certificate_id = certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, role, role_desc, is_encryption_enabled, connection_auth, connection_auth_desc, certificate_id, encryption_algorithm, encryption_algorithm_desc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            role = (byte?)items[10];
            role_desc = (string)items[11];
            is_encryption_enabled = (bool)items[12];
            connection_auth = (byte)items[13];
            connection_auth_desc = (string)items[14];
            certificate_id = (int)items[15];
            encryption_algorithm = (byte)items[16];
            encryption_algorithm_desc = (string)items[17];
        }
    }

    [SqlView("Z0", "synonyms")]
    public partial class synonyms : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("base_object_name", 12), SqlTypeFacets("nvarchar", true)]
        public string base_object_name
        {
            get;
            set;
        }

        public synonyms()
        {
        }

        public synonyms(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            base_object_name = (string)items[12];
        }

        public synonyms(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, string base_object_name)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.base_object_name = base_object_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, base_object_name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            base_object_name = (string)items[12];
        }
    }

    [SqlView("Z0", "database_mirroring_witnesses")]
    public partial class database_mirroring_witnesses : SqlViewProxy
    {
        [SqlColumn("database_name", 0), SqlTypeFacets("sysname", false)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("principal_server_name", 1), SqlTypeFacets("sysname", true)]
        public string principal_server_name
        {
            get;
            set;
        }

        [SqlColumn("mirror_server_name", 2), SqlTypeFacets("sysname", true)]
        public string mirror_server_name
        {
            get;
            set;
        }

        [SqlColumn("safety_level", 3), SqlTypeFacets("tinyint", false)]
        public byte safety_level
        {
            get;
            set;
        }

        [SqlColumn("safety_level_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string safety_level_desc
        {
            get;
            set;
        }

        [SqlColumn("safety_sequence_number", 5), SqlTypeFacets("int", false)]
        public int safety_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("role_sequence_number", 6), SqlTypeFacets("int", false)]
        public int role_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("mirroring_guid", 7), SqlTypeFacets("uniqueidentifier", false)]
        public Guid mirroring_guid
        {
            get;
            set;
        }

        [SqlColumn("family_guid", 8), SqlTypeFacets("uniqueidentifier", false)]
        public Guid family_guid
        {
            get;
            set;
        }

        [SqlColumn("is_suspended", 9), SqlTypeFacets("bit", true)]
        public bool? is_suspended
        {
            get;
            set;
        }

        [SqlColumn("is_suspended_sequence_number", 10), SqlTypeFacets("int", false)]
        public int is_suspended_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("partner_sync_state", 11), SqlTypeFacets("tinyint", true)]
        public byte? partner_sync_state
        {
            get;
            set;
        }

        [SqlColumn("partner_sync_state_desc", 12), SqlTypeFacets("nvarchar", true)]
        public string partner_sync_state_desc
        {
            get;
            set;
        }

        public database_mirroring_witnesses()
        {
        }

        public database_mirroring_witnesses(object[] items)
        {
            database_name = (string)items[0];
            principal_server_name = (string)items[1];
            mirror_server_name = (string)items[2];
            safety_level = (byte)items[3];
            safety_level_desc = (string)items[4];
            safety_sequence_number = (int)items[5];
            role_sequence_number = (int)items[6];
            mirroring_guid = (Guid)items[7];
            family_guid = (Guid)items[8];
            is_suspended = (bool?)items[9];
            is_suspended_sequence_number = (int)items[10];
            partner_sync_state = (byte?)items[11];
            partner_sync_state_desc = (string)items[12];
        }

        public database_mirroring_witnesses(string database_name, string principal_server_name, string mirror_server_name, byte safety_level, string safety_level_desc, int safety_sequence_number, int role_sequence_number, Guid mirroring_guid, Guid family_guid, bool? is_suspended, int is_suspended_sequence_number, byte? partner_sync_state, string partner_sync_state_desc)
        {
            this.database_name = database_name;
            this.principal_server_name = principal_server_name;
            this.mirror_server_name = mirror_server_name;
            this.safety_level = safety_level;
            this.safety_level_desc = safety_level_desc;
            this.safety_sequence_number = safety_sequence_number;
            this.role_sequence_number = role_sequence_number;
            this.mirroring_guid = mirroring_guid;
            this.family_guid = family_guid;
            this.is_suspended = is_suspended;
            this.is_suspended_sequence_number = is_suspended_sequence_number;
            this.partner_sync_state = partner_sync_state;
            this.partner_sync_state_desc = partner_sync_state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_name, principal_server_name, mirror_server_name, safety_level, safety_level_desc, safety_sequence_number, role_sequence_number, mirroring_guid, family_guid, is_suspended, is_suspended_sequence_number, partner_sync_state, partner_sync_state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            database_name = (string)items[0];
            principal_server_name = (string)items[1];
            mirror_server_name = (string)items[2];
            safety_level = (byte)items[3];
            safety_level_desc = (string)items[4];
            safety_sequence_number = (int)items[5];
            role_sequence_number = (int)items[6];
            mirroring_guid = (Guid)items[7];
            family_guid = (Guid)items[8];
            is_suspended = (bool?)items[9];
            is_suspended_sequence_number = (int)items[10];
            partner_sync_state = (byte?)items[11];
            partner_sync_state_desc = (string)items[12];
        }
    }

    [SqlView("Z0", "syscolumns")]
    public partial class syscolumns : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("id", 1), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("xtype", 2), SqlTypeFacets("tinyint", false)]
        public byte xtype
        {
            get;
            set;
        }

        [SqlColumn("typestat", 3), SqlTypeFacets("tinyint", true)]
        public byte? typestat
        {
            get;
            set;
        }

        [SqlColumn("xusertype", 4), SqlTypeFacets("smallint", true)]
        public short? xusertype
        {
            get;
            set;
        }

        [SqlColumn("length", 5), SqlTypeFacets("smallint", false)]
        public short length
        {
            get;
            set;
        }

        [SqlColumn("xprec", 6), SqlTypeFacets("tinyint", false)]
        public byte xprec
        {
            get;
            set;
        }

        [SqlColumn("xscale", 7), SqlTypeFacets("tinyint", false)]
        public byte xscale
        {
            get;
            set;
        }

        [SqlColumn("colid", 8), SqlTypeFacets("smallint", true)]
        public short? colid
        {
            get;
            set;
        }

        [SqlColumn("xoffset", 9), SqlTypeFacets("smallint", true)]
        public short? xoffset
        {
            get;
            set;
        }

        [SqlColumn("bitpos", 10), SqlTypeFacets("tinyint", true)]
        public byte? bitpos
        {
            get;
            set;
        }

        [SqlColumn("reserved", 11), SqlTypeFacets("tinyint", true)]
        public byte? reserved
        {
            get;
            set;
        }

        [SqlColumn("colstat", 12), SqlTypeFacets("smallint", true)]
        public short? colstat
        {
            get;
            set;
        }

        [SqlColumn("cdefault", 13), SqlTypeFacets("int", false)]
        public int cdefault
        {
            get;
            set;
        }

        [SqlColumn("domain", 14), SqlTypeFacets("int", false)]
        public int domain
        {
            get;
            set;
        }

        [SqlColumn("number", 15), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("colorder", 16), SqlTypeFacets("smallint", true)]
        public short? colorder
        {
            get;
            set;
        }

        [SqlColumn("autoval", 17), SqlTypeFacets("varbinary", true)]
        public Byte[] autoval
        {
            get;
            set;
        }

        [SqlColumn("offset", 18), SqlTypeFacets("smallint", true)]
        public short? offset
        {
            get;
            set;
        }

        [SqlColumn("collationid", 19), SqlTypeFacets("int", true)]
        public int? collationid
        {
            get;
            set;
        }

        [SqlColumn("language", 20), SqlTypeFacets("int", true)]
        public int? language
        {
            get;
            set;
        }

        [SqlColumn("status", 21), SqlTypeFacets("tinyint", true)]
        public byte? status
        {
            get;
            set;
        }

        [SqlColumn("type", 22), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("usertype", 23), SqlTypeFacets("smallint", true)]
        public short? usertype
        {
            get;
            set;
        }

        [SqlColumn("printfmt", 24), SqlTypeFacets("varchar", true)]
        public string printfmt
        {
            get;
            set;
        }

        [SqlColumn("prec", 25), SqlTypeFacets("smallint", true)]
        public short? prec
        {
            get;
            set;
        }

        [SqlColumn("scale", 26), SqlTypeFacets("int", true)]
        public int? scale
        {
            get;
            set;
        }

        [SqlColumn("iscomputed", 27), SqlTypeFacets("int", true)]
        public int? iscomputed
        {
            get;
            set;
        }

        [SqlColumn("isoutparam", 28), SqlTypeFacets("int", true)]
        public int? isoutparam
        {
            get;
            set;
        }

        [SqlColumn("isnullable", 29), SqlTypeFacets("int", true)]
        public int? isnullable
        {
            get;
            set;
        }

        [SqlColumn("collation", 30), SqlTypeFacets("sysname", true)]
        public string collation
        {
            get;
            set;
        }

        [SqlColumn("tdscollation", 31), SqlTypeFacets("binary", true)]
        public Byte[] tdscollation
        {
            get;
            set;
        }

        public syscolumns()
        {
        }

        public syscolumns(object[] items)
        {
            name = (string)items[0];
            id = (int)items[1];
            xtype = (byte)items[2];
            typestat = (byte?)items[3];
            xusertype = (short?)items[4];
            length = (short)items[5];
            xprec = (byte)items[6];
            xscale = (byte)items[7];
            colid = (short?)items[8];
            xoffset = (short?)items[9];
            bitpos = (byte?)items[10];
            reserved = (byte?)items[11];
            colstat = (short?)items[12];
            cdefault = (int)items[13];
            domain = (int)items[14];
            number = (short?)items[15];
            colorder = (short?)items[16];
            autoval = (Byte[])items[17];
            offset = (short?)items[18];
            collationid = (int?)items[19];
            language = (int?)items[20];
            status = (byte?)items[21];
            type = (byte)items[22];
            usertype = (short?)items[23];
            printfmt = (string)items[24];
            prec = (short?)items[25];
            scale = (int?)items[26];
            iscomputed = (int?)items[27];
            isoutparam = (int?)items[28];
            isnullable = (int?)items[29];
            collation = (string)items[30];
            tdscollation = (Byte[])items[31];
        }

        public syscolumns(string name, int id, byte xtype, byte? typestat, short? xusertype, short length, byte xprec, byte xscale, short? colid, short? xoffset, byte? bitpos, byte? reserved, short? colstat, int cdefault, int domain, short? number, short? colorder, Byte[] autoval, short? offset, int? collationid, int? language, byte? status, byte type, short? usertype, string printfmt, short? prec, int? scale, int? iscomputed, int? isoutparam, int? isnullable, string collation, Byte[] tdscollation)
        {
            this.name = name;
            this.id = id;
            this.xtype = xtype;
            this.typestat = typestat;
            this.xusertype = xusertype;
            this.length = length;
            this.xprec = xprec;
            this.xscale = xscale;
            this.colid = colid;
            this.xoffset = xoffset;
            this.bitpos = bitpos;
            this.reserved = reserved;
            this.colstat = colstat;
            this.cdefault = cdefault;
            this.domain = domain;
            this.number = number;
            this.colorder = colorder;
            this.autoval = autoval;
            this.offset = offset;
            this.collationid = collationid;
            this.language = language;
            this.status = status;
            this.type = type;
            this.usertype = usertype;
            this.printfmt = printfmt;
            this.prec = prec;
            this.scale = scale;
            this.iscomputed = iscomputed;
            this.isoutparam = isoutparam;
            this.isnullable = isnullable;
            this.collation = collation;
            this.tdscollation = tdscollation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, id, xtype, typestat, xusertype, length, xprec, xscale, colid, xoffset, bitpos, reserved, colstat, cdefault, domain, number, colorder, autoval, offset, collationid, language, status, type, usertype, printfmt, prec, scale, iscomputed, isoutparam, isnullable, collation, tdscollation };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            id = (int)items[1];
            xtype = (byte)items[2];
            typestat = (byte?)items[3];
            xusertype = (short?)items[4];
            length = (short)items[5];
            xprec = (byte)items[6];
            xscale = (byte)items[7];
            colid = (short?)items[8];
            xoffset = (short?)items[9];
            bitpos = (byte?)items[10];
            reserved = (byte?)items[11];
            colstat = (short?)items[12];
            cdefault = (int)items[13];
            domain = (int)items[14];
            number = (short?)items[15];
            colorder = (short?)items[16];
            autoval = (Byte[])items[17];
            offset = (short?)items[18];
            collationid = (int?)items[19];
            language = (int?)items[20];
            status = (byte?)items[21];
            type = (byte)items[22];
            usertype = (short?)items[23];
            printfmt = (string)items[24];
            prec = (short?)items[25];
            scale = (int?)items[26];
            iscomputed = (int?)items[27];
            isoutparam = (int?)items[28];
            isnullable = (int?)items[29];
            collation = (string)items[30];
            tdscollation = (Byte[])items[31];
        }
    }

    [SqlView("Z0", "database_permissions")]
    public partial class database_permissions : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("grantee_principal_id", 4), SqlTypeFacets("int", false)]
        public int grantee_principal_id
        {
            get;
            set;
        }

        [SqlColumn("grantor_principal_id", 5), SqlTypeFacets("int", false)]
        public int grantor_principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 7), SqlTypeFacets("nvarchar", true)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("char", false)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        public database_permissions()
        {
        }

        public database_permissions(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }

        public database_permissions(byte @class, string class_desc, int major_id, int minor_id, int grantee_principal_id, int grantor_principal_id, string type, string permission_name, string state, string state_desc)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.grantee_principal_id = grantee_principal_id;
            this.grantor_principal_id = grantor_principal_id;
            this.type = type;
            this.permission_name = permission_name;
            this.state = state;
            this.state_desc = state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, grantee_principal_id, grantor_principal_id, type, permission_name, state, state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }
    }

    [SqlView("Z0", "sysindexes")]
    public partial class sysindexes : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("first", 2), SqlTypeFacets("binary", true)]
        public Byte[] first
        {
            get;
            set;
        }

        [SqlColumn("indid", 3), SqlTypeFacets("smallint", true)]
        public short? indid
        {
            get;
            set;
        }

        [SqlColumn("root", 4), SqlTypeFacets("binary", true)]
        public Byte[] root
        {
            get;
            set;
        }

        [SqlColumn("minlen", 5), SqlTypeFacets("smallint", true)]
        public short? minlen
        {
            get;
            set;
        }

        [SqlColumn("keycnt", 6), SqlTypeFacets("smallint", true)]
        public short? keycnt
        {
            get;
            set;
        }

        [SqlColumn("groupid", 7), SqlTypeFacets("smallint", true)]
        public short? groupid
        {
            get;
            set;
        }

        [SqlColumn("dpages", 8), SqlTypeFacets("int", true)]
        public int? dpages
        {
            get;
            set;
        }

        [SqlColumn("reserved", 9), SqlTypeFacets("int", true)]
        public int? reserved
        {
            get;
            set;
        }

        [SqlColumn("used", 10), SqlTypeFacets("int", true)]
        public int? used
        {
            get;
            set;
        }

        [SqlColumn("rowcnt", 11), SqlTypeFacets("bigint", true)]
        public long? rowcnt
        {
            get;
            set;
        }

        [SqlColumn("rowmodctr", 12), SqlTypeFacets("int", true)]
        public int? rowmodctr
        {
            get;
            set;
        }

        [SqlColumn("reserved3", 13), SqlTypeFacets("tinyint", true)]
        public byte? reserved3
        {
            get;
            set;
        }

        [SqlColumn("reserved4", 14), SqlTypeFacets("tinyint", true)]
        public byte? reserved4
        {
            get;
            set;
        }

        [SqlColumn("xmaxlen", 15), SqlTypeFacets("smallint", true)]
        public short? xmaxlen
        {
            get;
            set;
        }

        [SqlColumn("maxirow", 16), SqlTypeFacets("smallint", true)]
        public short? maxirow
        {
            get;
            set;
        }

        [SqlColumn("OrigFillFactor", 17), SqlTypeFacets("tinyint", true)]
        public byte? OrigFillFactor
        {
            get;
            set;
        }

        [SqlColumn("StatVersion", 18), SqlTypeFacets("tinyint", true)]
        public byte? StatVersion
        {
            get;
            set;
        }

        [SqlColumn("reserved2", 19), SqlTypeFacets("int", true)]
        public int? reserved2
        {
            get;
            set;
        }

        [SqlColumn("FirstIAM", 20), SqlTypeFacets("binary", true)]
        public Byte[] FirstIAM
        {
            get;
            set;
        }

        [SqlColumn("impid", 21), SqlTypeFacets("smallint", true)]
        public short? impid
        {
            get;
            set;
        }

        [SqlColumn("lockflags", 22), SqlTypeFacets("smallint", true)]
        public short? lockflags
        {
            get;
            set;
        }

        [SqlColumn("pgmodctr", 23), SqlTypeFacets("int", true)]
        public int? pgmodctr
        {
            get;
            set;
        }

        [SqlColumn("keys", 24), SqlTypeFacets("varbinary", true)]
        public Byte[] keys
        {
            get;
            set;
        }

        [SqlColumn("name", 25), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("statblob", 26), SqlTypeFacets("image", true)]
        public Byte[] statblob
        {
            get;
            set;
        }

        [SqlColumn("maxlen", 27), SqlTypeFacets("int", true)]
        public int? maxlen
        {
            get;
            set;
        }

        [SqlColumn("rows", 28), SqlTypeFacets("int", true)]
        public int? rows
        {
            get;
            set;
        }

        public sysindexes()
        {
        }

        public sysindexes(object[] items)
        {
            id = (int)items[0];
            status = (int?)items[1];
            first = (Byte[])items[2];
            indid = (short?)items[3];
            root = (Byte[])items[4];
            minlen = (short?)items[5];
            keycnt = (short?)items[6];
            groupid = (short?)items[7];
            dpages = (int?)items[8];
            reserved = (int?)items[9];
            used = (int?)items[10];
            rowcnt = (long?)items[11];
            rowmodctr = (int?)items[12];
            reserved3 = (byte?)items[13];
            reserved4 = (byte?)items[14];
            xmaxlen = (short?)items[15];
            maxirow = (short?)items[16];
            OrigFillFactor = (byte?)items[17];
            StatVersion = (byte?)items[18];
            reserved2 = (int?)items[19];
            FirstIAM = (Byte[])items[20];
            impid = (short?)items[21];
            lockflags = (short?)items[22];
            pgmodctr = (int?)items[23];
            keys = (Byte[])items[24];
            name = (string)items[25];
            statblob = (Byte[])items[26];
            maxlen = (int?)items[27];
            rows = (int?)items[28];
        }

        public sysindexes(int id, int? status, Byte[] first, short? indid, Byte[] root, short? minlen, short? keycnt, short? groupid, int? dpages, int? reserved, int? used, long? rowcnt, int? rowmodctr, byte? reserved3, byte? reserved4, short? xmaxlen, short? maxirow, byte? OrigFillFactor, byte? StatVersion, int? reserved2, Byte[] FirstIAM, short? impid, short? lockflags, int? pgmodctr, Byte[] keys, string name, Byte[] statblob, int? maxlen, int? rows)
        {
            this.id = id;
            this.status = status;
            this.first = first;
            this.indid = indid;
            this.root = root;
            this.minlen = minlen;
            this.keycnt = keycnt;
            this.groupid = groupid;
            this.dpages = dpages;
            this.reserved = reserved;
            this.used = used;
            this.rowcnt = rowcnt;
            this.rowmodctr = rowmodctr;
            this.reserved3 = reserved3;
            this.reserved4 = reserved4;
            this.xmaxlen = xmaxlen;
            this.maxirow = maxirow;
            this.OrigFillFactor = OrigFillFactor;
            this.StatVersion = StatVersion;
            this.reserved2 = reserved2;
            this.FirstIAM = FirstIAM;
            this.impid = impid;
            this.lockflags = lockflags;
            this.pgmodctr = pgmodctr;
            this.keys = keys;
            this.name = name;
            this.statblob = statblob;
            this.maxlen = maxlen;
            this.rows = rows;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, status, first, indid, root, minlen, keycnt, groupid, dpages, reserved, used, rowcnt, rowmodctr, reserved3, reserved4, xmaxlen, maxirow, OrigFillFactor, StatVersion, reserved2, FirstIAM, impid, lockflags, pgmodctr, keys, name, statblob, maxlen, rows };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            status = (int?)items[1];
            first = (Byte[])items[2];
            indid = (short?)items[3];
            root = (Byte[])items[4];
            minlen = (short?)items[5];
            keycnt = (short?)items[6];
            groupid = (short?)items[7];
            dpages = (int?)items[8];
            reserved = (int?)items[9];
            used = (int?)items[10];
            rowcnt = (long?)items[11];
            rowmodctr = (int?)items[12];
            reserved3 = (byte?)items[13];
            reserved4 = (byte?)items[14];
            xmaxlen = (short?)items[15];
            maxirow = (short?)items[16];
            OrigFillFactor = (byte?)items[17];
            StatVersion = (byte?)items[18];
            reserved2 = (int?)items[19];
            FirstIAM = (Byte[])items[20];
            impid = (short?)items[21];
            lockflags = (short?)items[22];
            pgmodctr = (int?)items[23];
            keys = (Byte[])items[24];
            name = (string)items[25];
            statblob = (Byte[])items[26];
            maxlen = (int?)items[27];
            rows = (int?)items[28];
        }
    }

    [SqlView("Z0", "database_principals")]
    public partial class database_principals : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("default_schema_name", 4), SqlTypeFacets("sysname", true)]
        public string default_schema_name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_id", 7), SqlTypeFacets("int", true)]
        public int? owning_principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 8), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_role", 9), SqlTypeFacets("bit", false)]
        public bool is_fixed_role
        {
            get;
            set;
        }

        [SqlColumn("authentication_type", 10), SqlTypeFacets("int", false)]
        public int authentication_type
        {
            get;
            set;
        }

        [SqlColumn("authentication_type_desc", 11), SqlTypeFacets("nvarchar", true)]
        public string authentication_type_desc
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 12), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_lcid", 13), SqlTypeFacets("int", true)]
        public int? default_language_lcid
        {
            get;
            set;
        }

        [SqlColumn("allow_encrypted_value_modifications", 14), SqlTypeFacets("bit", false)]
        public bool allow_encrypted_value_modifications
        {
            get;
            set;
        }

        public database_principals()
        {
        }

        public database_principals(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            default_schema_name = (string)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            owning_principal_id = (int?)items[7];
            sid = (Byte[])items[8];
            is_fixed_role = (bool)items[9];
            authentication_type = (int)items[10];
            authentication_type_desc = (string)items[11];
            default_language_name = (string)items[12];
            default_language_lcid = (int?)items[13];
            allow_encrypted_value_modifications = (bool)items[14];
        }

        public database_principals(string name, int principal_id, string type, string type_desc, string default_schema_name, DateTime create_date, DateTime modify_date, int? owning_principal_id, Byte[] sid, bool is_fixed_role, int authentication_type, string authentication_type_desc, string default_language_name, int? default_language_lcid, bool allow_encrypted_value_modifications)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.default_schema_name = default_schema_name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.owning_principal_id = owning_principal_id;
            this.sid = sid;
            this.is_fixed_role = is_fixed_role;
            this.authentication_type = authentication_type;
            this.authentication_type_desc = authentication_type_desc;
            this.default_language_name = default_language_name;
            this.default_language_lcid = default_language_lcid;
            this.allow_encrypted_value_modifications = allow_encrypted_value_modifications;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, type, type_desc, default_schema_name, create_date, modify_date, owning_principal_id, sid, is_fixed_role, authentication_type, authentication_type_desc, default_language_name, default_language_lcid, allow_encrypted_value_modifications };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            default_schema_name = (string)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            owning_principal_id = (int?)items[7];
            sid = (Byte[])items[8];
            is_fixed_role = (bool)items[9];
            authentication_type = (int)items[10];
            authentication_type_desc = (string)items[11];
            default_language_name = (string)items[12];
            default_language_lcid = (int?)items[13];
            allow_encrypted_value_modifications = (bool)items[14];
        }
    }

    [SqlView("Z0", "system_columns")]
    public partial class system_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", false)]
        public bool is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", false)]
        public bool is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", false)]
        public bool is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", false)]
        public bool is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type", 25), SqlTypeFacets("tinyint", true)]
        public byte? generated_always_type
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type_desc", 26), SqlTypeFacets("nvarchar", true)]
        public string generated_always_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 27), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 28), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 29), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 30), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 31), SqlTypeFacets("nvarchar", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 32), SqlTypeFacets("bit", false)]
        public bool is_hidden
        {
            get;
            set;
        }

        [SqlColumn("is_masked", 33), SqlTypeFacets("bit", false)]
        public bool is_masked
        {
            get;
            set;
        }

        [SqlColumn("graph_type", 34), SqlTypeFacets("int", true)]
        public int? graph_type
        {
            get;
            set;
        }

        [SqlColumn("graph_type_desc", 35), SqlTypeFacets("nvarchar", true)]
        public string graph_type_desc
        {
            get;
            set;
        }

        public system_columns()
        {
        }

        public system_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool)items[15];
            is_non_sql_subscribed = (bool)items[16];
            is_merge_published = (bool)items[17];
            is_dts_replicated = (bool)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool)items[23];
            is_column_set = (bool)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool)items[32];
            is_masked = (bool)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }

        public system_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool is_replicated, bool is_non_sql_subscribed, bool is_merge_published, bool is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool is_sparse, bool is_column_set, byte? generated_always_type, string generated_always_type_desc, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name, bool is_hidden, bool is_masked, int? graph_type, string graph_type_desc)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.generated_always_type = generated_always_type;
            this.generated_always_type_desc = generated_always_type_desc;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
            this.is_hidden = is_hidden;
            this.is_masked = is_masked;
            this.graph_type = graph_type;
            this.graph_type_desc = graph_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set, generated_always_type, generated_always_type_desc, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name, is_hidden, is_masked, graph_type, graph_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool)items[15];
            is_non_sql_subscribed = (bool)items[16];
            is_merge_published = (bool)items[17];
            is_dts_replicated = (bool)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool)items[23];
            is_column_set = (bool)items[24];
            generated_always_type = (byte?)items[25];
            generated_always_type_desc = (string)items[26];
            encryption_type = (int?)items[27];
            encryption_type_desc = (string)items[28];
            encryption_algorithm_name = (string)items[29];
            column_encryption_key_id = (int?)items[30];
            column_encryption_key_database_name = (string)items[31];
            is_hidden = (bool)items[32];
            is_masked = (bool)items[33];
            graph_type = (int?)items[34];
            graph_type_desc = (string)items[35];
        }
    }

    [SqlView("Z0", "database_query_store_options")]
    public partial class database_query_store_options : SqlViewProxy
    {
        [SqlColumn("desired_state", 0), SqlTypeFacets("smallint", false)]
        public short desired_state
        {
            get;
            set;
        }

        [SqlColumn("desired_state_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string desired_state_desc
        {
            get;
            set;
        }

        [SqlColumn("actual_state", 2), SqlTypeFacets("smallint", false)]
        public short actual_state
        {
            get;
            set;
        }

        [SqlColumn("actual_state_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string actual_state_desc
        {
            get;
            set;
        }

        [SqlColumn("readonly_reason", 4), SqlTypeFacets("int", true)]
        public int? readonly_reason
        {
            get;
            set;
        }

        [SqlColumn("current_storage_size_mb", 5), SqlTypeFacets("bigint", true)]
        public long? current_storage_size_mb
        {
            get;
            set;
        }

        [SqlColumn("flush_interval_seconds", 6), SqlTypeFacets("bigint", true)]
        public long? flush_interval_seconds
        {
            get;
            set;
        }

        [SqlColumn("interval_length_minutes", 7), SqlTypeFacets("bigint", true)]
        public long? interval_length_minutes
        {
            get;
            set;
        }

        [SqlColumn("max_storage_size_mb", 8), SqlTypeFacets("bigint", true)]
        public long? max_storage_size_mb
        {
            get;
            set;
        }

        [SqlColumn("stale_query_threshold_days", 9), SqlTypeFacets("bigint", true)]
        public long? stale_query_threshold_days
        {
            get;
            set;
        }

        [SqlColumn("max_plans_per_query", 10), SqlTypeFacets("bigint", true)]
        public long? max_plans_per_query
        {
            get;
            set;
        }

        [SqlColumn("query_capture_mode", 11), SqlTypeFacets("smallint", false)]
        public short query_capture_mode
        {
            get;
            set;
        }

        [SqlColumn("query_capture_mode_desc", 12), SqlTypeFacets("nvarchar", true)]
        public string query_capture_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("size_based_cleanup_mode", 13), SqlTypeFacets("smallint", false)]
        public short size_based_cleanup_mode
        {
            get;
            set;
        }

        [SqlColumn("size_based_cleanup_mode_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string size_based_cleanup_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("wait_stats_capture_mode", 15), SqlTypeFacets("smallint", false)]
        public short wait_stats_capture_mode
        {
            get;
            set;
        }

        [SqlColumn("wait_stats_capture_mode_desc", 16), SqlTypeFacets("nvarchar", true)]
        public string wait_stats_capture_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("actual_state_additional_info", 17), SqlTypeFacets("nvarchar", true)]
        public string actual_state_additional_info
        {
            get;
            set;
        }

        public database_query_store_options()
        {
        }

        public database_query_store_options(object[] items)
        {
            desired_state = (short)items[0];
            desired_state_desc = (string)items[1];
            actual_state = (short)items[2];
            actual_state_desc = (string)items[3];
            readonly_reason = (int?)items[4];
            current_storage_size_mb = (long?)items[5];
            flush_interval_seconds = (long?)items[6];
            interval_length_minutes = (long?)items[7];
            max_storage_size_mb = (long?)items[8];
            stale_query_threshold_days = (long?)items[9];
            max_plans_per_query = (long?)items[10];
            query_capture_mode = (short)items[11];
            query_capture_mode_desc = (string)items[12];
            size_based_cleanup_mode = (short)items[13];
            size_based_cleanup_mode_desc = (string)items[14];
            wait_stats_capture_mode = (short)items[15];
            wait_stats_capture_mode_desc = (string)items[16];
            actual_state_additional_info = (string)items[17];
        }

        public database_query_store_options(short desired_state, string desired_state_desc, short actual_state, string actual_state_desc, int? readonly_reason, long? current_storage_size_mb, long? flush_interval_seconds, long? interval_length_minutes, long? max_storage_size_mb, long? stale_query_threshold_days, long? max_plans_per_query, short query_capture_mode, string query_capture_mode_desc, short size_based_cleanup_mode, string size_based_cleanup_mode_desc, short wait_stats_capture_mode, string wait_stats_capture_mode_desc, string actual_state_additional_info)
        {
            this.desired_state = desired_state;
            this.desired_state_desc = desired_state_desc;
            this.actual_state = actual_state;
            this.actual_state_desc = actual_state_desc;
            this.readonly_reason = readonly_reason;
            this.current_storage_size_mb = current_storage_size_mb;
            this.flush_interval_seconds = flush_interval_seconds;
            this.interval_length_minutes = interval_length_minutes;
            this.max_storage_size_mb = max_storage_size_mb;
            this.stale_query_threshold_days = stale_query_threshold_days;
            this.max_plans_per_query = max_plans_per_query;
            this.query_capture_mode = query_capture_mode;
            this.query_capture_mode_desc = query_capture_mode_desc;
            this.size_based_cleanup_mode = size_based_cleanup_mode;
            this.size_based_cleanup_mode_desc = size_based_cleanup_mode_desc;
            this.wait_stats_capture_mode = wait_stats_capture_mode;
            this.wait_stats_capture_mode_desc = wait_stats_capture_mode_desc;
            this.actual_state_additional_info = actual_state_additional_info;
        }

        public override object[] GetItemArray()
        {
            return new object[] { desired_state, desired_state_desc, actual_state, actual_state_desc, readonly_reason, current_storage_size_mb, flush_interval_seconds, interval_length_minutes, max_storage_size_mb, stale_query_threshold_days, max_plans_per_query, query_capture_mode, query_capture_mode_desc, size_based_cleanup_mode, size_based_cleanup_mode_desc, wait_stats_capture_mode, wait_stats_capture_mode_desc, actual_state_additional_info };
        }

        public override void SetItemArray(object[] items)
        {
            desired_state = (short)items[0];
            desired_state_desc = (string)items[1];
            actual_state = (short)items[2];
            actual_state_desc = (string)items[3];
            readonly_reason = (int?)items[4];
            current_storage_size_mb = (long?)items[5];
            flush_interval_seconds = (long?)items[6];
            interval_length_minutes = (long?)items[7];
            max_storage_size_mb = (long?)items[8];
            stale_query_threshold_days = (long?)items[9];
            max_plans_per_query = (long?)items[10];
            query_capture_mode = (short)items[11];
            query_capture_mode_desc = (string)items[12];
            size_based_cleanup_mode = (short)items[13];
            size_based_cleanup_mode_desc = (string)items[14];
            wait_stats_capture_mode = (short)items[15];
            wait_stats_capture_mode_desc = (string)items[16];
            actual_state_additional_info = (string)items[17];
        }
    }

    [SqlView("Z0", "system_components_surface_area_configuration")]
    public partial class system_components_surface_area_configuration : SqlViewProxy
    {
        [SqlColumn("component_name", 0), SqlTypeFacets("sysname", true)]
        public string component_name
        {
            get;
            set;
        }

        [SqlColumn("database_name", 1), SqlTypeFacets("sysname", true)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("schema_name", 2), SqlTypeFacets("nvarchar", true)]
        public string schema_name
        {
            get;
            set;
        }

        [SqlColumn("object_name", 3), SqlTypeFacets("nvarchar", false)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("state", 4), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        public system_components_surface_area_configuration()
        {
        }

        public system_components_surface_area_configuration(object[] items)
        {
            component_name = (string)items[0];
            database_name = (string)items[1];
            schema_name = (string)items[2];
            object_name = (string)items[3];
            state = (byte?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
        }

        public system_components_surface_area_configuration(string component_name, string database_name, string schema_name, string object_name, byte? state, string type, string type_desc)
        {
            this.component_name = component_name;
            this.database_name = database_name;
            this.schema_name = schema_name;
            this.object_name = object_name;
            this.state = state;
            this.type = type;
            this.type_desc = type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { component_name, database_name, schema_name, object_name, state, type, type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            component_name = (string)items[0];
            database_name = (string)items[1];
            schema_name = (string)items[2];
            object_name = (string)items[3];
            state = (byte?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
        }
    }

    [SqlView("Z0", "database_recovery_status")]
    public partial class database_recovery_status : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("database_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? database_guid
        {
            get;
            set;
        }

        [SqlColumn("family_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? family_guid
        {
            get;
            set;
        }

        [SqlColumn("last_log_backup_lsn", 3), SqlTypeFacets("numeric", true)]
        public decimal? last_log_backup_lsn
        {
            get;
            set;
        }

        [SqlColumn("recovery_fork_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? recovery_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("first_recovery_fork_guid", 5), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? first_recovery_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("fork_point_lsn", 6), SqlTypeFacets("numeric", true)]
        public decimal? fork_point_lsn
        {
            get;
            set;
        }

        public database_recovery_status()
        {
        }

        public database_recovery_status(object[] items)
        {
            database_id = (int)items[0];
            database_guid = (Guid?)items[1];
            family_guid = (Guid?)items[2];
            last_log_backup_lsn = (decimal?)items[3];
            recovery_fork_guid = (Guid?)items[4];
            first_recovery_fork_guid = (Guid?)items[5];
            fork_point_lsn = (decimal?)items[6];
        }

        public database_recovery_status(int database_id, Guid? database_guid, Guid? family_guid, decimal? last_log_backup_lsn, Guid? recovery_fork_guid, Guid? first_recovery_fork_guid, decimal? fork_point_lsn)
        {
            this.database_id = database_id;
            this.database_guid = database_guid;
            this.family_guid = family_guid;
            this.last_log_backup_lsn = last_log_backup_lsn;
            this.recovery_fork_guid = recovery_fork_guid;
            this.first_recovery_fork_guid = first_recovery_fork_guid;
            this.fork_point_lsn = fork_point_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, database_guid, family_guid, last_log_backup_lsn, recovery_fork_guid, first_recovery_fork_guid, fork_point_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            database_guid = (Guid?)items[1];
            family_guid = (Guid?)items[2];
            last_log_backup_lsn = (decimal?)items[3];
            recovery_fork_guid = (Guid?)items[4];
            first_recovery_fork_guid = (Guid?)items[5];
            fork_point_lsn = (decimal?)items[6];
        }
    }

    [SqlView("Z0", "system_objects")]
    public partial class system_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", true)]
        public int? parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        public system_objects()
        {
        }

        public system_objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }

        public system_objects(string name, int object_id, int? principal_id, int schema_id, int? parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }
    }

    [SqlView("Z0", "database_role_members")]
    public partial class database_role_members : SqlViewProxy
    {
        [SqlColumn("role_principal_id", 0), SqlTypeFacets("int", false)]
        public int role_principal_id
        {
            get;
            set;
        }

        [SqlColumn("member_principal_id", 1), SqlTypeFacets("int", false)]
        public int member_principal_id
        {
            get;
            set;
        }

        public database_role_members()
        {
        }

        public database_role_members(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }

        public database_role_members(int role_principal_id, int member_principal_id)
        {
            this.role_principal_id = role_principal_id;
            this.member_principal_id = member_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { role_principal_id, member_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }
    }

    [SqlView("Z0", "system_parameters")]
    public partial class system_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 16), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 17), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 18), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 19), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 20), SqlTypeFacets("nvarchar", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        public system_parameters()
        {
        }

        public system_parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }

        public system_parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }
    }

    [SqlView("Z0", "database_scoped_configurations")]
    public partial class database_scoped_configurations : SqlViewProxy
    {
        [SqlColumn("configuration_id", 0), SqlTypeFacets("int", true)]
        public int? configuration_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 2), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        [SqlColumn("value_for_secondary", 3), SqlTypeFacets("sql_variant", true)]
        public Object value_for_secondary
        {
            get;
            set;
        }

        [SqlColumn("is_value_default", 4), SqlTypeFacets("bit", true)]
        public bool? is_value_default
        {
            get;
            set;
        }

        public database_scoped_configurations()
        {
        }

        public database_scoped_configurations(object[] items)
        {
            configuration_id = (int?)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            value_for_secondary = (Object)items[3];
            is_value_default = (bool?)items[4];
        }

        public database_scoped_configurations(int? configuration_id, string name, Object value, Object value_for_secondary, bool? is_value_default)
        {
            this.configuration_id = configuration_id;
            this.name = name;
            this.value = value;
            this.value_for_secondary = value_for_secondary;
            this.is_value_default = is_value_default;
        }

        public override object[] GetItemArray()
        {
            return new object[] { configuration_id, name, value, value_for_secondary, is_value_default };
        }

        public override void SetItemArray(object[] items)
        {
            configuration_id = (int?)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            value_for_secondary = (Object)items[3];
            is_value_default = (bool?)items[4];
        }
    }

    [SqlView("Z0", "system_sql_modules")]
    public partial class system_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", false)]
        public bool uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", false)]
        public bool uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", false)]
        public bool is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", false)]
        public bool uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", false)]
        public bool is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", false)]
        public bool null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", false)]
        public bool uses_native_compilation
        {
            get;
            set;
        }

        public system_sql_modules()
        {
        }

        public system_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool)items[2];
            uses_quoted_identifier = (bool)items[3];
            is_schema_bound = (bool)items[4];
            uses_database_collation = (bool)items[5];
            is_recompiled = (bool)items[6];
            null_on_null_input = (bool)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool)items[9];
        }

        public system_sql_modules(int object_id, string definition, bool uses_ansi_nulls, bool uses_quoted_identifier, bool is_schema_bound, bool uses_database_collation, bool is_recompiled, bool null_on_null_input, int? execute_as_principal_id, bool uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool)items[2];
            uses_quoted_identifier = (bool)items[3];
            is_schema_bound = (bool)items[4];
            uses_database_collation = (bool)items[5];
            is_recompiled = (bool)items[6];
            null_on_null_input = (bool)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool)items[9];
        }
    }

    [SqlView("Z0", "database_scoped_credentials")]
    public partial class database_scoped_credentials : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 2), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        [SqlColumn("credential_identity", 3), SqlTypeFacets("nvarchar", true)]
        public string credential_identity
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("target_type", 6), SqlTypeFacets("nvarchar", true)]
        public string target_type
        {
            get;
            set;
        }

        [SqlColumn("target_id", 7), SqlTypeFacets("int", true)]
        public int? target_id
        {
            get;
            set;
        }

        public database_scoped_credentials()
        {
        }

        public database_scoped_credentials(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            credential_id = (int)items[2];
            credential_identity = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
            target_type = (string)items[6];
            target_id = (int?)items[7];
        }

        public database_scoped_credentials(string name, int principal_id, int credential_id, string credential_identity, DateTime create_date, DateTime modify_date, string target_type, int? target_id)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.credential_id = credential_id;
            this.credential_identity = credential_identity;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.target_type = target_type;
            this.target_id = target_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, credential_id, credential_identity, create_date, modify_date, target_type, target_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            credential_id = (int)items[2];
            credential_identity = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
            target_type = (string)items[6];
            target_id = (int?)items[7];
        }
    }

    [SqlView("Z0", "system_views")]
    public partial class system_views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", true)]
        public int? parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", false)]
        public bool is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", false)]
        public bool has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", false)]
        public bool has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", false)]
        public bool with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", false)]
        public bool is_tracked_by_cdc
        {
            get;
            set;
        }

        public system_views()
        {
        }

        public system_views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool)items[12];
            has_replication_filter = (bool)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool)items[18];
        }

        public system_views(string name, int object_id, int? principal_id, int schema_id, int? parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published, bool is_replicated, bool has_replication_filter, bool has_opaque_metadata, bool has_unchecked_assembly_data, bool with_check_option, bool is_date_correlation_view, bool is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool)items[12];
            has_replication_filter = (bool)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool)items[18];
        }
    }

    [SqlView("Z0", "databases")]
    public partial class databases : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("source_database_id", 2), SqlTypeFacets("int", true)]
        public int? source_database_id
        {
            get;
            set;
        }

        [SqlColumn("owner_sid", 3), SqlTypeFacets("varbinary", true)]
        public Byte[] owner_sid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("compatibility_level", 5), SqlTypeFacets("tinyint", false)]
        public byte compatibility_level
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 6), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_access", 7), SqlTypeFacets("tinyint", true)]
        public byte? user_access
        {
            get;
            set;
        }

        [SqlColumn("user_access_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string user_access_desc
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 9), SqlTypeFacets("bit", true)]
        public bool? is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_auto_close_on", 10), SqlTypeFacets("bit", false)]
        public bool is_auto_close_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_shrink_on", 11), SqlTypeFacets("bit", true)]
        public bool? is_auto_shrink_on
        {
            get;
            set;
        }

        [SqlColumn("state", 12), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 13), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_in_standby", 14), SqlTypeFacets("bit", true)]
        public bool? is_in_standby
        {
            get;
            set;
        }

        [SqlColumn("is_cleanly_shutdown", 15), SqlTypeFacets("bit", true)]
        public bool? is_cleanly_shutdown
        {
            get;
            set;
        }

        [SqlColumn("is_supplemental_logging_enabled", 16), SqlTypeFacets("bit", true)]
        public bool? is_supplemental_logging_enabled
        {
            get;
            set;
        }

        [SqlColumn("snapshot_isolation_state", 17), SqlTypeFacets("tinyint", true)]
        public byte? snapshot_isolation_state
        {
            get;
            set;
        }

        [SqlColumn("snapshot_isolation_state_desc", 18), SqlTypeFacets("nvarchar", true)]
        public string snapshot_isolation_state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_read_committed_snapshot_on", 19), SqlTypeFacets("bit", true)]
        public bool? is_read_committed_snapshot_on
        {
            get;
            set;
        }

        [SqlColumn("recovery_model", 20), SqlTypeFacets("tinyint", true)]
        public byte? recovery_model
        {
            get;
            set;
        }

        [SqlColumn("recovery_model_desc", 21), SqlTypeFacets("nvarchar", true)]
        public string recovery_model_desc
        {
            get;
            set;
        }

        [SqlColumn("page_verify_option", 22), SqlTypeFacets("tinyint", true)]
        public byte? page_verify_option
        {
            get;
            set;
        }

        [SqlColumn("page_verify_option_desc", 23), SqlTypeFacets("nvarchar", true)]
        public string page_verify_option_desc
        {
            get;
            set;
        }

        [SqlColumn("is_auto_create_stats_on", 24), SqlTypeFacets("bit", true)]
        public bool? is_auto_create_stats_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_create_stats_incremental_on", 25), SqlTypeFacets("bit", true)]
        public bool? is_auto_create_stats_incremental_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_update_stats_on", 26), SqlTypeFacets("bit", true)]
        public bool? is_auto_update_stats_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_update_stats_async_on", 27), SqlTypeFacets("bit", true)]
        public bool? is_auto_update_stats_async_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_null_default_on", 28), SqlTypeFacets("bit", true)]
        public bool? is_ansi_null_default_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_nulls_on", 29), SqlTypeFacets("bit", true)]
        public bool? is_ansi_nulls_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padding_on", 30), SqlTypeFacets("bit", true)]
        public bool? is_ansi_padding_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_warnings_on", 31), SqlTypeFacets("bit", true)]
        public bool? is_ansi_warnings_on
        {
            get;
            set;
        }

        [SqlColumn("is_arithabort_on", 32), SqlTypeFacets("bit", true)]
        public bool? is_arithabort_on
        {
            get;
            set;
        }

        [SqlColumn("is_concat_null_yields_null_on", 33), SqlTypeFacets("bit", true)]
        public bool? is_concat_null_yields_null_on
        {
            get;
            set;
        }

        [SqlColumn("is_numeric_roundabort_on", 34), SqlTypeFacets("bit", true)]
        public bool? is_numeric_roundabort_on
        {
            get;
            set;
        }

        [SqlColumn("is_quoted_identifier_on", 35), SqlTypeFacets("bit", true)]
        public bool? is_quoted_identifier_on
        {
            get;
            set;
        }

        [SqlColumn("is_recursive_triggers_on", 36), SqlTypeFacets("bit", true)]
        public bool? is_recursive_triggers_on
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_close_on_commit_on", 37), SqlTypeFacets("bit", true)]
        public bool? is_cursor_close_on_commit_on
        {
            get;
            set;
        }

        [SqlColumn("is_local_cursor_default", 38), SqlTypeFacets("bit", true)]
        public bool? is_local_cursor_default
        {
            get;
            set;
        }

        [SqlColumn("is_fulltext_enabled", 39), SqlTypeFacets("bit", true)]
        public bool? is_fulltext_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_trustworthy_on", 40), SqlTypeFacets("bit", true)]
        public bool? is_trustworthy_on
        {
            get;
            set;
        }

        [SqlColumn("is_db_chaining_on", 41), SqlTypeFacets("bit", true)]
        public bool? is_db_chaining_on
        {
            get;
            set;
        }

        [SqlColumn("is_parameterization_forced", 42), SqlTypeFacets("bit", true)]
        public bool? is_parameterization_forced
        {
            get;
            set;
        }

        [SqlColumn("is_master_key_encrypted_by_server", 43), SqlTypeFacets("bit", false)]
        public bool is_master_key_encrypted_by_server
        {
            get;
            set;
        }

        [SqlColumn("is_query_store_on", 44), SqlTypeFacets("bit", true)]
        public bool? is_query_store_on
        {
            get;
            set;
        }

        [SqlColumn("is_published", 45), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_subscribed", 46), SqlTypeFacets("bit", false)]
        public bool is_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 47), SqlTypeFacets("bit", false)]
        public bool is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_distributor", 48), SqlTypeFacets("bit", false)]
        public bool is_distributor
        {
            get;
            set;
        }

        [SqlColumn("is_sync_with_backup", 49), SqlTypeFacets("bit", false)]
        public bool is_sync_with_backup
        {
            get;
            set;
        }

        [SqlColumn("service_broker_guid", 50), SqlTypeFacets("uniqueidentifier", false)]
        public Guid service_broker_guid
        {
            get;
            set;
        }

        [SqlColumn("is_broker_enabled", 51), SqlTypeFacets("bit", false)]
        public bool is_broker_enabled
        {
            get;
            set;
        }

        [SqlColumn("log_reuse_wait", 52), SqlTypeFacets("tinyint", true)]
        public byte? log_reuse_wait
        {
            get;
            set;
        }

        [SqlColumn("log_reuse_wait_desc", 53), SqlTypeFacets("nvarchar", true)]
        public string log_reuse_wait_desc
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_on", 54), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_on
        {
            get;
            set;
        }

        [SqlColumn("is_cdc_enabled", 55), SqlTypeFacets("bit", false)]
        public bool is_cdc_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_encrypted", 56), SqlTypeFacets("bit", true)]
        public bool? is_encrypted
        {
            get;
            set;
        }

        [SqlColumn("is_honor_broker_priority_on", 57), SqlTypeFacets("bit", true)]
        public bool? is_honor_broker_priority_on
        {
            get;
            set;
        }

        [SqlColumn("replica_id", 58), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_database_id", 59), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? group_database_id
        {
            get;
            set;
        }

        [SqlColumn("resource_pool_id", 60), SqlTypeFacets("int", true)]
        public int? resource_pool_id
        {
            get;
            set;
        }

        [SqlColumn("default_language_lcid", 61), SqlTypeFacets("smallint", true)]
        public short? default_language_lcid
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 62), SqlTypeFacets("nvarchar", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("default_fulltext_language_lcid", 63), SqlTypeFacets("int", true)]
        public int? default_fulltext_language_lcid
        {
            get;
            set;
        }

        [SqlColumn("default_fulltext_language_name", 64), SqlTypeFacets("nvarchar", true)]
        public string default_fulltext_language_name
        {
            get;
            set;
        }

        [SqlColumn("is_nested_triggers_on", 65), SqlTypeFacets("bit", true)]
        public bool? is_nested_triggers_on
        {
            get;
            set;
        }

        [SqlColumn("is_transform_noise_words_on", 66), SqlTypeFacets("bit", true)]
        public bool? is_transform_noise_words_on
        {
            get;
            set;
        }

        [SqlColumn("two_digit_year_cutoff", 67), SqlTypeFacets("smallint", true)]
        public short? two_digit_year_cutoff
        {
            get;
            set;
        }

        [SqlColumn("containment", 68), SqlTypeFacets("tinyint", true)]
        public byte? containment
        {
            get;
            set;
        }

        [SqlColumn("containment_desc", 69), SqlTypeFacets("nvarchar", true)]
        public string containment_desc
        {
            get;
            set;
        }

        [SqlColumn("target_recovery_time_in_seconds", 70), SqlTypeFacets("int", true)]
        public int? target_recovery_time_in_seconds
        {
            get;
            set;
        }

        [SqlColumn("delayed_durability", 71), SqlTypeFacets("int", true)]
        public int? delayed_durability
        {
            get;
            set;
        }

        [SqlColumn("delayed_durability_desc", 72), SqlTypeFacets("nvarchar", true)]
        public string delayed_durability_desc
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized_elevate_to_snapshot_on", 73), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized_elevate_to_snapshot_on
        {
            get;
            set;
        }

        [SqlColumn("is_federation_member", 74), SqlTypeFacets("bit", true)]
        public bool? is_federation_member
        {
            get;
            set;
        }

        [SqlColumn("is_remote_data_archive_enabled", 75), SqlTypeFacets("bit", true)]
        public bool? is_remote_data_archive_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_mixed_page_allocation_on", 76), SqlTypeFacets("bit", true)]
        public bool? is_mixed_page_allocation_on
        {
            get;
            set;
        }

        [SqlColumn("is_temporal_history_retention_enabled", 77), SqlTypeFacets("bit", true)]
        public bool? is_temporal_history_retention_enabled
        {
            get;
            set;
        }

        public databases()
        {
        }

        public databases(object[] items)
        {
            name = (string)items[0];
            database_id = (int)items[1];
            source_database_id = (int?)items[2];
            owner_sid = (Byte[])items[3];
            create_date = (DateTime)items[4];
            compatibility_level = (byte)items[5];
            collation_name = (string)items[6];
            user_access = (byte?)items[7];
            user_access_desc = (string)items[8];
            is_read_only = (bool?)items[9];
            is_auto_close_on = (bool)items[10];
            is_auto_shrink_on = (bool?)items[11];
            state = (byte?)items[12];
            state_desc = (string)items[13];
            is_in_standby = (bool?)items[14];
            is_cleanly_shutdown = (bool?)items[15];
            is_supplemental_logging_enabled = (bool?)items[16];
            snapshot_isolation_state = (byte?)items[17];
            snapshot_isolation_state_desc = (string)items[18];
            is_read_committed_snapshot_on = (bool?)items[19];
            recovery_model = (byte?)items[20];
            recovery_model_desc = (string)items[21];
            page_verify_option = (byte?)items[22];
            page_verify_option_desc = (string)items[23];
            is_auto_create_stats_on = (bool?)items[24];
            is_auto_create_stats_incremental_on = (bool?)items[25];
            is_auto_update_stats_on = (bool?)items[26];
            is_auto_update_stats_async_on = (bool?)items[27];
            is_ansi_null_default_on = (bool?)items[28];
            is_ansi_nulls_on = (bool?)items[29];
            is_ansi_padding_on = (bool?)items[30];
            is_ansi_warnings_on = (bool?)items[31];
            is_arithabort_on = (bool?)items[32];
            is_concat_null_yields_null_on = (bool?)items[33];
            is_numeric_roundabort_on = (bool?)items[34];
            is_quoted_identifier_on = (bool?)items[35];
            is_recursive_triggers_on = (bool?)items[36];
            is_cursor_close_on_commit_on = (bool?)items[37];
            is_local_cursor_default = (bool?)items[38];
            is_fulltext_enabled = (bool?)items[39];
            is_trustworthy_on = (bool?)items[40];
            is_db_chaining_on = (bool?)items[41];
            is_parameterization_forced = (bool?)items[42];
            is_master_key_encrypted_by_server = (bool)items[43];
            is_query_store_on = (bool?)items[44];
            is_published = (bool)items[45];
            is_subscribed = (bool)items[46];
            is_merge_published = (bool)items[47];
            is_distributor = (bool)items[48];
            is_sync_with_backup = (bool)items[49];
            service_broker_guid = (Guid)items[50];
            is_broker_enabled = (bool)items[51];
            log_reuse_wait = (byte?)items[52];
            log_reuse_wait_desc = (string)items[53];
            is_date_correlation_on = (bool)items[54];
            is_cdc_enabled = (bool)items[55];
            is_encrypted = (bool?)items[56];
            is_honor_broker_priority_on = (bool?)items[57];
            replica_id = (Guid?)items[58];
            group_database_id = (Guid?)items[59];
            resource_pool_id = (int?)items[60];
            default_language_lcid = (short?)items[61];
            default_language_name = (string)items[62];
            default_fulltext_language_lcid = (int?)items[63];
            default_fulltext_language_name = (string)items[64];
            is_nested_triggers_on = (bool?)items[65];
            is_transform_noise_words_on = (bool?)items[66];
            two_digit_year_cutoff = (short?)items[67];
            containment = (byte?)items[68];
            containment_desc = (string)items[69];
            target_recovery_time_in_seconds = (int?)items[70];
            delayed_durability = (int?)items[71];
            delayed_durability_desc = (string)items[72];
            is_memory_optimized_elevate_to_snapshot_on = (bool?)items[73];
            is_federation_member = (bool?)items[74];
            is_remote_data_archive_enabled = (bool?)items[75];
            is_mixed_page_allocation_on = (bool?)items[76];
            is_temporal_history_retention_enabled = (bool?)items[77];
        }

        public databases(string name, int database_id, int? source_database_id, Byte[] owner_sid, DateTime create_date, byte compatibility_level, string collation_name, byte? user_access, string user_access_desc, bool? is_read_only, bool is_auto_close_on, bool? is_auto_shrink_on, byte? state, string state_desc, bool? is_in_standby, bool? is_cleanly_shutdown, bool? is_supplemental_logging_enabled, byte? snapshot_isolation_state, string snapshot_isolation_state_desc, bool? is_read_committed_snapshot_on, byte? recovery_model, string recovery_model_desc, byte? page_verify_option, string page_verify_option_desc, bool? is_auto_create_stats_on, bool? is_auto_create_stats_incremental_on, bool? is_auto_update_stats_on, bool? is_auto_update_stats_async_on, bool? is_ansi_null_default_on, bool? is_ansi_nulls_on, bool? is_ansi_padding_on, bool? is_ansi_warnings_on, bool? is_arithabort_on, bool? is_concat_null_yields_null_on, bool? is_numeric_roundabort_on, bool? is_quoted_identifier_on, bool? is_recursive_triggers_on, bool? is_cursor_close_on_commit_on, bool? is_local_cursor_default, bool? is_fulltext_enabled, bool? is_trustworthy_on, bool? is_db_chaining_on, bool? is_parameterization_forced, bool is_master_key_encrypted_by_server, bool? is_query_store_on, bool is_published, bool is_subscribed, bool is_merge_published, bool is_distributor, bool is_sync_with_backup, Guid service_broker_guid, bool is_broker_enabled, byte? log_reuse_wait, string log_reuse_wait_desc, bool is_date_correlation_on, bool is_cdc_enabled, bool? is_encrypted, bool? is_honor_broker_priority_on, Guid? replica_id, Guid? group_database_id, int? resource_pool_id, short? default_language_lcid, string default_language_name, int? default_fulltext_language_lcid, string default_fulltext_language_name, bool? is_nested_triggers_on, bool? is_transform_noise_words_on, short? two_digit_year_cutoff, byte? containment, string containment_desc, int? target_recovery_time_in_seconds, int? delayed_durability, string delayed_durability_desc, bool? is_memory_optimized_elevate_to_snapshot_on, bool? is_federation_member, bool? is_remote_data_archive_enabled, bool? is_mixed_page_allocation_on, bool? is_temporal_history_retention_enabled)
        {
            this.name = name;
            this.database_id = database_id;
            this.source_database_id = source_database_id;
            this.owner_sid = owner_sid;
            this.create_date = create_date;
            this.compatibility_level = compatibility_level;
            this.collation_name = collation_name;
            this.user_access = user_access;
            this.user_access_desc = user_access_desc;
            this.is_read_only = is_read_only;
            this.is_auto_close_on = is_auto_close_on;
            this.is_auto_shrink_on = is_auto_shrink_on;
            this.state = state;
            this.state_desc = state_desc;
            this.is_in_standby = is_in_standby;
            this.is_cleanly_shutdown = is_cleanly_shutdown;
            this.is_supplemental_logging_enabled = is_supplemental_logging_enabled;
            this.snapshot_isolation_state = snapshot_isolation_state;
            this.snapshot_isolation_state_desc = snapshot_isolation_state_desc;
            this.is_read_committed_snapshot_on = is_read_committed_snapshot_on;
            this.recovery_model = recovery_model;
            this.recovery_model_desc = recovery_model_desc;
            this.page_verify_option = page_verify_option;
            this.page_verify_option_desc = page_verify_option_desc;
            this.is_auto_create_stats_on = is_auto_create_stats_on;
            this.is_auto_create_stats_incremental_on = is_auto_create_stats_incremental_on;
            this.is_auto_update_stats_on = is_auto_update_stats_on;
            this.is_auto_update_stats_async_on = is_auto_update_stats_async_on;
            this.is_ansi_null_default_on = is_ansi_null_default_on;
            this.is_ansi_nulls_on = is_ansi_nulls_on;
            this.is_ansi_padding_on = is_ansi_padding_on;
            this.is_ansi_warnings_on = is_ansi_warnings_on;
            this.is_arithabort_on = is_arithabort_on;
            this.is_concat_null_yields_null_on = is_concat_null_yields_null_on;
            this.is_numeric_roundabort_on = is_numeric_roundabort_on;
            this.is_quoted_identifier_on = is_quoted_identifier_on;
            this.is_recursive_triggers_on = is_recursive_triggers_on;
            this.is_cursor_close_on_commit_on = is_cursor_close_on_commit_on;
            this.is_local_cursor_default = is_local_cursor_default;
            this.is_fulltext_enabled = is_fulltext_enabled;
            this.is_trustworthy_on = is_trustworthy_on;
            this.is_db_chaining_on = is_db_chaining_on;
            this.is_parameterization_forced = is_parameterization_forced;
            this.is_master_key_encrypted_by_server = is_master_key_encrypted_by_server;
            this.is_query_store_on = is_query_store_on;
            this.is_published = is_published;
            this.is_subscribed = is_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_distributor = is_distributor;
            this.is_sync_with_backup = is_sync_with_backup;
            this.service_broker_guid = service_broker_guid;
            this.is_broker_enabled = is_broker_enabled;
            this.log_reuse_wait = log_reuse_wait;
            this.log_reuse_wait_desc = log_reuse_wait_desc;
            this.is_date_correlation_on = is_date_correlation_on;
            this.is_cdc_enabled = is_cdc_enabled;
            this.is_encrypted = is_encrypted;
            this.is_honor_broker_priority_on = is_honor_broker_priority_on;
            this.replica_id = replica_id;
            this.group_database_id = group_database_id;
            this.resource_pool_id = resource_pool_id;
            this.default_language_lcid = default_language_lcid;
            this.default_language_name = default_language_name;
            this.default_fulltext_language_lcid = default_fulltext_language_lcid;
            this.default_fulltext_language_name = default_fulltext_language_name;
            this.is_nested_triggers_on = is_nested_triggers_on;
            this.is_transform_noise_words_on = is_transform_noise_words_on;
            this.two_digit_year_cutoff = two_digit_year_cutoff;
            this.containment = containment;
            this.containment_desc = containment_desc;
            this.target_recovery_time_in_seconds = target_recovery_time_in_seconds;
            this.delayed_durability = delayed_durability;
            this.delayed_durability_desc = delayed_durability_desc;
            this.is_memory_optimized_elevate_to_snapshot_on = is_memory_optimized_elevate_to_snapshot_on;
            this.is_federation_member = is_federation_member;
            this.is_remote_data_archive_enabled = is_remote_data_archive_enabled;
            this.is_mixed_page_allocation_on = is_mixed_page_allocation_on;
            this.is_temporal_history_retention_enabled = is_temporal_history_retention_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, database_id, source_database_id, owner_sid, create_date, compatibility_level, collation_name, user_access, user_access_desc, is_read_only, is_auto_close_on, is_auto_shrink_on, state, state_desc, is_in_standby, is_cleanly_shutdown, is_supplemental_logging_enabled, snapshot_isolation_state, snapshot_isolation_state_desc, is_read_committed_snapshot_on, recovery_model, recovery_model_desc, page_verify_option, page_verify_option_desc, is_auto_create_stats_on, is_auto_create_stats_incremental_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_ansi_null_default_on, is_ansi_nulls_on, is_ansi_padding_on, is_ansi_warnings_on, is_arithabort_on, is_concat_null_yields_null_on, is_numeric_roundabort_on, is_quoted_identifier_on, is_recursive_triggers_on, is_cursor_close_on_commit_on, is_local_cursor_default, is_fulltext_enabled, is_trustworthy_on, is_db_chaining_on, is_parameterization_forced, is_master_key_encrypted_by_server, is_query_store_on, is_published, is_subscribed, is_merge_published, is_distributor, is_sync_with_backup, service_broker_guid, is_broker_enabled, log_reuse_wait, log_reuse_wait_desc, is_date_correlation_on, is_cdc_enabled, is_encrypted, is_honor_broker_priority_on, replica_id, group_database_id, resource_pool_id, default_language_lcid, default_language_name, default_fulltext_language_lcid, default_fulltext_language_name, is_nested_triggers_on, is_transform_noise_words_on, two_digit_year_cutoff, containment, containment_desc, target_recovery_time_in_seconds, delayed_durability, delayed_durability_desc, is_memory_optimized_elevate_to_snapshot_on, is_federation_member, is_remote_data_archive_enabled, is_mixed_page_allocation_on, is_temporal_history_retention_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            database_id = (int)items[1];
            source_database_id = (int?)items[2];
            owner_sid = (Byte[])items[3];
            create_date = (DateTime)items[4];
            compatibility_level = (byte)items[5];
            collation_name = (string)items[6];
            user_access = (byte?)items[7];
            user_access_desc = (string)items[8];
            is_read_only = (bool?)items[9];
            is_auto_close_on = (bool)items[10];
            is_auto_shrink_on = (bool?)items[11];
            state = (byte?)items[12];
            state_desc = (string)items[13];
            is_in_standby = (bool?)items[14];
            is_cleanly_shutdown = (bool?)items[15];
            is_supplemental_logging_enabled = (bool?)items[16];
            snapshot_isolation_state = (byte?)items[17];
            snapshot_isolation_state_desc = (string)items[18];
            is_read_committed_snapshot_on = (bool?)items[19];
            recovery_model = (byte?)items[20];
            recovery_model_desc = (string)items[21];
            page_verify_option = (byte?)items[22];
            page_verify_option_desc = (string)items[23];
            is_auto_create_stats_on = (bool?)items[24];
            is_auto_create_stats_incremental_on = (bool?)items[25];
            is_auto_update_stats_on = (bool?)items[26];
            is_auto_update_stats_async_on = (bool?)items[27];
            is_ansi_null_default_on = (bool?)items[28];
            is_ansi_nulls_on = (bool?)items[29];
            is_ansi_padding_on = (bool?)items[30];
            is_ansi_warnings_on = (bool?)items[31];
            is_arithabort_on = (bool?)items[32];
            is_concat_null_yields_null_on = (bool?)items[33];
            is_numeric_roundabort_on = (bool?)items[34];
            is_quoted_identifier_on = (bool?)items[35];
            is_recursive_triggers_on = (bool?)items[36];
            is_cursor_close_on_commit_on = (bool?)items[37];
            is_local_cursor_default = (bool?)items[38];
            is_fulltext_enabled = (bool?)items[39];
            is_trustworthy_on = (bool?)items[40];
            is_db_chaining_on = (bool?)items[41];
            is_parameterization_forced = (bool?)items[42];
            is_master_key_encrypted_by_server = (bool)items[43];
            is_query_store_on = (bool?)items[44];
            is_published = (bool)items[45];
            is_subscribed = (bool)items[46];
            is_merge_published = (bool)items[47];
            is_distributor = (bool)items[48];
            is_sync_with_backup = (bool)items[49];
            service_broker_guid = (Guid)items[50];
            is_broker_enabled = (bool)items[51];
            log_reuse_wait = (byte?)items[52];
            log_reuse_wait_desc = (string)items[53];
            is_date_correlation_on = (bool)items[54];
            is_cdc_enabled = (bool)items[55];
            is_encrypted = (bool?)items[56];
            is_honor_broker_priority_on = (bool?)items[57];
            replica_id = (Guid?)items[58];
            group_database_id = (Guid?)items[59];
            resource_pool_id = (int?)items[60];
            default_language_lcid = (short?)items[61];
            default_language_name = (string)items[62];
            default_fulltext_language_lcid = (int?)items[63];
            default_fulltext_language_name = (string)items[64];
            is_nested_triggers_on = (bool?)items[65];
            is_transform_noise_words_on = (bool?)items[66];
            two_digit_year_cutoff = (short?)items[67];
            containment = (byte?)items[68];
            containment_desc = (string)items[69];
            target_recovery_time_in_seconds = (int?)items[70];
            delayed_durability = (int?)items[71];
            delayed_durability_desc = (string)items[72];
            is_memory_optimized_elevate_to_snapshot_on = (bool?)items[73];
            is_federation_member = (bool?)items[74];
            is_remote_data_archive_enabled = (bool?)items[75];
            is_mixed_page_allocation_on = (bool?)items[76];
            is_temporal_history_retention_enabled = (bool?)items[77];
        }
    }

    [SqlView("Z0", "table_types")]
    public partial class table_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 14), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        [SqlColumn("type_table_object_id", 15), SqlTypeFacets("int", false)]
        public int type_table_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized", 16), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized
        {
            get;
            set;
        }

        public table_types()
        {
        }

        public table_types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
            type_table_object_id = (int)items[15];
            is_memory_optimized = (bool?)items[16];
        }

        public table_types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, bool is_table_type, int type_table_object_id, bool? is_memory_optimized)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_table_type = is_table_type;
            this.type_table_object_id = type_table_object_id;
            this.is_memory_optimized = is_memory_optimized;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, is_table_type, type_table_object_id, is_memory_optimized };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
            type_table_object_id = (int)items[15];
            is_memory_optimized = (bool?)items[16];
        }
    }

    [SqlView("Z0", "default_constraints")]
    public partial class default_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 12), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 13), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 14), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public default_constraints()
        {
        }

        public default_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            parent_column_id = (int)items[12];
            definition = (string)items[13];
            is_system_named = (bool)items[14];
        }

        public default_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int parent_column_id, string definition, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.parent_column_id = parent_column_id;
            this.definition = definition;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, parent_column_id, definition, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            parent_column_id = (int)items[12];
            definition = (string)items[13];
            is_system_named = (bool)items[14];
        }
    }

    [SqlView("Z0", "tables")]
    public partial class tables : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("lob_data_space_id", 12), SqlTypeFacets("int", false)]
        public int lob_data_space_id
        {
            get;
            set;
        }

        [SqlColumn("filestream_data_space_id", 13), SqlTypeFacets("int", true)]
        public int? filestream_data_space_id
        {
            get;
            set;
        }

        [SqlColumn("max_column_id_used", 14), SqlTypeFacets("int", false)]
        public int max_column_id_used
        {
            get;
            set;
        }

        [SqlColumn("lock_on_bulk_load", 15), SqlTypeFacets("bit", false)]
        public bool lock_on_bulk_load
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 16), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 18), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 19), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_sync_tran_subscribed", 20), SqlTypeFacets("bit", true)]
        public bool? is_sync_tran_subscribed
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 21), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("text_in_row_limit", 22), SqlTypeFacets("int", true)]
        public int? text_in_row_limit
        {
            get;
            set;
        }

        [SqlColumn("large_value_types_out_of_row", 23), SqlTypeFacets("bit", true)]
        public bool? large_value_types_out_of_row
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 24), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        [SqlColumn("lock_escalation", 25), SqlTypeFacets("tinyint", true)]
        public byte? lock_escalation
        {
            get;
            set;
        }

        [SqlColumn("lock_escalation_desc", 26), SqlTypeFacets("nvarchar", true)]
        public string lock_escalation_desc
        {
            get;
            set;
        }

        [SqlColumn("is_filetable", 27), SqlTypeFacets("bit", true)]
        public bool? is_filetable
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized", 28), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized
        {
            get;
            set;
        }

        [SqlColumn("durability", 29), SqlTypeFacets("tinyint", true)]
        public byte? durability
        {
            get;
            set;
        }

        [SqlColumn("durability_desc", 30), SqlTypeFacets("nvarchar", true)]
        public string durability_desc
        {
            get;
            set;
        }

        [SqlColumn("temporal_type", 31), SqlTypeFacets("tinyint", true)]
        public byte? temporal_type
        {
            get;
            set;
        }

        [SqlColumn("temporal_type_desc", 32), SqlTypeFacets("nvarchar", true)]
        public string temporal_type_desc
        {
            get;
            set;
        }

        [SqlColumn("history_table_id", 33), SqlTypeFacets("int", true)]
        public int? history_table_id
        {
            get;
            set;
        }

        [SqlColumn("is_remote_data_archive_enabled", 34), SqlTypeFacets("bit", true)]
        public bool? is_remote_data_archive_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_external", 35), SqlTypeFacets("bit", false)]
        public bool is_external
        {
            get;
            set;
        }

        [SqlColumn("history_retention_period", 36), SqlTypeFacets("int", true)]
        public int? history_retention_period
        {
            get;
            set;
        }

        [SqlColumn("history_retention_period_unit", 37), SqlTypeFacets("int", true)]
        public int? history_retention_period_unit
        {
            get;
            set;
        }

        [SqlColumn("history_retention_period_unit_desc", 38), SqlTypeFacets("nvarchar", true)]
        public string history_retention_period_unit_desc
        {
            get;
            set;
        }

        [SqlColumn("is_node", 39), SqlTypeFacets("bit", true)]
        public bool? is_node
        {
            get;
            set;
        }

        [SqlColumn("is_edge", 40), SqlTypeFacets("bit", true)]
        public bool? is_edge
        {
            get;
            set;
        }

        public tables()
        {
        }

        public tables(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            lob_data_space_id = (int)items[12];
            filestream_data_space_id = (int?)items[13];
            max_column_id_used = (int)items[14];
            lock_on_bulk_load = (bool)items[15];
            uses_ansi_nulls = (bool?)items[16];
            is_replicated = (bool?)items[17];
            has_replication_filter = (bool?)items[18];
            is_merge_published = (bool?)items[19];
            is_sync_tran_subscribed = (bool?)items[20];
            has_unchecked_assembly_data = (bool)items[21];
            text_in_row_limit = (int?)items[22];
            large_value_types_out_of_row = (bool?)items[23];
            is_tracked_by_cdc = (bool?)items[24];
            lock_escalation = (byte?)items[25];
            lock_escalation_desc = (string)items[26];
            is_filetable = (bool?)items[27];
            is_memory_optimized = (bool?)items[28];
            durability = (byte?)items[29];
            durability_desc = (string)items[30];
            temporal_type = (byte?)items[31];
            temporal_type_desc = (string)items[32];
            history_table_id = (int?)items[33];
            is_remote_data_archive_enabled = (bool?)items[34];
            is_external = (bool)items[35];
            history_retention_period = (int?)items[36];
            history_retention_period_unit = (int?)items[37];
            history_retention_period_unit_desc = (string)items[38];
            is_node = (bool?)items[39];
            is_edge = (bool?)items[40];
        }

        public tables(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int lob_data_space_id, int? filestream_data_space_id, int max_column_id_used, bool lock_on_bulk_load, bool? uses_ansi_nulls, bool? is_replicated, bool? has_replication_filter, bool? is_merge_published, bool? is_sync_tran_subscribed, bool has_unchecked_assembly_data, int? text_in_row_limit, bool? large_value_types_out_of_row, bool? is_tracked_by_cdc, byte? lock_escalation, string lock_escalation_desc, bool? is_filetable, bool? is_memory_optimized, byte? durability, string durability_desc, byte? temporal_type, string temporal_type_desc, int? history_table_id, bool? is_remote_data_archive_enabled, bool is_external, int? history_retention_period, int? history_retention_period_unit, string history_retention_period_unit_desc, bool? is_node, bool? is_edge)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.lob_data_space_id = lob_data_space_id;
            this.filestream_data_space_id = filestream_data_space_id;
            this.max_column_id_used = max_column_id_used;
            this.lock_on_bulk_load = lock_on_bulk_load;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.is_merge_published = is_merge_published;
            this.is_sync_tran_subscribed = is_sync_tran_subscribed;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.text_in_row_limit = text_in_row_limit;
            this.large_value_types_out_of_row = large_value_types_out_of_row;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
            this.lock_escalation = lock_escalation;
            this.lock_escalation_desc = lock_escalation_desc;
            this.is_filetable = is_filetable;
            this.is_memory_optimized = is_memory_optimized;
            this.durability = durability;
            this.durability_desc = durability_desc;
            this.temporal_type = temporal_type;
            this.temporal_type_desc = temporal_type_desc;
            this.history_table_id = history_table_id;
            this.is_remote_data_archive_enabled = is_remote_data_archive_enabled;
            this.is_external = is_external;
            this.history_retention_period = history_retention_period;
            this.history_retention_period_unit = history_retention_period_unit;
            this.history_retention_period_unit_desc = history_retention_period_unit_desc;
            this.is_node = is_node;
            this.is_edge = is_edge;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, lob_data_space_id, filestream_data_space_id, max_column_id_used, lock_on_bulk_load, uses_ansi_nulls, is_replicated, has_replication_filter, is_merge_published, is_sync_tran_subscribed, has_unchecked_assembly_data, text_in_row_limit, large_value_types_out_of_row, is_tracked_by_cdc, lock_escalation, lock_escalation_desc, is_filetable, is_memory_optimized, durability, durability_desc, temporal_type, temporal_type_desc, history_table_id, is_remote_data_archive_enabled, is_external, history_retention_period, history_retention_period_unit, history_retention_period_unit_desc, is_node, is_edge };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            lob_data_space_id = (int)items[12];
            filestream_data_space_id = (int?)items[13];
            max_column_id_used = (int)items[14];
            lock_on_bulk_load = (bool)items[15];
            uses_ansi_nulls = (bool?)items[16];
            is_replicated = (bool?)items[17];
            has_replication_filter = (bool?)items[18];
            is_merge_published = (bool?)items[19];
            is_sync_tran_subscribed = (bool?)items[20];
            has_unchecked_assembly_data = (bool)items[21];
            text_in_row_limit = (int?)items[22];
            large_value_types_out_of_row = (bool?)items[23];
            is_tracked_by_cdc = (bool?)items[24];
            lock_escalation = (byte?)items[25];
            lock_escalation_desc = (string)items[26];
            is_filetable = (bool?)items[27];
            is_memory_optimized = (bool?)items[28];
            durability = (byte?)items[29];
            durability_desc = (string)items[30];
            temporal_type = (byte?)items[31];
            temporal_type_desc = (string)items[32];
            history_table_id = (int?)items[33];
            is_remote_data_archive_enabled = (bool?)items[34];
            is_external = (bool)items[35];
            history_retention_period = (int?)items[36];
            history_retention_period_unit = (int?)items[37];
            history_retention_period_unit_desc = (string)items[38];
            is_node = (bool?)items[39];
            is_edge = (bool?)items[40];
        }
    }

    [SqlView("Z0", "destination_data_spaces")]
    public partial class destination_data_spaces : SqlViewProxy
    {
        [SqlColumn("partition_scheme_id", 0), SqlTypeFacets("int", false)]
        public int partition_scheme_id
        {
            get;
            set;
        }

        [SqlColumn("destination_id", 1), SqlTypeFacets("int", false)]
        public int destination_id
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 2), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        public destination_data_spaces()
        {
        }

        public destination_data_spaces(object[] items)
        {
            partition_scheme_id = (int)items[0];
            destination_id = (int)items[1];
            data_space_id = (int)items[2];
        }

        public destination_data_spaces(int partition_scheme_id, int destination_id, int data_space_id)
        {
            this.partition_scheme_id = partition_scheme_id;
            this.destination_id = destination_id;
            this.data_space_id = data_space_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_scheme_id, destination_id, data_space_id };
        }

        public override void SetItemArray(object[] items)
        {
            partition_scheme_id = (int)items[0];
            destination_id = (int)items[1];
            data_space_id = (int)items[2];
        }
    }

    [SqlView("Z0", "tcp_endpoints")]
    public partial class tcp_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("port", 10), SqlTypeFacets("int", false)]
        public int port
        {
            get;
            set;
        }

        [SqlColumn("is_dynamic_port", 11), SqlTypeFacets("bit", false)]
        public bool is_dynamic_port
        {
            get;
            set;
        }

        [SqlColumn("ip_address", 12), SqlTypeFacets("varchar", true)]
        public string ip_address
        {
            get;
            set;
        }

        public tcp_endpoints()
        {
        }

        public tcp_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            port = (int)items[10];
            is_dynamic_port = (bool)items[11];
            ip_address = (string)items[12];
        }

        public tcp_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, int port, bool is_dynamic_port, string ip_address)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.port = port;
            this.is_dynamic_port = is_dynamic_port;
            this.ip_address = ip_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, port, is_dynamic_port, ip_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            port = (int)items[10];
            is_dynamic_port = (bool)items[11];
            ip_address = (string)items[12];
        }
    }

    [SqlView("Z0", "dm_audit_actions")]
    public partial class dm_audit_actions : SqlViewProxy
    {
        [SqlColumn("action_id", 0), SqlTypeFacets("varchar", true)]
        public string action_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 2), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("covering_action_name", 3), SqlTypeFacets("nvarchar", true)]
        public string covering_action_name
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("covering_parent_action_name", 5), SqlTypeFacets("nvarchar", true)]
        public string covering_parent_action_name
        {
            get;
            set;
        }

        [SqlColumn("configuration_level", 6), SqlTypeFacets("nvarchar", true)]
        public string configuration_level
        {
            get;
            set;
        }

        [SqlColumn("containing_group_name", 7), SqlTypeFacets("nvarchar", true)]
        public string containing_group_name
        {
            get;
            set;
        }

        [SqlColumn("action_in_log", 8), SqlTypeFacets("bit", false)]
        public bool action_in_log
        {
            get;
            set;
        }

        public dm_audit_actions()
        {
        }

        public dm_audit_actions(object[] items)
        {
            action_id = (string)items[0];
            name = (string)items[1];
            class_desc = (string)items[2];
            covering_action_name = (string)items[3];
            parent_class_desc = (string)items[4];
            covering_parent_action_name = (string)items[5];
            configuration_level = (string)items[6];
            containing_group_name = (string)items[7];
            action_in_log = (bool)items[8];
        }

        public dm_audit_actions(string action_id, string name, string class_desc, string covering_action_name, string parent_class_desc, string covering_parent_action_name, string configuration_level, string containing_group_name, bool action_in_log)
        {
            this.action_id = action_id;
            this.name = name;
            this.class_desc = class_desc;
            this.covering_action_name = covering_action_name;
            this.parent_class_desc = parent_class_desc;
            this.covering_parent_action_name = covering_parent_action_name;
            this.configuration_level = configuration_level;
            this.containing_group_name = containing_group_name;
            this.action_in_log = action_in_log;
        }

        public override object[] GetItemArray()
        {
            return new object[] { action_id, name, class_desc, covering_action_name, parent_class_desc, covering_parent_action_name, configuration_level, containing_group_name, action_in_log };
        }

        public override void SetItemArray(object[] items)
        {
            action_id = (string)items[0];
            name = (string)items[1];
            class_desc = (string)items[2];
            covering_action_name = (string)items[3];
            parent_class_desc = (string)items[4];
            covering_parent_action_name = (string)items[5];
            configuration_level = (string)items[6];
            containing_group_name = (string)items[7];
            action_in_log = (bool)items[8];
        }
    }

    [SqlView("Z0", "time_zone_info")]
    public partial class time_zone_info : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("current_utc_offset", 1), SqlTypeFacets("nvarchar", false)]
        public string current_utc_offset
        {
            get;
            set;
        }

        [SqlColumn("is_currently_dst", 2), SqlTypeFacets("bit", false)]
        public bool is_currently_dst
        {
            get;
            set;
        }

        public time_zone_info()
        {
        }

        public time_zone_info(object[] items)
        {
            name = (string)items[0];
            current_utc_offset = (string)items[1];
            is_currently_dst = (bool)items[2];
        }

        public time_zone_info(string name, string current_utc_offset, bool is_currently_dst)
        {
            this.name = name;
            this.current_utc_offset = current_utc_offset;
            this.is_currently_dst = is_currently_dst;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, current_utc_offset, is_currently_dst };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            current_utc_offset = (string)items[1];
            is_currently_dst = (bool)items[2];
        }
    }

    [SqlView("Z0", "dm_audit_class_type_map")]
    public partial class dm_audit_class_type_map : SqlViewProxy
    {
        [SqlColumn("class_type", 0), SqlTypeFacets("varchar", true)]
        public string class_type
        {
            get;
            set;
        }

        [SqlColumn("class_type_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_type_desc
        {
            get;
            set;
        }

        [SqlColumn("securable_class_desc", 2), SqlTypeFacets("nvarchar", true)]
        public string securable_class_desc
        {
            get;
            set;
        }

        public dm_audit_class_type_map()
        {
        }

        public dm_audit_class_type_map(object[] items)
        {
            class_type = (string)items[0];
            class_type_desc = (string)items[1];
            securable_class_desc = (string)items[2];
        }

        public dm_audit_class_type_map(string class_type, string class_type_desc, string securable_class_desc)
        {
            this.class_type = class_type;
            this.class_type_desc = class_type_desc;
            this.securable_class_desc = securable_class_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { class_type, class_type_desc, securable_class_desc };
        }

        public override void SetItemArray(object[] items)
        {
            class_type = (string)items[0];
            class_type_desc = (string)items[1];
            securable_class_desc = (string)items[2];
        }
    }

    [SqlView("Z0", "trace_categories")]
    public partial class trace_categories : SqlViewProxy
    {
        [SqlColumn("category_id", 0), SqlTypeFacets("smallint", false)]
        public short category_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        public trace_categories()
        {
        }

        public trace_categories(object[] items)
        {
            category_id = (short)items[0];
            name = (string)items[1];
            type = (byte)items[2];
        }

        public trace_categories(short category_id, string name, byte type)
        {
            this.category_id = category_id;
            this.name = name;
            this.type = type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { category_id, name, type };
        }

        public override void SetItemArray(object[] items)
        {
            category_id = (short)items[0];
            name = (string)items[1];
            type = (byte)items[2];
        }
    }

    [SqlView("Z0", "dm_broker_activated_tasks")]
    public partial class dm_broker_activated_tasks : SqlViewProxy
    {
        [SqlColumn("spid", 0), SqlTypeFacets("int", true)]
        public int? spid
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("queue_id", 2), SqlTypeFacets("int", true)]
        public int? queue_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_name", 3), SqlTypeFacets("nvarchar", true)]
        public string procedure_name
        {
            get;
            set;
        }

        [SqlColumn("execute_as", 4), SqlTypeFacets("int", true)]
        public int? execute_as
        {
            get;
            set;
        }

        public dm_broker_activated_tasks()
        {
        }

        public dm_broker_activated_tasks(object[] items)
        {
            spid = (int?)items[0];
            database_id = (short?)items[1];
            queue_id = (int?)items[2];
            procedure_name = (string)items[3];
            execute_as = (int?)items[4];
        }

        public dm_broker_activated_tasks(int? spid, short? database_id, int? queue_id, string procedure_name, int? execute_as)
        {
            this.spid = spid;
            this.database_id = database_id;
            this.queue_id = queue_id;
            this.procedure_name = procedure_name;
            this.execute_as = execute_as;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spid, database_id, queue_id, procedure_name, execute_as };
        }

        public override void SetItemArray(object[] items)
        {
            spid = (int?)items[0];
            database_id = (short?)items[1];
            queue_id = (int?)items[2];
            procedure_name = (string)items[3];
            execute_as = (int?)items[4];
        }
    }

    [SqlView("Z0", "trace_columns")]
    public partial class trace_columns : SqlViewProxy
    {
        [SqlColumn("trace_column_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type_name", 2), SqlTypeFacets("nvarchar", true)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("max_size", 3), SqlTypeFacets("int", true)]
        public int? max_size
        {
            get;
            set;
        }

        [SqlColumn("is_filterable", 4), SqlTypeFacets("bit", false)]
        public bool is_filterable
        {
            get;
            set;
        }

        [SqlColumn("is_repeatable", 5), SqlTypeFacets("bit", false)]
        public bool is_repeatable
        {
            get;
            set;
        }

        [SqlColumn("is_repeated_base", 6), SqlTypeFacets("bit", false)]
        public bool is_repeated_base
        {
            get;
            set;
        }

        public trace_columns()
        {
        }

        public trace_columns(object[] items)
        {
            trace_column_id = (short)items[0];
            name = (string)items[1];
            type_name = (string)items[2];
            max_size = (int?)items[3];
            is_filterable = (bool)items[4];
            is_repeatable = (bool)items[5];
            is_repeated_base = (bool)items[6];
        }

        public trace_columns(short trace_column_id, string name, string type_name, int? max_size, bool is_filterable, bool is_repeatable, bool is_repeated_base)
        {
            this.trace_column_id = trace_column_id;
            this.name = name;
            this.type_name = type_name;
            this.max_size = max_size;
            this.is_filterable = is_filterable;
            this.is_repeatable = is_repeatable;
            this.is_repeated_base = is_repeated_base;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_column_id, name, type_name, max_size, is_filterable, is_repeatable, is_repeated_base };
        }

        public override void SetItemArray(object[] items)
        {
            trace_column_id = (short)items[0];
            name = (string)items[1];
            type_name = (string)items[2];
            max_size = (int?)items[3];
            is_filterable = (bool)items[4];
            is_repeatable = (bool)items[5];
            is_repeated_base = (bool)items[6];
        }
    }

    [SqlView("Z0", "dm_broker_connections")]
    public partial class dm_broker_connections : SqlViewProxy
    {
        [SqlColumn("connection_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? connection_id
        {
            get;
            set;
        }

        [SqlColumn("transport_stream_id", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? transport_stream_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("smallint", true)]
        public short? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("connect_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? connect_time
        {
            get;
            set;
        }

        [SqlColumn("login_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? login_time
        {
            get;
            set;
        }

        [SqlColumn("authentication_method", 6), SqlTypeFacets("nvarchar", true)]
        public string authentication_method
        {
            get;
            set;
        }

        [SqlColumn("principal_name", 7), SqlTypeFacets("nvarchar", true)]
        public string principal_name
        {
            get;
            set;
        }

        [SqlColumn("remote_user_name", 8), SqlTypeFacets("nvarchar", true)]
        public string remote_user_name
        {
            get;
            set;
        }

        [SqlColumn("last_activity_time", 9), SqlTypeFacets("datetime", true)]
        public DateTime? last_activity_time
        {
            get;
            set;
        }

        [SqlColumn("is_accept", 10), SqlTypeFacets("bit", true)]
        public bool? is_accept
        {
            get;
            set;
        }

        [SqlColumn("login_state", 11), SqlTypeFacets("smallint", true)]
        public short? login_state
        {
            get;
            set;
        }

        [SqlColumn("login_state_desc", 12), SqlTypeFacets("nvarchar", true)]
        public string login_state_desc
        {
            get;
            set;
        }

        [SqlColumn("peer_certificate_id", 13), SqlTypeFacets("int", true)]
        public int? peer_certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 14), SqlTypeFacets("smallint", true)]
        public short? encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 15), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("receives_posted", 16), SqlTypeFacets("smallint", true)]
        public short? receives_posted
        {
            get;
            set;
        }

        [SqlColumn("is_receive_flow_controlled", 17), SqlTypeFacets("bit", true)]
        public bool? is_receive_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("sends_posted", 18), SqlTypeFacets("smallint", true)]
        public short? sends_posted
        {
            get;
            set;
        }

        [SqlColumn("is_send_flow_controlled", 19), SqlTypeFacets("bit", true)]
        public bool? is_send_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_sent", 20), SqlTypeFacets("bigint", true)]
        public long? total_bytes_sent
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_received", 21), SqlTypeFacets("bigint", true)]
        public long? total_bytes_received
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_sent", 22), SqlTypeFacets("bigint", true)]
        public long? total_fragments_sent
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_received", 23), SqlTypeFacets("bigint", true)]
        public long? total_fragments_received
        {
            get;
            set;
        }

        [SqlColumn("total_sends", 24), SqlTypeFacets("bigint", true)]
        public long? total_sends
        {
            get;
            set;
        }

        [SqlColumn("total_receives", 25), SqlTypeFacets("bigint", true)]
        public long? total_receives
        {
            get;
            set;
        }

        [SqlColumn("peer_arbitration_id", 26), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? peer_arbitration_id
        {
            get;
            set;
        }

        public dm_broker_connections()
        {
        }

        public dm_broker_connections(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }

        public dm_broker_connections(Guid? connection_id, Guid? transport_stream_id, short? state, string state_desc, DateTime? connect_time, DateTime? login_time, string authentication_method, string principal_name, string remote_user_name, DateTime? last_activity_time, bool? is_accept, short? login_state, string login_state_desc, int? peer_certificate_id, short? encryption_algorithm, string encryption_algorithm_desc, short? receives_posted, bool? is_receive_flow_controlled, short? sends_posted, bool? is_send_flow_controlled, long? total_bytes_sent, long? total_bytes_received, long? total_fragments_sent, long? total_fragments_received, long? total_sends, long? total_receives, Guid? peer_arbitration_id)
        {
            this.connection_id = connection_id;
            this.transport_stream_id = transport_stream_id;
            this.state = state;
            this.state_desc = state_desc;
            this.connect_time = connect_time;
            this.login_time = login_time;
            this.authentication_method = authentication_method;
            this.principal_name = principal_name;
            this.remote_user_name = remote_user_name;
            this.last_activity_time = last_activity_time;
            this.is_accept = is_accept;
            this.login_state = login_state;
            this.login_state_desc = login_state_desc;
            this.peer_certificate_id = peer_certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
            this.receives_posted = receives_posted;
            this.is_receive_flow_controlled = is_receive_flow_controlled;
            this.sends_posted = sends_posted;
            this.is_send_flow_controlled = is_send_flow_controlled;
            this.total_bytes_sent = total_bytes_sent;
            this.total_bytes_received = total_bytes_received;
            this.total_fragments_sent = total_fragments_sent;
            this.total_fragments_received = total_fragments_received;
            this.total_sends = total_sends;
            this.total_receives = total_receives;
            this.peer_arbitration_id = peer_arbitration_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { connection_id, transport_stream_id, state, state_desc, connect_time, login_time, authentication_method, principal_name, remote_user_name, last_activity_time, is_accept, login_state, login_state_desc, peer_certificate_id, encryption_algorithm, encryption_algorithm_desc, receives_posted, is_receive_flow_controlled, sends_posted, is_send_flow_controlled, total_bytes_sent, total_bytes_received, total_fragments_sent, total_fragments_received, total_sends, total_receives, peer_arbitration_id };
        }

        public override void SetItemArray(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }
    }

    [SqlView("Z0", "trace_event_bindings")]
    public partial class trace_event_bindings : SqlViewProxy
    {
        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("trace_column_id", 1), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        public trace_event_bindings()
        {
        }

        public trace_event_bindings(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
        }

        public trace_event_bindings(short trace_event_id, short trace_column_id)
        {
            this.trace_event_id = trace_event_id;
            this.trace_column_id = trace_column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_event_id, trace_column_id };
        }

        public override void SetItemArray(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
        }
    }

    [SqlView("Z0", "dm_broker_forwarded_messages")]
    public partial class dm_broker_forwarded_messages : SqlViewProxy
    {
        [SqlColumn("conversation_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? conversation_id
        {
            get;
            set;
        }

        [SqlColumn("is_initiator", 1), SqlTypeFacets("bit", true)]
        public bool? is_initiator
        {
            get;
            set;
        }

        [SqlColumn("to_service_name", 2), SqlTypeFacets("nvarchar", true)]
        public string to_service_name
        {
            get;
            set;
        }

        [SqlColumn("to_broker_instance", 3), SqlTypeFacets("nvarchar", true)]
        public string to_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("from_service_name", 4), SqlTypeFacets("nvarchar", true)]
        public string from_service_name
        {
            get;
            set;
        }

        [SqlColumn("from_broker_instance", 5), SqlTypeFacets("nvarchar", true)]
        public string from_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("adjacent_broker_address", 6), SqlTypeFacets("nvarchar", true)]
        public string adjacent_broker_address
        {
            get;
            set;
        }

        [SqlColumn("message_sequence_number", 7), SqlTypeFacets("bigint", true)]
        public long? message_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("message_fragment_number", 8), SqlTypeFacets("int", true)]
        public int? message_fragment_number
        {
            get;
            set;
        }

        [SqlColumn("hops_remaining", 9), SqlTypeFacets("tinyint", true)]
        public byte? hops_remaining
        {
            get;
            set;
        }

        [SqlColumn("time_to_live", 10), SqlTypeFacets("int", true)]
        public int? time_to_live
        {
            get;
            set;
        }

        [SqlColumn("time_consumed", 11), SqlTypeFacets("int", true)]
        public int? time_consumed
        {
            get;
            set;
        }

        [SqlColumn("message_id", 12), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? message_id
        {
            get;
            set;
        }

        public dm_broker_forwarded_messages()
        {
        }

        public dm_broker_forwarded_messages(object[] items)
        {
            conversation_id = (Guid?)items[0];
            is_initiator = (bool?)items[1];
            to_service_name = (string)items[2];
            to_broker_instance = (string)items[3];
            from_service_name = (string)items[4];
            from_broker_instance = (string)items[5];
            adjacent_broker_address = (string)items[6];
            message_sequence_number = (long?)items[7];
            message_fragment_number = (int?)items[8];
            hops_remaining = (byte?)items[9];
            time_to_live = (int?)items[10];
            time_consumed = (int?)items[11];
            message_id = (Guid?)items[12];
        }

        public dm_broker_forwarded_messages(Guid? conversation_id, bool? is_initiator, string to_service_name, string to_broker_instance, string from_service_name, string from_broker_instance, string adjacent_broker_address, long? message_sequence_number, int? message_fragment_number, byte? hops_remaining, int? time_to_live, int? time_consumed, Guid? message_id)
        {
            this.conversation_id = conversation_id;
            this.is_initiator = is_initiator;
            this.to_service_name = to_service_name;
            this.to_broker_instance = to_broker_instance;
            this.from_service_name = from_service_name;
            this.from_broker_instance = from_broker_instance;
            this.adjacent_broker_address = adjacent_broker_address;
            this.message_sequence_number = message_sequence_number;
            this.message_fragment_number = message_fragment_number;
            this.hops_remaining = hops_remaining;
            this.time_to_live = time_to_live;
            this.time_consumed = time_consumed;
            this.message_id = message_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_id, is_initiator, to_service_name, to_broker_instance, from_service_name, from_broker_instance, adjacent_broker_address, message_sequence_number, message_fragment_number, hops_remaining, time_to_live, time_consumed, message_id };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_id = (Guid?)items[0];
            is_initiator = (bool?)items[1];
            to_service_name = (string)items[2];
            to_broker_instance = (string)items[3];
            from_service_name = (string)items[4];
            from_broker_instance = (string)items[5];
            adjacent_broker_address = (string)items[6];
            message_sequence_number = (long?)items[7];
            message_fragment_number = (int?)items[8];
            hops_remaining = (byte?)items[9];
            time_to_live = (int?)items[10];
            time_consumed = (int?)items[11];
            message_id = (Guid?)items[12];
        }
    }

    [SqlView("Z0", "trace_events")]
    public partial class trace_events : SqlViewProxy
    {
        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("category_id", 1), SqlTypeFacets("smallint", false)]
        public short category_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        public trace_events()
        {
        }

        public trace_events(object[] items)
        {
            trace_event_id = (short)items[0];
            category_id = (short)items[1];
            name = (string)items[2];
        }

        public trace_events(short trace_event_id, short category_id, string name)
        {
            this.trace_event_id = trace_event_id;
            this.category_id = category_id;
            this.name = name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_event_id, category_id, name };
        }

        public override void SetItemArray(object[] items)
        {
            trace_event_id = (short)items[0];
            category_id = (short)items[1];
            name = (string)items[2];
        }
    }

    [SqlView("Z0", "dm_broker_queue_monitors")]
    public partial class dm_broker_queue_monitors : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("queue_id", 1), SqlTypeFacets("int", true)]
        public int? queue_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("nvarchar", true)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("last_empty_rowset_time", 3), SqlTypeFacets("datetime", true)]
        public DateTime? last_empty_rowset_time
        {
            get;
            set;
        }

        [SqlColumn("last_activated_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? last_activated_time
        {
            get;
            set;
        }

        [SqlColumn("tasks_waiting", 5), SqlTypeFacets("int", true)]
        public int? tasks_waiting
        {
            get;
            set;
        }

        public dm_broker_queue_monitors()
        {
        }

        public dm_broker_queue_monitors(object[] items)
        {
            database_id = (int?)items[0];
            queue_id = (int?)items[1];
            state = (string)items[2];
            last_empty_rowset_time = (DateTime?)items[3];
            last_activated_time = (DateTime?)items[4];
            tasks_waiting = (int?)items[5];
        }

        public dm_broker_queue_monitors(int? database_id, int? queue_id, string state, DateTime? last_empty_rowset_time, DateTime? last_activated_time, int? tasks_waiting)
        {
            this.database_id = database_id;
            this.queue_id = queue_id;
            this.state = state;
            this.last_empty_rowset_time = last_empty_rowset_time;
            this.last_activated_time = last_activated_time;
            this.tasks_waiting = tasks_waiting;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, queue_id, state, last_empty_rowset_time, last_activated_time, tasks_waiting };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            queue_id = (int?)items[1];
            state = (string)items[2];
            last_empty_rowset_time = (DateTime?)items[3];
            last_activated_time = (DateTime?)items[4];
            tasks_waiting = (int?)items[5];
        }
    }

    [SqlView("Z0", "trace_subclass_values")]
    public partial class trace_subclass_values : SqlViewProxy
    {
        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("trace_column_id", 1), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        [SqlColumn("subclass_name", 2), SqlTypeFacets("nvarchar", true)]
        public string subclass_name
        {
            get;
            set;
        }

        [SqlColumn("subclass_value", 3), SqlTypeFacets("smallint", true)]
        public short? subclass_value
        {
            get;
            set;
        }

        public trace_subclass_values()
        {
        }

        public trace_subclass_values(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
            subclass_name = (string)items[2];
            subclass_value = (short?)items[3];
        }

        public trace_subclass_values(short trace_event_id, short trace_column_id, string subclass_name, short? subclass_value)
        {
            this.trace_event_id = trace_event_id;
            this.trace_column_id = trace_column_id;
            this.subclass_name = subclass_name;
            this.subclass_value = subclass_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_event_id, trace_column_id, subclass_name, subclass_value };
        }

        public override void SetItemArray(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
            subclass_name = (string)items[2];
            subclass_value = (short?)items[3];
        }
    }

    [SqlView("Z0", "dm_cdc_errors")]
    public partial class dm_cdc_errors : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("phase_number", 1), SqlTypeFacets("int", true)]
        public int? phase_number
        {
            get;
            set;
        }

        [SqlColumn("entry_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? entry_time
        {
            get;
            set;
        }

        [SqlColumn("error_number", 3), SqlTypeFacets("int", true)]
        public int? error_number
        {
            get;
            set;
        }

        [SqlColumn("error_severity", 4), SqlTypeFacets("int", true)]
        public int? error_severity
        {
            get;
            set;
        }

        [SqlColumn("error_state", 5), SqlTypeFacets("int", true)]
        public int? error_state
        {
            get;
            set;
        }

        [SqlColumn("error_message", 6), SqlTypeFacets("nvarchar", true)]
        public string error_message
        {
            get;
            set;
        }

        [SqlColumn("start_lsn", 7), SqlTypeFacets("nvarchar", true)]
        public string start_lsn
        {
            get;
            set;
        }

        [SqlColumn("begin_lsn", 8), SqlTypeFacets("nvarchar", true)]
        public string begin_lsn
        {
            get;
            set;
        }

        [SqlColumn("sequence_value", 9), SqlTypeFacets("nvarchar", true)]
        public string sequence_value
        {
            get;
            set;
        }

        public dm_cdc_errors()
        {
        }

        public dm_cdc_errors(object[] items)
        {
            session_id = (int?)items[0];
            phase_number = (int?)items[1];
            entry_time = (DateTime?)items[2];
            error_number = (int?)items[3];
            error_severity = (int?)items[4];
            error_state = (int?)items[5];
            error_message = (string)items[6];
            start_lsn = (string)items[7];
            begin_lsn = (string)items[8];
            sequence_value = (string)items[9];
        }

        public dm_cdc_errors(int? session_id, int? phase_number, DateTime? entry_time, int? error_number, int? error_severity, int? error_state, string error_message, string start_lsn, string begin_lsn, string sequence_value)
        {
            this.session_id = session_id;
            this.phase_number = phase_number;
            this.entry_time = entry_time;
            this.error_number = error_number;
            this.error_severity = error_severity;
            this.error_state = error_state;
            this.error_message = error_message;
            this.start_lsn = start_lsn;
            this.begin_lsn = begin_lsn;
            this.sequence_value = sequence_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, phase_number, entry_time, error_number, error_severity, error_state, error_message, start_lsn, begin_lsn, sequence_value };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int?)items[0];
            phase_number = (int?)items[1];
            entry_time = (DateTime?)items[2];
            error_number = (int?)items[3];
            error_severity = (int?)items[4];
            error_state = (int?)items[5];
            error_message = (string)items[6];
            start_lsn = (string)items[7];
            begin_lsn = (string)items[8];
            sequence_value = (string)items[9];
        }
    }

    [SqlView("Z0", "traces")]
    public partial class traces : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("path", 2), SqlTypeFacets("nvarchar", true)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("max_size", 3), SqlTypeFacets("bigint", true)]
        public long? max_size
        {
            get;
            set;
        }

        [SqlColumn("stop_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? stop_time
        {
            get;
            set;
        }

        [SqlColumn("max_files", 5), SqlTypeFacets("int", true)]
        public int? max_files
        {
            get;
            set;
        }

        [SqlColumn("is_rowset", 6), SqlTypeFacets("bit", true)]
        public bool? is_rowset
        {
            get;
            set;
        }

        [SqlColumn("is_rollover", 7), SqlTypeFacets("bit", true)]
        public bool? is_rollover
        {
            get;
            set;
        }

        [SqlColumn("is_shutdown", 8), SqlTypeFacets("bit", true)]
        public bool? is_shutdown
        {
            get;
            set;
        }

        [SqlColumn("is_default", 9), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("buffer_count", 10), SqlTypeFacets("int", true)]
        public int? buffer_count
        {
            get;
            set;
        }

        [SqlColumn("buffer_size", 11), SqlTypeFacets("int", true)]
        public int? buffer_size
        {
            get;
            set;
        }

        [SqlColumn("file_position", 12), SqlTypeFacets("bigint", true)]
        public long? file_position
        {
            get;
            set;
        }

        [SqlColumn("reader_spid", 13), SqlTypeFacets("int", true)]
        public int? reader_spid
        {
            get;
            set;
        }

        [SqlColumn("start_time", 14), SqlTypeFacets("datetime", true)]
        public DateTime? start_time
        {
            get;
            set;
        }

        [SqlColumn("last_event_time", 15), SqlTypeFacets("datetime", true)]
        public DateTime? last_event_time
        {
            get;
            set;
        }

        [SqlColumn("event_count", 16), SqlTypeFacets("bigint", true)]
        public long? event_count
        {
            get;
            set;
        }

        [SqlColumn("dropped_event_count", 17), SqlTypeFacets("int", true)]
        public int? dropped_event_count
        {
            get;
            set;
        }

        public traces()
        {
        }

        public traces(object[] items)
        {
            id = (int)items[0];
            status = (int)items[1];
            path = (string)items[2];
            max_size = (long?)items[3];
            stop_time = (DateTime?)items[4];
            max_files = (int?)items[5];
            is_rowset = (bool?)items[6];
            is_rollover = (bool?)items[7];
            is_shutdown = (bool?)items[8];
            is_default = (bool?)items[9];
            buffer_count = (int?)items[10];
            buffer_size = (int?)items[11];
            file_position = (long?)items[12];
            reader_spid = (int?)items[13];
            start_time = (DateTime?)items[14];
            last_event_time = (DateTime?)items[15];
            event_count = (long?)items[16];
            dropped_event_count = (int?)items[17];
        }

        public traces(int id, int status, string path, long? max_size, DateTime? stop_time, int? max_files, bool? is_rowset, bool? is_rollover, bool? is_shutdown, bool? is_default, int? buffer_count, int? buffer_size, long? file_position, int? reader_spid, DateTime? start_time, DateTime? last_event_time, long? event_count, int? dropped_event_count)
        {
            this.id = id;
            this.status = status;
            this.path = path;
            this.max_size = max_size;
            this.stop_time = stop_time;
            this.max_files = max_files;
            this.is_rowset = is_rowset;
            this.is_rollover = is_rollover;
            this.is_shutdown = is_shutdown;
            this.is_default = is_default;
            this.buffer_count = buffer_count;
            this.buffer_size = buffer_size;
            this.file_position = file_position;
            this.reader_spid = reader_spid;
            this.start_time = start_time;
            this.last_event_time = last_event_time;
            this.event_count = event_count;
            this.dropped_event_count = dropped_event_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, status, path, max_size, stop_time, max_files, is_rowset, is_rollover, is_shutdown, is_default, buffer_count, buffer_size, file_position, reader_spid, start_time, last_event_time, event_count, dropped_event_count };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            status = (int)items[1];
            path = (string)items[2];
            max_size = (long?)items[3];
            stop_time = (DateTime?)items[4];
            max_files = (int?)items[5];
            is_rowset = (bool?)items[6];
            is_rollover = (bool?)items[7];
            is_shutdown = (bool?)items[8];
            is_default = (bool?)items[9];
            buffer_count = (int?)items[10];
            buffer_size = (int?)items[11];
            file_position = (long?)items[12];
            reader_spid = (int?)items[13];
            start_time = (DateTime?)items[14];
            last_event_time = (DateTime?)items[15];
            event_count = (long?)items[16];
            dropped_event_count = (int?)items[17];
        }
    }

    [SqlView("Z0", "dm_cdc_log_scan_sessions")]
    public partial class dm_cdc_log_scan_sessions : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("start_time", 1), SqlTypeFacets("datetime", true)]
        public DateTime? start_time
        {
            get;
            set;
        }

        [SqlColumn("end_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? end_time
        {
            get;
            set;
        }

        [SqlColumn("duration", 3), SqlTypeFacets("int", true)]
        public int? duration
        {
            get;
            set;
        }

        [SqlColumn("scan_phase", 4), SqlTypeFacets("nvarchar", true)]
        public string scan_phase
        {
            get;
            set;
        }

        [SqlColumn("error_count", 5), SqlTypeFacets("int", true)]
        public int? error_count
        {
            get;
            set;
        }

        [SqlColumn("start_lsn", 6), SqlTypeFacets("nvarchar", true)]
        public string start_lsn
        {
            get;
            set;
        }

        [SqlColumn("current_lsn", 7), SqlTypeFacets("nvarchar", true)]
        public string current_lsn
        {
            get;
            set;
        }

        [SqlColumn("end_lsn", 8), SqlTypeFacets("nvarchar", true)]
        public string end_lsn
        {
            get;
            set;
        }

        [SqlColumn("tran_count", 9), SqlTypeFacets("bigint", true)]
        public long? tran_count
        {
            get;
            set;
        }

        [SqlColumn("last_commit_lsn", 10), SqlTypeFacets("nvarchar", true)]
        public string last_commit_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_time", 11), SqlTypeFacets("datetime", true)]
        public DateTime? last_commit_time
        {
            get;
            set;
        }

        [SqlColumn("log_record_count", 12), SqlTypeFacets("bigint", true)]
        public long? log_record_count
        {
            get;
            set;
        }

        [SqlColumn("schema_change_count", 13), SqlTypeFacets("int", true)]
        public int? schema_change_count
        {
            get;
            set;
        }

        [SqlColumn("command_count", 14), SqlTypeFacets("bigint", true)]
        public long? command_count
        {
            get;
            set;
        }

        [SqlColumn("first_begin_cdc_lsn", 15), SqlTypeFacets("nvarchar", true)]
        public string first_begin_cdc_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_cdc_lsn", 16), SqlTypeFacets("nvarchar", true)]
        public string last_commit_cdc_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_cdc_time", 17), SqlTypeFacets("datetime", true)]
        public DateTime? last_commit_cdc_time
        {
            get;
            set;
        }

        [SqlColumn("latency", 18), SqlTypeFacets("int", true)]
        public int? latency
        {
            get;
            set;
        }

        [SqlColumn("empty_scan_count", 19), SqlTypeFacets("int", true)]
        public int? empty_scan_count
        {
            get;
            set;
        }

        [SqlColumn("failed_sessions_count", 20), SqlTypeFacets("int", true)]
        public int? failed_sessions_count
        {
            get;
            set;
        }

        public dm_cdc_log_scan_sessions()
        {
        }

        public dm_cdc_log_scan_sessions(object[] items)
        {
            session_id = (int?)items[0];
            start_time = (DateTime?)items[1];
            end_time = (DateTime?)items[2];
            duration = (int?)items[3];
            scan_phase = (string)items[4];
            error_count = (int?)items[5];
            start_lsn = (string)items[6];
            current_lsn = (string)items[7];
            end_lsn = (string)items[8];
            tran_count = (long?)items[9];
            last_commit_lsn = (string)items[10];
            last_commit_time = (DateTime?)items[11];
            log_record_count = (long?)items[12];
            schema_change_count = (int?)items[13];
            command_count = (long?)items[14];
            first_begin_cdc_lsn = (string)items[15];
            last_commit_cdc_lsn = (string)items[16];
            last_commit_cdc_time = (DateTime?)items[17];
            latency = (int?)items[18];
            empty_scan_count = (int?)items[19];
            failed_sessions_count = (int?)items[20];
        }

        public dm_cdc_log_scan_sessions(int? session_id, DateTime? start_time, DateTime? end_time, int? duration, string scan_phase, int? error_count, string start_lsn, string current_lsn, string end_lsn, long? tran_count, string last_commit_lsn, DateTime? last_commit_time, long? log_record_count, int? schema_change_count, long? command_count, string first_begin_cdc_lsn, string last_commit_cdc_lsn, DateTime? last_commit_cdc_time, int? latency, int? empty_scan_count, int? failed_sessions_count)
        {
            this.session_id = session_id;
            this.start_time = start_time;
            this.end_time = end_time;
            this.duration = duration;
            this.scan_phase = scan_phase;
            this.error_count = error_count;
            this.start_lsn = start_lsn;
            this.current_lsn = current_lsn;
            this.end_lsn = end_lsn;
            this.tran_count = tran_count;
            this.last_commit_lsn = last_commit_lsn;
            this.last_commit_time = last_commit_time;
            this.log_record_count = log_record_count;
            this.schema_change_count = schema_change_count;
            this.command_count = command_count;
            this.first_begin_cdc_lsn = first_begin_cdc_lsn;
            this.last_commit_cdc_lsn = last_commit_cdc_lsn;
            this.last_commit_cdc_time = last_commit_cdc_time;
            this.latency = latency;
            this.empty_scan_count = empty_scan_count;
            this.failed_sessions_count = failed_sessions_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, start_time, end_time, duration, scan_phase, error_count, start_lsn, current_lsn, end_lsn, tran_count, last_commit_lsn, last_commit_time, log_record_count, schema_change_count, command_count, first_begin_cdc_lsn, last_commit_cdc_lsn, last_commit_cdc_time, latency, empty_scan_count, failed_sessions_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int?)items[0];
            start_time = (DateTime?)items[1];
            end_time = (DateTime?)items[2];
            duration = (int?)items[3];
            scan_phase = (string)items[4];
            error_count = (int?)items[5];
            start_lsn = (string)items[6];
            current_lsn = (string)items[7];
            end_lsn = (string)items[8];
            tran_count = (long?)items[9];
            last_commit_lsn = (string)items[10];
            last_commit_time = (DateTime?)items[11];
            log_record_count = (long?)items[12];
            schema_change_count = (int?)items[13];
            command_count = (long?)items[14];
            first_begin_cdc_lsn = (string)items[15];
            last_commit_cdc_lsn = (string)items[16];
            last_commit_cdc_time = (DateTime?)items[17];
            latency = (int?)items[18];
            empty_scan_count = (int?)items[19];
            failed_sessions_count = (int?)items[20];
        }
    }

    [SqlView("Z0", "transmission_queue")]
    public partial class transmission_queue : SqlViewProxy
    {
        [SqlColumn("conversation_handle", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_handle
        {
            get;
            set;
        }

        [SqlColumn("to_service_name", 1), SqlTypeFacets("nvarchar", true)]
        public string to_service_name
        {
            get;
            set;
        }

        [SqlColumn("to_broker_instance", 2), SqlTypeFacets("nvarchar", true)]
        public string to_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("from_service_name", 3), SqlTypeFacets("nvarchar", true)]
        public string from_service_name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_name", 4), SqlTypeFacets("nvarchar", true)]
        public string service_contract_name
        {
            get;
            set;
        }

        [SqlColumn("enqueue_time", 5), SqlTypeFacets("datetime", false)]
        public DateTime enqueue_time
        {
            get;
            set;
        }

        [SqlColumn("message_sequence_number", 6), SqlTypeFacets("bigint", false)]
        public long message_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("message_type_name", 7), SqlTypeFacets("nvarchar", true)]
        public string message_type_name
        {
            get;
            set;
        }

        [SqlColumn("is_conversation_error", 8), SqlTypeFacets("bit", false)]
        public bool is_conversation_error
        {
            get;
            set;
        }

        [SqlColumn("is_end_of_dialog", 9), SqlTypeFacets("bit", false)]
        public bool is_end_of_dialog
        {
            get;
            set;
        }

        [SqlColumn("message_body", 10), SqlTypeFacets("varbinary", true)]
        public Byte[] message_body
        {
            get;
            set;
        }

        [SqlColumn("transmission_status", 11), SqlTypeFacets("nvarchar", true)]
        public string transmission_status
        {
            get;
            set;
        }

        [SqlColumn("priority", 12), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public transmission_queue()
        {
        }

        public transmission_queue(object[] items)
        {
            conversation_handle = (Guid)items[0];
            to_service_name = (string)items[1];
            to_broker_instance = (string)items[2];
            from_service_name = (string)items[3];
            service_contract_name = (string)items[4];
            enqueue_time = (DateTime)items[5];
            message_sequence_number = (long)items[6];
            message_type_name = (string)items[7];
            is_conversation_error = (bool)items[8];
            is_end_of_dialog = (bool)items[9];
            message_body = (Byte[])items[10];
            transmission_status = (string)items[11];
            priority = (byte)items[12];
        }

        public transmission_queue(Guid conversation_handle, string to_service_name, string to_broker_instance, string from_service_name, string service_contract_name, DateTime enqueue_time, long message_sequence_number, string message_type_name, bool is_conversation_error, bool is_end_of_dialog, Byte[] message_body, string transmission_status, byte priority)
        {
            this.conversation_handle = conversation_handle;
            this.to_service_name = to_service_name;
            this.to_broker_instance = to_broker_instance;
            this.from_service_name = from_service_name;
            this.service_contract_name = service_contract_name;
            this.enqueue_time = enqueue_time;
            this.message_sequence_number = message_sequence_number;
            this.message_type_name = message_type_name;
            this.is_conversation_error = is_conversation_error;
            this.is_end_of_dialog = is_end_of_dialog;
            this.message_body = message_body;
            this.transmission_status = transmission_status;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_handle, to_service_name, to_broker_instance, from_service_name, service_contract_name, enqueue_time, message_sequence_number, message_type_name, is_conversation_error, is_end_of_dialog, message_body, transmission_status, priority };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_handle = (Guid)items[0];
            to_service_name = (string)items[1];
            to_broker_instance = (string)items[2];
            from_service_name = (string)items[3];
            service_contract_name = (string)items[4];
            enqueue_time = (DateTime)items[5];
            message_sequence_number = (long)items[6];
            message_type_name = (string)items[7];
            is_conversation_error = (bool)items[8];
            is_end_of_dialog = (bool)items[9];
            message_body = (Byte[])items[10];
            transmission_status = (string)items[11];
            priority = (byte)items[12];
        }
    }

    [SqlView("Z0", "dm_clr_appdomains")]
    public partial class dm_clr_appdomains : SqlViewProxy
    {
        [SqlColumn("appdomain_address", 0), SqlTypeFacets("varbinary", true)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("appdomain_id", 1), SqlTypeFacets("int", true)]
        public int? appdomain_id
        {
            get;
            set;
        }

        [SqlColumn("appdomain_name", 2), SqlTypeFacets("nvarchar", true)]
        public string appdomain_name
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 3), SqlTypeFacets("datetime", true)]
        public DateTime? creation_time
        {
            get;
            set;
        }

        [SqlColumn("db_id", 4), SqlTypeFacets("int", true)]
        public int? db_id
        {
            get;
            set;
        }

        [SqlColumn("user_id", 5), SqlTypeFacets("int", true)]
        public int? user_id
        {
            get;
            set;
        }

        [SqlColumn("state", 6), SqlTypeFacets("nvarchar", true)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("strong_refcount", 7), SqlTypeFacets("int", true)]
        public int? strong_refcount
        {
            get;
            set;
        }

        [SqlColumn("weak_refcount", 8), SqlTypeFacets("int", true)]
        public int? weak_refcount
        {
            get;
            set;
        }

        [SqlColumn("cost", 9), SqlTypeFacets("int", true)]
        public int? cost
        {
            get;
            set;
        }

        [SqlColumn("value", 10), SqlTypeFacets("int", true)]
        public int? value
        {
            get;
            set;
        }

        [SqlColumn("compatibility_level", 11), SqlTypeFacets("int", true)]
        public int? compatibility_level
        {
            get;
            set;
        }

        [SqlColumn("total_processor_time_ms", 12), SqlTypeFacets("bigint", true)]
        public long? total_processor_time_ms
        {
            get;
            set;
        }

        [SqlColumn("total_allocated_memory_kb", 13), SqlTypeFacets("bigint", true)]
        public long? total_allocated_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("survived_memory_kb", 14), SqlTypeFacets("bigint", true)]
        public long? survived_memory_kb
        {
            get;
            set;
        }

        public dm_clr_appdomains()
        {
        }

        public dm_clr_appdomains(object[] items)
        {
            appdomain_address = (Byte[])items[0];
            appdomain_id = (int?)items[1];
            appdomain_name = (string)items[2];
            creation_time = (DateTime?)items[3];
            db_id = (int?)items[4];
            user_id = (int?)items[5];
            state = (string)items[6];
            strong_refcount = (int?)items[7];
            weak_refcount = (int?)items[8];
            cost = (int?)items[9];
            value = (int?)items[10];
            compatibility_level = (int?)items[11];
            total_processor_time_ms = (long?)items[12];
            total_allocated_memory_kb = (long?)items[13];
            survived_memory_kb = (long?)items[14];
        }

        public dm_clr_appdomains(Byte[] appdomain_address, int? appdomain_id, string appdomain_name, DateTime? creation_time, int? db_id, int? user_id, string state, int? strong_refcount, int? weak_refcount, int? cost, int? value, int? compatibility_level, long? total_processor_time_ms, long? total_allocated_memory_kb, long? survived_memory_kb)
        {
            this.appdomain_address = appdomain_address;
            this.appdomain_id = appdomain_id;
            this.appdomain_name = appdomain_name;
            this.creation_time = creation_time;
            this.db_id = db_id;
            this.user_id = user_id;
            this.state = state;
            this.strong_refcount = strong_refcount;
            this.weak_refcount = weak_refcount;
            this.cost = cost;
            this.value = value;
            this.compatibility_level = compatibility_level;
            this.total_processor_time_ms = total_processor_time_ms;
            this.total_allocated_memory_kb = total_allocated_memory_kb;
            this.survived_memory_kb = survived_memory_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { appdomain_address, appdomain_id, appdomain_name, creation_time, db_id, user_id, state, strong_refcount, weak_refcount, cost, value, compatibility_level, total_processor_time_ms, total_allocated_memory_kb, survived_memory_kb };
        }

        public override void SetItemArray(object[] items)
        {
            appdomain_address = (Byte[])items[0];
            appdomain_id = (int?)items[1];
            appdomain_name = (string)items[2];
            creation_time = (DateTime?)items[3];
            db_id = (int?)items[4];
            user_id = (int?)items[5];
            state = (string)items[6];
            strong_refcount = (int?)items[7];
            weak_refcount = (int?)items[8];
            cost = (int?)items[9];
            value = (int?)items[10];
            compatibility_level = (int?)items[11];
            total_processor_time_ms = (long?)items[12];
            total_allocated_memory_kb = (long?)items[13];
            survived_memory_kb = (long?)items[14];
        }
    }

    [SqlView("Z0", "trigger_event_types")]
    public partial class trigger_event_types : SqlViewProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_name", 1), SqlTypeFacets("nvarchar", true)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("parent_type", 2), SqlTypeFacets("int", true)]
        public int? parent_type
        {
            get;
            set;
        }

        public trigger_event_types()
        {
        }

        public trigger_event_types(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }

        public trigger_event_types(int type, string type_name, int? parent_type)
        {
            this.type = type;
            this.type_name = type_name;
            this.parent_type = parent_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, type_name, parent_type };
        }

        public override void SetItemArray(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }
    }

    [SqlView("Z0", "dm_clr_loaded_assemblies")]
    public partial class dm_clr_loaded_assemblies : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", true)]
        public int? assembly_id
        {
            get;
            set;
        }

        [SqlColumn("appdomain_address", 1), SqlTypeFacets("varbinary", true)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("load_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? load_time
        {
            get;
            set;
        }

        public dm_clr_loaded_assemblies()
        {
        }

        public dm_clr_loaded_assemblies(object[] items)
        {
            assembly_id = (int?)items[0];
            appdomain_address = (Byte[])items[1];
            load_time = (DateTime?)items[2];
        }

        public dm_clr_loaded_assemblies(int? assembly_id, Byte[] appdomain_address, DateTime? load_time)
        {
            this.assembly_id = assembly_id;
            this.appdomain_address = appdomain_address;
            this.load_time = load_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, appdomain_address, load_time };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int?)items[0];
            appdomain_address = (Byte[])items[1];
            load_time = (DateTime?)items[2];
        }
    }

    [SqlView("Z0", "trigger_events")]
    public partial class trigger_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_first", 3), SqlTypeFacets("bit", true)]
        public bool? is_first
        {
            get;
            set;
        }

        [SqlColumn("is_last", 4), SqlTypeFacets("bit", true)]
        public bool? is_last
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 5), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 7), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        public trigger_events()
        {
        }

        public trigger_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_first = (bool?)items[3];
            is_last = (bool?)items[4];
            event_group_type = (int?)items[5];
            event_group_type_desc = (string)items[6];
            is_trigger_event = (bool?)items[7];
        }

        public trigger_events(int object_id, int type, string type_desc, bool? is_first, bool? is_last, int? event_group_type, string event_group_type_desc, bool? is_trigger_event)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_first = is_first;
            this.is_last = is_last;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
            this.is_trigger_event = is_trigger_event;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_first, is_last, event_group_type, event_group_type_desc, is_trigger_event };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_first = (bool?)items[3];
            is_last = (bool?)items[4];
            event_group_type = (int?)items[5];
            event_group_type_desc = (string)items[6];
            is_trigger_event = (bool?)items[7];
        }
    }

    [SqlView("Z0", "dm_clr_properties")]
    public partial class dm_clr_properties : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 1), SqlTypeFacets("nvarchar", true)]
        public string value
        {
            get;
            set;
        }

        public dm_clr_properties()
        {
        }

        public dm_clr_properties(object[] items)
        {
            name = (string)items[0];
            value = (string)items[1];
        }

        public dm_clr_properties(string name, string value)
        {
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            value = (string)items[1];
        }
    }

    [SqlView("Z0", "triggers")]
    public partial class triggers : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 10), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 11), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_instead_of_trigger", 12), SqlTypeFacets("bit", false)]
        public bool is_instead_of_trigger
        {
            get;
            set;
        }

        public triggers()
        {
        }

        public triggers(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            is_instead_of_trigger = (bool)items[12];
        }

        public triggers(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_disabled, bool is_not_for_replication, bool is_instead_of_trigger)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_instead_of_trigger = is_instead_of_trigger;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_disabled, is_not_for_replication, is_instead_of_trigger };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            is_instead_of_trigger = (bool)items[12];
        }
    }

    [SqlView("Z0", "dm_clr_tasks")]
    public partial class dm_clr_tasks : SqlViewProxy
    {
        [SqlColumn("task_address", 0), SqlTypeFacets("varbinary", true)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("sos_task_address", 1), SqlTypeFacets("varbinary", true)]
        public Byte[] sos_task_address
        {
            get;
            set;
        }

        [SqlColumn("appdomain_address", 2), SqlTypeFacets("varbinary", true)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("state", 3), SqlTypeFacets("nvarchar", true)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("abort_state", 4), SqlTypeFacets("nvarchar", true)]
        public string abort_state
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("nvarchar", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("affinity_count", 6), SqlTypeFacets("int", true)]
        public int? affinity_count
        {
            get;
            set;
        }

        [SqlColumn("forced_yield_count", 7), SqlTypeFacets("int", true)]
        public int? forced_yield_count
        {
            get;
            set;
        }

        public dm_clr_tasks()
        {
        }

        public dm_clr_tasks(object[] items)
        {
            task_address = (Byte[])items[0];
            sos_task_address = (Byte[])items[1];
            appdomain_address = (Byte[])items[2];
            state = (string)items[3];
            abort_state = (string)items[4];
            type = (string)items[5];
            affinity_count = (int?)items[6];
            forced_yield_count = (int?)items[7];
        }

        public dm_clr_tasks(Byte[] task_address, Byte[] sos_task_address, Byte[] appdomain_address, string state, string abort_state, string type, int? affinity_count, int? forced_yield_count)
        {
            this.task_address = task_address;
            this.sos_task_address = sos_task_address;
            this.appdomain_address = appdomain_address;
            this.state = state;
            this.abort_state = abort_state;
            this.type = type;
            this.affinity_count = affinity_count;
            this.forced_yield_count = forced_yield_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { task_address, sos_task_address, appdomain_address, state, abort_state, type, affinity_count, forced_yield_count };
        }

        public override void SetItemArray(object[] items)
        {
            task_address = (Byte[])items[0];
            sos_task_address = (Byte[])items[1];
            appdomain_address = (Byte[])items[2];
            state = (string)items[3];
            abort_state = (string)items[4];
            type = (string)items[5];
            affinity_count = (int?)items[6];
            forced_yield_count = (int?)items[7];
        }
    }

    [SqlView("Z0", "type_assembly_usages")]
    public partial class type_assembly_usages : SqlViewProxy
    {
        [SqlColumn("user_type_id", 0), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        public type_assembly_usages()
        {
        }

        public type_assembly_usages(object[] items)
        {
            user_type_id = (int)items[0];
            assembly_id = (int)items[1];
        }

        public type_assembly_usages(int user_type_id, int assembly_id)
        {
            this.user_type_id = user_type_id;
            this.assembly_id = assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { user_type_id, assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            user_type_id = (int)items[0];
            assembly_id = (int)items[1];
        }
    }

    [SqlView("Z0", "dm_column_store_object_pool")]
    public partial class dm_column_store_object_pool : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("column_id", 4), SqlTypeFacets("int", true)]
        public int? column_id
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 5), SqlTypeFacets("int", false)]
        public int row_group_id
        {
            get;
            set;
        }

        [SqlColumn("object_type", 6), SqlTypeFacets("int", false)]
        public int object_type
        {
            get;
            set;
        }

        [SqlColumn("object_type_desc", 7), SqlTypeFacets("nvarchar", false)]
        public string object_type_desc
        {
            get;
            set;
        }

        [SqlColumn("access_count", 8), SqlTypeFacets("bigint", false)]
        public long access_count
        {
            get;
            set;
        }

        [SqlColumn("memory_used_in_bytes", 9), SqlTypeFacets("bigint", false)]
        public long memory_used_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("object_load_time", 10), SqlTypeFacets("datetime2", false)]
        public DateTime object_load_time
        {
            get;
            set;
        }

        public dm_column_store_object_pool()
        {
        }

        public dm_column_store_object_pool(object[] items)
        {
            database_id = (int)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            column_id = (int?)items[4];
            row_group_id = (int)items[5];
            object_type = (int)items[6];
            object_type_desc = (string)items[7];
            access_count = (long)items[8];
            memory_used_in_bytes = (long)items[9];
            object_load_time = (DateTime)items[10];
        }

        public dm_column_store_object_pool(int database_id, int object_id, int index_id, int partition_number, int? column_id, int row_group_id, int object_type, string object_type_desc, long access_count, long memory_used_in_bytes, DateTime object_load_time)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.column_id = column_id;
            this.row_group_id = row_group_id;
            this.object_type = object_type;
            this.object_type_desc = object_type_desc;
            this.access_count = access_count;
            this.memory_used_in_bytes = memory_used_in_bytes;
            this.object_load_time = object_load_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, index_id, partition_number, column_id, row_group_id, object_type, object_type_desc, access_count, memory_used_in_bytes, object_load_time };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            column_id = (int?)items[4];
            row_group_id = (int)items[5];
            object_type = (int)items[6];
            object_type_desc = (string)items[7];
            access_count = (long)items[8];
            memory_used_in_bytes = (long)items[9];
            object_load_time = (DateTime)items[10];
        }
    }

    [SqlView("Z0", "types")]
    public partial class types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 14), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        public types()
        {
        }

        public types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
        }

        public types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, bool is_table_type)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_table_type = is_table_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, is_table_type };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
        }
    }

    [SqlView("Z0", "dm_cryptographic_provider_properties")]
    public partial class dm_cryptographic_provider_properties : SqlViewProxy
    {
        [SqlColumn("provider_id", 0), SqlTypeFacets("int", true)]
        public int? provider_id
        {
            get;
            set;
        }

        [SqlColumn("guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? guid
        {
            get;
            set;
        }

        [SqlColumn("provider_version", 2), SqlTypeFacets("nvarchar", true)]
        public string provider_version
        {
            get;
            set;
        }

        [SqlColumn("sqlcrypt_version", 3), SqlTypeFacets("nvarchar", true)]
        public string sqlcrypt_version
        {
            get;
            set;
        }

        [SqlColumn("friendly_name", 4), SqlTypeFacets("nvarchar", true)]
        public string friendly_name
        {
            get;
            set;
        }

        [SqlColumn("authentication_type", 5), SqlTypeFacets("nvarchar", true)]
        public string authentication_type
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_support", 6), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_support
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_persistance", 7), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_persistance
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_export", 8), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_export
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_import", 9), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_import
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_support", 10), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_support
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_persistance", 11), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_persistance
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_export", 12), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_export
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_import", 13), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_import
        {
            get;
            set;
        }

        public dm_cryptographic_provider_properties()
        {
        }

        public dm_cryptographic_provider_properties(object[] items)
        {
            provider_id = (int?)items[0];
            guid = (Guid?)items[1];
            provider_version = (string)items[2];
            sqlcrypt_version = (string)items[3];
            friendly_name = (string)items[4];
            authentication_type = (string)items[5];
            symmetric_key_support = (byte?)items[6];
            symmetric_key_persistance = (byte?)items[7];
            symmetric_key_export = (byte?)items[8];
            symmetric_key_import = (byte?)items[9];
            asymmetric_key_support = (byte?)items[10];
            asymmetric_key_persistance = (byte?)items[11];
            asymmetric_key_export = (byte?)items[12];
            asymmetric_key_import = (byte?)items[13];
        }

        public dm_cryptographic_provider_properties(int? provider_id, Guid? guid, string provider_version, string sqlcrypt_version, string friendly_name, string authentication_type, byte? symmetric_key_support, byte? symmetric_key_persistance, byte? symmetric_key_export, byte? symmetric_key_import, byte? asymmetric_key_support, byte? asymmetric_key_persistance, byte? asymmetric_key_export, byte? asymmetric_key_import)
        {
            this.provider_id = provider_id;
            this.guid = guid;
            this.provider_version = provider_version;
            this.sqlcrypt_version = sqlcrypt_version;
            this.friendly_name = friendly_name;
            this.authentication_type = authentication_type;
            this.symmetric_key_support = symmetric_key_support;
            this.symmetric_key_persistance = symmetric_key_persistance;
            this.symmetric_key_export = symmetric_key_export;
            this.symmetric_key_import = symmetric_key_import;
            this.asymmetric_key_support = asymmetric_key_support;
            this.asymmetric_key_persistance = asymmetric_key_persistance;
            this.asymmetric_key_export = asymmetric_key_export;
            this.asymmetric_key_import = asymmetric_key_import;
        }

        public override object[] GetItemArray()
        {
            return new object[] { provider_id, guid, provider_version, sqlcrypt_version, friendly_name, authentication_type, symmetric_key_support, symmetric_key_persistance, symmetric_key_export, symmetric_key_import, asymmetric_key_support, asymmetric_key_persistance, asymmetric_key_export, asymmetric_key_import };
        }

        public override void SetItemArray(object[] items)
        {
            provider_id = (int?)items[0];
            guid = (Guid?)items[1];
            provider_version = (string)items[2];
            sqlcrypt_version = (string)items[3];
            friendly_name = (string)items[4];
            authentication_type = (string)items[5];
            symmetric_key_support = (byte?)items[6];
            symmetric_key_persistance = (byte?)items[7];
            symmetric_key_export = (byte?)items[8];
            symmetric_key_import = (byte?)items[9];
            asymmetric_key_support = (byte?)items[10];
            asymmetric_key_persistance = (byte?)items[11];
            asymmetric_key_export = (byte?)items[12];
            asymmetric_key_import = (byte?)items[13];
        }
    }

    [SqlView("Z0", "user_token")]
    public partial class user_token : SqlViewProxy
    {
        [SqlColumn("principal_id", 0), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 1), SqlTypeFacets("varbinary", true)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("nvarchar", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("usage", 4), SqlTypeFacets("nvarchar", true)]
        public string usage
        {
            get;
            set;
        }

        public user_token()
        {
        }

        public user_token(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }

        public user_token(int? principal_id, Byte[] sid, string name, string type, string usage)
        {
            this.principal_id = principal_id;
            this.sid = sid;
            this.name = name;
            this.type = type;
            this.usage = usage;
        }

        public override object[] GetItemArray()
        {
            return new object[] { principal_id, sid, name, type, usage };
        }

        public override void SetItemArray(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }
    }

    [SqlView("Z0", "dm_database_encryption_keys")]
    public partial class dm_database_encryption_keys : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_state", 1), SqlTypeFacets("int", true)]
        public int? encryption_state
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", true)]
        public DateTime? create_date
        {
            get;
            set;
        }

        [SqlColumn("regenerate_date", 3), SqlTypeFacets("datetime", true)]
        public DateTime? regenerate_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", true)]
        public DateTime? modify_date
        {
            get;
            set;
        }

        [SqlColumn("set_date", 5), SqlTypeFacets("datetime", true)]
        public DateTime? set_date
        {
            get;
            set;
        }

        [SqlColumn("opened_date", 6), SqlTypeFacets("datetime", true)]
        public DateTime? opened_date
        {
            get;
            set;
        }

        [SqlColumn("key_algorithm", 7), SqlTypeFacets("nvarchar", true)]
        public string key_algorithm
        {
            get;
            set;
        }

        [SqlColumn("key_length", 8), SqlTypeFacets("int", true)]
        public int? key_length
        {
            get;
            set;
        }

        [SqlColumn("encryptor_thumbprint", 9), SqlTypeFacets("varbinary", true)]
        public Byte[] encryptor_thumbprint
        {
            get;
            set;
        }

        [SqlColumn("encryptor_type", 10), SqlTypeFacets("nvarchar", true)]
        public string encryptor_type
        {
            get;
            set;
        }

        [SqlColumn("percent_complete", 11), SqlTypeFacets("real", true)]
        public float? percent_complete
        {
            get;
            set;
        }

        public dm_database_encryption_keys()
        {
        }

        public dm_database_encryption_keys(object[] items)
        {
            database_id = (int?)items[0];
            encryption_state = (int?)items[1];
            create_date = (DateTime?)items[2];
            regenerate_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            set_date = (DateTime?)items[5];
            opened_date = (DateTime?)items[6];
            key_algorithm = (string)items[7];
            key_length = (int?)items[8];
            encryptor_thumbprint = (Byte[])items[9];
            encryptor_type = (string)items[10];
            percent_complete = (float?)items[11];
        }

        public dm_database_encryption_keys(int? database_id, int? encryption_state, DateTime? create_date, DateTime? regenerate_date, DateTime? modify_date, DateTime? set_date, DateTime? opened_date, string key_algorithm, int? key_length, Byte[] encryptor_thumbprint, string encryptor_type, float? percent_complete)
        {
            this.database_id = database_id;
            this.encryption_state = encryption_state;
            this.create_date = create_date;
            this.regenerate_date = regenerate_date;
            this.modify_date = modify_date;
            this.set_date = set_date;
            this.opened_date = opened_date;
            this.key_algorithm = key_algorithm;
            this.key_length = key_length;
            this.encryptor_thumbprint = encryptor_thumbprint;
            this.encryptor_type = encryptor_type;
            this.percent_complete = percent_complete;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, encryption_state, create_date, regenerate_date, modify_date, set_date, opened_date, key_algorithm, key_length, encryptor_thumbprint, encryptor_type, percent_complete };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            encryption_state = (int?)items[1];
            create_date = (DateTime?)items[2];
            regenerate_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            set_date = (DateTime?)items[5];
            opened_date = (DateTime?)items[6];
            key_algorithm = (string)items[7];
            key_length = (int?)items[8];
            encryptor_thumbprint = (Byte[])items[9];
            encryptor_type = (string)items[10];
            percent_complete = (float?)items[11];
        }
    }

    [SqlView("Z0", "via_endpoints")]
    public partial class via_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("discriminator", 10), SqlTypeFacets("nvarchar", true)]
        public string discriminator
        {
            get;
            set;
        }

        public via_endpoints()
        {
        }

        public via_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            discriminator = (string)items[10];
        }

        public via_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, string discriminator)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.discriminator = discriminator;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, discriminator };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            discriminator = (string)items[10];
        }
    }

    [SqlView("Z0", "dm_db_column_store_row_group_operational_stats")]
    public partial class dm_db_column_store_row_group_operational_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 2), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 3), SqlTypeFacets("int", false)]
        public int row_group_id
        {
            get;
            set;
        }

        [SqlColumn("index_scan_count", 4), SqlTypeFacets("bigint", false)]
        public long index_scan_count
        {
            get;
            set;
        }

        [SqlColumn("scan_count", 5), SqlTypeFacets("bigint", false)]
        public long scan_count
        {
            get;
            set;
        }

        [SqlColumn("delete_buffer_scan_count", 6), SqlTypeFacets("bigint", false)]
        public long delete_buffer_scan_count
        {
            get;
            set;
        }

        [SqlColumn("row_group_lock_count", 7), SqlTypeFacets("bigint", false)]
        public long row_group_lock_count
        {
            get;
            set;
        }

        [SqlColumn("row_group_lock_wait_count", 8), SqlTypeFacets("bigint", false)]
        public long row_group_lock_wait_count
        {
            get;
            set;
        }

        [SqlColumn("row_group_lock_wait_in_ms", 9), SqlTypeFacets("bigint", false)]
        public long row_group_lock_wait_in_ms
        {
            get;
            set;
        }

        public dm_db_column_store_row_group_operational_stats()
        {
        }

        public dm_db_column_store_row_group_operational_stats(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            partition_number = (int)items[2];
            row_group_id = (int)items[3];
            index_scan_count = (long)items[4];
            scan_count = (long)items[5];
            delete_buffer_scan_count = (long)items[6];
            row_group_lock_count = (long)items[7];
            row_group_lock_wait_count = (long)items[8];
            row_group_lock_wait_in_ms = (long)items[9];
        }

        public dm_db_column_store_row_group_operational_stats(int object_id, int index_id, int partition_number, int row_group_id, long index_scan_count, long scan_count, long delete_buffer_scan_count, long row_group_lock_count, long row_group_lock_wait_count, long row_group_lock_wait_in_ms)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.row_group_id = row_group_id;
            this.index_scan_count = index_scan_count;
            this.scan_count = scan_count;
            this.delete_buffer_scan_count = delete_buffer_scan_count;
            this.row_group_lock_count = row_group_lock_count;
            this.row_group_lock_wait_count = row_group_lock_wait_count;
            this.row_group_lock_wait_in_ms = row_group_lock_wait_in_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, partition_number, row_group_id, index_scan_count, scan_count, delete_buffer_scan_count, row_group_lock_count, row_group_lock_wait_count, row_group_lock_wait_in_ms };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            partition_number = (int)items[2];
            row_group_id = (int)items[3];
            index_scan_count = (long)items[4];
            scan_count = (long)items[5];
            delete_buffer_scan_count = (long)items[6];
            row_group_lock_count = (long)items[7];
            row_group_lock_wait_count = (long)items[8];
            row_group_lock_wait_in_ms = (long)items[9];
        }
    }

    [SqlView("Z0", "views")]
    public partial class views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", false)]
        public bool has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", false)]
        public bool with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        public views()
        {
        }

        public views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }

        public views(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool? is_replicated, bool? has_replication_filter, bool has_opaque_metadata, bool has_unchecked_assembly_data, bool with_check_option, bool is_date_correlation_view, bool? is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }
    }

    [SqlView("Z0", "dm_db_column_store_row_group_physical_stats")]
    public partial class dm_db_column_store_row_group_physical_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 2), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 3), SqlTypeFacets("int", true)]
        public int? row_group_id
        {
            get;
            set;
        }

        [SqlColumn("delta_store_hobt_id", 4), SqlTypeFacets("bigint", true)]
        public long? delta_store_hobt_id
        {
            get;
            set;
        }

        [SqlColumn("state", 5), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 6), SqlTypeFacets("nvarchar", false)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("total_rows", 7), SqlTypeFacets("bigint", true)]
        public long? total_rows
        {
            get;
            set;
        }

        [SqlColumn("deleted_rows", 8), SqlTypeFacets("bigint", true)]
        public long? deleted_rows
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("trim_reason", 10), SqlTypeFacets("tinyint", true)]
        public byte? trim_reason
        {
            get;
            set;
        }

        [SqlColumn("trim_reason_desc", 11), SqlTypeFacets("nvarchar", true)]
        public string trim_reason_desc
        {
            get;
            set;
        }

        [SqlColumn("transition_to_compressed_state", 12), SqlTypeFacets("tinyint", true)]
        public byte? transition_to_compressed_state
        {
            get;
            set;
        }

        [SqlColumn("transition_to_compressed_state_desc", 13), SqlTypeFacets("nvarchar", true)]
        public string transition_to_compressed_state_desc
        {
            get;
            set;
        }

        [SqlColumn("has_vertipaq_optimization", 14), SqlTypeFacets("bit", true)]
        public bool? has_vertipaq_optimization
        {
            get;
            set;
        }

        [SqlColumn("generation", 15), SqlTypeFacets("bigint", true)]
        public long? generation
        {
            get;
            set;
        }

        [SqlColumn("created_time", 16), SqlTypeFacets("datetime", true)]
        public DateTime? created_time
        {
            get;
            set;
        }

        [SqlColumn("closed_time", 17), SqlTypeFacets("datetime", true)]
        public DateTime? closed_time
        {
            get;
            set;
        }

        public dm_db_column_store_row_group_physical_stats()
        {
        }

        public dm_db_column_store_row_group_physical_stats(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_desc = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
            trim_reason = (byte?)items[10];
            trim_reason_desc = (string)items[11];
            transition_to_compressed_state = (byte?)items[12];
            transition_to_compressed_state_desc = (string)items[13];
            has_vertipaq_optimization = (bool?)items[14];
            generation = (long?)items[15];
            created_time = (DateTime?)items[16];
            closed_time = (DateTime?)items[17];
        }

        public dm_db_column_store_row_group_physical_stats(int? object_id, int? index_id, int? partition_number, int? row_group_id, long? delta_store_hobt_id, byte? state, string state_desc, long? total_rows, long? deleted_rows, long? size_in_bytes, byte? trim_reason, string trim_reason_desc, byte? transition_to_compressed_state, string transition_to_compressed_state_desc, bool? has_vertipaq_optimization, long? generation, DateTime? created_time, DateTime? closed_time)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.row_group_id = row_group_id;
            this.delta_store_hobt_id = delta_store_hobt_id;
            this.state = state;
            this.state_desc = state_desc;
            this.total_rows = total_rows;
            this.deleted_rows = deleted_rows;
            this.size_in_bytes = size_in_bytes;
            this.trim_reason = trim_reason;
            this.trim_reason_desc = trim_reason_desc;
            this.transition_to_compressed_state = transition_to_compressed_state;
            this.transition_to_compressed_state_desc = transition_to_compressed_state_desc;
            this.has_vertipaq_optimization = has_vertipaq_optimization;
            this.generation = generation;
            this.created_time = created_time;
            this.closed_time = closed_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, partition_number, row_group_id, delta_store_hobt_id, state, state_desc, total_rows, deleted_rows, size_in_bytes, trim_reason, trim_reason_desc, transition_to_compressed_state, transition_to_compressed_state_desc, has_vertipaq_optimization, generation, created_time, closed_time };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_desc = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
            trim_reason = (byte?)items[10];
            trim_reason_desc = (string)items[11];
            transition_to_compressed_state = (byte?)items[12];
            transition_to_compressed_state_desc = (string)items[13];
            has_vertipaq_optimization = (bool?)items[14];
            generation = (long?)items[15];
            created_time = (DateTime?)items[16];
            closed_time = (DateTime?)items[17];
        }
    }

    [SqlView("Z0", "xml_indexes")]
    public partial class xml_indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("is_ignored_in_optimization", 14), SqlTypeFacets("bit", true)]
        public bool? is_ignored_in_optimization
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 16), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("using_xml_index_id", 17), SqlTypeFacets("int", true)]
        public int? using_xml_index_id
        {
            get;
            set;
        }

        [SqlColumn("secondary_type", 18), SqlTypeFacets("char", true)]
        public string secondary_type
        {
            get;
            set;
        }

        [SqlColumn("secondary_type_desc", 19), SqlTypeFacets("nvarchar", true)]
        public string secondary_type_desc
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 20), SqlTypeFacets("bit", false)]
        public bool has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 21), SqlTypeFacets("nvarchar", true)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("xml_index_type", 22), SqlTypeFacets("tinyint", true)]
        public byte? xml_index_type
        {
            get;
            set;
        }

        [SqlColumn("xml_index_type_description", 23), SqlTypeFacets("nvarchar", true)]
        public string xml_index_type_description
        {
            get;
            set;
        }

        [SqlColumn("path_id", 24), SqlTypeFacets("int", true)]
        public int? path_id
        {
            get;
            set;
        }

        [SqlColumn("auto_created", 25), SqlTypeFacets("bit", true)]
        public bool? auto_created
        {
            get;
            set;
        }

        public xml_indexes()
        {
        }

        public xml_indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            using_xml_index_id = (int?)items[17];
            secondary_type = (string)items[18];
            secondary_type_desc = (string)items[19];
            has_filter = (bool)items[20];
            filter_definition = (string)items[21];
            xml_index_type = (byte?)items[22];
            xml_index_type_description = (string)items[23];
            path_id = (int?)items[24];
            auto_created = (bool?)items[25];
        }

        public xml_indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? is_ignored_in_optimization, bool? allow_row_locks, bool? allow_page_locks, int? using_xml_index_id, string secondary_type, string secondary_type_desc, bool has_filter, string filter_definition, byte? xml_index_type, string xml_index_type_description, int? path_id, bool? auto_created)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.is_ignored_in_optimization = is_ignored_in_optimization;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.using_xml_index_id = using_xml_index_id;
            this.secondary_type = secondary_type;
            this.secondary_type_desc = secondary_type_desc;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.xml_index_type = xml_index_type;
            this.xml_index_type_description = xml_index_type_description;
            this.path_id = path_id;
            this.auto_created = auto_created;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, is_ignored_in_optimization, allow_row_locks, allow_page_locks, using_xml_index_id, secondary_type, secondary_type_desc, has_filter, filter_definition, xml_index_type, xml_index_type_description, path_id, auto_created };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            using_xml_index_id = (int?)items[17];
            secondary_type = (string)items[18];
            secondary_type_desc = (string)items[19];
            has_filter = (bool)items[20];
            filter_definition = (string)items[21];
            xml_index_type = (byte?)items[22];
            xml_index_type_description = (string)items[23];
            path_id = (int?)items[24];
            auto_created = (bool?)items[25];
        }
    }

    [SqlView("Z0", "dm_db_file_space_usage")]
    public partial class dm_db_file_space_usage : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("smallint", true)]
        public short? file_id
        {
            get;
            set;
        }

        [SqlColumn("filegroup_id", 2), SqlTypeFacets("smallint", true)]
        public short? filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("total_page_count", 3), SqlTypeFacets("bigint", true)]
        public long? total_page_count
        {
            get;
            set;
        }

        [SqlColumn("allocated_extent_page_count", 4), SqlTypeFacets("bigint", true)]
        public long? allocated_extent_page_count
        {
            get;
            set;
        }

        [SqlColumn("unallocated_extent_page_count", 5), SqlTypeFacets("bigint", true)]
        public long? unallocated_extent_page_count
        {
            get;
            set;
        }

        [SqlColumn("version_store_reserved_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? version_store_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("user_object_reserved_page_count", 7), SqlTypeFacets("bigint", true)]
        public long? user_object_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_object_reserved_page_count", 8), SqlTypeFacets("bigint", true)]
        public long? internal_object_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("mixed_extent_page_count", 9), SqlTypeFacets("bigint", true)]
        public long? mixed_extent_page_count
        {
            get;
            set;
        }

        [SqlColumn("modified_extent_page_count", 10), SqlTypeFacets("bigint", true)]
        public long? modified_extent_page_count
        {
            get;
            set;
        }

        public dm_db_file_space_usage()
        {
        }

        public dm_db_file_space_usage(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (short?)items[1];
            filegroup_id = (short?)items[2];
            total_page_count = (long?)items[3];
            allocated_extent_page_count = (long?)items[4];
            unallocated_extent_page_count = (long?)items[5];
            version_store_reserved_page_count = (long?)items[6];
            user_object_reserved_page_count = (long?)items[7];
            internal_object_reserved_page_count = (long?)items[8];
            mixed_extent_page_count = (long?)items[9];
            modified_extent_page_count = (long?)items[10];
        }

        public dm_db_file_space_usage(int? database_id, short? file_id, short? filegroup_id, long? total_page_count, long? allocated_extent_page_count, long? unallocated_extent_page_count, long? version_store_reserved_page_count, long? user_object_reserved_page_count, long? internal_object_reserved_page_count, long? mixed_extent_page_count, long? modified_extent_page_count)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.filegroup_id = filegroup_id;
            this.total_page_count = total_page_count;
            this.allocated_extent_page_count = allocated_extent_page_count;
            this.unallocated_extent_page_count = unallocated_extent_page_count;
            this.version_store_reserved_page_count = version_store_reserved_page_count;
            this.user_object_reserved_page_count = user_object_reserved_page_count;
            this.internal_object_reserved_page_count = internal_object_reserved_page_count;
            this.mixed_extent_page_count = mixed_extent_page_count;
            this.modified_extent_page_count = modified_extent_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, filegroup_id, total_page_count, allocated_extent_page_count, unallocated_extent_page_count, version_store_reserved_page_count, user_object_reserved_page_count, internal_object_reserved_page_count, mixed_extent_page_count, modified_extent_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (short?)items[1];
            filegroup_id = (short?)items[2];
            total_page_count = (long?)items[3];
            allocated_extent_page_count = (long?)items[4];
            unallocated_extent_page_count = (long?)items[5];
            version_store_reserved_page_count = (long?)items[6];
            user_object_reserved_page_count = (long?)items[7];
            internal_object_reserved_page_count = (long?)items[8];
            mixed_extent_page_count = (long?)items[9];
            modified_extent_page_count = (long?)items[10];
        }
    }

    [SqlView("Z0", "xml_schema_attributes")]
    public partial class xml_schema_attributes : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 13), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("must_be_qualified", 14), SqlTypeFacets("bit", false)]
        public bool must_be_qualified
        {
            get;
            set;
        }

        [SqlColumn("default_value", 15), SqlTypeFacets("nvarchar", true)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_attributes()
        {
        }

        public xml_schema_attributes(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            must_be_qualified = (bool)items[14];
            default_value = (string)items[15];
        }

        public xml_schema_attributes(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_default_fixed, bool must_be_qualified, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.must_be_qualified = must_be_qualified;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_default_fixed, must_be_qualified, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            must_be_qualified = (bool)items[14];
            default_value = (string)items[15];
        }
    }

    [SqlView("Z0", "dm_db_fts_index_physical_stats")]
    public partial class dm_db_fts_index_physical_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("fulltext_index_page_count", 1), SqlTypeFacets("bigint", true)]
        public long? fulltext_index_page_count
        {
            get;
            set;
        }

        [SqlColumn("keyphrase_index_page_count", 2), SqlTypeFacets("bigint", true)]
        public long? keyphrase_index_page_count
        {
            get;
            set;
        }

        [SqlColumn("similarity_index_page_count", 3), SqlTypeFacets("bigint", true)]
        public long? similarity_index_page_count
        {
            get;
            set;
        }

        public dm_db_fts_index_physical_stats()
        {
        }

        public dm_db_fts_index_physical_stats(object[] items)
        {
            object_id = (int)items[0];
            fulltext_index_page_count = (long?)items[1];
            keyphrase_index_page_count = (long?)items[2];
            similarity_index_page_count = (long?)items[3];
        }

        public dm_db_fts_index_physical_stats(int object_id, long? fulltext_index_page_count, long? keyphrase_index_page_count, long? similarity_index_page_count)
        {
            this.object_id = object_id;
            this.fulltext_index_page_count = fulltext_index_page_count;
            this.keyphrase_index_page_count = keyphrase_index_page_count;
            this.similarity_index_page_count = similarity_index_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, fulltext_index_page_count, keyphrase_index_page_count, similarity_index_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            fulltext_index_page_count = (long?)items[1];
            keyphrase_index_page_count = (long?)items[2];
            similarity_index_page_count = (long?)items[3];
        }
    }

    [SqlView("Z0", "xml_schema_collections")]
    public partial class xml_schema_collections : SqlViewProxy
    {
        [SqlColumn("xml_collection_id", 0), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 1), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("name", 3), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public xml_schema_collections()
        {
        }

        public xml_schema_collections(object[] items)
        {
            xml_collection_id = (int)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
            name = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
        }

        public xml_schema_collections(int xml_collection_id, int schema_id, int? principal_id, string name, DateTime create_date, DateTime modify_date)
        {
            this.xml_collection_id = xml_collection_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_collection_id, schema_id, principal_id, name, create_date, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            xml_collection_id = (int)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
            name = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
        }
    }

    [SqlView("Z0", "dm_db_index_usage_stats")]
    public partial class dm_db_index_usage_stats : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("user_seeks", 3), SqlTypeFacets("bigint", false)]
        public long user_seeks
        {
            get;
            set;
        }

        [SqlColumn("user_scans", 4), SqlTypeFacets("bigint", false)]
        public long user_scans
        {
            get;
            set;
        }

        [SqlColumn("user_lookups", 5), SqlTypeFacets("bigint", false)]
        public long user_lookups
        {
            get;
            set;
        }

        [SqlColumn("user_updates", 6), SqlTypeFacets("bigint", false)]
        public long user_updates
        {
            get;
            set;
        }

        [SqlColumn("last_user_seek", 7), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_seek
        {
            get;
            set;
        }

        [SqlColumn("last_user_scan", 8), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_scan
        {
            get;
            set;
        }

        [SqlColumn("last_user_lookup", 9), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_lookup
        {
            get;
            set;
        }

        [SqlColumn("last_user_update", 10), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_update
        {
            get;
            set;
        }

        [SqlColumn("system_seeks", 11), SqlTypeFacets("bigint", false)]
        public long system_seeks
        {
            get;
            set;
        }

        [SqlColumn("system_scans", 12), SqlTypeFacets("bigint", false)]
        public long system_scans
        {
            get;
            set;
        }

        [SqlColumn("system_lookups", 13), SqlTypeFacets("bigint", false)]
        public long system_lookups
        {
            get;
            set;
        }

        [SqlColumn("system_updates", 14), SqlTypeFacets("bigint", false)]
        public long system_updates
        {
            get;
            set;
        }

        [SqlColumn("last_system_seek", 15), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_seek
        {
            get;
            set;
        }

        [SqlColumn("last_system_scan", 16), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_scan
        {
            get;
            set;
        }

        [SqlColumn("last_system_lookup", 17), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_lookup
        {
            get;
            set;
        }

        [SqlColumn("last_system_update", 18), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_update
        {
            get;
            set;
        }

        public dm_db_index_usage_stats()
        {
        }

        public dm_db_index_usage_stats(object[] items)
        {
            database_id = (short)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            user_seeks = (long)items[3];
            user_scans = (long)items[4];
            user_lookups = (long)items[5];
            user_updates = (long)items[6];
            last_user_seek = (DateTime?)items[7];
            last_user_scan = (DateTime?)items[8];
            last_user_lookup = (DateTime?)items[9];
            last_user_update = (DateTime?)items[10];
            system_seeks = (long)items[11];
            system_scans = (long)items[12];
            system_lookups = (long)items[13];
            system_updates = (long)items[14];
            last_system_seek = (DateTime?)items[15];
            last_system_scan = (DateTime?)items[16];
            last_system_lookup = (DateTime?)items[17];
            last_system_update = (DateTime?)items[18];
        }

        public dm_db_index_usage_stats(short database_id, int object_id, int index_id, long user_seeks, long user_scans, long user_lookups, long user_updates, DateTime? last_user_seek, DateTime? last_user_scan, DateTime? last_user_lookup, DateTime? last_user_update, long system_seeks, long system_scans, long system_lookups, long system_updates, DateTime? last_system_seek, DateTime? last_system_scan, DateTime? last_system_lookup, DateTime? last_system_update)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.user_seeks = user_seeks;
            this.user_scans = user_scans;
            this.user_lookups = user_lookups;
            this.user_updates = user_updates;
            this.last_user_seek = last_user_seek;
            this.last_user_scan = last_user_scan;
            this.last_user_lookup = last_user_lookup;
            this.last_user_update = last_user_update;
            this.system_seeks = system_seeks;
            this.system_scans = system_scans;
            this.system_lookups = system_lookups;
            this.system_updates = system_updates;
            this.last_system_seek = last_system_seek;
            this.last_system_scan = last_system_scan;
            this.last_system_lookup = last_system_lookup;
            this.last_system_update = last_system_update;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, index_id, user_seeks, user_scans, user_lookups, user_updates, last_user_seek, last_user_scan, last_user_lookup, last_user_update, system_seeks, system_scans, system_lookups, system_updates, last_system_seek, last_system_scan, last_system_lookup, last_system_update };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (short)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            user_seeks = (long)items[3];
            user_scans = (long)items[4];
            user_lookups = (long)items[5];
            user_updates = (long)items[6];
            last_user_seek = (DateTime?)items[7];
            last_user_scan = (DateTime?)items[8];
            last_user_lookup = (DateTime?)items[9];
            last_user_update = (DateTime?)items[10];
            system_seeks = (long)items[11];
            system_scans = (long)items[12];
            system_lookups = (long)items[13];
            system_updates = (long)items[14];
            last_system_seek = (DateTime?)items[15];
            last_system_scan = (DateTime?)items[16];
            last_system_lookup = (DateTime?)items[17];
            last_system_update = (DateTime?)items[18];
        }
    }

    [SqlView("Z0", "xml_schema_component_placements")]
    public partial class xml_schema_component_placements : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("placement_id", 1), SqlTypeFacets("int", false)]
        public int placement_id
        {
            get;
            set;
        }

        [SqlColumn("placed_xml_component_id", 2), SqlTypeFacets("int", false)]
        public int placed_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 3), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("min_occurences", 4), SqlTypeFacets("int", false)]
        public int min_occurences
        {
            get;
            set;
        }

        [SqlColumn("max_occurences", 5), SqlTypeFacets("int", false)]
        public int max_occurences
        {
            get;
            set;
        }

        [SqlColumn("default_value", 6), SqlTypeFacets("nvarchar", true)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_component_placements()
        {
        }

        public xml_schema_component_placements(object[] items)
        {
            xml_component_id = (int)items[0];
            placement_id = (int)items[1];
            placed_xml_component_id = (int)items[2];
            is_default_fixed = (bool)items[3];
            min_occurences = (int)items[4];
            max_occurences = (int)items[5];
            default_value = (string)items[6];
        }

        public xml_schema_component_placements(int xml_component_id, int placement_id, int placed_xml_component_id, bool is_default_fixed, int min_occurences, int max_occurences, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.placement_id = placement_id;
            this.placed_xml_component_id = placed_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.min_occurences = min_occurences;
            this.max_occurences = max_occurences;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, placement_id, placed_xml_component_id, is_default_fixed, min_occurences, max_occurences, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            placement_id = (int)items[1];
            placed_xml_component_id = (int)items[2];
            is_default_fixed = (bool)items[3];
            min_occurences = (int)items[4];
            max_occurences = (int)items[5];
            default_value = (string)items[6];
        }
    }

    [SqlView("Z0", "dm_db_log_space_usage")]
    public partial class dm_db_log_space_usage : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("total_log_size_in_bytes", 1), SqlTypeFacets("bigint", true)]
        public long? total_log_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_log_space_in_bytes", 2), SqlTypeFacets("bigint", true)]
        public long? used_log_space_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_log_space_in_percent", 3), SqlTypeFacets("real", true)]
        public float? used_log_space_in_percent
        {
            get;
            set;
        }

        [SqlColumn("log_space_in_bytes_since_last_backup", 4), SqlTypeFacets("bigint", true)]
        public long? log_space_in_bytes_since_last_backup
        {
            get;
            set;
        }

        public dm_db_log_space_usage()
        {
        }

        public dm_db_log_space_usage(object[] items)
        {
            database_id = (int?)items[0];
            total_log_size_in_bytes = (long?)items[1];
            used_log_space_in_bytes = (long?)items[2];
            used_log_space_in_percent = (float?)items[3];
            log_space_in_bytes_since_last_backup = (long?)items[4];
        }

        public dm_db_log_space_usage(int? database_id, long? total_log_size_in_bytes, long? used_log_space_in_bytes, float? used_log_space_in_percent, long? log_space_in_bytes_since_last_backup)
        {
            this.database_id = database_id;
            this.total_log_size_in_bytes = total_log_size_in_bytes;
            this.used_log_space_in_bytes = used_log_space_in_bytes;
            this.used_log_space_in_percent = used_log_space_in_percent;
            this.log_space_in_bytes_since_last_backup = log_space_in_bytes_since_last_backup;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, total_log_size_in_bytes, used_log_space_in_bytes, used_log_space_in_percent, log_space_in_bytes_since_last_backup };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            total_log_size_in_bytes = (long?)items[1];
            used_log_space_in_bytes = (long?)items[2];
            used_log_space_in_percent = (float?)items[3];
            log_space_in_bytes_since_last_backup = (long?)items[4];
        }
    }

    [SqlView("Z0", "xml_schema_components")]
    public partial class xml_schema_components : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        public xml_schema_components()
        {
        }

        public xml_schema_components(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
        }

        public xml_schema_components(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
        }
    }

    [SqlView("Z0", "dm_db_partition_stats")]
    public partial class dm_db_partition_stats : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", true)]
        public long? partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("in_row_data_page_count", 4), SqlTypeFacets("bigint", true)]
        public long? in_row_data_page_count
        {
            get;
            set;
        }

        [SqlColumn("in_row_used_page_count", 5), SqlTypeFacets("bigint", true)]
        public long? in_row_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("in_row_reserved_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? in_row_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("lob_used_page_count", 7), SqlTypeFacets("bigint", true)]
        public long? lob_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("lob_reserved_page_count", 8), SqlTypeFacets("bigint", true)]
        public long? lob_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_used_page_count", 9), SqlTypeFacets("bigint", true)]
        public long? row_overflow_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_reserved_page_count", 10), SqlTypeFacets("bigint", true)]
        public long? row_overflow_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("used_page_count", 11), SqlTypeFacets("bigint", true)]
        public long? used_page_count
        {
            get;
            set;
        }

        [SqlColumn("reserved_page_count", 12), SqlTypeFacets("bigint", true)]
        public long? reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_count", 13), SqlTypeFacets("bigint", true)]
        public long? row_count
        {
            get;
            set;
        }

        public dm_db_partition_stats()
        {
        }

        public dm_db_partition_stats(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            in_row_data_page_count = (long?)items[4];
            in_row_used_page_count = (long?)items[5];
            in_row_reserved_page_count = (long?)items[6];
            lob_used_page_count = (long?)items[7];
            lob_reserved_page_count = (long?)items[8];
            row_overflow_used_page_count = (long?)items[9];
            row_overflow_reserved_page_count = (long?)items[10];
            used_page_count = (long?)items[11];
            reserved_page_count = (long?)items[12];
            row_count = (long?)items[13];
        }

        public dm_db_partition_stats(long? partition_id, int object_id, int index_id, int partition_number, long? in_row_data_page_count, long? in_row_used_page_count, long? in_row_reserved_page_count, long? lob_used_page_count, long? lob_reserved_page_count, long? row_overflow_used_page_count, long? row_overflow_reserved_page_count, long? used_page_count, long? reserved_page_count, long? row_count)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.in_row_data_page_count = in_row_data_page_count;
            this.in_row_used_page_count = in_row_used_page_count;
            this.in_row_reserved_page_count = in_row_reserved_page_count;
            this.lob_used_page_count = lob_used_page_count;
            this.lob_reserved_page_count = lob_reserved_page_count;
            this.row_overflow_used_page_count = row_overflow_used_page_count;
            this.row_overflow_reserved_page_count = row_overflow_reserved_page_count;
            this.used_page_count = used_page_count;
            this.reserved_page_count = reserved_page_count;
            this.row_count = row_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, in_row_data_page_count, in_row_used_page_count, in_row_reserved_page_count, lob_used_page_count, lob_reserved_page_count, row_overflow_used_page_count, row_overflow_reserved_page_count, used_page_count, reserved_page_count, row_count };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            in_row_data_page_count = (long?)items[4];
            in_row_used_page_count = (long?)items[5];
            in_row_reserved_page_count = (long?)items[6];
            lob_used_page_count = (long?)items[7];
            lob_reserved_page_count = (long?)items[8];
            row_overflow_used_page_count = (long?)items[9];
            row_overflow_reserved_page_count = (long?)items[10];
            used_page_count = (long?)items[11];
            reserved_page_count = (long?)items[12];
            row_count = (long?)items[13];
        }
    }

    [SqlView("Z0", "xml_schema_elements")]
    public partial class xml_schema_elements : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 13), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("is_abstract", 14), SqlTypeFacets("bit", false)]
        public bool is_abstract
        {
            get;
            set;
        }

        [SqlColumn("is_nillable", 15), SqlTypeFacets("bit", false)]
        public bool is_nillable
        {
            get;
            set;
        }

        [SqlColumn("must_be_qualified", 16), SqlTypeFacets("bit", false)]
        public bool must_be_qualified
        {
            get;
            set;
        }

        [SqlColumn("is_extension_blocked", 17), SqlTypeFacets("bit", false)]
        public bool is_extension_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_restriction_blocked", 18), SqlTypeFacets("bit", false)]
        public bool is_restriction_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_substitution_blocked", 19), SqlTypeFacets("bit", false)]
        public bool is_substitution_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_final_extension", 20), SqlTypeFacets("bit", false)]
        public bool is_final_extension
        {
            get;
            set;
        }

        [SqlColumn("is_final_restriction", 21), SqlTypeFacets("bit", false)]
        public bool is_final_restriction
        {
            get;
            set;
        }

        [SqlColumn("default_value", 22), SqlTypeFacets("nvarchar", true)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_elements()
        {
        }

        public xml_schema_elements(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            is_abstract = (bool)items[14];
            is_nillable = (bool)items[15];
            must_be_qualified = (bool)items[16];
            is_extension_blocked = (bool)items[17];
            is_restriction_blocked = (bool)items[18];
            is_substitution_blocked = (bool)items[19];
            is_final_extension = (bool)items[20];
            is_final_restriction = (bool)items[21];
            default_value = (string)items[22];
        }

        public xml_schema_elements(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_default_fixed, bool is_abstract, bool is_nillable, bool must_be_qualified, bool is_extension_blocked, bool is_restriction_blocked, bool is_substitution_blocked, bool is_final_extension, bool is_final_restriction, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.is_abstract = is_abstract;
            this.is_nillable = is_nillable;
            this.must_be_qualified = must_be_qualified;
            this.is_extension_blocked = is_extension_blocked;
            this.is_restriction_blocked = is_restriction_blocked;
            this.is_substitution_blocked = is_substitution_blocked;
            this.is_final_extension = is_final_extension;
            this.is_final_restriction = is_final_restriction;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_default_fixed, is_abstract, is_nillable, must_be_qualified, is_extension_blocked, is_restriction_blocked, is_substitution_blocked, is_final_extension, is_final_restriction, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            is_abstract = (bool)items[14];
            is_nillable = (bool)items[15];
            must_be_qualified = (bool)items[16];
            is_extension_blocked = (bool)items[17];
            is_restriction_blocked = (bool)items[18];
            is_substitution_blocked = (bool)items[19];
            is_final_extension = (bool)items[20];
            is_final_restriction = (bool)items[21];
            default_value = (string)items[22];
        }
    }

    [SqlView("Z0", "dm_server_audit_status")]
    public partial class dm_server_audit_status : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("smallint", false)]
        public short status
        {
            get;
            set;
        }

        [SqlColumn("status_desc", 3), SqlTypeFacets("nvarchar", false)]
        public string status_desc
        {
            get;
            set;
        }

        [SqlColumn("status_time", 4), SqlTypeFacets("datetime2", false)]
        public DateTime status_time
        {
            get;
            set;
        }

        [SqlColumn("event_session_address", 5), SqlTypeFacets("varbinary", true)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("audit_file_path", 6), SqlTypeFacets("nvarchar", true)]
        public string audit_file_path
        {
            get;
            set;
        }

        [SqlColumn("audit_file_size", 7), SqlTypeFacets("bigint", true)]
        public long? audit_file_size
        {
            get;
            set;
        }

        public dm_server_audit_status()
        {
        }

        public dm_server_audit_status(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            status = (short)items[2];
            status_desc = (string)items[3];
            status_time = (DateTime)items[4];
            event_session_address = (Byte[])items[5];
            audit_file_path = (string)items[6];
            audit_file_size = (long?)items[7];
        }

        public dm_server_audit_status(int audit_id, string name, short status, string status_desc, DateTime status_time, Byte[] event_session_address, string audit_file_path, long? audit_file_size)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.status = status;
            this.status_desc = status_desc;
            this.status_time = status_time;
            this.event_session_address = event_session_address;
            this.audit_file_path = audit_file_path;
            this.audit_file_size = audit_file_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, status, status_desc, status_time, event_session_address, audit_file_path, audit_file_size };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            status = (short)items[2];
            status_desc = (string)items[3];
            status_time = (DateTime)items[4];
            event_session_address = (Byte[])items[5];
            audit_file_path = (string)items[6];
            audit_file_size = (long?)items[7];
        }
    }

    [SqlView("Z0", "xml_schema_facets")]
    public partial class xml_schema_facets : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("facet_id", 1), SqlTypeFacets("int", false)]
        public int facet_id
        {
            get;
            set;
        }

        [SqlColumn("kind", 2), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("is_fixed", 4), SqlTypeFacets("bit", false)]
        public bool is_fixed
        {
            get;
            set;
        }

        [SqlColumn("value", 5), SqlTypeFacets("nvarchar", true)]
        public string value
        {
            get;
            set;
        }

        public xml_schema_facets()
        {
        }

        public xml_schema_facets(object[] items)
        {
            xml_component_id = (int)items[0];
            facet_id = (int)items[1];
            kind = (string)items[2];
            kind_desc = (string)items[3];
            is_fixed = (bool)items[4];
            value = (string)items[5];
        }

        public xml_schema_facets(int xml_component_id, int facet_id, string kind, string kind_desc, bool is_fixed, string value)
        {
            this.xml_component_id = xml_component_id;
            this.facet_id = facet_id;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.is_fixed = is_fixed;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, facet_id, kind, kind_desc, is_fixed, value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            facet_id = (int)items[1];
            kind = (string)items[2];
            kind_desc = (string)items[3];
            is_fixed = (bool)items[4];
            value = (string)items[5];
        }
    }

    [SqlView("Z0", "dm_server_registry")]
    public partial class dm_server_registry : SqlViewProxy
    {
        [SqlColumn("registry_key", 0), SqlTypeFacets("nvarchar", true)]
        public string registry_key
        {
            get;
            set;
        }

        [SqlColumn("value_name", 1), SqlTypeFacets("nvarchar", true)]
        public string value_name
        {
            get;
            set;
        }

        [SqlColumn("value_data", 2), SqlTypeFacets("sql_variant", true)]
        public Object value_data
        {
            get;
            set;
        }

        public dm_server_registry()
        {
        }

        public dm_server_registry(object[] items)
        {
            registry_key = (string)items[0];
            value_name = (string)items[1];
            value_data = (Object)items[2];
        }

        public dm_server_registry(string registry_key, string value_name, Object value_data)
        {
            this.registry_key = registry_key;
            this.value_name = value_name;
            this.value_data = value_data;
        }

        public override object[] GetItemArray()
        {
            return new object[] { registry_key, value_name, value_data };
        }

        public override void SetItemArray(object[] items)
        {
            registry_key = (string)items[0];
            value_name = (string)items[1];
            value_data = (Object)items[2];
        }
    }

    [SqlView("Z0", "xml_schema_model_groups")]
    public partial class xml_schema_model_groups : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("compositor", 13), SqlTypeFacets("char", false)]
        public string compositor
        {
            get;
            set;
        }

        [SqlColumn("compositor_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string compositor_desc
        {
            get;
            set;
        }

        public xml_schema_model_groups()
        {
        }

        public xml_schema_model_groups(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            compositor = (string)items[13];
            compositor_desc = (string)items[14];
        }

        public xml_schema_model_groups(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, string compositor, string compositor_desc)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.compositor = compositor;
            this.compositor_desc = compositor_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, compositor, compositor_desc };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            compositor = (string)items[13];
            compositor_desc = (string)items[14];
        }
    }

    [SqlView("Z0", "dm_server_services")]
    public partial class dm_server_services : SqlViewProxy
    {
        [SqlColumn("servicename", 0), SqlTypeFacets("nvarchar", false)]
        public string servicename
        {
            get;
            set;
        }

        [SqlColumn("startup_type", 1), SqlTypeFacets("int", true)]
        public int? startup_type
        {
            get;
            set;
        }

        [SqlColumn("startup_type_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string startup_type_desc
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("status_desc", 4), SqlTypeFacets("nvarchar", false)]
        public string status_desc
        {
            get;
            set;
        }

        [SqlColumn("process_id", 5), SqlTypeFacets("int", true)]
        public int? process_id
        {
            get;
            set;
        }

        [SqlColumn("last_startup_time", 6), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_startup_time
        {
            get;
            set;
        }

        [SqlColumn("service_account", 7), SqlTypeFacets("nvarchar", false)]
        public string service_account
        {
            get;
            set;
        }

        [SqlColumn("filename", 8), SqlTypeFacets("nvarchar", false)]
        public string filename
        {
            get;
            set;
        }

        [SqlColumn("is_clustered", 9), SqlTypeFacets("nvarchar", false)]
        public string is_clustered
        {
            get;
            set;
        }

        [SqlColumn("cluster_nodename", 10), SqlTypeFacets("nvarchar", true)]
        public string cluster_nodename
        {
            get;
            set;
        }

        [SqlColumn("instant_file_initialization_enabled", 11), SqlTypeFacets("nvarchar", false)]
        public string instant_file_initialization_enabled
        {
            get;
            set;
        }

        public dm_server_services()
        {
        }

        public dm_server_services(object[] items)
        {
            servicename = (string)items[0];
            startup_type = (int?)items[1];
            startup_type_desc = (string)items[2];
            status = (int?)items[3];
            status_desc = (string)items[4];
            process_id = (int?)items[5];
            last_startup_time = (DateTimeOffset?)items[6];
            service_account = (string)items[7];
            filename = (string)items[8];
            is_clustered = (string)items[9];
            cluster_nodename = (string)items[10];
            instant_file_initialization_enabled = (string)items[11];
        }

        public dm_server_services(string servicename, int? startup_type, string startup_type_desc, int? status, string status_desc, int? process_id, DateTimeOffset? last_startup_time, string service_account, string filename, string is_clustered, string cluster_nodename, string instant_file_initialization_enabled)
        {
            this.servicename = servicename;
            this.startup_type = startup_type;
            this.startup_type_desc = startup_type_desc;
            this.status = status;
            this.status_desc = status_desc;
            this.process_id = process_id;
            this.last_startup_time = last_startup_time;
            this.service_account = service_account;
            this.filename = filename;
            this.is_clustered = is_clustered;
            this.cluster_nodename = cluster_nodename;
            this.instant_file_initialization_enabled = instant_file_initialization_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { servicename, startup_type, startup_type_desc, status, status_desc, process_id, last_startup_time, service_account, filename, is_clustered, cluster_nodename, instant_file_initialization_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            servicename = (string)items[0];
            startup_type = (int?)items[1];
            startup_type_desc = (string)items[2];
            status = (int?)items[3];
            status_desc = (string)items[4];
            process_id = (int?)items[5];
            last_startup_time = (DateTimeOffset?)items[6];
            service_account = (string)items[7];
            filename = (string)items[8];
            is_clustered = (string)items[9];
            cluster_nodename = (string)items[10];
            instant_file_initialization_enabled = (string)items[11];
        }
    }

    [SqlView("Z0", "xml_schema_namespaces")]
    public partial class xml_schema_namespaces : SqlViewProxy
    {
        [SqlColumn("xml_collection_id", 0), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        public xml_schema_namespaces()
        {
        }

        public xml_schema_namespaces(object[] items)
        {
            xml_collection_id = (int)items[0];
            name = (string)items[1];
            xml_namespace_id = (int)items[2];
        }

        public xml_schema_namespaces(int xml_collection_id, string name, int xml_namespace_id)
        {
            this.xml_collection_id = xml_collection_id;
            this.name = name;
            this.xml_namespace_id = xml_namespace_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_collection_id, name, xml_namespace_id };
        }

        public override void SetItemArray(object[] items)
        {
            xml_collection_id = (int)items[0];
            name = (string)items[1];
            xml_namespace_id = (int)items[2];
        }
    }

    [SqlView("Z0", "dm_xe_map_values")]
    public partial class dm_xe_map_values : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        [SqlColumn("map_key", 2), SqlTypeFacets("int", false)]
        public int map_key
        {
            get;
            set;
        }

        [SqlColumn("map_value", 3), SqlTypeFacets("nvarchar", false)]
        public string map_value
        {
            get;
            set;
        }

        public dm_xe_map_values()
        {
        }

        public dm_xe_map_values(object[] items)
        {
            name = (string)items[0];
            object_package_guid = (Guid)items[1];
            map_key = (int)items[2];
            map_value = (string)items[3];
        }

        public dm_xe_map_values(string name, Guid object_package_guid, int map_key, string map_value)
        {
            this.name = name;
            this.object_package_guid = object_package_guid;
            this.map_key = map_key;
            this.map_value = map_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_package_guid, map_key, map_value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_package_guid = (Guid)items[1];
            map_key = (int)items[2];
            map_value = (string)items[3];
        }
    }

    [SqlView("Z0", "xml_schema_types")]
    public partial class xml_schema_types : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_abstract", 13), SqlTypeFacets("bit", false)]
        public bool is_abstract
        {
            get;
            set;
        }

        [SqlColumn("allows_mixed_content", 14), SqlTypeFacets("bit", false)]
        public bool allows_mixed_content
        {
            get;
            set;
        }

        [SqlColumn("is_extension_blocked", 15), SqlTypeFacets("bit", false)]
        public bool is_extension_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_restriction_blocked", 16), SqlTypeFacets("bit", false)]
        public bool is_restriction_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_final_extension", 17), SqlTypeFacets("bit", false)]
        public bool is_final_extension
        {
            get;
            set;
        }

        [SqlColumn("is_final_restriction", 18), SqlTypeFacets("bit", false)]
        public bool is_final_restriction
        {
            get;
            set;
        }

        [SqlColumn("is_final_list_member", 19), SqlTypeFacets("bit", false)]
        public bool is_final_list_member
        {
            get;
            set;
        }

        [SqlColumn("is_final_union_member", 20), SqlTypeFacets("bit", false)]
        public bool is_final_union_member
        {
            get;
            set;
        }

        public xml_schema_types()
        {
        }

        public xml_schema_types(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_abstract = (bool)items[13];
            allows_mixed_content = (bool)items[14];
            is_extension_blocked = (bool)items[15];
            is_restriction_blocked = (bool)items[16];
            is_final_extension = (bool)items[17];
            is_final_restriction = (bool)items[18];
            is_final_list_member = (bool)items[19];
            is_final_union_member = (bool)items[20];
        }

        public xml_schema_types(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_abstract, bool allows_mixed_content, bool is_extension_blocked, bool is_restriction_blocked, bool is_final_extension, bool is_final_restriction, bool is_final_list_member, bool is_final_union_member)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_abstract = is_abstract;
            this.allows_mixed_content = allows_mixed_content;
            this.is_extension_blocked = is_extension_blocked;
            this.is_restriction_blocked = is_restriction_blocked;
            this.is_final_extension = is_final_extension;
            this.is_final_restriction = is_final_restriction;
            this.is_final_list_member = is_final_list_member;
            this.is_final_union_member = is_final_union_member;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_abstract, allows_mixed_content, is_extension_blocked, is_restriction_blocked, is_final_extension, is_final_restriction, is_final_list_member, is_final_union_member };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_abstract = (bool)items[13];
            allows_mixed_content = (bool)items[14];
            is_extension_blocked = (bool)items[15];
            is_restriction_blocked = (bool)items[16];
            is_final_extension = (bool)items[17];
            is_final_restriction = (bool)items[18];
            is_final_list_member = (bool)items[19];
            is_final_union_member = (bool)items[20];
        }
    }

    [SqlView("Z0", "dm_xe_object_columns")]
    public partial class dm_xe_object_columns : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("object_name", 2), SqlTypeFacets("nvarchar", false)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 3), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        [SqlColumn("type_name", 4), SqlTypeFacets("nvarchar", false)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("type_package_guid", 5), SqlTypeFacets("uniqueidentifier", false)]
        public Guid type_package_guid
        {
            get;
            set;
        }

        [SqlColumn("column_type", 6), SqlTypeFacets("nvarchar", false)]
        public string column_type
        {
            get;
            set;
        }

        [SqlColumn("column_value", 7), SqlTypeFacets("nvarchar", true)]
        public string column_value
        {
            get;
            set;
        }

        [SqlColumn("capabilities", 8), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 9), SqlTypeFacets("nvarchar", true)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("description", 10), SqlTypeFacets("nvarchar", true)]
        public string description
        {
            get;
            set;
        }

        public dm_xe_object_columns()
        {
        }

        public dm_xe_object_columns(object[] items)
        {
            name = (string)items[0];
            column_id = (int)items[1];
            object_name = (string)items[2];
            object_package_guid = (Guid)items[3];
            type_name = (string)items[4];
            type_package_guid = (Guid)items[5];
            column_type = (string)items[6];
            column_value = (string)items[7];
            capabilities = (int?)items[8];
            capabilities_desc = (string)items[9];
            description = (string)items[10];
        }

        public dm_xe_object_columns(string name, int column_id, string object_name, Guid object_package_guid, string type_name, Guid type_package_guid, string column_type, string column_value, int? capabilities, string capabilities_desc, string description)
        {
            this.name = name;
            this.column_id = column_id;
            this.object_name = object_name;
            this.object_package_guid = object_package_guid;
            this.type_name = type_name;
            this.type_package_guid = type_package_guid;
            this.column_type = column_type;
            this.column_value = column_value;
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.description = description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, column_id, object_name, object_package_guid, type_name, type_package_guid, column_type, column_value, capabilities, capabilities_desc, description };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            column_id = (int)items[1];
            object_name = (string)items[2];
            object_package_guid = (Guid)items[3];
            type_name = (string)items[4];
            type_package_guid = (Guid)items[5];
            column_type = (string)items[6];
            column_value = (string)items[7];
            capabilities = (int?)items[8];
            capabilities_desc = (string)items[9];
            description = (string)items[10];
        }
    }

    [SqlView("Z0", "xml_schema_wildcard_namespaces")]
    public partial class xml_schema_wildcard_namespaces : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("namespace", 1), SqlTypeFacets("nvarchar", false)]
        public string @namespace
        {
            get;
            set;
        }

        public xml_schema_wildcard_namespaces()
        {
        }

        public xml_schema_wildcard_namespaces(object[] items)
        {
            xml_component_id = (int)items[0];
            @namespace = (string)items[1];
        }

        public xml_schema_wildcard_namespaces(int xml_component_id, string @namespace)
        {
            this.xml_component_id = xml_component_id;
            this.@namespace = @namespace;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, @namespace };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            @namespace = (string)items[1];
        }
    }

    [SqlView("Z0", "dm_xe_objects")]
    public partial class dm_xe_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_type", 1), SqlTypeFacets("nvarchar", false)]
        public string object_type
        {
            get;
            set;
        }

        [SqlColumn("package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid package_guid
        {
            get;
            set;
        }

        [SqlColumn("description", 3), SqlTypeFacets("nvarchar", false)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("capabilities", 4), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("type_name", 6), SqlTypeFacets("nvarchar", true)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("type_package_guid", 7), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? type_package_guid
        {
            get;
            set;
        }

        [SqlColumn("type_size", 8), SqlTypeFacets("int", true)]
        public int? type_size
        {
            get;
            set;
        }

        public dm_xe_objects()
        {
        }

        public dm_xe_objects(object[] items)
        {
            name = (string)items[0];
            object_type = (string)items[1];
            package_guid = (Guid)items[2];
            description = (string)items[3];
            capabilities = (int?)items[4];
            capabilities_desc = (string)items[5];
            type_name = (string)items[6];
            type_package_guid = (Guid?)items[7];
            type_size = (int?)items[8];
        }

        public dm_xe_objects(string name, string object_type, Guid package_guid, string description, int? capabilities, string capabilities_desc, string type_name, Guid? type_package_guid, int? type_size)
        {
            this.name = name;
            this.object_type = object_type;
            this.package_guid = package_guid;
            this.description = description;
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.type_name = type_name;
            this.type_package_guid = type_package_guid;
            this.type_size = type_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_type, package_guid, description, capabilities, capabilities_desc, type_name, type_package_guid, type_size };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_type = (string)items[1];
            package_guid = (Guid)items[2];
            description = (string)items[3];
            capabilities = (int?)items[4];
            capabilities_desc = (string)items[5];
            type_name = (string)items[6];
            type_package_guid = (Guid?)items[7];
            type_size = (int?)items[8];
        }
    }

    [SqlView("Z0", "xml_schema_wildcards")]
    public partial class xml_schema_wildcards : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("process_content", 13), SqlTypeFacets("char", false)]
        public string process_content
        {
            get;
            set;
        }

        [SqlColumn("process_content_desc", 14), SqlTypeFacets("nvarchar", true)]
        public string process_content_desc
        {
            get;
            set;
        }

        [SqlColumn("disallow_namespaces", 15), SqlTypeFacets("bit", false)]
        public bool disallow_namespaces
        {
            get;
            set;
        }

        public xml_schema_wildcards()
        {
        }

        public xml_schema_wildcards(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            process_content = (string)items[13];
            process_content_desc = (string)items[14];
            disallow_namespaces = (bool)items[15];
        }

        public xml_schema_wildcards(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, string process_content, string process_content_desc, bool disallow_namespaces)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.process_content = process_content;
            this.process_content_desc = process_content_desc;
            this.disallow_namespaces = disallow_namespaces;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, process_content, process_content_desc, disallow_namespaces };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            process_content = (string)items[13];
            process_content_desc = (string)items[14];
            disallow_namespaces = (bool)items[15];
        }
    }

    [SqlView("Z0", "dm_xe_packages")]
    public partial class dm_xe_packages : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("guid", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid guid
        {
            get;
            set;
        }

        [SqlColumn("description", 2), SqlTypeFacets("nvarchar", false)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("capabilities", 3), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("module_guid", 5), SqlTypeFacets("nvarchar", false)]
        public string module_guid
        {
            get;
            set;
        }

        [SqlColumn("module_address", 6), SqlTypeFacets("varbinary", false)]
        public Byte[] module_address
        {
            get;
            set;
        }

        public dm_xe_packages()
        {
        }

        public dm_xe_packages(object[] items)
        {
            name = (string)items[0];
            guid = (Guid)items[1];
            description = (string)items[2];
            capabilities = (int?)items[3];
            capabilities_desc = (string)items[4];
            module_guid = (string)items[5];
            module_address = (Byte[])items[6];
        }

        public dm_xe_packages(string name, Guid guid, string description, int? capabilities, string capabilities_desc, string module_guid, Byte[] module_address)
        {
            this.name = name;
            this.guid = guid;
            this.description = description;
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.module_guid = module_guid;
            this.module_address = module_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, guid, description, capabilities, capabilities_desc, module_guid, module_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            guid = (Guid)items[1];
            description = (string)items[2];
            capabilities = (int?)items[3];
            capabilities_desc = (string)items[4];
            module_guid = (string)items[5];
            module_address = (Byte[])items[6];
        }
    }

    [SqlView("Z0", "dm_xe_session_event_actions")]
    public partial class dm_xe_session_event_actions : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("action_name", 1), SqlTypeFacets("nvarchar", false)]
        public string action_name
        {
            get;
            set;
        }

        [SqlColumn("action_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid action_package_guid
        {
            get;
            set;
        }

        [SqlColumn("event_name", 3), SqlTypeFacets("nvarchar", false)]
        public string event_name
        {
            get;
            set;
        }

        [SqlColumn("event_package_guid", 4), SqlTypeFacets("uniqueidentifier", false)]
        public Guid event_package_guid
        {
            get;
            set;
        }

        public dm_xe_session_event_actions()
        {
        }

        public dm_xe_session_event_actions(object[] items)
        {
            event_session_address = (Byte[])items[0];
            action_name = (string)items[1];
            action_package_guid = (Guid)items[2];
            event_name = (string)items[3];
            event_package_guid = (Guid)items[4];
        }

        public dm_xe_session_event_actions(Byte[] event_session_address, string action_name, Guid action_package_guid, string event_name, Guid event_package_guid)
        {
            this.event_session_address = event_session_address;
            this.action_name = action_name;
            this.action_package_guid = action_package_guid;
            this.event_name = event_name;
            this.event_package_guid = event_package_guid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, action_name, action_package_guid, event_name, event_package_guid };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            action_name = (string)items[1];
            action_package_guid = (Guid)items[2];
            event_name = (string)items[3];
            event_package_guid = (Guid)items[4];
        }
    }

    [SqlView("Z0", "dm_xe_session_events")]
    public partial class dm_xe_session_events : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("event_name", 1), SqlTypeFacets("nvarchar", false)]
        public string event_name
        {
            get;
            set;
        }

        [SqlColumn("event_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid event_package_guid
        {
            get;
            set;
        }

        [SqlColumn("event_predicate", 3), SqlTypeFacets("nvarchar", true)]
        public string event_predicate
        {
            get;
            set;
        }

        public dm_xe_session_events()
        {
        }

        public dm_xe_session_events(object[] items)
        {
            event_session_address = (Byte[])items[0];
            event_name = (string)items[1];
            event_package_guid = (Guid)items[2];
            event_predicate = (string)items[3];
        }

        public dm_xe_session_events(Byte[] event_session_address, string event_name, Guid event_package_guid, string event_predicate)
        {
            this.event_session_address = event_session_address;
            this.event_name = event_name;
            this.event_package_guid = event_package_guid;
            this.event_predicate = event_predicate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, event_name, event_package_guid, event_predicate };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            event_name = (string)items[1];
            event_package_guid = (Guid)items[2];
            event_predicate = (string)items[3];
        }
    }

    [SqlView("Z0", "dm_xe_session_object_columns")]
    public partial class dm_xe_session_object_columns : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("column_name", 1), SqlTypeFacets("nvarchar", false)]
        public string column_name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("column_value", 3), SqlTypeFacets("nvarchar", true)]
        public string column_value
        {
            get;
            set;
        }

        [SqlColumn("object_type", 4), SqlTypeFacets("nvarchar", false)]
        public string object_type
        {
            get;
            set;
        }

        [SqlColumn("object_name", 5), SqlTypeFacets("nvarchar", false)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 6), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        public dm_xe_session_object_columns()
        {
        }

        public dm_xe_session_object_columns(object[] items)
        {
            event_session_address = (Byte[])items[0];
            column_name = (string)items[1];
            column_id = (int)items[2];
            column_value = (string)items[3];
            object_type = (string)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
        }

        public dm_xe_session_object_columns(Byte[] event_session_address, string column_name, int column_id, string column_value, string object_type, string object_name, Guid object_package_guid)
        {
            this.event_session_address = event_session_address;
            this.column_name = column_name;
            this.column_id = column_id;
            this.column_value = column_value;
            this.object_type = object_type;
            this.object_name = object_name;
            this.object_package_guid = object_package_guid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, column_name, column_id, column_value, object_type, object_name, object_package_guid };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            column_name = (string)items[1];
            column_id = (int)items[2];
            column_value = (string)items[3];
            object_type = (string)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
        }
    }

    [SqlView("Z0", "dm_xe_session_targets")]
    public partial class dm_xe_session_targets : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("target_name", 1), SqlTypeFacets("nvarchar", false)]
        public string target_name
        {
            get;
            set;
        }

        [SqlColumn("target_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid target_package_guid
        {
            get;
            set;
        }

        [SqlColumn("execution_count", 3), SqlTypeFacets("bigint", false)]
        public long execution_count
        {
            get;
            set;
        }

        [SqlColumn("execution_duration_ms", 4), SqlTypeFacets("bigint", false)]
        public long execution_duration_ms
        {
            get;
            set;
        }

        [SqlColumn("target_data", 5), SqlTypeFacets("nvarchar", true)]
        public string target_data
        {
            get;
            set;
        }

        [SqlColumn("bytes_written", 6), SqlTypeFacets("bigint", false)]
        public long bytes_written
        {
            get;
            set;
        }

        public dm_xe_session_targets()
        {
        }

        public dm_xe_session_targets(object[] items)
        {
            event_session_address = (Byte[])items[0];
            target_name = (string)items[1];
            target_package_guid = (Guid)items[2];
            execution_count = (long)items[3];
            execution_duration_ms = (long)items[4];
            target_data = (string)items[5];
            bytes_written = (long)items[6];
        }

        public dm_xe_session_targets(Byte[] event_session_address, string target_name, Guid target_package_guid, long execution_count, long execution_duration_ms, string target_data, long bytes_written)
        {
            this.event_session_address = event_session_address;
            this.target_name = target_name;
            this.target_package_guid = target_package_guid;
            this.execution_count = execution_count;
            this.execution_duration_ms = execution_duration_ms;
            this.target_data = target_data;
            this.bytes_written = bytes_written;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, target_name, target_package_guid, execution_count, execution_duration_ms, target_data, bytes_written };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            target_name = (string)items[1];
            target_package_guid = (Guid)items[2];
            execution_count = (long)items[3];
            execution_duration_ms = (long)items[4];
            target_data = (string)items[5];
            bytes_written = (long)items[6];
        }
    }

    [SqlView("Z0", "dm_xe_sessions")]
    public partial class dm_xe_sessions : SqlViewProxy
    {
        [SqlColumn("address", 0), SqlTypeFacets("varbinary", false)]
        public Byte[] address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("pending_buffers", 2), SqlTypeFacets("int", false)]
        public int pending_buffers
        {
            get;
            set;
        }

        [SqlColumn("total_regular_buffers", 3), SqlTypeFacets("int", false)]
        public int total_regular_buffers
        {
            get;
            set;
        }

        [SqlColumn("regular_buffer_size", 4), SqlTypeFacets("bigint", false)]
        public long regular_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("total_large_buffers", 5), SqlTypeFacets("int", false)]
        public int total_large_buffers
        {
            get;
            set;
        }

        [SqlColumn("large_buffer_size", 6), SqlTypeFacets("bigint", false)]
        public long large_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("total_buffer_size", 7), SqlTypeFacets("bigint", false)]
        public long total_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("buffer_policy_flags", 8), SqlTypeFacets("int", false)]
        public int buffer_policy_flags
        {
            get;
            set;
        }

        [SqlColumn("buffer_policy_desc", 9), SqlTypeFacets("nvarchar", false)]
        public string buffer_policy_desc
        {
            get;
            set;
        }

        [SqlColumn("flags", 10), SqlTypeFacets("int", false)]
        public int flags
        {
            get;
            set;
        }

        [SqlColumn("flag_desc", 11), SqlTypeFacets("nvarchar", false)]
        public string flag_desc
        {
            get;
            set;
        }

        [SqlColumn("dropped_event_count", 12), SqlTypeFacets("int", false)]
        public int dropped_event_count
        {
            get;
            set;
        }

        [SqlColumn("dropped_buffer_count", 13), SqlTypeFacets("int", false)]
        public int dropped_buffer_count
        {
            get;
            set;
        }

        [SqlColumn("blocked_event_fire_time", 14), SqlTypeFacets("int", false)]
        public int blocked_event_fire_time
        {
            get;
            set;
        }

        [SqlColumn("create_time", 15), SqlTypeFacets("datetime", false)]
        public DateTime create_time
        {
            get;
            set;
        }

        [SqlColumn("largest_event_dropped_size", 16), SqlTypeFacets("int", false)]
        public int largest_event_dropped_size
        {
            get;
            set;
        }

        [SqlColumn("session_source", 17), SqlTypeFacets("nvarchar", false)]
        public string session_source
        {
            get;
            set;
        }

        [SqlColumn("buffer_processed_count", 18), SqlTypeFacets("bigint", false)]
        public long buffer_processed_count
        {
            get;
            set;
        }

        [SqlColumn("buffer_full_count", 19), SqlTypeFacets("bigint", false)]
        public long buffer_full_count
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_generated", 20), SqlTypeFacets("bigint", false)]
        public long total_bytes_generated
        {
            get;
            set;
        }

        public dm_xe_sessions()
        {
        }

        public dm_xe_sessions(object[] items)
        {
            address = (Byte[])items[0];
            name = (string)items[1];
            pending_buffers = (int)items[2];
            total_regular_buffers = (int)items[3];
            regular_buffer_size = (long)items[4];
            total_large_buffers = (int)items[5];
            large_buffer_size = (long)items[6];
            total_buffer_size = (long)items[7];
            buffer_policy_flags = (int)items[8];
            buffer_policy_desc = (string)items[9];
            flags = (int)items[10];
            flag_desc = (string)items[11];
            dropped_event_count = (int)items[12];
            dropped_buffer_count = (int)items[13];
            blocked_event_fire_time = (int)items[14];
            create_time = (DateTime)items[15];
            largest_event_dropped_size = (int)items[16];
            session_source = (string)items[17];
            buffer_processed_count = (long)items[18];
            buffer_full_count = (long)items[19];
            total_bytes_generated = (long)items[20];
        }

        public dm_xe_sessions(Byte[] address, string name, int pending_buffers, int total_regular_buffers, long regular_buffer_size, int total_large_buffers, long large_buffer_size, long total_buffer_size, int buffer_policy_flags, string buffer_policy_desc, int flags, string flag_desc, int dropped_event_count, int dropped_buffer_count, int blocked_event_fire_time, DateTime create_time, int largest_event_dropped_size, string session_source, long buffer_processed_count, long buffer_full_count, long total_bytes_generated)
        {
            this.address = address;
            this.name = name;
            this.pending_buffers = pending_buffers;
            this.total_regular_buffers = total_regular_buffers;
            this.regular_buffer_size = regular_buffer_size;
            this.total_large_buffers = total_large_buffers;
            this.large_buffer_size = large_buffer_size;
            this.total_buffer_size = total_buffer_size;
            this.buffer_policy_flags = buffer_policy_flags;
            this.buffer_policy_desc = buffer_policy_desc;
            this.flags = flags;
            this.flag_desc = flag_desc;
            this.dropped_event_count = dropped_event_count;
            this.dropped_buffer_count = dropped_buffer_count;
            this.blocked_event_fire_time = blocked_event_fire_time;
            this.create_time = create_time;
            this.largest_event_dropped_size = largest_event_dropped_size;
            this.session_source = session_source;
            this.buffer_processed_count = buffer_processed_count;
            this.buffer_full_count = buffer_full_count;
            this.total_bytes_generated = total_bytes_generated;
        }

        public override object[] GetItemArray()
        {
            return new object[] { address, name, pending_buffers, total_regular_buffers, regular_buffer_size, total_large_buffers, large_buffer_size, total_buffer_size, buffer_policy_flags, buffer_policy_desc, flags, flag_desc, dropped_event_count, dropped_buffer_count, blocked_event_fire_time, create_time, largest_event_dropped_size, session_source, buffer_processed_count, buffer_full_count, total_bytes_generated };
        }

        public override void SetItemArray(object[] items)
        {
            address = (Byte[])items[0];
            name = (string)items[1];
            pending_buffers = (int)items[2];
            total_regular_buffers = (int)items[3];
            regular_buffer_size = (long)items[4];
            total_large_buffers = (int)items[5];
            large_buffer_size = (long)items[6];
            total_buffer_size = (long)items[7];
            buffer_policy_flags = (int)items[8];
            buffer_policy_desc = (string)items[9];
            flags = (int)items[10];
            flag_desc = (string)items[11];
            dropped_event_count = (int)items[12];
            dropped_buffer_count = (int)items[13];
            blocked_event_fire_time = (int)items[14];
            create_time = (DateTime)items[15];
            largest_event_dropped_size = (int)items[16];
            session_source = (string)items[17];
            buffer_processed_count = (long)items[18];
            buffer_full_count = (long)items[19];
            total_bytes_generated = (long)items[20];
        }
    }

    [SqlView("Z0", "endpoints")]
    public partial class endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        public endpoints()
        {
        }

        public endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
        }

        public endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
        }
    }

    [SqlView("Z0", "event_notification_event_types")]
    public partial class event_notification_event_types : SqlViewProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_name", 1), SqlTypeFacets("nvarchar", true)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("parent_type", 2), SqlTypeFacets("int", true)]
        public int? parent_type
        {
            get;
            set;
        }

        public event_notification_event_types()
        {
        }

        public event_notification_event_types(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }

        public event_notification_event_types(int type, string type_name, int? parent_type)
        {
            this.type = type;
            this.type_name = type_name;
            this.parent_type = parent_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, type_name, parent_type };
        }

        public override void SetItemArray(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }
    }

    [SqlView("Z0", "event_notifications")]
    public partial class event_notifications : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("service_name", 7), SqlTypeFacets("nvarchar", true)]
        public string service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 8), SqlTypeFacets("nvarchar", true)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("creator_sid", 9), SqlTypeFacets("varbinary", true)]
        public Byte[] creator_sid
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 10), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public event_notifications()
        {
        }

        public event_notifications(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }

        public event_notifications(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, DateTime create_date, DateTime modify_date, string service_name, string broker_instance, Byte[] creator_sid, int? principal_id)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.service_name = service_name;
            this.broker_instance = broker_instance;
            this.creator_sid = creator_sid;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, create_date, modify_date, service_name, broker_instance, creator_sid, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }
    }

    [SqlView("Z0", "events")]
    public partial class events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 4), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 5), SqlTypeFacets("nvarchar", true)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public events()
        {
        }

        public events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }

        public events(int object_id, int type, string type_desc, bool? is_trigger_event, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }
    }

    [SqlView("Z0", "FileTableDescription")]
    public partial class FileTableDescription : SqlViewProxy
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("DatabaseName", 1), SqlTypeFacets("sysname", true)]
        public string DatabaseName
        {
            get;
            set;
        }

        [SqlColumn("TableSchema", 2), SqlTypeFacets("sysname", true)]
        public string TableSchema
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("sysname", true)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("UncPath", 4), SqlTypeFacets("nvarchar", true)]
        public string UncPath
        {
            get;
            set;
        }

        [SqlColumn("DirectoryName", 5), SqlTypeFacets("nvarchar", false)]
        public string DirectoryName
        {
            get;
            set;
        }

        public FileTableDescription()
        {
        }

        public FileTableDescription(object[] items)
        {
            ServerName = (string)items[0];
            DatabaseName = (string)items[1];
            TableSchema = (string)items[2];
            TableName = (string)items[3];
            UncPath = (string)items[4];
            DirectoryName = (string)items[5];
        }

        public FileTableDescription(string ServerName, string DatabaseName, string TableSchema, string TableName, string UncPath, string DirectoryName)
        {
            this.ServerName = ServerName;
            this.DatabaseName = DatabaseName;
            this.TableSchema = TableSchema;
            this.TableName = TableName;
            this.UncPath = UncPath;
            this.DirectoryName = DirectoryName;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, DatabaseName, TableSchema, TableName, UncPath, DirectoryName };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            DatabaseName = (string)items[1];
            TableSchema = (string)items[2];
            TableName = (string)items[3];
            UncPath = (string)items[4];
            DirectoryName = (string)items[5];
        }
    }

    [SqlView("Z0", "extended_properties")]
    public partial class extended_properties : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 5), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public extended_properties()
        {
        }

        public extended_properties(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            name = (string)items[4];
            value = (Object)items[5];
        }

        public extended_properties(byte @class, string class_desc, int major_id, int minor_id, string name, Object value)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, name, value };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            name = (string)items[4];
            value = (Object)items[5];
        }
    }

    [SqlView("Z0", "ForeignKeyDescription")]
    public partial class ForeignKeyDescription : SqlViewProxy
    {
        [SqlColumn("RowId", 0), SqlTypeFacets("bigint", true)]
        public long? RowId
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("ForeignKeySchema", 2), SqlTypeFacets("sysname", false)]
        public string ForeignKeySchema
        {
            get;
            set;
        }

        [SqlColumn("ForeignKeyName", 3), SqlTypeFacets("sysname", false)]
        public string ForeignKeyName
        {
            get;
            set;
        }

        [SqlColumn("ClientTableSchema", 4), SqlTypeFacets("sysname", false)]
        public string ClientTableSchema
        {
            get;
            set;
        }

        [SqlColumn("ClientTableName", 5), SqlTypeFacets("sysname", false)]
        public string ClientTableName
        {
            get;
            set;
        }

        [SqlColumn("SupplierTableSchema", 6), SqlTypeFacets("sysname", false)]
        public string SupplierTableSchema
        {
            get;
            set;
        }

        [SqlColumn("SupplierTableName", 7), SqlTypeFacets("sysname", false)]
        public string SupplierTableName
        {
            get;
            set;
        }

        [SqlColumn("ForeignKeyColumnId", 8), SqlTypeFacets("int", false)]
        public int ForeignKeyColumnId
        {
            get;
            set;
        }

        [SqlColumn("ClientColumnName", 9), SqlTypeFacets("sysname", true)]
        public string ClientColumnName
        {
            get;
            set;
        }

        [SqlColumn("ClientColummnId", 10), SqlTypeFacets("int", false)]
        public int ClientColummnId
        {
            get;
            set;
        }

        [SqlColumn("SupplierColumn", 11), SqlTypeFacets("sysname", true)]
        public string SupplierColumn
        {
            get;
            set;
        }

        [SqlColumn("SupplierColumnId", 12), SqlTypeFacets("int", false)]
        public int SupplierColumnId
        {
            get;
            set;
        }

        public ForeignKeyDescription()
        {
        }

        public ForeignKeyDescription(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            ForeignKeySchema = (string)items[2];
            ForeignKeyName = (string)items[3];
            ClientTableSchema = (string)items[4];
            ClientTableName = (string)items[5];
            SupplierTableSchema = (string)items[6];
            SupplierTableName = (string)items[7];
            ForeignKeyColumnId = (int)items[8];
            ClientColumnName = (string)items[9];
            ClientColummnId = (int)items[10];
            SupplierColumn = (string)items[11];
            SupplierColumnId = (int)items[12];
        }

        public ForeignKeyDescription(long? RowId, string CatalogName, string ForeignKeySchema, string ForeignKeyName, string ClientTableSchema, string ClientTableName, string SupplierTableSchema, string SupplierTableName, int ForeignKeyColumnId, string ClientColumnName, int ClientColummnId, string SupplierColumn, int SupplierColumnId)
        {
            this.RowId = RowId;
            this.CatalogName = CatalogName;
            this.ForeignKeySchema = ForeignKeySchema;
            this.ForeignKeyName = ForeignKeyName;
            this.ClientTableSchema = ClientTableSchema;
            this.ClientTableName = ClientTableName;
            this.SupplierTableSchema = SupplierTableSchema;
            this.SupplierTableName = SupplierTableName;
            this.ForeignKeyColumnId = ForeignKeyColumnId;
            this.ClientColumnName = ClientColumnName;
            this.ClientColummnId = ClientColummnId;
            this.SupplierColumn = SupplierColumn;
            this.SupplierColumnId = SupplierColumnId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RowId, CatalogName, ForeignKeySchema, ForeignKeyName, ClientTableSchema, ClientTableName, SupplierTableSchema, SupplierTableName, ForeignKeyColumnId, ClientColumnName, ClientColummnId, SupplierColumn, SupplierColumnId };
        }

        public override void SetItemArray(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            ForeignKeySchema = (string)items[2];
            ForeignKeyName = (string)items[3];
            ClientTableSchema = (string)items[4];
            ClientTableName = (string)items[5];
            SupplierTableSchema = (string)items[6];
            SupplierTableName = (string)items[7];
            ForeignKeyColumnId = (int)items[8];
            ClientColumnName = (string)items[9];
            ClientColummnId = (int)items[10];
            SupplierColumn = (string)items[11];
            SupplierColumnId = (int)items[12];
        }
    }

    [SqlView("Z0", "filegroups")]
    public partial class filegroups : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        [SqlColumn("filegroup_guid", 6), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? filegroup_guid
        {
            get;
            set;
        }

        [SqlColumn("log_filegroup_id", 7), SqlTypeFacets("int", true)]
        public int? log_filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 8), SqlTypeFacets("bit", true)]
        public bool? is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_autogrow_all_files", 9), SqlTypeFacets("bit", true)]
        public bool? is_autogrow_all_files
        {
            get;
            set;
        }

        public filegroups()
        {
        }

        public filegroups(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            filegroup_guid = (Guid?)items[6];
            log_filegroup_id = (int?)items[7];
            is_read_only = (bool?)items[8];
            is_autogrow_all_files = (bool?)items[9];
        }

        public filegroups(string name, int data_space_id, string type, string type_desc, bool? is_default, bool? is_system, Guid? filegroup_guid, int? log_filegroup_id, bool? is_read_only, bool? is_autogrow_all_files)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
            this.filegroup_guid = filegroup_guid;
            this.log_filegroup_id = log_filegroup_id;
            this.is_read_only = is_read_only;
            this.is_autogrow_all_files = is_autogrow_all_files;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system, filegroup_guid, log_filegroup_id, is_read_only, is_autogrow_all_files };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            filegroup_guid = (Guid?)items[6];
            log_filegroup_id = (int?)items[7];
            is_read_only = (bool?)items[8];
            is_autogrow_all_files = (bool?)items[9];
        }
    }

    [SqlView("Z0", "IndexDescription")]
    public partial class IndexDescription : SqlViewProxy
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("IndexName", 4), SqlTypeFacets("sysname", true)]
        public string IndexName
        {
            get;
            set;
        }

        [SqlColumn("IsClustered", 5), SqlTypeFacets("int", false)]
        public int IsClustered
        {
            get;
            set;
        }

        [SqlColumn("IsColumnstore", 6), SqlTypeFacets("int", false)]
        public int IsColumnstore
        {
            get;
            set;
        }

        [SqlColumn("IsEnabled", 7), SqlTypeFacets("int", false)]
        public int IsEnabled
        {
            get;
            set;
        }

        [SqlColumn("IsDisabled", 8), SqlTypeFacets("bit", true)]
        public bool? IsDisabled
        {
            get;
            set;
        }

        [SqlColumn("IsPrimaryKey", 9), SqlTypeFacets("bit", true)]
        public bool? IsPrimaryKey
        {
            get;
            set;
        }

        [SqlColumn("IsUnique", 10), SqlTypeFacets("int", false)]
        public int IsUnique
        {
            get;
            set;
        }

        [SqlColumn("IsUniqueIndex", 11), SqlTypeFacets("bit", true)]
        public bool? IsUniqueIndex
        {
            get;
            set;
        }

        [SqlColumn("IsUniqueConstraint", 12), SqlTypeFacets("bit", true)]
        public bool? IsUniqueConstraint
        {
            get;
            set;
        }

        [SqlColumn("IsNaturalKey", 13), SqlTypeFacets("int", false)]
        public int IsNaturalKey
        {
            get;
            set;
        }

        public IndexDescription()
        {
        }

        public IndexDescription(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            IndexName = (string)items[4];
            IsClustered = (int)items[5];
            IsColumnstore = (int)items[6];
            IsEnabled = (int)items[7];
            IsDisabled = (bool?)items[8];
            IsPrimaryKey = (bool?)items[9];
            IsUnique = (int)items[10];
            IsUniqueIndex = (bool?)items[11];
            IsUniqueConstraint = (bool?)items[12];
            IsNaturalKey = (int)items[13];
        }

        public IndexDescription(string ServerName, string CatalogName, string SchemaName, string TableName, string IndexName, int IsClustered, int IsColumnstore, int IsEnabled, bool? IsDisabled, bool? IsPrimaryKey, int IsUnique, bool? IsUniqueIndex, bool? IsUniqueConstraint, int IsNaturalKey)
        {
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.IndexName = IndexName;
            this.IsClustered = IsClustered;
            this.IsColumnstore = IsColumnstore;
            this.IsEnabled = IsEnabled;
            this.IsDisabled = IsDisabled;
            this.IsPrimaryKey = IsPrimaryKey;
            this.IsUnique = IsUnique;
            this.IsUniqueIndex = IsUniqueIndex;
            this.IsUniqueConstraint = IsUniqueConstraint;
            this.IsNaturalKey = IsNaturalKey;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, CatalogName, SchemaName, TableName, IndexName, IsClustered, IsColumnstore, IsEnabled, IsDisabled, IsPrimaryKey, IsUnique, IsUniqueIndex, IsUniqueConstraint, IsNaturalKey };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            IndexName = (string)items[4];
            IsClustered = (int)items[5];
            IsColumnstore = (int)items[6];
            IsEnabled = (int)items[7];
            IsDisabled = (bool?)items[8];
            IsPrimaryKey = (bool?)items[9];
            IsUnique = (int)items[10];
            IsUniqueIndex = (bool?)items[11];
            IsUniqueConstraint = (bool?)items[12];
            IsNaturalKey = (int)items[13];
        }
    }

    [SqlView("Z0", "filetable_system_defined_objects")]
    public partial class filetable_system_defined_objects : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 1), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        public filetable_system_defined_objects()
        {
        }

        public filetable_system_defined_objects(object[] items)
        {
            object_id = (int)items[0];
            parent_object_id = (int)items[1];
        }

        public filetable_system_defined_objects(int object_id, int parent_object_id)
        {
            this.object_id = object_id;
            this.parent_object_id = parent_object_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parent_object_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parent_object_id = (int)items[1];
        }
    }

    [SqlView("Z0", "SequenceDescription")]
    public partial class SequenceDescription : SqlViewProxy
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("SequenceName", 3), SqlTypeFacets("sysname", false)]
        public string SequenceName
        {
            get;
            set;
        }

        [SqlColumn("DataType", 4), SqlTypeFacets("sysname", false)]
        public string DataType
        {
            get;
            set;
        }

        [SqlColumn("StartValue", 5), SqlTypeFacets("sql_variant", false)]
        public Object StartValue
        {
            get;
            set;
        }

        [SqlColumn("CurrentValue", 6), SqlTypeFacets("sql_variant", false)]
        public Object CurrentValue
        {
            get;
            set;
        }

        public SequenceDescription()
        {
        }

        public SequenceDescription(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            SequenceName = (string)items[3];
            DataType = (string)items[4];
            StartValue = (Object)items[5];
            CurrentValue = (Object)items[6];
        }

        public SequenceDescription(string ServerName, string CatalogName, string SchemaName, string SequenceName, string DataType, Object StartValue, Object CurrentValue)
        {
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.SequenceName = SequenceName;
            this.DataType = DataType;
            this.StartValue = StartValue;
            this.CurrentValue = CurrentValue;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, CatalogName, SchemaName, SequenceName, DataType, StartValue, CurrentValue };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            SequenceName = (string)items[3];
            DataType = (string)items[4];
            StartValue = (Object)items[5];
            CurrentValue = (Object)items[6];
        }
    }

    [SqlView("Z0", "filetables")]
    public partial class filetables : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 1), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        [SqlColumn("directory_name", 2), SqlTypeFacets("nvarchar", false)]
        public string directory_name
        {
            get;
            set;
        }

        [SqlColumn("filename_collation_id", 3), SqlTypeFacets("int", false)]
        public int filename_collation_id
        {
            get;
            set;
        }

        [SqlColumn("filename_collation_name", 4), SqlTypeFacets("nvarchar", false)]
        public string filename_collation_name
        {
            get;
            set;
        }

        public filetables()
        {
        }

        public filetables(object[] items)
        {
            object_id = (int)items[0];
            is_enabled = (bool)items[1];
            directory_name = (string)items[2];
            filename_collation_id = (int)items[3];
            filename_collation_name = (string)items[4];
        }

        public filetables(int object_id, bool is_enabled, string directory_name, int filename_collation_id, string filename_collation_name)
        {
            this.object_id = object_id;
            this.is_enabled = is_enabled;
            this.directory_name = directory_name;
            this.filename_collation_id = filename_collation_id;
            this.filename_collation_name = filename_collation_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, is_enabled, directory_name, filename_collation_id, filename_collation_name };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            is_enabled = (bool)items[1];
            directory_name = (string)items[2];
            filename_collation_id = (int)items[3];
            filename_collation_name = (string)items[4];
        }
    }

    [SqlView("Z0", "TableColumnDescription")]
    public partial class TableColumnDescription : SqlViewProxy
    {
        [SqlColumn("RowId", 0), SqlTypeFacets("bigint", true)]
        public long? RowId
        {
            get;
            set;
        }

        [SqlColumn("ServerName", 1), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 2), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 3), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 4), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("ColumnId", 5), SqlTypeFacets("int", false)]
        public int ColumnId
        {
            get;
            set;
        }

        [SqlColumn("ColumnName", 6), SqlTypeFacets("sysname", true)]
        public string ColumnName
        {
            get;
            set;
        }

        [SqlColumn("Description", 7), SqlTypeFacets("nvarchar", true)]
        public string Description
        {
            get;
            set;
        }

        public TableColumnDescription()
        {
        }

        public TableColumnDescription(object[] items)
        {
            RowId = (long?)items[0];
            ServerName = (string)items[1];
            CatalogName = (string)items[2];
            SchemaName = (string)items[3];
            TableName = (string)items[4];
            ColumnId = (int)items[5];
            ColumnName = (string)items[6];
            Description = (string)items[7];
        }

        public TableColumnDescription(long? RowId, string ServerName, string CatalogName, string SchemaName, string TableName, int ColumnId, string ColumnName, string Description)
        {
            this.RowId = RowId;
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.ColumnId = ColumnId;
            this.ColumnName = ColumnName;
            this.Description = Description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RowId, ServerName, CatalogName, SchemaName, TableName, ColumnId, ColumnName, Description };
        }

        public override void SetItemArray(object[] items)
        {
            RowId = (long?)items[0];
            ServerName = (string)items[1];
            CatalogName = (string)items[2];
            SchemaName = (string)items[3];
            TableName = (string)items[4];
            ColumnId = (int)items[5];
            ColumnName = (string)items[6];
            Description = (string)items[7];
        }
    }

    [SqlView("Z0", "foreign_key_columns")]
    public partial class foreign_key_columns : SqlViewProxy
    {
        [SqlColumn("constraint_object_id", 0), SqlTypeFacets("int", false)]
        public int constraint_object_id
        {
            get;
            set;
        }

        [SqlColumn("constraint_column_id", 1), SqlTypeFacets("int", false)]
        public int constraint_column_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 2), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 3), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_object_id", 4), SqlTypeFacets("int", false)]
        public int referenced_object_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_column_id", 5), SqlTypeFacets("int", false)]
        public int referenced_column_id
        {
            get;
            set;
        }

        public foreign_key_columns()
        {
        }

        public foreign_key_columns(object[] items)
        {
            constraint_object_id = (int)items[0];
            constraint_column_id = (int)items[1];
            parent_object_id = (int)items[2];
            parent_column_id = (int)items[3];
            referenced_object_id = (int)items[4];
            referenced_column_id = (int)items[5];
        }

        public foreign_key_columns(int constraint_object_id, int constraint_column_id, int parent_object_id, int parent_column_id, int referenced_object_id, int referenced_column_id)
        {
            this.constraint_object_id = constraint_object_id;
            this.constraint_column_id = constraint_column_id;
            this.parent_object_id = parent_object_id;
            this.parent_column_id = parent_column_id;
            this.referenced_object_id = referenced_object_id;
            this.referenced_column_id = referenced_column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { constraint_object_id, constraint_column_id, parent_object_id, parent_column_id, referenced_object_id, referenced_column_id };
        }

        public override void SetItemArray(object[] items)
        {
            constraint_object_id = (int)items[0];
            constraint_column_id = (int)items[1];
            parent_object_id = (int)items[2];
            parent_column_id = (int)items[3];
            referenced_object_id = (int)items[4];
            referenced_column_id = (int)items[5];
        }
    }

    [SqlView("Z0", "TableDescription")]
    public partial class TableDescription : SqlViewProxy
    {
        [SqlColumn("RowId", 0), SqlTypeFacets("bigint", true)]
        public long? RowId
        {
            get;
            set;
        }

        [SqlColumn("ServerName", 1), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 2), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 3), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 4), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("Description", 5), SqlTypeFacets("nvarchar", true)]
        public string Description
        {
            get;
            set;
        }

        public TableDescription()
        {
        }

        public TableDescription(object[] items)
        {
            RowId = (long?)items[0];
            ServerName = (string)items[1];
            CatalogName = (string)items[2];
            SchemaName = (string)items[3];
            TableName = (string)items[4];
            Description = (string)items[5];
        }

        public TableDescription(long? RowId, string ServerName, string CatalogName, string SchemaName, string TableName, string Description)
        {
            this.RowId = RowId;
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.Description = Description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RowId, ServerName, CatalogName, SchemaName, TableName, Description };
        }

        public override void SetItemArray(object[] items)
        {
            RowId = (long?)items[0];
            ServerName = (string)items[1];
            CatalogName = (string)items[2];
            SchemaName = (string)items[3];
            TableName = (string)items[4];
            Description = (string)items[5];
        }
    }

    [SqlView("Z0", "foreign_keys")]
    public partial class foreign_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("referenced_object_id", 12), SqlTypeFacets("int", true)]
        public int? referenced_object_id
        {
            get;
            set;
        }

        [SqlColumn("key_index_id", 13), SqlTypeFacets("int", true)]
        public int? key_index_id
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 14), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 15), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_not_trusted", 16), SqlTypeFacets("bit", false)]
        public bool is_not_trusted
        {
            get;
            set;
        }

        [SqlColumn("delete_referential_action", 17), SqlTypeFacets("tinyint", true)]
        public byte? delete_referential_action
        {
            get;
            set;
        }

        [SqlColumn("delete_referential_action_desc", 18), SqlTypeFacets("nvarchar", true)]
        public string delete_referential_action_desc
        {
            get;
            set;
        }

        [SqlColumn("update_referential_action", 19), SqlTypeFacets("tinyint", true)]
        public byte? update_referential_action
        {
            get;
            set;
        }

        [SqlColumn("update_referential_action_desc", 20), SqlTypeFacets("nvarchar", true)]
        public string update_referential_action_desc
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 21), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public foreign_keys()
        {
        }

        public foreign_keys(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            referenced_object_id = (int?)items[12];
            key_index_id = (int?)items[13];
            is_disabled = (bool)items[14];
            is_not_for_replication = (bool)items[15];
            is_not_trusted = (bool)items[16];
            delete_referential_action = (byte?)items[17];
            delete_referential_action_desc = (string)items[18];
            update_referential_action = (byte?)items[19];
            update_referential_action_desc = (string)items[20];
            is_system_named = (bool)items[21];
        }

        public foreign_keys(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int? referenced_object_id, int? key_index_id, bool is_disabled, bool is_not_for_replication, bool is_not_trusted, byte? delete_referential_action, string delete_referential_action_desc, byte? update_referential_action, string update_referential_action_desc, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.referenced_object_id = referenced_object_id;
            this.key_index_id = key_index_id;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_not_trusted = is_not_trusted;
            this.delete_referential_action = delete_referential_action;
            this.delete_referential_action_desc = delete_referential_action_desc;
            this.update_referential_action = update_referential_action;
            this.update_referential_action_desc = update_referential_action_desc;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, referenced_object_id, key_index_id, is_disabled, is_not_for_replication, is_not_trusted, delete_referential_action, delete_referential_action_desc, update_referential_action, update_referential_action_desc, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            referenced_object_id = (int?)items[12];
            key_index_id = (int?)items[13];
            is_disabled = (bool)items[14];
            is_not_for_replication = (bool)items[15];
            is_not_trusted = (bool)items[16];
            delete_referential_action = (byte?)items[17];
            delete_referential_action_desc = (string)items[18];
            update_referential_action = (byte?)items[19];
            update_referential_action_desc = (string)items[20];
            is_system_named = (bool)items[21];
        }
    }

    [SqlView("Z0", "TableStats")]
    public partial class TableStats : SqlViewProxy
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("nvarchar", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", false)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("RecordCount", 4), SqlTypeFacets("int", true)]
        public int? RecordCount
        {
            get;
            set;
        }

        [SqlColumn("DataStorage (MB)", 5), SqlTypeFacets("decimal", true)]
        public decimal? DataStorage_ᐸMBᐳ
        {
            get;
            set;
        }

        [SqlColumn("IndexStorage (MB)", 6), SqlTypeFacets("decimal", true)]
        public decimal? IndexStorage_ᐸMBᐳ
        {
            get;
            set;
        }

        [SqlColumn("Total Storage (MB)", 7), SqlTypeFacets("decimal", true)]
        public decimal? Total_Storage_ᐸMBᐳ
        {
            get;
            set;
        }

        public TableStats()
        {
        }

        public TableStats(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            RecordCount = (int?)items[4];
            DataStorage_ᐸMBᐳ = (decimal?)items[5];
            IndexStorage_ᐸMBᐳ = (decimal?)items[6];
            Total_Storage_ᐸMBᐳ = (decimal?)items[7];
        }

        public TableStats(string ServerName, string CatalogName, string SchemaName, string TableName, int? RecordCount, decimal? DataStorage_ᐸMBᐳ, decimal? IndexStorage_ᐸMBᐳ, decimal? Total_Storage_ᐸMBᐳ)
        {
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.RecordCount = RecordCount;
            this.DataStorage_ᐸMBᐳ = DataStorage_ᐸMBᐳ;
            this.IndexStorage_ᐸMBᐳ = IndexStorage_ᐸMBᐳ;
            this.Total_Storage_ᐸMBᐳ = Total_Storage_ᐸMBᐳ;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, CatalogName, SchemaName, TableName, RecordCount, DataStorage_ᐸMBᐳ, IndexStorage_ᐸMBᐳ, Total_Storage_ᐸMBᐳ };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            RecordCount = (int?)items[4];
            DataStorage_ᐸMBᐳ = (decimal?)items[5];
            IndexStorage_ᐸMBᐳ = (decimal?)items[6];
            Total_Storage_ᐸMBᐳ = (decimal?)items[7];
        }
    }

    [SqlView("Z0", "function_order_columns")]
    public partial class function_order_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("order_column_id", 1), SqlTypeFacets("int", false)]
        public int order_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("is_descending", 3), SqlTypeFacets("bit", true)]
        public bool? is_descending
        {
            get;
            set;
        }

        public function_order_columns()
        {
        }

        public function_order_columns(object[] items)
        {
            object_id = (int)items[0];
            order_column_id = (int)items[1];
            column_id = (int)items[2];
            is_descending = (bool?)items[3];
        }

        public function_order_columns(int object_id, int order_column_id, int column_id, bool? is_descending)
        {
            this.object_id = object_id;
            this.order_column_id = order_column_id;
            this.column_id = column_id;
            this.is_descending = is_descending;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, order_column_id, column_id, is_descending };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            order_column_id = (int)items[1];
            column_id = (int)items[2];
            is_descending = (bool?)items[3];
        }
    }

    [SqlView("Z0", "ViewColumnDescription")]
    public partial class ViewColumnDescription : SqlViewProxy
    {
        [SqlColumn("RowId", 0), SqlTypeFacets("bigint", true)]
        public long? RowId
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("ObjectName", 3), SqlTypeFacets("sysname", false)]
        public string ObjectName
        {
            get;
            set;
        }

        [SqlColumn("ColumnName", 4), SqlTypeFacets("sysname", true)]
        public string ColumnName
        {
            get;
            set;
        }

        [SqlColumn("Description", 5), SqlTypeFacets("nvarchar", true)]
        public string Description
        {
            get;
            set;
        }

        public ViewColumnDescription()
        {
        }

        public ViewColumnDescription(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            ObjectName = (string)items[3];
            ColumnName = (string)items[4];
            Description = (string)items[5];
        }

        public ViewColumnDescription(long? RowId, string CatalogName, string SchemaName, string ObjectName, string ColumnName, string Description)
        {
            this.RowId = RowId;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.ObjectName = ObjectName;
            this.ColumnName = ColumnName;
            this.Description = Description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RowId, CatalogName, SchemaName, ObjectName, ColumnName, Description };
        }

        public override void SetItemArray(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            ObjectName = (string)items[3];
            ColumnName = (string)items[4];
            Description = (string)items[5];
        }
    }

    [SqlView("Z0", "hash_indexes")]
    public partial class hash_indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("is_ignored_in_optimization", 14), SqlTypeFacets("bit", true)]
        public bool? is_ignored_in_optimization
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 16), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 17), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 18), SqlTypeFacets("nvarchar", true)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("bucket_count", 19), SqlTypeFacets("int", false)]
        public int bucket_count
        {
            get;
            set;
        }

        [SqlColumn("auto_created", 20), SqlTypeFacets("bit", true)]
        public bool? auto_created
        {
            get;
            set;
        }

        public hash_indexes()
        {
        }

        public hash_indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            has_filter = (bool?)items[17];
            filter_definition = (string)items[18];
            bucket_count = (int)items[19];
            auto_created = (bool?)items[20];
        }

        public hash_indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? is_ignored_in_optimization, bool? allow_row_locks, bool? allow_page_locks, bool? has_filter, string filter_definition, int bucket_count, bool? auto_created)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.is_ignored_in_optimization = is_ignored_in_optimization;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.bucket_count = bucket_count;
            this.auto_created = auto_created;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, is_ignored_in_optimization, allow_row_locks, allow_page_locks, has_filter, filter_definition, bucket_count, auto_created };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            has_filter = (bool?)items[17];
            filter_definition = (string)items[18];
            bucket_count = (int)items[19];
            auto_created = (bool?)items[20];
        }
    }

    [SqlView("Z0", "ViewDescription")]
    public partial class ViewDescription : SqlViewProxy
    {
        [SqlColumn("RowId", 0), SqlTypeFacets("bigint", true)]
        public long? RowId
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("Description", 4), SqlTypeFacets("nvarchar", true)]
        public string Description
        {
            get;
            set;
        }

        public ViewDescription()
        {
        }

        public ViewDescription(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            Description = (string)items[4];
        }

        public ViewDescription(long? RowId, string CatalogName, string SchemaName, string TableName, string Description)
        {
            this.RowId = RowId;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.Description = Description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RowId, CatalogName, SchemaName, TableName, Description };
        }

        public override void SetItemArray(object[] items)
        {
            RowId = (long?)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            Description = (string)items[4];
        }
    }

    [SqlView("Z0", "http_endpoints")]
    public partial class http_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("site", 10), SqlTypeFacets("nvarchar", true)]
        public string site
        {
            get;
            set;
        }

        [SqlColumn("url_path", 11), SqlTypeFacets("nvarchar", true)]
        public string url_path
        {
            get;
            set;
        }

        [SqlColumn("is_clear_port_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_clear_port_enabled
        {
            get;
            set;
        }

        [SqlColumn("clear_port", 13), SqlTypeFacets("int", false)]
        public int clear_port
        {
            get;
            set;
        }

        [SqlColumn("is_ssl_port_enabled", 14), SqlTypeFacets("bit", false)]
        public bool is_ssl_port_enabled
        {
            get;
            set;
        }

        [SqlColumn("ssl_port", 15), SqlTypeFacets("int", false)]
        public int ssl_port
        {
            get;
            set;
        }

        [SqlColumn("is_anonymous_enabled", 16), SqlTypeFacets("bit", false)]
        public bool is_anonymous_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_basic_auth_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_basic_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_digest_auth_enabled", 18), SqlTypeFacets("bit", false)]
        public bool is_digest_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_kerberos_auth_enabled", 19), SqlTypeFacets("bit", false)]
        public bool is_kerberos_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_ntlm_auth_enabled", 20), SqlTypeFacets("bit", false)]
        public bool is_ntlm_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_integrated_auth_enabled", 21), SqlTypeFacets("bit", false)]
        public bool is_integrated_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("authorization_realm", 22), SqlTypeFacets("nvarchar", true)]
        public string authorization_realm
        {
            get;
            set;
        }

        [SqlColumn("default_logon_domain", 23), SqlTypeFacets("nvarchar", true)]
        public string default_logon_domain
        {
            get;
            set;
        }

        [SqlColumn("is_compression_enabled", 24), SqlTypeFacets("bit", false)]
        public bool is_compression_enabled
        {
            get;
            set;
        }

        public http_endpoints()
        {
        }

        public http_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            site = (string)items[10];
            url_path = (string)items[11];
            is_clear_port_enabled = (bool)items[12];
            clear_port = (int)items[13];
            is_ssl_port_enabled = (bool)items[14];
            ssl_port = (int)items[15];
            is_anonymous_enabled = (bool)items[16];
            is_basic_auth_enabled = (bool)items[17];
            is_digest_auth_enabled = (bool)items[18];
            is_kerberos_auth_enabled = (bool)items[19];
            is_ntlm_auth_enabled = (bool)items[20];
            is_integrated_auth_enabled = (bool)items[21];
            authorization_realm = (string)items[22];
            default_logon_domain = (string)items[23];
            is_compression_enabled = (bool)items[24];
        }

        public http_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, string site, string url_path, bool is_clear_port_enabled, int clear_port, bool is_ssl_port_enabled, int ssl_port, bool is_anonymous_enabled, bool is_basic_auth_enabled, bool is_digest_auth_enabled, bool is_kerberos_auth_enabled, bool is_ntlm_auth_enabled, bool is_integrated_auth_enabled, string authorization_realm, string default_logon_domain, bool is_compression_enabled)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.site = site;
            this.url_path = url_path;
            this.is_clear_port_enabled = is_clear_port_enabled;
            this.clear_port = clear_port;
            this.is_ssl_port_enabled = is_ssl_port_enabled;
            this.ssl_port = ssl_port;
            this.is_anonymous_enabled = is_anonymous_enabled;
            this.is_basic_auth_enabled = is_basic_auth_enabled;
            this.is_digest_auth_enabled = is_digest_auth_enabled;
            this.is_kerberos_auth_enabled = is_kerberos_auth_enabled;
            this.is_ntlm_auth_enabled = is_ntlm_auth_enabled;
            this.is_integrated_auth_enabled = is_integrated_auth_enabled;
            this.authorization_realm = authorization_realm;
            this.default_logon_domain = default_logon_domain;
            this.is_compression_enabled = is_compression_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, site, url_path, is_clear_port_enabled, clear_port, is_ssl_port_enabled, ssl_port, is_anonymous_enabled, is_basic_auth_enabled, is_digest_auth_enabled, is_kerberos_auth_enabled, is_ntlm_auth_enabled, is_integrated_auth_enabled, authorization_realm, default_logon_domain, is_compression_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            site = (string)items[10];
            url_path = (string)items[11];
            is_clear_port_enabled = (bool)items[12];
            clear_port = (int)items[13];
            is_ssl_port_enabled = (bool)items[14];
            ssl_port = (int)items[15];
            is_anonymous_enabled = (bool)items[16];
            is_basic_auth_enabled = (bool)items[17];
            is_digest_auth_enabled = (bool)items[18];
            is_kerberos_auth_enabled = (bool)items[19];
            is_ntlm_auth_enabled = (bool)items[20];
            is_integrated_auth_enabled = (bool)items[21];
            authorization_realm = (string)items[22];
            default_logon_domain = (string)items[23];
            is_compression_enabled = (bool)items[24];
        }
    }

    [SqlView("Z0", "IndexColumn")]
    public partial class IndexColumn : SqlViewProxy
    {
        [SqlColumn("ServerName", 0), SqlTypeFacets("sysname", true)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("CatalogName", 1), SqlTypeFacets("sysname", true)]
        public string CatalogName
        {
            get;
            set;
        }

        [SqlColumn("SchemaName", 2), SqlTypeFacets("sysname", false)]
        public string SchemaName
        {
            get;
            set;
        }

        [SqlColumn("TableName", 3), SqlTypeFacets("sysname", false)]
        public string TableName
        {
            get;
            set;
        }

        [SqlColumn("IndexName", 4), SqlTypeFacets("sysname", true)]
        public string IndexName
        {
            get;
            set;
        }

        [SqlColumn("IndexColumnId", 5), SqlTypeFacets("int", false)]
        public int IndexColumnId
        {
            get;
            set;
        }

        [SqlColumn("ColumnId", 6), SqlTypeFacets("int", false)]
        public int ColumnId
        {
            get;
            set;
        }

        [SqlColumn("ColumnName", 7), SqlTypeFacets("sysname", true)]
        public string ColumnName
        {
            get;
            set;
        }

        [SqlColumn("IsClustered", 8), SqlTypeFacets("int", false)]
        public int IsClustered
        {
            get;
            set;
        }

        [SqlColumn("IsColumnstore", 9), SqlTypeFacets("int", false)]
        public int IsColumnstore
        {
            get;
            set;
        }

        [SqlColumn("IsEnabled", 10), SqlTypeFacets("int", false)]
        public int IsEnabled
        {
            get;
            set;
        }

        [SqlColumn("IsDisabled", 11), SqlTypeFacets("bit", true)]
        public bool? IsDisabled
        {
            get;
            set;
        }

        [SqlColumn("IsPrimaryKey", 12), SqlTypeFacets("bit", true)]
        public bool? IsPrimaryKey
        {
            get;
            set;
        }

        [SqlColumn("IsUnique", 13), SqlTypeFacets("int", false)]
        public int IsUnique
        {
            get;
            set;
        }

        [SqlColumn("IsUniqueIndex", 14), SqlTypeFacets("bit", true)]
        public bool? IsUniqueIndex
        {
            get;
            set;
        }

        [SqlColumn("IsUniqueConstraint", 15), SqlTypeFacets("bit", true)]
        public bool? IsUniqueConstraint
        {
            get;
            set;
        }

        [SqlColumn("IsNaturalKey", 16), SqlTypeFacets("int", false)]
        public int IsNaturalKey
        {
            get;
            set;
        }

        public IndexColumn()
        {
        }

        public IndexColumn(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            IndexName = (string)items[4];
            IndexColumnId = (int)items[5];
            ColumnId = (int)items[6];
            ColumnName = (string)items[7];
            IsClustered = (int)items[8];
            IsColumnstore = (int)items[9];
            IsEnabled = (int)items[10];
            IsDisabled = (bool?)items[11];
            IsPrimaryKey = (bool?)items[12];
            IsUnique = (int)items[13];
            IsUniqueIndex = (bool?)items[14];
            IsUniqueConstraint = (bool?)items[15];
            IsNaturalKey = (int)items[16];
        }

        public IndexColumn(string ServerName, string CatalogName, string SchemaName, string TableName, string IndexName, int IndexColumnId, int ColumnId, string ColumnName, int IsClustered, int IsColumnstore, int IsEnabled, bool? IsDisabled, bool? IsPrimaryKey, int IsUnique, bool? IsUniqueIndex, bool? IsUniqueConstraint, int IsNaturalKey)
        {
            this.ServerName = ServerName;
            this.CatalogName = CatalogName;
            this.SchemaName = SchemaName;
            this.TableName = TableName;
            this.IndexName = IndexName;
            this.IndexColumnId = IndexColumnId;
            this.ColumnId = ColumnId;
            this.ColumnName = ColumnName;
            this.IsClustered = IsClustered;
            this.IsColumnstore = IsColumnstore;
            this.IsEnabled = IsEnabled;
            this.IsDisabled = IsDisabled;
            this.IsPrimaryKey = IsPrimaryKey;
            this.IsUnique = IsUnique;
            this.IsUniqueIndex = IsUniqueIndex;
            this.IsUniqueConstraint = IsUniqueConstraint;
            this.IsNaturalKey = IsNaturalKey;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ServerName, CatalogName, SchemaName, TableName, IndexName, IndexColumnId, ColumnId, ColumnName, IsClustered, IsColumnstore, IsEnabled, IsDisabled, IsPrimaryKey, IsUnique, IsUniqueIndex, IsUniqueConstraint, IsNaturalKey };
        }

        public override void SetItemArray(object[] items)
        {
            ServerName = (string)items[0];
            CatalogName = (string)items[1];
            SchemaName = (string)items[2];
            TableName = (string)items[3];
            IndexName = (string)items[4];
            IndexColumnId = (int)items[5];
            ColumnId = (int)items[6];
            ColumnName = (string)items[7];
            IsClustered = (int)items[8];
            IsColumnstore = (int)items[9];
            IsEnabled = (int)items[10];
            IsDisabled = (bool?)items[11];
            IsPrimaryKey = (bool?)items[12];
            IsUnique = (int)items[13];
            IsUniqueIndex = (bool?)items[14];
            IsUniqueConstraint = (bool?)items[15];
            IsNaturalKey = (int)items[16];
        }
    }

    [SqlView("Z0", "identity_columns")]
    public partial class identity_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 13), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 14), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 15), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 16), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 18), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 19), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 20), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 21), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("seed_value", 22), SqlTypeFacets("sql_variant", true)]
        public Object seed_value
        {
            get;
            set;
        }

        [SqlColumn("increment_value", 23), SqlTypeFacets("sql_variant", true)]
        public Object increment_value
        {
            get;
            set;
        }

        [SqlColumn("last_value", 24), SqlTypeFacets("sql_variant", true)]
        public Object last_value
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 25), SqlTypeFacets("bit", true)]
        public bool? is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 26), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 27), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 28), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type", 29), SqlTypeFacets("tinyint", true)]
        public byte? generated_always_type
        {
            get;
            set;
        }

        [SqlColumn("generated_always_type_desc", 30), SqlTypeFacets("nvarchar", true)]
        public string generated_always_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 31), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 32), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 33), SqlTypeFacets("nvarchar", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 34), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 35), SqlTypeFacets("sysname", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 36), SqlTypeFacets("bit", false)]
        public bool is_hidden
        {
            get;
            set;
        }

        [SqlColumn("is_masked", 37), SqlTypeFacets("bit", true)]
        public bool? is_masked
        {
            get;
            set;
        }

        [SqlColumn("graph_type", 38), SqlTypeFacets("int", true)]
        public int? graph_type
        {
            get;
            set;
        }

        [SqlColumn("graph_type_desc", 39), SqlTypeFacets("nvarchar", true)]
        public string graph_type_desc
        {
            get;
            set;
        }

        public identity_columns()
        {
        }

        public identity_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            seed_value = (Object)items[22];
            increment_value = (Object)items[23];
            last_value = (Object)items[24];
            is_not_for_replication = (bool?)items[25];
            is_computed = (bool)items[26];
            is_sparse = (bool)items[27];
            is_column_set = (bool)items[28];
            generated_always_type = (byte?)items[29];
            generated_always_type_desc = (string)items[30];
            encryption_type = (int?)items[31];
            encryption_type_desc = (string)items[32];
            encryption_algorithm_name = (string)items[33];
            column_encryption_key_id = (int?)items[34];
            column_encryption_key_database_name = (string)items[35];
            is_hidden = (bool)items[36];
            is_masked = (bool?)items[37];
            graph_type = (int?)items[38];
            graph_type_desc = (string)items[39];
        }

        public identity_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, Object seed_value, Object increment_value, Object last_value, bool? is_not_for_replication, bool is_computed, bool is_sparse, bool is_column_set, byte? generated_always_type, string generated_always_type_desc, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name, bool is_hidden, bool? is_masked, int? graph_type, string graph_type_desc)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.seed_value = seed_value;
            this.increment_value = increment_value;
            this.last_value = last_value;
            this.is_not_for_replication = is_not_for_replication;
            this.is_computed = is_computed;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.generated_always_type = generated_always_type;
            this.generated_always_type_desc = generated_always_type_desc;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
            this.is_hidden = is_hidden;
            this.is_masked = is_masked;
            this.graph_type = graph_type;
            this.graph_type_desc = graph_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, seed_value, increment_value, last_value, is_not_for_replication, is_computed, is_sparse, is_column_set, generated_always_type, generated_always_type_desc, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name, is_hidden, is_masked, graph_type, graph_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            seed_value = (Object)items[22];
            increment_value = (Object)items[23];
            last_value = (Object)items[24];
            is_not_for_replication = (bool?)items[25];
            is_computed = (bool)items[26];
            is_sparse = (bool)items[27];
            is_column_set = (bool)items[28];
            generated_always_type = (byte?)items[29];
            generated_always_type_desc = (string)items[30];
            encryption_type = (int?)items[31];
            encryption_type_desc = (string)items[32];
            encryption_algorithm_name = (string)items[33];
            column_encryption_key_id = (int?)items[34];
            column_encryption_key_database_name = (string)items[35];
            is_hidden = (bool)items[36];
            is_masked = (bool?)items[37];
            graph_type = (int?)items[38];
            graph_type_desc = (string)items[39];
        }
    }

    [SqlView("Z0", "index_columns")]
    public partial class index_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("index_column_id", 2), SqlTypeFacets("int", false)]
        public int index_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("key_ordinal", 4), SqlTypeFacets("tinyint", false)]
        public byte key_ordinal
        {
            get;
            set;
        }

        [SqlColumn("partition_ordinal", 5), SqlTypeFacets("tinyint", false)]
        public byte partition_ordinal
        {
            get;
            set;
        }

        [SqlColumn("is_descending_key", 6), SqlTypeFacets("bit", true)]
        public bool? is_descending_key
        {
            get;
            set;
        }

        [SqlColumn("is_included_column", 7), SqlTypeFacets("bit", true)]
        public bool? is_included_column
        {
            get;
            set;
        }

        public index_columns()
        {
        }

        public index_columns(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            index_column_id = (int)items[2];
            column_id = (int)items[3];
            key_ordinal = (byte)items[4];
            partition_ordinal = (byte)items[5];
            is_descending_key = (bool?)items[6];
            is_included_column = (bool?)items[7];
        }

        public index_columns(int object_id, int index_id, int index_column_id, int column_id, byte key_ordinal, byte partition_ordinal, bool? is_descending_key, bool? is_included_column)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.index_column_id = index_column_id;
            this.column_id = column_id;
            this.key_ordinal = key_ordinal;
            this.partition_ordinal = partition_ordinal;
            this.is_descending_key = is_descending_key;
            this.is_included_column = is_included_column;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, index_column_id, column_id, key_ordinal, partition_ordinal, is_descending_key, is_included_column };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            index_column_id = (int)items[2];
            column_id = (int)items[3];
            key_ordinal = (byte)items[4];
            partition_ordinal = (byte)items[5];
            is_descending_key = (bool?)items[6];
            is_included_column = (bool?)items[7];
        }
    }

    [SqlView("Z0", "indexes")]
    public partial class indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", true)]
        public int? data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("is_ignored_in_optimization", 14), SqlTypeFacets("bit", true)]
        public bool? is_ignored_in_optimization
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 16), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 17), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 18), SqlTypeFacets("nvarchar", true)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("compression_delay", 19), SqlTypeFacets("int", true)]
        public int? compression_delay
        {
            get;
            set;
        }

        [SqlColumn("suppress_dup_key_messages", 20), SqlTypeFacets("bit", true)]
        public bool? suppress_dup_key_messages
        {
            get;
            set;
        }

        [SqlColumn("auto_created", 21), SqlTypeFacets("bit", true)]
        public bool? auto_created
        {
            get;
            set;
        }

        public indexes()
        {
        }

        public indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int?)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            has_filter = (bool?)items[17];
            filter_definition = (string)items[18];
            compression_delay = (int?)items[19];
            suppress_dup_key_messages = (bool?)items[20];
            auto_created = (bool?)items[21];
        }

        public indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int? data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? is_ignored_in_optimization, bool? allow_row_locks, bool? allow_page_locks, bool? has_filter, string filter_definition, int? compression_delay, bool? suppress_dup_key_messages, bool? auto_created)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.is_ignored_in_optimization = is_ignored_in_optimization;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.compression_delay = compression_delay;
            this.suppress_dup_key_messages = suppress_dup_key_messages;
            this.auto_created = auto_created;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, is_ignored_in_optimization, allow_row_locks, allow_page_locks, has_filter, filter_definition, compression_delay, suppress_dup_key_messages, auto_created };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int?)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            is_ignored_in_optimization = (bool?)items[14];
            allow_row_locks = (bool?)items[15];
            allow_page_locks = (bool?)items[16];
            has_filter = (bool?)items[17];
            filter_definition = (string)items[18];
            compression_delay = (int?)items[19];
            suppress_dup_key_messages = (bool?)items[20];
            auto_created = (bool?)items[21];
        }
    }

    [SqlView("Z0", "internal_partitions")]
    public partial class internal_partitions : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 4), SqlTypeFacets("bigint", false)]
        public long hobt_id
        {
            get;
            set;
        }

        [SqlColumn("internal_object_type", 5), SqlTypeFacets("tinyint", true)]
        public byte? internal_object_type
        {
            get;
            set;
        }

        [SqlColumn("internal_object_type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string internal_object_type_desc
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 7), SqlTypeFacets("int", true)]
        public int? row_group_id
        {
            get;
            set;
        }

        [SqlColumn("rows", 8), SqlTypeFacets("bigint", true)]
        public long? rows
        {
            get;
            set;
        }

        [SqlColumn("data_compression", 9), SqlTypeFacets("tinyint", true)]
        public byte? data_compression
        {
            get;
            set;
        }

        [SqlColumn("data_compression_desc", 10), SqlTypeFacets("nvarchar", true)]
        public string data_compression_desc
        {
            get;
            set;
        }

        public internal_partitions()
        {
        }

        public internal_partitions(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long)items[4];
            internal_object_type = (byte?)items[5];
            internal_object_type_desc = (string)items[6];
            row_group_id = (int?)items[7];
            rows = (long?)items[8];
            data_compression = (byte?)items[9];
            data_compression_desc = (string)items[10];
        }

        public internal_partitions(long partition_id, int object_id, int index_id, int partition_number, long hobt_id, byte? internal_object_type, string internal_object_type_desc, int? row_group_id, long? rows, byte? data_compression, string data_compression_desc)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.hobt_id = hobt_id;
            this.internal_object_type = internal_object_type;
            this.internal_object_type_desc = internal_object_type_desc;
            this.row_group_id = row_group_id;
            this.rows = rows;
            this.data_compression = data_compression;
            this.data_compression_desc = data_compression_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, hobt_id, internal_object_type, internal_object_type_desc, row_group_id, rows, data_compression, data_compression_desc };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long)items[4];
            internal_object_type = (byte?)items[5];
            internal_object_type_desc = (string)items[6];
            row_group_id = (int?)items[7];
            rows = (long?)items[8];
            data_compression = (byte?)items[9];
            data_compression_desc = (string)items[10];
        }
    }

    [SqlView("Z0", "key_constraints")]
    public partial class key_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("unique_index_id", 12), SqlTypeFacets("int", true)]
        public int? unique_index_id
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 13), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        [SqlColumn("is_enforced", 14), SqlTypeFacets("int", false)]
        public int is_enforced
        {
            get;
            set;
        }

        public key_constraints()
        {
        }

        public key_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            unique_index_id = (int?)items[12];
            is_system_named = (bool)items[13];
            is_enforced = (int)items[14];
        }

        public key_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int? unique_index_id, bool is_system_named, int is_enforced)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.unique_index_id = unique_index_id;
            this.is_system_named = is_system_named;
            this.is_enforced = is_enforced;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, unique_index_id, is_system_named, is_enforced };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            unique_index_id = (int?)items[12];
            is_system_named = (bool)items[13];
            is_enforced = (int)items[14];
        }
    }

    [SqlView("Z0", "linked_logins")]
    public partial class linked_logins : SqlViewProxy
    {
        [SqlColumn("server_id", 0), SqlTypeFacets("int", false)]
        public int server_id
        {
            get;
            set;
        }

        [SqlColumn("local_principal_id", 1), SqlTypeFacets("int", true)]
        public int? local_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_self_credential", 2), SqlTypeFacets("bit", false)]
        public bool uses_self_credential
        {
            get;
            set;
        }

        [SqlColumn("remote_name", 3), SqlTypeFacets("sysname", true)]
        public string remote_name
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public linked_logins()
        {
        }

        public linked_logins(object[] items)
        {
            server_id = (int)items[0];
            local_principal_id = (int?)items[1];
            uses_self_credential = (bool)items[2];
            remote_name = (string)items[3];
            modify_date = (DateTime)items[4];
        }

        public linked_logins(int server_id, int? local_principal_id, bool uses_self_credential, string remote_name, DateTime modify_date)
        {
            this.server_id = server_id;
            this.local_principal_id = local_principal_id;
            this.uses_self_credential = uses_self_credential;
            this.remote_name = remote_name;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_id, local_principal_id, uses_self_credential, remote_name, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            server_id = (int)items[0];
            local_principal_id = (int?)items[1];
            uses_self_credential = (bool)items[2];
            remote_name = (string)items[3];
            modify_date = (DateTime)items[4];
        }
    }

    [SqlView("Z0", "message_type_xml_schema_collection_usages")]
    public partial class message_type_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("message_type_id", 0), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public message_type_xml_schema_collection_usages()
        {
        }

        public message_type_xml_schema_collection_usages(object[] items)
        {
            message_type_id = (int)items[0];
            xml_collection_id = (int)items[1];
        }

        public message_type_xml_schema_collection_usages(int message_type_id, int xml_collection_id)
        {
            this.message_type_id = message_type_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { message_type_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            message_type_id = (int)items[0];
            xml_collection_id = (int)items[1];
        }
    }

    [SqlView("Z0", "messages")]
    public partial class messages : SqlViewProxy
    {
        [SqlColumn("message_id", 0), SqlTypeFacets("int", false)]
        public int message_id
        {
            get;
            set;
        }

        [SqlColumn("language_id", 1), SqlTypeFacets("smallint", false)]
        public short language_id
        {
            get;
            set;
        }

        [SqlColumn("severity", 2), SqlTypeFacets("tinyint", true)]
        public byte? severity
        {
            get;
            set;
        }

        [SqlColumn("is_event_logged", 3), SqlTypeFacets("bit", false)]
        public bool is_event_logged
        {
            get;
            set;
        }

        [SqlColumn("text", 4), SqlTypeFacets("nvarchar", false)]
        public string text
        {
            get;
            set;
        }

        public messages()
        {
        }

        public messages(object[] items)
        {
            message_id = (int)items[0];
            language_id = (short)items[1];
            severity = (byte?)items[2];
            is_event_logged = (bool)items[3];
            text = (string)items[4];
        }

        public messages(int message_id, short language_id, byte? severity, bool is_event_logged, string text)
        {
            this.message_id = message_id;
            this.language_id = language_id;
            this.severity = severity;
            this.is_event_logged = is_event_logged;
            this.text = text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { message_id, language_id, severity, is_event_logged, text };
        }

        public override void SetItemArray(object[] items)
        {
            message_id = (int)items[0];
            language_id = (short)items[1];
            severity = (byte?)items[2];
            is_event_logged = (bool)items[3];
            text = (string)items[4];
        }
    }

    [SqlView("Z0", "module_assembly_usages")]
    public partial class module_assembly_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        public module_assembly_usages()
        {
        }

        public module_assembly_usages(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
        }

        public module_assembly_usages(int object_id, int assembly_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
        }
    }

    [SqlView("Z0", "numbered_procedure_parameters")]
    public partial class numbered_procedure_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_number", 1), SqlTypeFacets("smallint", false)]
        public short procedure_number
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 3), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 4), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 5), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 6), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 7), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 8), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 9), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 10), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        public numbered_procedure_parameters()
        {
        }

        public numbered_procedure_parameters(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short)items[1];
            name = (string)items[2];
            parameter_id = (int)items[3];
            system_type_id = (byte)items[4];
            user_type_id = (int)items[5];
            max_length = (short)items[6];
            precision = (byte)items[7];
            scale = (byte)items[8];
            is_output = (bool)items[9];
            is_cursor_ref = (bool)items[10];
        }

        public numbered_procedure_parameters(int object_id, short procedure_number, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref)
        {
            this.object_id = object_id;
            this.procedure_number = procedure_number;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, procedure_number, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short)items[1];
            name = (string)items[2];
            parameter_id = (int)items[3];
            system_type_id = (byte)items[4];
            user_type_id = (int)items[5];
            max_length = (short)items[6];
            precision = (byte)items[7];
            scale = (byte)items[8];
            is_output = (bool)items[9];
            is_cursor_ref = (bool)items[10];
        }
    }

    [SqlView("Z0", "numbered_procedures")]
    public partial class numbered_procedures : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_number", 1), SqlTypeFacets("smallint", true)]
        public short? procedure_number
        {
            get;
            set;
        }

        [SqlColumn("definition", 2), SqlTypeFacets("nvarchar", true)]
        public string definition
        {
            get;
            set;
        }

        public numbered_procedures()
        {
        }

        public numbered_procedures(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short?)items[1];
            definition = (string)items[2];
        }

        public numbered_procedures(int object_id, short? procedure_number, string definition)
        {
            this.object_id = object_id;
            this.procedure_number = procedure_number;
            this.definition = definition;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, procedure_number, definition };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short?)items[1];
            definition = (string)items[2];
        }
    }

    [SqlView("Z0", "objects")]
    public partial class objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        public objects()
        {
        }

        public objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
        }

        public objects(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
        }
    }

    [SqlView("Z0", "openkeys")]
    public partial class openkeys : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("database_name", 1), SqlTypeFacets("nvarchar", true)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("key_id", 2), SqlTypeFacets("int", true)]
        public int? key_id
        {
            get;
            set;
        }

        [SqlColumn("key_name", 3), SqlTypeFacets("nvarchar", true)]
        public string key_name
        {
            get;
            set;
        }

        [SqlColumn("key_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? key_guid
        {
            get;
            set;
        }

        [SqlColumn("opened_date", 5), SqlTypeFacets("datetime", true)]
        public DateTime? opened_date
        {
            get;
            set;
        }

        [SqlColumn("status", 6), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        public openkeys()
        {
        }

        public openkeys(object[] items)
        {
            database_id = (int?)items[0];
            database_name = (string)items[1];
            key_id = (int?)items[2];
            key_name = (string)items[3];
            key_guid = (Guid?)items[4];
            opened_date = (DateTime?)items[5];
            status = (short?)items[6];
        }

        public openkeys(int? database_id, string database_name, int? key_id, string key_name, Guid? key_guid, DateTime? opened_date, short? status)
        {
            this.database_id = database_id;
            this.database_name = database_name;
            this.key_id = key_id;
            this.key_name = key_name;
            this.key_guid = key_guid;
            this.opened_date = opened_date;
            this.status = status;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, database_name, key_id, key_name, key_guid, opened_date, status };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            database_name = (string)items[1];
            key_id = (int?)items[2];
            key_name = (string)items[3];
            key_guid = (Guid?)items[4];
            opened_date = (DateTime?)items[5];
            status = (short?)items[6];
        }
    }

    [SqlView("Z0", "parameter_type_usages")]
    public partial class parameter_type_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public parameter_type_usages()
        {
        }

        public parameter_type_usages(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            user_type_id = (int)items[2];
        }

        public parameter_type_usages(int object_id, int parameter_id, int user_type_id)
        {
            this.object_id = object_id;
            this.parameter_id = parameter_id;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parameter_id, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            user_type_id = (int)items[2];
        }
    }

    [SqlView("Z0", "parameter_xml_schema_collection_usages")]
    public partial class parameter_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 2), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public parameter_xml_schema_collection_usages()
        {
        }

        public parameter_xml_schema_collection_usages(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }

        public parameter_xml_schema_collection_usages(int object_id, int parameter_id, int xml_collection_id)
        {
            this.object_id = object_id;
            this.parameter_id = parameter_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parameter_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }
    }

    [SqlView("Z0", "parameters")]
    public partial class parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("encryption_type", 16), SqlTypeFacets("int", true)]
        public int? encryption_type
        {
            get;
            set;
        }

        [SqlColumn("encryption_type_desc", 17), SqlTypeFacets("nvarchar", true)]
        public string encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_name", 18), SqlTypeFacets("sysname", true)]
        public string encryption_algorithm_name
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_id", 19), SqlTypeFacets("int", true)]
        public int? column_encryption_key_id
        {
            get;
            set;
        }

        [SqlColumn("column_encryption_key_database_name", 20), SqlTypeFacets("sysname", true)]
        public string column_encryption_key_database_name
        {
            get;
            set;
        }

        public parameters()
        {
        }

        public parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }

        public parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable, int? encryption_type, string encryption_type_desc, string encryption_algorithm_name, int? column_encryption_key_id, string column_encryption_key_database_name)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
            this.encryption_type = encryption_type;
            this.encryption_type_desc = encryption_type_desc;
            this.encryption_algorithm_name = encryption_algorithm_name;
            this.column_encryption_key_id = column_encryption_key_id;
            this.column_encryption_key_database_name = column_encryption_key_database_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable, encryption_type, encryption_type_desc, encryption_algorithm_name, column_encryption_key_id, column_encryption_key_database_name };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
            encryption_type = (int?)items[16];
            encryption_type_desc = (string)items[17];
            encryption_algorithm_name = (string)items[18];
            column_encryption_key_id = (int?)items[19];
            column_encryption_key_database_name = (string)items[20];
        }
    }

    [SqlView("Z0", "partition_functions")]
    public partial class partition_functions : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("function_id", 1), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("fanout", 4), SqlTypeFacets("int", false)]
        public int fanout
        {
            get;
            set;
        }

        [SqlColumn("boundary_value_on_right", 5), SqlTypeFacets("bit", false)]
        public bool boundary_value_on_right
        {
            get;
            set;
        }

        [SqlColumn("is_system", 6), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public partition_functions()
        {
        }

        public partition_functions(object[] items)
        {
            name = (string)items[0];
            function_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            fanout = (int)items[4];
            boundary_value_on_right = (bool)items[5];
            is_system = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
        }

        public partition_functions(string name, int function_id, string type, string type_desc, int fanout, bool boundary_value_on_right, bool is_system, DateTime create_date, DateTime modify_date)
        {
            this.name = name;
            this.function_id = function_id;
            this.type = type;
            this.type_desc = type_desc;
            this.fanout = fanout;
            this.boundary_value_on_right = boundary_value_on_right;
            this.is_system = is_system;
            this.create_date = create_date;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, function_id, type, type_desc, fanout, boundary_value_on_right, is_system, create_date, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            function_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            fanout = (int)items[4];
            boundary_value_on_right = (bool)items[5];
            is_system = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
        }
    }

    [SqlView("Z0", "partition_parameters")]
    public partial class partition_parameters : SqlViewProxy
    {
        [SqlColumn("function_id", 0), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 2), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 3), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 4), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 5), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 6), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 7), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public partition_parameters()
        {
        }

        public partition_parameters(object[] items)
        {
            function_id = (int)items[0];
            parameter_id = (int)items[1];
            system_type_id = (byte)items[2];
            max_length = (short)items[3];
            precision = (byte)items[4];
            scale = (byte)items[5];
            collation_name = (string)items[6];
            user_type_id = (int)items[7];
        }

        public partition_parameters(int function_id, int parameter_id, byte system_type_id, short max_length, byte precision, byte scale, string collation_name, int user_type_id)
        {
            this.function_id = function_id;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { function_id, parameter_id, system_type_id, max_length, precision, scale, collation_name, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            function_id = (int)items[0];
            parameter_id = (int)items[1];
            system_type_id = (byte)items[2];
            max_length = (short)items[3];
            precision = (byte)items[4];
            scale = (byte)items[5];
            collation_name = (string)items[6];
            user_type_id = (int)items[7];
        }
    }

    [SqlView("Z0", "partition_range_values")]
    public partial class partition_range_values : SqlViewProxy
    {
        [SqlColumn("function_id", 0), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("boundary_id", 1), SqlTypeFacets("int", false)]
        public int boundary_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public partition_range_values()
        {
        }

        public partition_range_values(object[] items)
        {
            function_id = (int)items[0];
            boundary_id = (int)items[1];
            parameter_id = (int)items[2];
            value = (Object)items[3];
        }

        public partition_range_values(int function_id, int boundary_id, int parameter_id, Object value)
        {
            this.function_id = function_id;
            this.boundary_id = boundary_id;
            this.parameter_id = parameter_id;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { function_id, boundary_id, parameter_id, value };
        }

        public override void SetItemArray(object[] items)
        {
            function_id = (int)items[0];
            boundary_id = (int)items[1];
            parameter_id = (int)items[2];
            value = (Object)items[3];
        }
    }

    [SqlView("Z0", "partition_schemes")]
    public partial class partition_schemes : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        [SqlColumn("function_id", 6), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        public partition_schemes()
        {
        }

        public partition_schemes(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            function_id = (int)items[6];
        }

        public partition_schemes(string name, int data_space_id, string type, string type_desc, bool? is_default, bool? is_system, int function_id)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
            this.function_id = function_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system, function_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            function_id = (int)items[6];
        }
    }

    [SqlView("Z0", "partitions")]
    public partial class partitions : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 4), SqlTypeFacets("bigint", false)]
        public long hobt_id
        {
            get;
            set;
        }

        [SqlColumn("rows", 5), SqlTypeFacets("bigint", true)]
        public long? rows
        {
            get;
            set;
        }

        [SqlColumn("filestream_filegroup_id", 6), SqlTypeFacets("smallint", false)]
        public short filestream_filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("data_compression", 7), SqlTypeFacets("tinyint", false)]
        public byte data_compression
        {
            get;
            set;
        }

        [SqlColumn("data_compression_desc", 8), SqlTypeFacets("nvarchar", true)]
        public string data_compression_desc
        {
            get;
            set;
        }

        public partitions()
        {
        }

        public partitions(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long)items[4];
            rows = (long?)items[5];
            filestream_filegroup_id = (short)items[6];
            data_compression = (byte)items[7];
            data_compression_desc = (string)items[8];
        }

        public partitions(long partition_id, int object_id, int index_id, int partition_number, long hobt_id, long? rows, short filestream_filegroup_id, byte data_compression, string data_compression_desc)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.hobt_id = hobt_id;
            this.rows = rows;
            this.filestream_filegroup_id = filestream_filegroup_id;
            this.data_compression = data_compression;
            this.data_compression_desc = data_compression_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, hobt_id, rows, filestream_filegroup_id, data_compression, data_compression_desc };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long)items[4];
            rows = (long?)items[5];
            filestream_filegroup_id = (short)items[6];
            data_compression = (byte)items[7];
            data_compression_desc = (string)items[8];
        }
    }

    [SqlProcedure("Z0", "DefineRenameIndexRefactorSteps")]
    public partial class DefineRenameIndexRefactorSteps : SqlProcedureProxy
    {
        [SqlParameter("@RenameIndexSelection", 0, true, false), SqlTypeFacets("[Z0].[RenameIndexSelection]", true)]
        public IEnumerable<RenameIndexSelection> RenameIndexSelection
        {
            get;
            set;
        }

        public DefineRenameIndexRefactorSteps()
        {
        }

        public DefineRenameIndexRefactorSteps(object[] items)
        {
            RenameIndexSelection = (IEnumerable<RenameIndexSelection>)items[0];
        }

        public DefineRenameIndexRefactorSteps(IEnumerable<RenameIndexSelection> RenameIndexSelection)
        {
            this.RenameIndexSelection = RenameIndexSelection;
        }

        public override object[] GetItemArray()
        {
            return new object[] { RenameIndexSelection };
        }

        public override void SetItemArray(object[] items)
        {
            RenameIndexSelection = (IEnumerable<RenameIndexSelection>)items[0];
        }
    }

    [SqlProcedure("Z0", "DefineSchemaRefactorOp")]
    public partial class DefineSchemaRefactorOp : SqlProcedureProxy
    {
        [SqlParameter("@OldSchema", 0, false, false), SqlTypeFacets("sysname", true)]
        public string OldSchema
        {
            get;
            set;
        }

        [SqlParameter("@NewSchema", 1, false, false), SqlTypeFacets("sysname", true)]
        public string NewSchema
        {
            get;
            set;
        }

        [SqlParameter("@Operation", 2, false, false), SqlTypeFacets("varchar", true)]
        public string Operation
        {
            get;
            set;
        }

        [SqlParameter("@ElementType", 3, false, false), SqlTypeFacets("varchar", true)]
        public string ElementType
        {
            get;
            set;
        }

        public DefineSchemaRefactorOp()
        {
        }

        public DefineSchemaRefactorOp(object[] items)
        {
            OldSchema = (string)items[0];
            NewSchema = (string)items[1];
            Operation = (string)items[2];
            ElementType = (string)items[3];
        }

        public DefineSchemaRefactorOp(string OldSchema, string NewSchema, string Operation, string ElementType)
        {
            this.OldSchema = OldSchema;
            this.NewSchema = NewSchema;
            this.Operation = Operation;
            this.ElementType = ElementType;
        }

        public override object[] GetItemArray()
        {
            return new object[] { OldSchema, NewSchema, Operation, ElementType };
        }

        public override void SetItemArray(object[] items)
        {
            OldSchema = (string)items[0];
            NewSchema = (string)items[1];
            Operation = (string)items[2];
            ElementType = (string)items[3];
        }
    }

    [SqlTableFunction("Z0", "TriggerEventTypes")]
    public partial class TriggerEventTypes : SqlTableFunctionProxy<TriggerEventTypes, TriggerEventType>
    {
        public TriggerEventTypes()
        {
        }
    }

    [SqlTableFunction("Z0", "CalcRenameIndexRefactorStep")]
    public partial class CalcRenameIndexRefactorStep : SqlTableFunctionProxy<CalcRenameIndexRefactorStep, CalcRenameIndexRefactorStepResult>
    {
        [SqlParameter("@Selection", 0, true, false), SqlTypeFacets("[Z0].[RenameIndexSelection]", true)]
        public IEnumerable<RenameIndexSelection> Selection
        {
            get;
            set;
        }

        public CalcRenameIndexRefactorStep()
        {
        }

        public CalcRenameIndexRefactorStep(object[] items)
        {
            Selection = (IEnumerable<RenameIndexSelection>)items[0];
        }

        public CalcRenameIndexRefactorStep(IEnumerable<RenameIndexSelection> Selection)
        {
            this.Selection = Selection;
        }

        public override object[] GetItemArray()
        {
            return new object[] { Selection };
        }

        public override void SetItemArray(object[] items)
        {
            Selection = (IEnumerable<RenameIndexSelection>)items[0];
        }
    }

    [SqlTableFunctionResult("Z0", "CalcRenameIndexRefactorStep")]
    public partial class CalcRenameIndexRefactorStepResult : SqlTabularProxy
    {
        [SqlColumn("StepExec", 0), SqlTypeFacets("nvarchar", false)]
        public string StepExec
        {
            get;
            set;
        }

        public CalcRenameIndexRefactorStepResult()
        {
        }

        public CalcRenameIndexRefactorStepResult(object[] items)
        {
            StepExec = (string)items[0];
        }

        public CalcRenameIndexRefactorStepResult(string StepExec)
        {
            this.StepExec = StepExec;
        }

        public override object[] GetItemArray()
        {
            return new object[] { StepExec };
        }

        public override void SetItemArray(object[] items)
        {
            StepExec = (string)items[0];
        }
    }

    [SqlTableFunction("Z0", "DescribeRecentQueries")]
    public partial class DescribeRecentQueries : SqlTableFunctionProxy<DescribeRecentQueries, QueryDescriptor>
    {
        [SqlParameter("@MaxCount", 0, false, false), SqlTypeFacets("int", true)]
        public int? MaxCount
        {
            get;
            set;
        }

        public DescribeRecentQueries()
        {
        }

        public DescribeRecentQueries(object[] items)
        {
            MaxCount = (int?)items[0];
        }

        public DescribeRecentQueries(int? MaxCount)
        {
            this.MaxCount = MaxCount;
        }

        public override object[] GetItemArray()
        {
            return new object[] { MaxCount };
        }

        public override void SetItemArray(object[] items)
        {
            MaxCount = (int?)items[0];
        }
    }

    [SqlTableFunction("Z0", "GetTableStats")]
    public partial class GetTableStats : SqlTableFunctionProxy<GetTableStats, TableStatsRecord>
    {
        public GetTableStats()
        {
        }
    }
}
namespace SqlT.Proxies
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using SqlT.Core;

    [SqlProxyBrokerFactory]
    class ProxyBrokerFactory : SqlProxyBrokerFactory<ProxyBrokerFactory>
    {
        /// <summary>
                /// The name of the catalog that provided the source metadata from
                /// which the proxies were constructed
                /// </summary>
        public const string SourceCatalog = @"SqlT";
        public static new ISqlProxyBroker CreateBroker(SqlConnectionString cs) => ((SqlProxyBrokerFactory<ProxyBrokerFactory>)(new ProxyBrokerFactory())).CreateBroker(cs);
    }
}
// Emission concluded at 7/5/2018 8:17:01 PM
