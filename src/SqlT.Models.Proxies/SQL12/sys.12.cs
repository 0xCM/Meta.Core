//Generation of this file began at 9/30/2016 9:36:24 AM
namespace SqlT.SqlSystem.SQL12.sys
{
    using System;
    using System.Collections.Generic;
    using SqlT.Core;

    [SqlView("sys", "all_objects")]
    public partial class all_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        public all_objects()
        {
        }

        public all_objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }

        public all_objects(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }
    }

    [SqlView("sys", "all_views")]
    public partial class all_views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", true)]
        public bool? has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", true)]
        public bool? has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", true)]
        public bool? with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", true)]
        public bool? is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        public all_views()
        {
        }

        public all_views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool?)items[14];
            has_unchecked_assembly_data = (bool?)items[15];
            with_check_option = (bool?)items[16];
            is_date_correlation_view = (bool?)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }

        public all_views(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published, bool? is_replicated, bool? has_replication_filter, bool? has_opaque_metadata, bool? has_unchecked_assembly_data, bool? with_check_option, bool? is_date_correlation_view, bool? is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool?)items[14];
            has_unchecked_assembly_data = (bool?)items[15];
            with_check_option = (bool?)items[16];
            is_date_correlation_view = (bool?)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }
    }

    [SqlView("sys", "all_columns")]
    public partial class all_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", true)]
        public bool? is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", true)]
        public bool? is_column_set
        {
            get;
            set;
        }

        public all_columns()
        {
        }

        public all_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
        }

        public all_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool? is_sparse, bool? is_column_set)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
        }
    }

    [SqlView("sys", "all_parameters")]
    public partial class all_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        public all_parameters()
        {
        }

        public all_parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }

        public all_parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }
    }

    [SqlView("sys", "sysobjects")]
    public partial class sysobjects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("id", 1), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("xtype", 2), SqlTypeFacets("char", false, 2)]
        public string xtype
        {
            get;
            set;
        }

        [SqlColumn("uid", 3), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("info", 4), SqlTypeFacets("smallint", true)]
        public short? info
        {
            get;
            set;
        }

        [SqlColumn("status", 5), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("base_schema_ver", 6), SqlTypeFacets("int", true)]
        public int? base_schema_ver
        {
            get;
            set;
        }

        [SqlColumn("replinfo", 7), SqlTypeFacets("int", true)]
        public int? replinfo
        {
            get;
            set;
        }

        [SqlColumn("parent_obj", 8), SqlTypeFacets("int", false)]
        public int parent_obj
        {
            get;
            set;
        }

        [SqlColumn("crdate", 9), SqlTypeFacets("datetime", false)]
        public DateTime crdate
        {
            get;
            set;
        }

        [SqlColumn("ftcatid", 10), SqlTypeFacets("smallint", true)]
        public short? ftcatid
        {
            get;
            set;
        }

        [SqlColumn("schema_ver", 11), SqlTypeFacets("int", true)]
        public int? schema_ver
        {
            get;
            set;
        }

        [SqlColumn("stats_schema_ver", 12), SqlTypeFacets("int", true)]
        public int? stats_schema_ver
        {
            get;
            set;
        }

        [SqlColumn("type", 13), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("userstat", 14), SqlTypeFacets("smallint", true)]
        public short? userstat
        {
            get;
            set;
        }

        [SqlColumn("sysstat", 15), SqlTypeFacets("smallint", true)]
        public short? sysstat
        {
            get;
            set;
        }

        [SqlColumn("indexdel", 16), SqlTypeFacets("smallint", true)]
        public short? indexdel
        {
            get;
            set;
        }

        [SqlColumn("refdate", 17), SqlTypeFacets("datetime", false)]
        public DateTime refdate
        {
            get;
            set;
        }

        [SqlColumn("version", 18), SqlTypeFacets("int", true)]
        public int? version
        {
            get;
            set;
        }

        [SqlColumn("deltrig", 19), SqlTypeFacets("int", true)]
        public int? deltrig
        {
            get;
            set;
        }

        [SqlColumn("instrig", 20), SqlTypeFacets("int", true)]
        public int? instrig
        {
            get;
            set;
        }

        [SqlColumn("updtrig", 21), SqlTypeFacets("int", true)]
        public int? updtrig
        {
            get;
            set;
        }

        [SqlColumn("seltrig", 22), SqlTypeFacets("int", true)]
        public int? seltrig
        {
            get;
            set;
        }

        [SqlColumn("category", 23), SqlTypeFacets("int", true)]
        public int? category
        {
            get;
            set;
        }

        [SqlColumn("cache", 24), SqlTypeFacets("smallint", true)]
        public short? cache
        {
            get;
            set;
        }

        public sysobjects()
        {
        }

        public sysobjects(object[] items)
        {
            name = (string)items[0];
            id = (int)items[1];
            xtype = (string)items[2];
            uid = (short?)items[3];
            info = (short?)items[4];
            status = (int?)items[5];
            base_schema_ver = (int?)items[6];
            replinfo = (int?)items[7];
            parent_obj = (int)items[8];
            crdate = (DateTime)items[9];
            ftcatid = (short?)items[10];
            schema_ver = (int?)items[11];
            stats_schema_ver = (int?)items[12];
            type = (string)items[13];
            userstat = (short?)items[14];
            sysstat = (short?)items[15];
            indexdel = (short?)items[16];
            refdate = (DateTime)items[17];
            version = (int?)items[18];
            deltrig = (int?)items[19];
            instrig = (int?)items[20];
            updtrig = (int?)items[21];
            seltrig = (int?)items[22];
            category = (int?)items[23];
            cache = (short?)items[24];
        }

        public sysobjects(string name, int id, string xtype, short? uid, short? info, int? status, int? base_schema_ver, int? replinfo, int parent_obj, DateTime crdate, short? ftcatid, int? schema_ver, int? stats_schema_ver, string type, short? userstat, short? sysstat, short? indexdel, DateTime refdate, int? version, int? deltrig, int? instrig, int? updtrig, int? seltrig, int? category, short? cache)
        {
            this.name = name;
            this.id = id;
            this.xtype = xtype;
            this.uid = uid;
            this.info = info;
            this.status = status;
            this.base_schema_ver = base_schema_ver;
            this.replinfo = replinfo;
            this.parent_obj = parent_obj;
            this.crdate = crdate;
            this.ftcatid = ftcatid;
            this.schema_ver = schema_ver;
            this.stats_schema_ver = stats_schema_ver;
            this.type = type;
            this.userstat = userstat;
            this.sysstat = sysstat;
            this.indexdel = indexdel;
            this.refdate = refdate;
            this.version = version;
            this.deltrig = deltrig;
            this.instrig = instrig;
            this.updtrig = updtrig;
            this.seltrig = seltrig;
            this.category = category;
            this.cache = cache;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, id, xtype, uid, info, status, base_schema_ver, replinfo, parent_obj, crdate, ftcatid, schema_ver, stats_schema_ver, type, userstat, sysstat, indexdel, refdate, version, deltrig, instrig, updtrig, seltrig, category, cache };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            id = (int)items[1];
            xtype = (string)items[2];
            uid = (short?)items[3];
            info = (short?)items[4];
            status = (int?)items[5];
            base_schema_ver = (int?)items[6];
            replinfo = (int?)items[7];
            parent_obj = (int)items[8];
            crdate = (DateTime)items[9];
            ftcatid = (short?)items[10];
            schema_ver = (int?)items[11];
            stats_schema_ver = (int?)items[12];
            type = (string)items[13];
            userstat = (short?)items[14];
            sysstat = (short?)items[15];
            indexdel = (short?)items[16];
            refdate = (DateTime)items[17];
            version = (int?)items[18];
            deltrig = (int?)items[19];
            instrig = (int?)items[20];
            updtrig = (int?)items[21];
            seltrig = (int?)items[22];
            category = (int?)items[23];
            cache = (short?)items[24];
        }
    }

    [SqlView("sys", "syscolumns")]
    public partial class syscolumns : SqlViewProxy
    {
        [SqlColumn("bitpos", 10), SqlTypeFacets("tinyint", true)]
        public byte? bitpos
        {
            get;
            set;
        }

        [SqlColumn("reserved", 11), SqlTypeFacets("tinyint", true)]
        public byte? reserved
        {
            get;
            set;
        }

        [SqlColumn("colstat", 12), SqlTypeFacets("smallint", true)]
        public short? colstat
        {
            get;
            set;
        }

        [SqlColumn("cdefault", 13), SqlTypeFacets("int", false)]
        public int cdefault
        {
            get;
            set;
        }

        [SqlColumn("domain", 14), SqlTypeFacets("int", false)]
        public int domain
        {
            get;
            set;
        }

        [SqlColumn("number", 15), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("colorder", 16), SqlTypeFacets("smallint", true)]
        public short? colorder
        {
            get;
            set;
        }

        [SqlColumn("autoval", 17), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] autoval
        {
            get;
            set;
        }

        [SqlColumn("offset", 18), SqlTypeFacets("smallint", true)]
        public short? offset
        {
            get;
            set;
        }

        [SqlColumn("collationid", 19), SqlTypeFacets("int", true)]
        public int? collationid
        {
            get;
            set;
        }

        [SqlColumn("language", 20), SqlTypeFacets("int", true)]
        public int? language
        {
            get;
            set;
        }

        [SqlColumn("status", 21), SqlTypeFacets("tinyint", true)]
        public byte? status
        {
            get;
            set;
        }

        [SqlColumn("type", 22), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("usertype", 23), SqlTypeFacets("smallint", true)]
        public short? usertype
        {
            get;
            set;
        }

        [SqlColumn("printfmt", 24), SqlTypeFacets("varchar", true, 255)]
        public string printfmt
        {
            get;
            set;
        }

        [SqlColumn("prec", 25), SqlTypeFacets("smallint", true)]
        public short? prec
        {
            get;
            set;
        }

        [SqlColumn("scale", 26), SqlTypeFacets("int", true)]
        public int? scale
        {
            get;
            set;
        }

        [SqlColumn("iscomputed", 27), SqlTypeFacets("int", true)]
        public int? iscomputed
        {
            get;
            set;
        }

        [SqlColumn("isoutparam", 28), SqlTypeFacets("int", true)]
        public int? isoutparam
        {
            get;
            set;
        }

        [SqlColumn("isnullable", 29), SqlTypeFacets("int", true)]
        public int? isnullable
        {
            get;
            set;
        }

        [SqlColumn("collation", 30), SqlTypeFacets("sysname", true)]
        public string collation
        {
            get;
            set;
        }

        [SqlColumn("tdscollation", 31), SqlTypeFacets("binary", true, 5)]
        public Byte[] tdscollation
        {
            get;
            set;
        }

        [SqlColumn("name", 0), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("id", 1), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("xtype", 2), SqlTypeFacets("tinyint", false)]
        public byte xtype
        {
            get;
            set;
        }

        [SqlColumn("typestat", 3), SqlTypeFacets("tinyint", true)]
        public byte? typestat
        {
            get;
            set;
        }

        [SqlColumn("xusertype", 4), SqlTypeFacets("smallint", true)]
        public short? xusertype
        {
            get;
            set;
        }

        [SqlColumn("length", 5), SqlTypeFacets("smallint", false)]
        public short length
        {
            get;
            set;
        }

        [SqlColumn("xprec", 6), SqlTypeFacets("tinyint", false)]
        public byte xprec
        {
            get;
            set;
        }

        [SqlColumn("xscale", 7), SqlTypeFacets("tinyint", false)]
        public byte xscale
        {
            get;
            set;
        }

        [SqlColumn("colid", 8), SqlTypeFacets("smallint", true)]
        public short? colid
        {
            get;
            set;
        }

        [SqlColumn("xoffset", 9), SqlTypeFacets("smallint", true)]
        public short? xoffset
        {
            get;
            set;
        }

        public syscolumns()
        {
        }

        public syscolumns(object[] items)
        {
            bitpos = (byte?)items[0];
            reserved = (byte?)items[1];
            colstat = (short?)items[2];
            cdefault = (int)items[3];
            domain = (int)items[4];
            number = (short?)items[5];
            colorder = (short?)items[6];
            autoval = (Byte[])items[7];
            offset = (short?)items[8];
            collationid = (int?)items[9];
            language = (int?)items[10];
            status = (byte?)items[11];
            type = (byte)items[12];
            usertype = (short?)items[13];
            printfmt = (string)items[14];
            prec = (short?)items[15];
            scale = (int?)items[16];
            iscomputed = (int?)items[17];
            isoutparam = (int?)items[18];
            isnullable = (int?)items[19];
            collation = (string)items[20];
            tdscollation = (Byte[])items[21];
            name = (string)items[22];
            id = (int)items[23];
            xtype = (byte)items[24];
            typestat = (byte?)items[25];
            xusertype = (short?)items[26];
            length = (short)items[27];
            xprec = (byte)items[28];
            xscale = (byte)items[29];
            colid = (short?)items[30];
            xoffset = (short?)items[31];
        }

        public syscolumns(byte? bitpos, byte? reserved, short? colstat, int cdefault, int domain, short? number, short? colorder, Byte[] autoval, short? offset, int? collationid, int? language, byte? status, byte type, short? usertype, string printfmt, short? prec, int? scale, int? iscomputed, int? isoutparam, int? isnullable, string collation, Byte[] tdscollation, string name, int id, byte xtype, byte? typestat, short? xusertype, short length, byte xprec, byte xscale, short? colid, short? xoffset)
        {
            this.bitpos = bitpos;
            this.reserved = reserved;
            this.colstat = colstat;
            this.cdefault = cdefault;
            this.domain = domain;
            this.number = number;
            this.colorder = colorder;
            this.autoval = autoval;
            this.offset = offset;
            this.collationid = collationid;
            this.language = language;
            this.status = status;
            this.type = type;
            this.usertype = usertype;
            this.printfmt = printfmt;
            this.prec = prec;
            this.scale = scale;
            this.iscomputed = iscomputed;
            this.isoutparam = isoutparam;
            this.isnullable = isnullable;
            this.collation = collation;
            this.tdscollation = tdscollation;
            this.name = name;
            this.id = id;
            this.xtype = xtype;
            this.typestat = typestat;
            this.xusertype = xusertype;
            this.length = length;
            this.xprec = xprec;
            this.xscale = xscale;
            this.colid = colid;
            this.xoffset = xoffset;
        }

        public override object[] GetItemArray()
        {
            return new object[] { bitpos, reserved, colstat, cdefault, domain, number, colorder, autoval, offset, collationid, language, status, type, usertype, printfmt, prec, scale, iscomputed, isoutparam, isnullable, collation, tdscollation, name, id, xtype, typestat, xusertype, length, xprec, xscale, colid, xoffset };
        }

        public override void SetItemArray(object[] items)
        {
            bitpos = (byte?)items[0];
            reserved = (byte?)items[1];
            colstat = (short?)items[2];
            cdefault = (int)items[3];
            domain = (int)items[4];
            number = (short?)items[5];
            colorder = (short?)items[6];
            autoval = (Byte[])items[7];
            offset = (short?)items[8];
            collationid = (int?)items[9];
            language = (int?)items[10];
            status = (byte?)items[11];
            type = (byte)items[12];
            usertype = (short?)items[13];
            printfmt = (string)items[14];
            prec = (short?)items[15];
            scale = (int?)items[16];
            iscomputed = (int?)items[17];
            isoutparam = (int?)items[18];
            isnullable = (int?)items[19];
            collation = (string)items[20];
            tdscollation = (Byte[])items[21];
            name = (string)items[22];
            id = (int)items[23];
            xtype = (byte)items[24];
            typestat = (byte?)items[25];
            xusertype = (short?)items[26];
            length = (short)items[27];
            xprec = (byte)items[28];
            xscale = (byte)items[29];
            colid = (short?)items[30];
            xoffset = (short?)items[31];
        }
    }

    [SqlView("sys", "all_sql_modules")]
    public partial class all_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", true)]
        public bool? is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", true)]
        public bool? is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", true)]
        public bool? uses_native_compilation
        {
            get;
            set;
        }

        public all_sql_modules()
        {
        }

        public all_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }

        public all_sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, bool? is_schema_bound, bool? uses_database_collation, bool? is_recompiled, bool? null_on_null_input, int? execute_as_principal_id, bool? uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }
    }

    [SqlView("sys", "syscomments")]
    public partial class syscomments : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("number", 1), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("colid", 2), SqlTypeFacets("smallint", false)]
        public short colid
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("smallint", false)]
        public short status
        {
            get;
            set;
        }

        [SqlColumn("ctext", 4), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] ctext
        {
            get;
            set;
        }

        [SqlColumn("texttype", 5), SqlTypeFacets("smallint", true)]
        public short? texttype
        {
            get;
            set;
        }

        [SqlColumn("language", 6), SqlTypeFacets("smallint", true)]
        public short? language
        {
            get;
            set;
        }

        [SqlColumn("encrypted", 7), SqlTypeFacets("bit", false)]
        public bool encrypted
        {
            get;
            set;
        }

        [SqlColumn("compressed", 8), SqlTypeFacets("bit", false)]
        public bool compressed
        {
            get;
            set;
        }

        [SqlColumn("text", 9), SqlTypeFacets("nvarchar", true, 8000)]
        public string text
        {
            get;
            set;
        }

        public syscomments()
        {
        }

        public syscomments(object[] items)
        {
            id = (int)items[0];
            number = (short?)items[1];
            colid = (short)items[2];
            status = (short)items[3];
            ctext = (Byte[])items[4];
            texttype = (short?)items[5];
            language = (short?)items[6];
            encrypted = (bool)items[7];
            compressed = (bool)items[8];
            text = (string)items[9];
        }

        public syscomments(int id, short? number, short colid, short status, Byte[] ctext, short? texttype, short? language, bool encrypted, bool compressed, string text)
        {
            this.id = id;
            this.number = number;
            this.colid = colid;
            this.status = status;
            this.ctext = ctext;
            this.texttype = texttype;
            this.language = language;
            this.encrypted = encrypted;
            this.compressed = compressed;
            this.text = text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, number, colid, status, ctext, texttype, language, encrypted, compressed, text };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            number = (short?)items[1];
            colid = (short)items[2];
            status = (short)items[3];
            ctext = (Byte[])items[4];
            texttype = (short?)items[5];
            language = (short?)items[6];
            encrypted = (bool)items[7];
            compressed = (bool)items[8];
            text = (string)items[9];
        }
    }

    [SqlView("sys", "sysdepends")]
    public partial class sysdepends : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("depid", 1), SqlTypeFacets("int", false)]
        public int depid
        {
            get;
            set;
        }

        [SqlColumn("number", 2), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("depnumber", 3), SqlTypeFacets("smallint", true)]
        public short? depnumber
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("deptype", 5), SqlTypeFacets("tinyint", false)]
        public byte deptype
        {
            get;
            set;
        }

        [SqlColumn("depdbid", 6), SqlTypeFacets("smallint", true)]
        public short? depdbid
        {
            get;
            set;
        }

        [SqlColumn("depsiteid", 7), SqlTypeFacets("smallint", true)]
        public short? depsiteid
        {
            get;
            set;
        }

        [SqlColumn("selall", 8), SqlTypeFacets("bit", false)]
        public bool selall
        {
            get;
            set;
        }

        [SqlColumn("resultobj", 9), SqlTypeFacets("bit", false)]
        public bool resultobj
        {
            get;
            set;
        }

        [SqlColumn("readobj", 10), SqlTypeFacets("bit", false)]
        public bool readobj
        {
            get;
            set;
        }

        public sysdepends()
        {
        }

        public sysdepends(object[] items)
        {
            id = (int)items[0];
            depid = (int)items[1];
            number = (short?)items[2];
            depnumber = (short?)items[3];
            status = (short?)items[4];
            deptype = (byte)items[5];
            depdbid = (short?)items[6];
            depsiteid = (short?)items[7];
            selall = (bool)items[8];
            resultobj = (bool)items[9];
            readobj = (bool)items[10];
        }

        public sysdepends(int id, int depid, short? number, short? depnumber, short? status, byte deptype, short? depdbid, short? depsiteid, bool selall, bool resultobj, bool readobj)
        {
            this.id = id;
            this.depid = depid;
            this.number = number;
            this.depnumber = depnumber;
            this.status = status;
            this.deptype = deptype;
            this.depdbid = depdbid;
            this.depsiteid = depsiteid;
            this.selall = selall;
            this.resultobj = resultobj;
            this.readobj = readobj;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, depid, number, depnumber, status, deptype, depdbid, depsiteid, selall, resultobj, readobj };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            depid = (int)items[1];
            number = (short?)items[2];
            depnumber = (short?)items[3];
            status = (short?)items[4];
            deptype = (byte)items[5];
            depdbid = (short?)items[6];
            depsiteid = (short?)items[7];
            selall = (bool)items[8];
            resultobj = (bool)items[9];
            readobj = (bool)items[10];
        }
    }

    [SqlView("sys", "sysforeignkeys")]
    public partial class sysforeignkeys : SqlViewProxy
    {
        [SqlColumn("constid", 0), SqlTypeFacets("int", false)]
        public int constid
        {
            get;
            set;
        }

        [SqlColumn("fkeyid", 1), SqlTypeFacets("int", false)]
        public int fkeyid
        {
            get;
            set;
        }

        [SqlColumn("rkeyid", 2), SqlTypeFacets("int", false)]
        public int rkeyid
        {
            get;
            set;
        }

        [SqlColumn("fkey", 3), SqlTypeFacets("smallint", true)]
        public short? fkey
        {
            get;
            set;
        }

        [SqlColumn("rkey", 4), SqlTypeFacets("smallint", true)]
        public short? rkey
        {
            get;
            set;
        }

        [SqlColumn("keyno", 5), SqlTypeFacets("smallint", true)]
        public short? keyno
        {
            get;
            set;
        }

        public sysforeignkeys()
        {
        }

        public sysforeignkeys(object[] items)
        {
            constid = (int)items[0];
            fkeyid = (int)items[1];
            rkeyid = (int)items[2];
            fkey = (short?)items[3];
            rkey = (short?)items[4];
            keyno = (short?)items[5];
        }

        public sysforeignkeys(int constid, int fkeyid, int rkeyid, short? fkey, short? rkey, short? keyno)
        {
            this.constid = constid;
            this.fkeyid = fkeyid;
            this.rkeyid = rkeyid;
            this.fkey = fkey;
            this.rkey = rkey;
            this.keyno = keyno;
        }

        public override object[] GetItemArray()
        {
            return new object[] { constid, fkeyid, rkeyid, fkey, rkey, keyno };
        }

        public override void SetItemArray(object[] items)
        {
            constid = (int)items[0];
            fkeyid = (int)items[1];
            rkeyid = (int)items[2];
            fkey = (short?)items[3];
            rkey = (short?)items[4];
            keyno = (short?)items[5];
        }
    }

    [SqlView("sys", "sysconstraints")]
    public partial class sysconstraints : SqlViewProxy
    {
        [SqlColumn("constid", 0), SqlTypeFacets("int", false)]
        public int constid
        {
            get;
            set;
        }

        [SqlColumn("id", 1), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("colid", 2), SqlTypeFacets("smallint", true)]
        public short? colid
        {
            get;
            set;
        }

        [SqlColumn("spare1", 3), SqlTypeFacets("tinyint", true)]
        public byte? spare1
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("actions", 5), SqlTypeFacets("int", true)]
        public int? actions
        {
            get;
            set;
        }

        [SqlColumn("error", 6), SqlTypeFacets("int", true)]
        public int? error
        {
            get;
            set;
        }

        public sysconstraints()
        {
        }

        public sysconstraints(object[] items)
        {
            constid = (int)items[0];
            id = (int)items[1];
            colid = (short?)items[2];
            spare1 = (byte?)items[3];
            status = (int?)items[4];
            actions = (int?)items[5];
            error = (int?)items[6];
        }

        public sysconstraints(int constid, int id, short? colid, byte? spare1, int? status, int? actions, int? error)
        {
            this.constid = constid;
            this.id = id;
            this.colid = colid;
            this.spare1 = spare1;
            this.status = status;
            this.actions = actions;
            this.error = error;
        }

        public override object[] GetItemArray()
        {
            return new object[] { constid, id, colid, spare1, status, actions, error };
        }

        public override void SetItemArray(object[] items)
        {
            constid = (int)items[0];
            id = (int)items[1];
            colid = (short?)items[2];
            spare1 = (byte?)items[3];
            status = (int?)items[4];
            actions = (int?)items[5];
            error = (int?)items[6];
        }
    }

    [SqlView("sys", "sysfulltextcatalogs")]
    public partial class sysfulltextcatalogs : SqlViewProxy
    {
        [SqlColumn("ftcatid", 0), SqlTypeFacets("smallint", true)]
        public short? ftcatid
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("path", 3), SqlTypeFacets("nvarchar", true, 520)]
        public string path
        {
            get;
            set;
        }

        public sysfulltextcatalogs()
        {
        }

        public sysfulltextcatalogs(object[] items)
        {
            ftcatid = (short?)items[0];
            name = (string)items[1];
            status = (short?)items[2];
            path = (string)items[3];
        }

        public sysfulltextcatalogs(short? ftcatid, string name, short? status, string path)
        {
            this.ftcatid = ftcatid;
            this.name = name;
            this.status = status;
            this.path = path;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ftcatid, name, status, path };
        }

        public override void SetItemArray(object[] items)
        {
            ftcatid = (short?)items[0];
            name = (string)items[1];
            status = (short?)items[2];
            path = (string)items[3];
        }
    }

    [SqlView("sys", "sysindexes")]
    public partial class sysindexes : SqlViewProxy
    {
        [SqlColumn("pgmodctr", 23), SqlTypeFacets("int", true)]
        public int? pgmodctr
        {
            get;
            set;
        }

        [SqlColumn("keys", 24), SqlTypeFacets("varbinary", true, 1088)]
        public Byte[] keys
        {
            get;
            set;
        }

        [SqlColumn("name", 25), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("statblob", 26), SqlTypeFacets("image", true, 16)]
        public Byte[] statblob
        {
            get;
            set;
        }

        [SqlColumn("maxlen", 27), SqlTypeFacets("int", true)]
        public int? maxlen
        {
            get;
            set;
        }

        [SqlColumn("rows", 28), SqlTypeFacets("int", true)]
        public int? rows
        {
            get;
            set;
        }

        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("first", 2), SqlTypeFacets("binary", true, 6)]
        public Byte[] first
        {
            get;
            set;
        }

        [SqlColumn("indid", 3), SqlTypeFacets("smallint", true)]
        public short? indid
        {
            get;
            set;
        }

        [SqlColumn("root", 4), SqlTypeFacets("binary", true, 6)]
        public Byte[] root
        {
            get;
            set;
        }

        [SqlColumn("minlen", 5), SqlTypeFacets("smallint", true)]
        public short? minlen
        {
            get;
            set;
        }

        [SqlColumn("keycnt", 6), SqlTypeFacets("smallint", true)]
        public short? keycnt
        {
            get;
            set;
        }

        [SqlColumn("groupid", 7), SqlTypeFacets("smallint", true)]
        public short? groupid
        {
            get;
            set;
        }

        [SqlColumn("dpages", 8), SqlTypeFacets("int", true)]
        public int? dpages
        {
            get;
            set;
        }

        [SqlColumn("reserved", 9), SqlTypeFacets("int", true)]
        public int? reserved
        {
            get;
            set;
        }

        [SqlColumn("used", 10), SqlTypeFacets("int", true)]
        public int? used
        {
            get;
            set;
        }

        [SqlColumn("rowcnt", 11), SqlTypeFacets("bigint", true)]
        public long? rowcnt
        {
            get;
            set;
        }

        [SqlColumn("rowmodctr", 12), SqlTypeFacets("int", true)]
        public int? rowmodctr
        {
            get;
            set;
        }

        [SqlColumn("reserved3", 13), SqlTypeFacets("tinyint", true)]
        public byte? reserved3
        {
            get;
            set;
        }

        [SqlColumn("reserved4", 14), SqlTypeFacets("tinyint", true)]
        public byte? reserved4
        {
            get;
            set;
        }

        [SqlColumn("xmaxlen", 15), SqlTypeFacets("smallint", true)]
        public short? xmaxlen
        {
            get;
            set;
        }

        [SqlColumn("maxirow", 16), SqlTypeFacets("smallint", true)]
        public short? maxirow
        {
            get;
            set;
        }

        [SqlColumn("OrigFillFactor", 17), SqlTypeFacets("tinyint", true)]
        public byte? OrigFillFactor
        {
            get;
            set;
        }

        [SqlColumn("StatVersion", 18), SqlTypeFacets("tinyint", true)]
        public byte? StatVersion
        {
            get;
            set;
        }

        [SqlColumn("reserved2", 19), SqlTypeFacets("int", true)]
        public int? reserved2
        {
            get;
            set;
        }

        [SqlColumn("FirstIAM", 20), SqlTypeFacets("binary", true, 6)]
        public Byte[] FirstIAM
        {
            get;
            set;
        }

        [SqlColumn("impid", 21), SqlTypeFacets("smallint", true)]
        public short? impid
        {
            get;
            set;
        }

        [SqlColumn("lockflags", 22), SqlTypeFacets("smallint", true)]
        public short? lockflags
        {
            get;
            set;
        }

        public sysindexes()
        {
        }

        public sysindexes(object[] items)
        {
            pgmodctr = (int?)items[0];
            keys = (Byte[])items[1];
            name = (string)items[2];
            statblob = (Byte[])items[3];
            maxlen = (int?)items[4];
            rows = (int?)items[5];
            id = (int)items[6];
            status = (int?)items[7];
            first = (Byte[])items[8];
            indid = (short?)items[9];
            root = (Byte[])items[10];
            minlen = (short?)items[11];
            keycnt = (short?)items[12];
            groupid = (short?)items[13];
            dpages = (int?)items[14];
            reserved = (int?)items[15];
            used = (int?)items[16];
            rowcnt = (long?)items[17];
            rowmodctr = (int?)items[18];
            reserved3 = (byte?)items[19];
            reserved4 = (byte?)items[20];
            xmaxlen = (short?)items[21];
            maxirow = (short?)items[22];
            OrigFillFactor = (byte?)items[23];
            StatVersion = (byte?)items[24];
            reserved2 = (int?)items[25];
            FirstIAM = (Byte[])items[26];
            impid = (short?)items[27];
            lockflags = (short?)items[28];
        }

        public sysindexes(int? pgmodctr, Byte[] keys, string name, Byte[] statblob, int? maxlen, int? rows, int id, int? status, Byte[] first, short? indid, Byte[] root, short? minlen, short? keycnt, short? groupid, int? dpages, int? reserved, int? used, long? rowcnt, int? rowmodctr, byte? reserved3, byte? reserved4, short? xmaxlen, short? maxirow, byte? OrigFillFactor, byte? StatVersion, int? reserved2, Byte[] FirstIAM, short? impid, short? lockflags)
        {
            this.pgmodctr = pgmodctr;
            this.keys = keys;
            this.name = name;
            this.statblob = statblob;
            this.maxlen = maxlen;
            this.rows = rows;
            this.id = id;
            this.status = status;
            this.first = first;
            this.indid = indid;
            this.root = root;
            this.minlen = minlen;
            this.keycnt = keycnt;
            this.groupid = groupid;
            this.dpages = dpages;
            this.reserved = reserved;
            this.used = used;
            this.rowcnt = rowcnt;
            this.rowmodctr = rowmodctr;
            this.reserved3 = reserved3;
            this.reserved4 = reserved4;
            this.xmaxlen = xmaxlen;
            this.maxirow = maxirow;
            this.OrigFillFactor = OrigFillFactor;
            this.StatVersion = StatVersion;
            this.reserved2 = reserved2;
            this.FirstIAM = FirstIAM;
            this.impid = impid;
            this.lockflags = lockflags;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pgmodctr, keys, name, statblob, maxlen, rows, id, status, first, indid, root, minlen, keycnt, groupid, dpages, reserved, used, rowcnt, rowmodctr, reserved3, reserved4, xmaxlen, maxirow, OrigFillFactor, StatVersion, reserved2, FirstIAM, impid, lockflags };
        }

        public override void SetItemArray(object[] items)
        {
            pgmodctr = (int?)items[0];
            keys = (Byte[])items[1];
            name = (string)items[2];
            statblob = (Byte[])items[3];
            maxlen = (int?)items[4];
            rows = (int?)items[5];
            id = (int)items[6];
            status = (int?)items[7];
            first = (Byte[])items[8];
            indid = (short?)items[9];
            root = (Byte[])items[10];
            minlen = (short?)items[11];
            keycnt = (short?)items[12];
            groupid = (short?)items[13];
            dpages = (int?)items[14];
            reserved = (int?)items[15];
            used = (int?)items[16];
            rowcnt = (long?)items[17];
            rowmodctr = (int?)items[18];
            reserved3 = (byte?)items[19];
            reserved4 = (byte?)items[20];
            xmaxlen = (short?)items[21];
            maxirow = (short?)items[22];
            OrigFillFactor = (byte?)items[23];
            StatVersion = (byte?)items[24];
            reserved2 = (int?)items[25];
            FirstIAM = (Byte[])items[26];
            impid = (short?)items[27];
            lockflags = (short?)items[28];
        }
    }

    [SqlView("sys", "sysindexkeys")]
    public partial class sysindexkeys : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("indid", 1), SqlTypeFacets("smallint", true)]
        public short? indid
        {
            get;
            set;
        }

        [SqlColumn("colid", 2), SqlTypeFacets("smallint", true)]
        public short? colid
        {
            get;
            set;
        }

        [SqlColumn("keyno", 3), SqlTypeFacets("smallint", true)]
        public short? keyno
        {
            get;
            set;
        }

        public sysindexkeys()
        {
        }

        public sysindexkeys(object[] items)
        {
            id = (int)items[0];
            indid = (short?)items[1];
            colid = (short?)items[2];
            keyno = (short?)items[3];
        }

        public sysindexkeys(int id, short? indid, short? colid, short? keyno)
        {
            this.id = id;
            this.indid = indid;
            this.colid = colid;
            this.keyno = keyno;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, indid, colid, keyno };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            indid = (short?)items[1];
            colid = (short?)items[2];
            keyno = (short?)items[3];
        }
    }

    [SqlView("sys", "syspermissions")]
    public partial class syspermissions : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("grantee", 1), SqlTypeFacets("smallint", true)]
        public short? grantee
        {
            get;
            set;
        }

        [SqlColumn("grantor", 2), SqlTypeFacets("smallint", true)]
        public short? grantor
        {
            get;
            set;
        }

        [SqlColumn("actadd", 3), SqlTypeFacets("smallint", true)]
        public short? actadd
        {
            get;
            set;
        }

        [SqlColumn("actmod", 4), SqlTypeFacets("smallint", true)]
        public short? actmod
        {
            get;
            set;
        }

        [SqlColumn("seladd", 5), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] seladd
        {
            get;
            set;
        }

        [SqlColumn("selmod", 6), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] selmod
        {
            get;
            set;
        }

        [SqlColumn("updadd", 7), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] updadd
        {
            get;
            set;
        }

        [SqlColumn("updmod", 8), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] updmod
        {
            get;
            set;
        }

        [SqlColumn("refadd", 9), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] refadd
        {
            get;
            set;
        }

        [SqlColumn("refmod", 10), SqlTypeFacets("varbinary", true, 4000)]
        public Byte[] refmod
        {
            get;
            set;
        }

        public syspermissions()
        {
        }

        public syspermissions(object[] items)
        {
            id = (int)items[0];
            grantee = (short?)items[1];
            grantor = (short?)items[2];
            actadd = (short?)items[3];
            actmod = (short?)items[4];
            seladd = (Byte[])items[5];
            selmod = (Byte[])items[6];
            updadd = (Byte[])items[7];
            updmod = (Byte[])items[8];
            refadd = (Byte[])items[9];
            refmod = (Byte[])items[10];
        }

        public syspermissions(int id, short? grantee, short? grantor, short? actadd, short? actmod, Byte[] seladd, Byte[] selmod, Byte[] updadd, Byte[] updmod, Byte[] refadd, Byte[] refmod)
        {
            this.id = id;
            this.grantee = grantee;
            this.grantor = grantor;
            this.actadd = actadd;
            this.actmod = actmod;
            this.seladd = seladd;
            this.selmod = selmod;
            this.updadd = updadd;
            this.updmod = updmod;
            this.refadd = refadd;
            this.refmod = refmod;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, grantee, grantor, actadd, actmod, seladd, selmod, updadd, updmod, refadd, refmod };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            grantee = (short?)items[1];
            grantor = (short?)items[2];
            actadd = (short?)items[3];
            actmod = (short?)items[4];
            seladd = (Byte[])items[5];
            selmod = (Byte[])items[6];
            updadd = (Byte[])items[7];
            updmod = (Byte[])items[8];
            refadd = (Byte[])items[9];
            refmod = (Byte[])items[10];
        }
    }

    [SqlView("sys", "sysprotects")]
    public partial class sysprotects : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("uid", 1), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("action", 2), SqlTypeFacets("tinyint", true)]
        public byte? action
        {
            get;
            set;
        }

        [SqlColumn("protecttype", 3), SqlTypeFacets("tinyint", true)]
        public byte? protecttype
        {
            get;
            set;
        }

        [SqlColumn("columns", 4), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] columns
        {
            get;
            set;
        }

        [SqlColumn("grantor", 5), SqlTypeFacets("smallint", true)]
        public short? grantor
        {
            get;
            set;
        }

        public sysprotects()
        {
        }

        public sysprotects(object[] items)
        {
            id = (int)items[0];
            uid = (short?)items[1];
            action = (byte?)items[2];
            protecttype = (byte?)items[3];
            columns = (Byte[])items[4];
            grantor = (short?)items[5];
        }

        public sysprotects(int id, short? uid, byte? action, byte? protecttype, Byte[] columns, short? grantor)
        {
            this.id = id;
            this.uid = uid;
            this.action = action;
            this.protecttype = protecttype;
            this.columns = columns;
            this.grantor = grantor;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, uid, action, protecttype, columns, grantor };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            uid = (short?)items[1];
            action = (byte?)items[2];
            protecttype = (byte?)items[3];
            columns = (Byte[])items[4];
            grantor = (short?)items[5];
        }
    }

    [SqlView("sys", "sysreferences")]
    public partial class sysreferences : SqlViewProxy
    {
        [SqlColumn("constid", 0), SqlTypeFacets("int", false)]
        public int constid
        {
            get;
            set;
        }

        [SqlColumn("fkeyid", 1), SqlTypeFacets("int", false)]
        public int fkeyid
        {
            get;
            set;
        }

        [SqlColumn("rkeyid", 2), SqlTypeFacets("int", true)]
        public int? rkeyid
        {
            get;
            set;
        }

        [SqlColumn("rkeyindid", 3), SqlTypeFacets("smallint", true)]
        public short? rkeyindid
        {
            get;
            set;
        }

        [SqlColumn("keycnt", 4), SqlTypeFacets("smallint", true)]
        public short? keycnt
        {
            get;
            set;
        }

        [SqlColumn("forkeys", 5), SqlTypeFacets("varbinary", true, 32)]
        public Byte[] forkeys
        {
            get;
            set;
        }

        [SqlColumn("refkeys", 6), SqlTypeFacets("varbinary", true, 32)]
        public Byte[] refkeys
        {
            get;
            set;
        }

        [SqlColumn("fkeydbid", 7), SqlTypeFacets("smallint", true)]
        public short? fkeydbid
        {
            get;
            set;
        }

        [SqlColumn("rkeydbid", 8), SqlTypeFacets("smallint", true)]
        public short? rkeydbid
        {
            get;
            set;
        }

        [SqlColumn("fkey1", 9), SqlTypeFacets("smallint", true)]
        public short? fkey1
        {
            get;
            set;
        }

        [SqlColumn("fkey2", 10), SqlTypeFacets("smallint", true)]
        public short? fkey2
        {
            get;
            set;
        }

        [SqlColumn("fkey3", 11), SqlTypeFacets("smallint", true)]
        public short? fkey3
        {
            get;
            set;
        }

        [SqlColumn("fkey4", 12), SqlTypeFacets("smallint", true)]
        public short? fkey4
        {
            get;
            set;
        }

        [SqlColumn("fkey5", 13), SqlTypeFacets("smallint", true)]
        public short? fkey5
        {
            get;
            set;
        }

        [SqlColumn("fkey6", 14), SqlTypeFacets("smallint", true)]
        public short? fkey6
        {
            get;
            set;
        }

        [SqlColumn("fkey7", 15), SqlTypeFacets("smallint", true)]
        public short? fkey7
        {
            get;
            set;
        }

        [SqlColumn("fkey8", 16), SqlTypeFacets("smallint", true)]
        public short? fkey8
        {
            get;
            set;
        }

        [SqlColumn("fkey9", 17), SqlTypeFacets("smallint", true)]
        public short? fkey9
        {
            get;
            set;
        }

        [SqlColumn("fkey10", 18), SqlTypeFacets("smallint", true)]
        public short? fkey10
        {
            get;
            set;
        }

        [SqlColumn("fkey11", 19), SqlTypeFacets("smallint", true)]
        public short? fkey11
        {
            get;
            set;
        }

        [SqlColumn("fkey12", 20), SqlTypeFacets("smallint", true)]
        public short? fkey12
        {
            get;
            set;
        }

        [SqlColumn("fkey13", 21), SqlTypeFacets("smallint", true)]
        public short? fkey13
        {
            get;
            set;
        }

        [SqlColumn("fkey14", 22), SqlTypeFacets("smallint", true)]
        public short? fkey14
        {
            get;
            set;
        }

        [SqlColumn("fkey15", 23), SqlTypeFacets("smallint", true)]
        public short? fkey15
        {
            get;
            set;
        }

        [SqlColumn("fkey16", 24), SqlTypeFacets("smallint", true)]
        public short? fkey16
        {
            get;
            set;
        }

        [SqlColumn("rkey1", 25), SqlTypeFacets("smallint", true)]
        public short? rkey1
        {
            get;
            set;
        }

        [SqlColumn("rkey2", 26), SqlTypeFacets("smallint", true)]
        public short? rkey2
        {
            get;
            set;
        }

        [SqlColumn("rkey3", 27), SqlTypeFacets("smallint", true)]
        public short? rkey3
        {
            get;
            set;
        }

        [SqlColumn("rkey4", 28), SqlTypeFacets("smallint", true)]
        public short? rkey4
        {
            get;
            set;
        }

        [SqlColumn("rkey5", 29), SqlTypeFacets("smallint", true)]
        public short? rkey5
        {
            get;
            set;
        }

        [SqlColumn("rkey6", 30), SqlTypeFacets("smallint", true)]
        public short? rkey6
        {
            get;
            set;
        }

        [SqlColumn("rkey7", 31), SqlTypeFacets("smallint", true)]
        public short? rkey7
        {
            get;
            set;
        }

        [SqlColumn("rkey8", 32), SqlTypeFacets("smallint", true)]
        public short? rkey8
        {
            get;
            set;
        }

        [SqlColumn("rkey9", 33), SqlTypeFacets("smallint", true)]
        public short? rkey9
        {
            get;
            set;
        }

        [SqlColumn("rkey10", 34), SqlTypeFacets("smallint", true)]
        public short? rkey10
        {
            get;
            set;
        }

        [SqlColumn("rkey11", 35), SqlTypeFacets("smallint", true)]
        public short? rkey11
        {
            get;
            set;
        }

        [SqlColumn("rkey12", 36), SqlTypeFacets("smallint", true)]
        public short? rkey12
        {
            get;
            set;
        }

        [SqlColumn("rkey13", 37), SqlTypeFacets("smallint", true)]
        public short? rkey13
        {
            get;
            set;
        }

        [SqlColumn("rkey14", 38), SqlTypeFacets("smallint", true)]
        public short? rkey14
        {
            get;
            set;
        }

        [SqlColumn("rkey15", 39), SqlTypeFacets("smallint", true)]
        public short? rkey15
        {
            get;
            set;
        }

        [SqlColumn("rkey16", 40), SqlTypeFacets("smallint", true)]
        public short? rkey16
        {
            get;
            set;
        }

        public sysreferences()
        {
        }

        public sysreferences(object[] items)
        {
            constid = (int)items[0];
            fkeyid = (int)items[1];
            rkeyid = (int?)items[2];
            rkeyindid = (short?)items[3];
            keycnt = (short?)items[4];
            forkeys = (Byte[])items[5];
            refkeys = (Byte[])items[6];
            fkeydbid = (short?)items[7];
            rkeydbid = (short?)items[8];
            fkey1 = (short?)items[9];
            fkey2 = (short?)items[10];
            fkey3 = (short?)items[11];
            fkey4 = (short?)items[12];
            fkey5 = (short?)items[13];
            fkey6 = (short?)items[14];
            fkey7 = (short?)items[15];
            fkey8 = (short?)items[16];
            fkey9 = (short?)items[17];
            fkey10 = (short?)items[18];
            fkey11 = (short?)items[19];
            fkey12 = (short?)items[20];
            fkey13 = (short?)items[21];
            fkey14 = (short?)items[22];
            fkey15 = (short?)items[23];
            fkey16 = (short?)items[24];
            rkey1 = (short?)items[25];
            rkey2 = (short?)items[26];
            rkey3 = (short?)items[27];
            rkey4 = (short?)items[28];
            rkey5 = (short?)items[29];
            rkey6 = (short?)items[30];
            rkey7 = (short?)items[31];
            rkey8 = (short?)items[32];
            rkey9 = (short?)items[33];
            rkey10 = (short?)items[34];
            rkey11 = (short?)items[35];
            rkey12 = (short?)items[36];
            rkey13 = (short?)items[37];
            rkey14 = (short?)items[38];
            rkey15 = (short?)items[39];
            rkey16 = (short?)items[40];
        }

        public sysreferences(int constid, int fkeyid, int? rkeyid, short? rkeyindid, short? keycnt, Byte[] forkeys, Byte[] refkeys, short? fkeydbid, short? rkeydbid, short? fkey1, short? fkey2, short? fkey3, short? fkey4, short? fkey5, short? fkey6, short? fkey7, short? fkey8, short? fkey9, short? fkey10, short? fkey11, short? fkey12, short? fkey13, short? fkey14, short? fkey15, short? fkey16, short? rkey1, short? rkey2, short? rkey3, short? rkey4, short? rkey5, short? rkey6, short? rkey7, short? rkey8, short? rkey9, short? rkey10, short? rkey11, short? rkey12, short? rkey13, short? rkey14, short? rkey15, short? rkey16)
        {
            this.constid = constid;
            this.fkeyid = fkeyid;
            this.rkeyid = rkeyid;
            this.rkeyindid = rkeyindid;
            this.keycnt = keycnt;
            this.forkeys = forkeys;
            this.refkeys = refkeys;
            this.fkeydbid = fkeydbid;
            this.rkeydbid = rkeydbid;
            this.fkey1 = fkey1;
            this.fkey2 = fkey2;
            this.fkey3 = fkey3;
            this.fkey4 = fkey4;
            this.fkey5 = fkey5;
            this.fkey6 = fkey6;
            this.fkey7 = fkey7;
            this.fkey8 = fkey8;
            this.fkey9 = fkey9;
            this.fkey10 = fkey10;
            this.fkey11 = fkey11;
            this.fkey12 = fkey12;
            this.fkey13 = fkey13;
            this.fkey14 = fkey14;
            this.fkey15 = fkey15;
            this.fkey16 = fkey16;
            this.rkey1 = rkey1;
            this.rkey2 = rkey2;
            this.rkey3 = rkey3;
            this.rkey4 = rkey4;
            this.rkey5 = rkey5;
            this.rkey6 = rkey6;
            this.rkey7 = rkey7;
            this.rkey8 = rkey8;
            this.rkey9 = rkey9;
            this.rkey10 = rkey10;
            this.rkey11 = rkey11;
            this.rkey12 = rkey12;
            this.rkey13 = rkey13;
            this.rkey14 = rkey14;
            this.rkey15 = rkey15;
            this.rkey16 = rkey16;
        }

        public override object[] GetItemArray()
        {
            return new object[] { constid, fkeyid, rkeyid, rkeyindid, keycnt, forkeys, refkeys, fkeydbid, rkeydbid, fkey1, fkey2, fkey3, fkey4, fkey5, fkey6, fkey7, fkey8, fkey9, fkey10, fkey11, fkey12, fkey13, fkey14, fkey15, fkey16, rkey1, rkey2, rkey3, rkey4, rkey5, rkey6, rkey7, rkey8, rkey9, rkey10, rkey11, rkey12, rkey13, rkey14, rkey15, rkey16 };
        }

        public override void SetItemArray(object[] items)
        {
            constid = (int)items[0];
            fkeyid = (int)items[1];
            rkeyid = (int?)items[2];
            rkeyindid = (short?)items[3];
            keycnt = (short?)items[4];
            forkeys = (Byte[])items[5];
            refkeys = (Byte[])items[6];
            fkeydbid = (short?)items[7];
            rkeydbid = (short?)items[8];
            fkey1 = (short?)items[9];
            fkey2 = (short?)items[10];
            fkey3 = (short?)items[11];
            fkey4 = (short?)items[12];
            fkey5 = (short?)items[13];
            fkey6 = (short?)items[14];
            fkey7 = (short?)items[15];
            fkey8 = (short?)items[16];
            fkey9 = (short?)items[17];
            fkey10 = (short?)items[18];
            fkey11 = (short?)items[19];
            fkey12 = (short?)items[20];
            fkey13 = (short?)items[21];
            fkey14 = (short?)items[22];
            fkey15 = (short?)items[23];
            fkey16 = (short?)items[24];
            rkey1 = (short?)items[25];
            rkey2 = (short?)items[26];
            rkey3 = (short?)items[27];
            rkey4 = (short?)items[28];
            rkey5 = (short?)items[29];
            rkey6 = (short?)items[30];
            rkey7 = (short?)items[31];
            rkey8 = (short?)items[32];
            rkey9 = (short?)items[33];
            rkey10 = (short?)items[34];
            rkey11 = (short?)items[35];
            rkey12 = (short?)items[36];
            rkey13 = (short?)items[37];
            rkey14 = (short?)items[38];
            rkey15 = (short?)items[39];
            rkey16 = (short?)items[40];
        }
    }

    [SqlView("sys", "systypes")]
    public partial class systypes : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("xtype", 1), SqlTypeFacets("tinyint", false)]
        public byte xtype
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("tinyint", true)]
        public byte? status
        {
            get;
            set;
        }

        [SqlColumn("xusertype", 3), SqlTypeFacets("smallint", true)]
        public short? xusertype
        {
            get;
            set;
        }

        [SqlColumn("length", 4), SqlTypeFacets("smallint", false)]
        public short length
        {
            get;
            set;
        }

        [SqlColumn("xprec", 5), SqlTypeFacets("tinyint", false)]
        public byte xprec
        {
            get;
            set;
        }

        [SqlColumn("xscale", 6), SqlTypeFacets("tinyint", false)]
        public byte xscale
        {
            get;
            set;
        }

        [SqlColumn("tdefault", 7), SqlTypeFacets("int", false)]
        public int tdefault
        {
            get;
            set;
        }

        [SqlColumn("domain", 8), SqlTypeFacets("int", false)]
        public int domain
        {
            get;
            set;
        }

        [SqlColumn("uid", 9), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("reserved", 10), SqlTypeFacets("smallint", true)]
        public short? reserved
        {
            get;
            set;
        }

        [SqlColumn("collationid", 11), SqlTypeFacets("int", true)]
        public int? collationid
        {
            get;
            set;
        }

        [SqlColumn("usertype", 12), SqlTypeFacets("smallint", true)]
        public short? usertype
        {
            get;
            set;
        }

        [SqlColumn("variable", 13), SqlTypeFacets("bit", false)]
        public bool variable
        {
            get;
            set;
        }

        [SqlColumn("allownulls", 14), SqlTypeFacets("bit", true)]
        public bool? allownulls
        {
            get;
            set;
        }

        [SqlColumn("type", 15), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("printfmt", 16), SqlTypeFacets("varchar", true, 255)]
        public string printfmt
        {
            get;
            set;
        }

        [SqlColumn("prec", 17), SqlTypeFacets("smallint", true)]
        public short? prec
        {
            get;
            set;
        }

        [SqlColumn("scale", 18), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation", 19), SqlTypeFacets("sysname", true)]
        public string collation
        {
            get;
            set;
        }

        public systypes()
        {
        }

        public systypes(object[] items)
        {
            name = (string)items[0];
            xtype = (byte)items[1];
            status = (byte?)items[2];
            xusertype = (short?)items[3];
            length = (short)items[4];
            xprec = (byte)items[5];
            xscale = (byte)items[6];
            tdefault = (int)items[7];
            domain = (int)items[8];
            uid = (short?)items[9];
            reserved = (short?)items[10];
            collationid = (int?)items[11];
            usertype = (short?)items[12];
            variable = (bool)items[13];
            allownulls = (bool?)items[14];
            type = (byte)items[15];
            printfmt = (string)items[16];
            prec = (short?)items[17];
            scale = (byte?)items[18];
            collation = (string)items[19];
        }

        public systypes(string name, byte xtype, byte? status, short? xusertype, short length, byte xprec, byte xscale, int tdefault, int domain, short? uid, short? reserved, int? collationid, short? usertype, bool variable, bool? allownulls, byte type, string printfmt, short? prec, byte? scale, string collation)
        {
            this.name = name;
            this.xtype = xtype;
            this.status = status;
            this.xusertype = xusertype;
            this.length = length;
            this.xprec = xprec;
            this.xscale = xscale;
            this.tdefault = tdefault;
            this.domain = domain;
            this.uid = uid;
            this.reserved = reserved;
            this.collationid = collationid;
            this.usertype = usertype;
            this.variable = variable;
            this.allownulls = allownulls;
            this.type = type;
            this.printfmt = printfmt;
            this.prec = prec;
            this.scale = scale;
            this.collation = collation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, xtype, status, xusertype, length, xprec, xscale, tdefault, domain, uid, reserved, collationid, usertype, variable, allownulls, type, printfmt, prec, scale, collation };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            xtype = (byte)items[1];
            status = (byte?)items[2];
            xusertype = (short?)items[3];
            length = (short)items[4];
            xprec = (byte)items[5];
            xscale = (byte)items[6];
            tdefault = (int)items[7];
            domain = (int)items[8];
            uid = (short?)items[9];
            reserved = (short?)items[10];
            collationid = (int?)items[11];
            usertype = (short?)items[12];
            variable = (bool)items[13];
            allownulls = (bool?)items[14];
            type = (byte)items[15];
            printfmt = (string)items[16];
            prec = (short?)items[17];
            scale = (byte?)items[18];
            collation = (string)items[19];
        }
    }

    [SqlView("sys", "sysusers")]
    public partial class sysusers : SqlViewProxy
    {
        [SqlColumn("uid", 0), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("sid", 3), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("roles", 4), SqlTypeFacets("varbinary", true, 2048)]
        public Byte[] roles
        {
            get;
            set;
        }

        [SqlColumn("createdate", 5), SqlTypeFacets("datetime", false)]
        public DateTime createdate
        {
            get;
            set;
        }

        [SqlColumn("updatedate", 6), SqlTypeFacets("datetime", false)]
        public DateTime updatedate
        {
            get;
            set;
        }

        [SqlColumn("altuid", 7), SqlTypeFacets("smallint", true)]
        public short? altuid
        {
            get;
            set;
        }

        [SqlColumn("password", 8), SqlTypeFacets("varbinary", true, 256)]
        public Byte[] password
        {
            get;
            set;
        }

        [SqlColumn("gid", 9), SqlTypeFacets("smallint", true)]
        public short? gid
        {
            get;
            set;
        }

        [SqlColumn("environ", 10), SqlTypeFacets("varchar", true, 255)]
        public string environ
        {
            get;
            set;
        }

        [SqlColumn("hasdbaccess", 11), SqlTypeFacets("int", true)]
        public int? hasdbaccess
        {
            get;
            set;
        }

        [SqlColumn("islogin", 12), SqlTypeFacets("int", true)]
        public int? islogin
        {
            get;
            set;
        }

        [SqlColumn("isntname", 13), SqlTypeFacets("int", true)]
        public int? isntname
        {
            get;
            set;
        }

        [SqlColumn("isntgroup", 14), SqlTypeFacets("int", true)]
        public int? isntgroup
        {
            get;
            set;
        }

        [SqlColumn("isntuser", 15), SqlTypeFacets("int", true)]
        public int? isntuser
        {
            get;
            set;
        }

        [SqlColumn("issqluser", 16), SqlTypeFacets("int", true)]
        public int? issqluser
        {
            get;
            set;
        }

        [SqlColumn("isaliased", 17), SqlTypeFacets("int", true)]
        public int? isaliased
        {
            get;
            set;
        }

        [SqlColumn("issqlrole", 18), SqlTypeFacets("int", true)]
        public int? issqlrole
        {
            get;
            set;
        }

        [SqlColumn("isapprole", 19), SqlTypeFacets("int", true)]
        public int? isapprole
        {
            get;
            set;
        }

        public sysusers()
        {
        }

        public sysusers(object[] items)
        {
            uid = (short?)items[0];
            status = (short?)items[1];
            name = (string)items[2];
            sid = (Byte[])items[3];
            roles = (Byte[])items[4];
            createdate = (DateTime)items[5];
            updatedate = (DateTime)items[6];
            altuid = (short?)items[7];
            password = (Byte[])items[8];
            gid = (short?)items[9];
            environ = (string)items[10];
            hasdbaccess = (int?)items[11];
            islogin = (int?)items[12];
            isntname = (int?)items[13];
            isntgroup = (int?)items[14];
            isntuser = (int?)items[15];
            issqluser = (int?)items[16];
            isaliased = (int?)items[17];
            issqlrole = (int?)items[18];
            isapprole = (int?)items[19];
        }

        public sysusers(short? uid, short? status, string name, Byte[] sid, Byte[] roles, DateTime createdate, DateTime updatedate, short? altuid, Byte[] password, short? gid, string environ, int? hasdbaccess, int? islogin, int? isntname, int? isntgroup, int? isntuser, int? issqluser, int? isaliased, int? issqlrole, int? isapprole)
        {
            this.uid = uid;
            this.status = status;
            this.name = name;
            this.sid = sid;
            this.roles = roles;
            this.createdate = createdate;
            this.updatedate = updatedate;
            this.altuid = altuid;
            this.password = password;
            this.gid = gid;
            this.environ = environ;
            this.hasdbaccess = hasdbaccess;
            this.islogin = islogin;
            this.isntname = isntname;
            this.isntgroup = isntgroup;
            this.isntuser = isntuser;
            this.issqluser = issqluser;
            this.isaliased = isaliased;
            this.issqlrole = issqlrole;
            this.isapprole = isapprole;
        }

        public override object[] GetItemArray()
        {
            return new object[] { uid, status, name, sid, roles, createdate, updatedate, altuid, password, gid, environ, hasdbaccess, islogin, isntname, isntgroup, isntuser, issqluser, isaliased, issqlrole, isapprole };
        }

        public override void SetItemArray(object[] items)
        {
            uid = (short?)items[0];
            status = (short?)items[1];
            name = (string)items[2];
            sid = (Byte[])items[3];
            roles = (Byte[])items[4];
            createdate = (DateTime)items[5];
            updatedate = (DateTime)items[6];
            altuid = (short?)items[7];
            password = (Byte[])items[8];
            gid = (short?)items[9];
            environ = (string)items[10];
            hasdbaccess = (int?)items[11];
            islogin = (int?)items[12];
            isntname = (int?)items[13];
            isntgroup = (int?)items[14];
            isntuser = (int?)items[15];
            issqluser = (int?)items[16];
            isaliased = (int?)items[17];
            issqlrole = (int?)items[18];
            isapprole = (int?)items[19];
        }
    }

    [SqlView("sys", "sysmembers")]
    public partial class sysmembers : SqlViewProxy
    {
        [SqlColumn("memberuid", 0), SqlTypeFacets("smallint", true)]
        public short? memberuid
        {
            get;
            set;
        }

        [SqlColumn("groupuid", 1), SqlTypeFacets("smallint", true)]
        public short? groupuid
        {
            get;
            set;
        }

        public sysmembers()
        {
        }

        public sysmembers(object[] items)
        {
            memberuid = (short?)items[0];
            groupuid = (short?)items[1];
        }

        public sysmembers(short? memberuid, short? groupuid)
        {
            this.memberuid = memberuid;
            this.groupuid = groupuid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memberuid, groupuid };
        }

        public override void SetItemArray(object[] items)
        {
            memberuid = (short?)items[0];
            groupuid = (short?)items[1];
        }
    }

    [SqlView("sys", "sysfilegroups")]
    public partial class sysfilegroups : SqlViewProxy
    {
        [SqlColumn("groupid", 0), SqlTypeFacets("smallint", true)]
        public short? groupid
        {
            get;
            set;
        }

        [SqlColumn("allocpolicy", 1), SqlTypeFacets("smallint", true)]
        public short? allocpolicy
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("groupname", 3), SqlTypeFacets("sysname", false)]
        public string groupname
        {
            get;
            set;
        }

        public sysfilegroups()
        {
        }

        public sysfilegroups(object[] items)
        {
            groupid = (short?)items[0];
            allocpolicy = (short?)items[1];
            status = (int?)items[2];
            groupname = (string)items[3];
        }

        public sysfilegroups(short? groupid, short? allocpolicy, int? status, string groupname)
        {
            this.groupid = groupid;
            this.allocpolicy = allocpolicy;
            this.status = status;
            this.groupname = groupname;
        }

        public override object[] GetItemArray()
        {
            return new object[] { groupid, allocpolicy, status, groupname };
        }

        public override void SetItemArray(object[] items)
        {
            groupid = (short?)items[0];
            allocpolicy = (short?)items[1];
            status = (int?)items[2];
            groupname = (string)items[3];
        }
    }

    [SqlView("sys", "sysfiles")]
    public partial class sysfiles : SqlViewProxy
    {
        [SqlColumn("fileid", 0), SqlTypeFacets("smallint", true)]
        public short? fileid
        {
            get;
            set;
        }

        [SqlColumn("groupid", 1), SqlTypeFacets("smallint", true)]
        public short? groupid
        {
            get;
            set;
        }

        [SqlColumn("size", 2), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("maxsize", 3), SqlTypeFacets("int", false)]
        public int maxsize
        {
            get;
            set;
        }

        [SqlColumn("growth", 4), SqlTypeFacets("int", false)]
        public int growth
        {
            get;
            set;
        }

        [SqlColumn("status", 5), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("perf", 6), SqlTypeFacets("int", true)]
        public int? perf
        {
            get;
            set;
        }

        [SqlColumn("name", 7), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("filename", 8), SqlTypeFacets("nvarchar", false, 520)]
        public string filename
        {
            get;
            set;
        }

        public sysfiles()
        {
        }

        public sysfiles(object[] items)
        {
            fileid = (short?)items[0];
            groupid = (short?)items[1];
            size = (int)items[2];
            maxsize = (int)items[3];
            growth = (int)items[4];
            status = (int?)items[5];
            perf = (int?)items[6];
            name = (string)items[7];
            filename = (string)items[8];
        }

        public sysfiles(short? fileid, short? groupid, int size, int maxsize, int growth, int? status, int? perf, string name, string filename)
        {
            this.fileid = fileid;
            this.groupid = groupid;
            this.size = size;
            this.maxsize = maxsize;
            this.growth = growth;
            this.status = status;
            this.perf = perf;
            this.name = name;
            this.filename = filename;
        }

        public override object[] GetItemArray()
        {
            return new object[] { fileid, groupid, size, maxsize, growth, status, perf, name, filename };
        }

        public override void SetItemArray(object[] items)
        {
            fileid = (short?)items[0];
            groupid = (short?)items[1];
            size = (int)items[2];
            maxsize = (int)items[3];
            growth = (int)items[4];
            status = (int?)items[5];
            perf = (int?)items[6];
            name = (string)items[7];
            filename = (string)items[8];
        }
    }

    [SqlView("sys", "sysaltfiles")]
    public partial class sysaltfiles : SqlViewProxy
    {
        [SqlColumn("fileid", 0), SqlTypeFacets("smallint", true)]
        public short? fileid
        {
            get;
            set;
        }

        [SqlColumn("groupid", 1), SqlTypeFacets("smallint", true)]
        public short? groupid
        {
            get;
            set;
        }

        [SqlColumn("size", 2), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("maxsize", 3), SqlTypeFacets("int", false)]
        public int maxsize
        {
            get;
            set;
        }

        [SqlColumn("growth", 4), SqlTypeFacets("int", false)]
        public int growth
        {
            get;
            set;
        }

        [SqlColumn("status", 5), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("perf", 6), SqlTypeFacets("int", true)]
        public int? perf
        {
            get;
            set;
        }

        [SqlColumn("dbid", 7), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("name", 8), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("filename", 9), SqlTypeFacets("nvarchar", false, 520)]
        public string filename
        {
            get;
            set;
        }

        public sysaltfiles()
        {
        }

        public sysaltfiles(object[] items)
        {
            fileid = (short?)items[0];
            groupid = (short?)items[1];
            size = (int)items[2];
            maxsize = (int)items[3];
            growth = (int)items[4];
            status = (int?)items[5];
            perf = (int?)items[6];
            dbid = (short?)items[7];
            name = (string)items[8];
            filename = (string)items[9];
        }

        public sysaltfiles(short? fileid, short? groupid, int size, int maxsize, int growth, int? status, int? perf, short? dbid, string name, string filename)
        {
            this.fileid = fileid;
            this.groupid = groupid;
            this.size = size;
            this.maxsize = maxsize;
            this.growth = growth;
            this.status = status;
            this.perf = perf;
            this.dbid = dbid;
            this.name = name;
            this.filename = filename;
        }

        public override object[] GetItemArray()
        {
            return new object[] { fileid, groupid, size, maxsize, growth, status, perf, dbid, name, filename };
        }

        public override void SetItemArray(object[] items)
        {
            fileid = (short?)items[0];
            groupid = (short?)items[1];
            size = (int)items[2];
            maxsize = (int)items[3];
            growth = (int)items[4];
            status = (int?)items[5];
            perf = (int?)items[6];
            dbid = (short?)items[7];
            name = (string)items[8];
            filename = (string)items[9];
        }
    }

    [SqlView("sys", "syscacheobjects")]
    public partial class syscacheobjects : SqlViewProxy
    {
        [SqlColumn("bucketid", 0), SqlTypeFacets("int", false)]
        public int bucketid
        {
            get;
            set;
        }

        [SqlColumn("cacheobjtype", 1), SqlTypeFacets("nvarchar", false, 100)]
        public string cacheobjtype
        {
            get;
            set;
        }

        [SqlColumn("objtype", 2), SqlTypeFacets("nvarchar", false, 40)]
        public string objtype
        {
            get;
            set;
        }

        [SqlColumn("objid", 3), SqlTypeFacets("int", true)]
        public int? objid
        {
            get;
            set;
        }

        [SqlColumn("dbid", 4), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("dbidexec", 5), SqlTypeFacets("smallint", true)]
        public short? dbidexec
        {
            get;
            set;
        }

        [SqlColumn("uid", 6), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("refcounts", 7), SqlTypeFacets("int", false)]
        public int refcounts
        {
            get;
            set;
        }

        [SqlColumn("usecounts", 8), SqlTypeFacets("int", false)]
        public int usecounts
        {
            get;
            set;
        }

        [SqlColumn("pagesused", 9), SqlTypeFacets("int", true)]
        public int? pagesused
        {
            get;
            set;
        }

        [SqlColumn("setopts", 10), SqlTypeFacets("int", true)]
        public int? setopts
        {
            get;
            set;
        }

        [SqlColumn("langid", 11), SqlTypeFacets("smallint", true)]
        public short? langid
        {
            get;
            set;
        }

        [SqlColumn("dateformat", 12), SqlTypeFacets("smallint", true)]
        public short? dateformat
        {
            get;
            set;
        }

        [SqlColumn("status", 13), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("lasttime", 14), SqlTypeFacets("bigint", true)]
        public long? lasttime
        {
            get;
            set;
        }

        [SqlColumn("maxexectime", 15), SqlTypeFacets("bigint", true)]
        public long? maxexectime
        {
            get;
            set;
        }

        [SqlColumn("avgexectime", 16), SqlTypeFacets("bigint", true)]
        public long? avgexectime
        {
            get;
            set;
        }

        [SqlColumn("lastreads", 17), SqlTypeFacets("bigint", true)]
        public long? lastreads
        {
            get;
            set;
        }

        [SqlColumn("lastwrites", 18), SqlTypeFacets("bigint", true)]
        public long? lastwrites
        {
            get;
            set;
        }

        [SqlColumn("sqlbytes", 19), SqlTypeFacets("int", true)]
        public int? sqlbytes
        {
            get;
            set;
        }

        [SqlColumn("sql", 20), SqlTypeFacets("nvarchar", true, 7800)]
        public string sql
        {
            get;
            set;
        }

        public syscacheobjects()
        {
        }

        public syscacheobjects(object[] items)
        {
            bucketid = (int)items[0];
            cacheobjtype = (string)items[1];
            objtype = (string)items[2];
            objid = (int?)items[3];
            dbid = (short?)items[4];
            dbidexec = (short?)items[5];
            uid = (short?)items[6];
            refcounts = (int)items[7];
            usecounts = (int)items[8];
            pagesused = (int?)items[9];
            setopts = (int?)items[10];
            langid = (short?)items[11];
            dateformat = (short?)items[12];
            status = (int?)items[13];
            lasttime = (long?)items[14];
            maxexectime = (long?)items[15];
            avgexectime = (long?)items[16];
            lastreads = (long?)items[17];
            lastwrites = (long?)items[18];
            sqlbytes = (int?)items[19];
            sql = (string)items[20];
        }

        public syscacheobjects(int bucketid, string cacheobjtype, string objtype, int? objid, short? dbid, short? dbidexec, short? uid, int refcounts, int usecounts, int? pagesused, int? setopts, short? langid, short? dateformat, int? status, long? lasttime, long? maxexectime, long? avgexectime, long? lastreads, long? lastwrites, int? sqlbytes, string sql)
        {
            this.bucketid = bucketid;
            this.cacheobjtype = cacheobjtype;
            this.objtype = objtype;
            this.objid = objid;
            this.dbid = dbid;
            this.dbidexec = dbidexec;
            this.uid = uid;
            this.refcounts = refcounts;
            this.usecounts = usecounts;
            this.pagesused = pagesused;
            this.setopts = setopts;
            this.langid = langid;
            this.dateformat = dateformat;
            this.status = status;
            this.lasttime = lasttime;
            this.maxexectime = maxexectime;
            this.avgexectime = avgexectime;
            this.lastreads = lastreads;
            this.lastwrites = lastwrites;
            this.sqlbytes = sqlbytes;
            this.sql = sql;
        }

        public override object[] GetItemArray()
        {
            return new object[] { bucketid, cacheobjtype, objtype, objid, dbid, dbidexec, uid, refcounts, usecounts, pagesused, setopts, langid, dateformat, status, lasttime, maxexectime, avgexectime, lastreads, lastwrites, sqlbytes, sql };
        }

        public override void SetItemArray(object[] items)
        {
            bucketid = (int)items[0];
            cacheobjtype = (string)items[1];
            objtype = (string)items[2];
            objid = (int?)items[3];
            dbid = (short?)items[4];
            dbidexec = (short?)items[5];
            uid = (short?)items[6];
            refcounts = (int)items[7];
            usecounts = (int)items[8];
            pagesused = (int?)items[9];
            setopts = (int?)items[10];
            langid = (short?)items[11];
            dateformat = (short?)items[12];
            status = (int?)items[13];
            lasttime = (long?)items[14];
            maxexectime = (long?)items[15];
            avgexectime = (long?)items[16];
            lastreads = (long?)items[17];
            lastwrites = (long?)items[18];
            sqlbytes = (int?)items[19];
            sql = (string)items[20];
        }
    }

    [SqlView("sys", "syslanguages")]
    public partial class syslanguages : SqlViewProxy
    {
        [SqlColumn("langid", 0), SqlTypeFacets("smallint", false)]
        public short langid
        {
            get;
            set;
        }

        [SqlColumn("dateformat", 1), SqlTypeFacets("nchar", false, 6)]
        public string dateformat
        {
            get;
            set;
        }

        [SqlColumn("datefirst", 2), SqlTypeFacets("tinyint", false)]
        public byte datefirst
        {
            get;
            set;
        }

        [SqlColumn("upgrade", 3), SqlTypeFacets("int", true)]
        public int? upgrade
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("alias", 5), SqlTypeFacets("nvarchar", false, 256)]
        public string alias
        {
            get;
            set;
        }

        [SqlColumn("months", 6), SqlTypeFacets("nvarchar", true, 744)]
        public string months
        {
            get;
            set;
        }

        [SqlColumn("shortmonths", 7), SqlTypeFacets("nvarchar", true, 264)]
        public string shortmonths
        {
            get;
            set;
        }

        [SqlColumn("days", 8), SqlTypeFacets("nvarchar", true, 434)]
        public string days
        {
            get;
            set;
        }

        [SqlColumn("lcid", 9), SqlTypeFacets("int", false)]
        public int lcid
        {
            get;
            set;
        }

        [SqlColumn("msglangid", 10), SqlTypeFacets("smallint", false)]
        public short msglangid
        {
            get;
            set;
        }

        public syslanguages()
        {
        }

        public syslanguages(object[] items)
        {
            langid = (short)items[0];
            dateformat = (string)items[1];
            datefirst = (byte)items[2];
            upgrade = (int?)items[3];
            name = (string)items[4];
            alias = (string)items[5];
            months = (string)items[6];
            shortmonths = (string)items[7];
            days = (string)items[8];
            lcid = (int)items[9];
            msglangid = (short)items[10];
        }

        public syslanguages(short langid, string dateformat, byte datefirst, int? upgrade, string name, string alias, string months, string shortmonths, string days, int lcid, short msglangid)
        {
            this.langid = langid;
            this.dateformat = dateformat;
            this.datefirst = datefirst;
            this.upgrade = upgrade;
            this.name = name;
            this.alias = alias;
            this.months = months;
            this.shortmonths = shortmonths;
            this.days = days;
            this.lcid = lcid;
            this.msglangid = msglangid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { langid, dateformat, datefirst, upgrade, name, alias, months, shortmonths, days, lcid, msglangid };
        }

        public override void SetItemArray(object[] items)
        {
            langid = (short)items[0];
            dateformat = (string)items[1];
            datefirst = (byte)items[2];
            upgrade = (int?)items[3];
            name = (string)items[4];
            alias = (string)items[5];
            months = (string)items[6];
            shortmonths = (string)items[7];
            days = (string)items[8];
            lcid = (int)items[9];
            msglangid = (short)items[10];
        }
    }

    [SqlView("sys", "syscharsets")]
    public partial class syscharsets : SqlViewProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("smallint", false)]
        public short type
        {
            get;
            set;
        }

        [SqlColumn("id", 1), SqlTypeFacets("tinyint", false)]
        public byte id
        {
            get;
            set;
        }

        [SqlColumn("csid", 2), SqlTypeFacets("tinyint", false)]
        public byte csid
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("description", 5), SqlTypeFacets("nvarchar", false, 510)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("binarydefinition", 6), SqlTypeFacets("varbinary", true, 6000)]
        public Byte[] binarydefinition
        {
            get;
            set;
        }

        [SqlColumn("definition", 7), SqlTypeFacets("image", true, 16)]
        public Byte[] definition
        {
            get;
            set;
        }

        public syscharsets()
        {
        }

        public syscharsets(object[] items)
        {
            type = (short)items[0];
            id = (byte)items[1];
            csid = (byte)items[2];
            status = (short?)items[3];
            name = (string)items[4];
            description = (string)items[5];
            binarydefinition = (Byte[])items[6];
            definition = (Byte[])items[7];
        }

        public syscharsets(short type, byte id, byte csid, short? status, string name, string description, Byte[] binarydefinition, Byte[] definition)
        {
            this.type = type;
            this.id = id;
            this.csid = csid;
            this.status = status;
            this.name = name;
            this.description = description;
            this.binarydefinition = binarydefinition;
            this.definition = definition;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, id, csid, status, name, description, binarydefinition, definition };
        }

        public override void SetItemArray(object[] items)
        {
            type = (short)items[0];
            id = (byte)items[1];
            csid = (byte)items[2];
            status = (short?)items[3];
            name = (string)items[4];
            description = (string)items[5];
            binarydefinition = (Byte[])items[6];
            definition = (Byte[])items[7];
        }
    }

    [SqlView("sys", "sysconfigures")]
    public partial class sysconfigures : SqlViewProxy
    {
        [SqlColumn("value", 0), SqlTypeFacets("int", true)]
        public int? value
        {
            get;
            set;
        }

        [SqlColumn("config", 1), SqlTypeFacets("int", false)]
        public int config
        {
            get;
            set;
        }

        [SqlColumn("comment", 2), SqlTypeFacets("nvarchar", false, 510)]
        public string comment
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        public sysconfigures()
        {
        }

        public sysconfigures(object[] items)
        {
            value = (int?)items[0];
            config = (int)items[1];
            comment = (string)items[2];
            status = (short?)items[3];
        }

        public sysconfigures(int? value, int config, string comment, short? status)
        {
            this.value = value;
            this.config = config;
            this.comment = comment;
            this.status = status;
        }

        public override object[] GetItemArray()
        {
            return new object[] { value, config, comment, status };
        }

        public override void SetItemArray(object[] items)
        {
            value = (int?)items[0];
            config = (int)items[1];
            comment = (string)items[2];
            status = (short?)items[3];
        }
    }

    [SqlView("sys", "syscurconfigs")]
    public partial class syscurconfigs : SqlViewProxy
    {
        [SqlColumn("value", 0), SqlTypeFacets("int", false)]
        public int value
        {
            get;
            set;
        }

        [SqlColumn("config", 1), SqlTypeFacets("smallint", true)]
        public short? config
        {
            get;
            set;
        }

        [SqlColumn("comment", 2), SqlTypeFacets("nvarchar", false, 510)]
        public string comment
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        public syscurconfigs()
        {
        }

        public syscurconfigs(object[] items)
        {
            value = (int)items[0];
            config = (short?)items[1];
            comment = (string)items[2];
            status = (short?)items[3];
        }

        public syscurconfigs(int value, short? config, string comment, short? status)
        {
            this.value = value;
            this.config = config;
            this.comment = comment;
            this.status = status;
        }

        public override object[] GetItemArray()
        {
            return new object[] { value, config, comment, status };
        }

        public override void SetItemArray(object[] items)
        {
            value = (int)items[0];
            config = (short?)items[1];
            comment = (string)items[2];
            status = (short?)items[3];
        }
    }

    [SqlView("sys", "syscursorcolumns")]
    public partial class syscursorcolumns : SqlViewProxy
    {
        [SqlColumn("cursor_handle", 0), SqlTypeFacets("int", false)]
        public int cursor_handle
        {
            get;
            set;
        }

        [SqlColumn("column_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string column_name
        {
            get;
            set;
        }

        [SqlColumn("ordinal_position", 2), SqlTypeFacets("int", false)]
        public int ordinal_position
        {
            get;
            set;
        }

        [SqlColumn("column_characteristics_flags", 3), SqlTypeFacets("int", false)]
        public int column_characteristics_flags
        {
            get;
            set;
        }

        [SqlColumn("column_size", 4), SqlTypeFacets("int", false)]
        public int column_size
        {
            get;
            set;
        }

        [SqlColumn("data_type_sql", 5), SqlTypeFacets("int", false)]
        public int data_type_sql
        {
            get;
            set;
        }

        [SqlColumn("column_precision", 6), SqlTypeFacets("tinyint", false)]
        public byte column_precision
        {
            get;
            set;
        }

        [SqlColumn("column_scale", 7), SqlTypeFacets("tinyint", false)]
        public byte column_scale
        {
            get;
            set;
        }

        [SqlColumn("order_position", 8), SqlTypeFacets("int", false)]
        public int order_position
        {
            get;
            set;
        }

        [SqlColumn("order_direction", 9), SqlTypeFacets("nvarchar", true, 2)]
        public string order_direction
        {
            get;
            set;
        }

        [SqlColumn("hidden_column", 10), SqlTypeFacets("smallint", false)]
        public short hidden_column
        {
            get;
            set;
        }

        [SqlColumn("columnid", 11), SqlTypeFacets("int", false)]
        public int columnid
        {
            get;
            set;
        }

        [SqlColumn("objectid", 12), SqlTypeFacets("int", false)]
        public int objectid
        {
            get;
            set;
        }

        [SqlColumn("dbid", 13), SqlTypeFacets("int", false)]
        public int dbid
        {
            get;
            set;
        }

        [SqlColumn("dbname", 14), SqlTypeFacets("nvarchar", true, 256)]
        public string dbname
        {
            get;
            set;
        }

        public syscursorcolumns()
        {
        }

        public syscursorcolumns(object[] items)
        {
            cursor_handle = (int)items[0];
            column_name = (string)items[1];
            ordinal_position = (int)items[2];
            column_characteristics_flags = (int)items[3];
            column_size = (int)items[4];
            data_type_sql = (int)items[5];
            column_precision = (byte)items[6];
            column_scale = (byte)items[7];
            order_position = (int)items[8];
            order_direction = (string)items[9];
            hidden_column = (short)items[10];
            columnid = (int)items[11];
            objectid = (int)items[12];
            dbid = (int)items[13];
            dbname = (string)items[14];
        }

        public syscursorcolumns(int cursor_handle, string column_name, int ordinal_position, int column_characteristics_flags, int column_size, int data_type_sql, byte column_precision, byte column_scale, int order_position, string order_direction, short hidden_column, int columnid, int objectid, int dbid, string dbname)
        {
            this.cursor_handle = cursor_handle;
            this.column_name = column_name;
            this.ordinal_position = ordinal_position;
            this.column_characteristics_flags = column_characteristics_flags;
            this.column_size = column_size;
            this.data_type_sql = data_type_sql;
            this.column_precision = column_precision;
            this.column_scale = column_scale;
            this.order_position = order_position;
            this.order_direction = order_direction;
            this.hidden_column = hidden_column;
            this.columnid = columnid;
            this.objectid = objectid;
            this.dbid = dbid;
            this.dbname = dbname;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cursor_handle, column_name, ordinal_position, column_characteristics_flags, column_size, data_type_sql, column_precision, column_scale, order_position, order_direction, hidden_column, columnid, objectid, dbid, dbname };
        }

        public override void SetItemArray(object[] items)
        {
            cursor_handle = (int)items[0];
            column_name = (string)items[1];
            ordinal_position = (int)items[2];
            column_characteristics_flags = (int)items[3];
            column_size = (int)items[4];
            data_type_sql = (int)items[5];
            column_precision = (byte)items[6];
            column_scale = (byte)items[7];
            order_position = (int)items[8];
            order_direction = (string)items[9];
            hidden_column = (short)items[10];
            columnid = (int)items[11];
            objectid = (int)items[12];
            dbid = (int)items[13];
            dbname = (string)items[14];
        }
    }

    [SqlView("sys", "syscursorrefs")]
    public partial class syscursorrefs : SqlViewProxy
    {
        [SqlColumn("reference_name", 0), SqlTypeFacets("nvarchar", true, 256)]
        public string reference_name
        {
            get;
            set;
        }

        [SqlColumn("cursor_scope", 1), SqlTypeFacets("tinyint", false)]
        public byte cursor_scope
        {
            get;
            set;
        }

        [SqlColumn("cursor_handl", 2), SqlTypeFacets("int", false)]
        public int cursor_handl
        {
            get;
            set;
        }

        public syscursorrefs()
        {
        }

        public syscursorrefs(object[] items)
        {
            reference_name = (string)items[0];
            cursor_scope = (byte)items[1];
            cursor_handl = (int)items[2];
        }

        public syscursorrefs(string reference_name, byte cursor_scope, int cursor_handl)
        {
            this.reference_name = reference_name;
            this.cursor_scope = cursor_scope;
            this.cursor_handl = cursor_handl;
        }

        public override object[] GetItemArray()
        {
            return new object[] { reference_name, cursor_scope, cursor_handl };
        }

        public override void SetItemArray(object[] items)
        {
            reference_name = (string)items[0];
            cursor_scope = (byte)items[1];
            cursor_handl = (int)items[2];
        }
    }

    [SqlView("sys", "syscursors")]
    public partial class syscursors : SqlViewProxy
    {
        [SqlColumn("cursor_handle", 0), SqlTypeFacets("int", false)]
        public int cursor_handle
        {
            get;
            set;
        }

        [SqlColumn("cursor_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string cursor_name
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("model", 3), SqlTypeFacets("tinyint", false)]
        public byte model
        {
            get;
            set;
        }

        [SqlColumn("concurrency", 4), SqlTypeFacets("tinyint", false)]
        public byte concurrency
        {
            get;
            set;
        }

        [SqlColumn("scrollable", 5), SqlTypeFacets("tinyint", false)]
        public byte scrollable
        {
            get;
            set;
        }

        [SqlColumn("open_status", 6), SqlTypeFacets("tinyint", false)]
        public byte open_status
        {
            get;
            set;
        }

        [SqlColumn("cursor_rows", 7), SqlTypeFacets("numeric", true, 10, 0)]
        public decimal? cursor_rows
        {
            get;
            set;
        }

        [SqlColumn("fetch_status", 8), SqlTypeFacets("smallint", false)]
        public short fetch_status
        {
            get;
            set;
        }

        [SqlColumn("column_count", 9), SqlTypeFacets("smallint", false)]
        public short column_count
        {
            get;
            set;
        }

        [SqlColumn("row_count", 10), SqlTypeFacets("numeric", true, 10, 0)]
        public decimal? row_count
        {
            get;
            set;
        }

        [SqlColumn("last_operation", 11), SqlTypeFacets("tinyint", false)]
        public byte last_operation
        {
            get;
            set;
        }

        public syscursors()
        {
        }

        public syscursors(object[] items)
        {
            cursor_handle = (int)items[0];
            cursor_name = (string)items[1];
            status = (int)items[2];
            model = (byte)items[3];
            concurrency = (byte)items[4];
            scrollable = (byte)items[5];
            open_status = (byte)items[6];
            cursor_rows = (decimal?)items[7];
            fetch_status = (short)items[8];
            column_count = (short)items[9];
            row_count = (decimal?)items[10];
            last_operation = (byte)items[11];
        }

        public syscursors(int cursor_handle, string cursor_name, int status, byte model, byte concurrency, byte scrollable, byte open_status, decimal? cursor_rows, short fetch_status, short column_count, decimal? row_count, byte last_operation)
        {
            this.cursor_handle = cursor_handle;
            this.cursor_name = cursor_name;
            this.status = status;
            this.model = model;
            this.concurrency = concurrency;
            this.scrollable = scrollable;
            this.open_status = open_status;
            this.cursor_rows = cursor_rows;
            this.fetch_status = fetch_status;
            this.column_count = column_count;
            this.row_count = row_count;
            this.last_operation = last_operation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cursor_handle, cursor_name, status, model, concurrency, scrollable, open_status, cursor_rows, fetch_status, column_count, row_count, last_operation };
        }

        public override void SetItemArray(object[] items)
        {
            cursor_handle = (int)items[0];
            cursor_name = (string)items[1];
            status = (int)items[2];
            model = (byte)items[3];
            concurrency = (byte)items[4];
            scrollable = (byte)items[5];
            open_status = (byte)items[6];
            cursor_rows = (decimal?)items[7];
            fetch_status = (short)items[8];
            column_count = (short)items[9];
            row_count = (decimal?)items[10];
            last_operation = (byte)items[11];
        }
    }

    [SqlView("sys", "syscursortables")]
    public partial class syscursortables : SqlViewProxy
    {
        [SqlColumn("cursor_handle", 0), SqlTypeFacets("int", false)]
        public int cursor_handle
        {
            get;
            set;
        }

        [SqlColumn("table_owner", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string table_owner
        {
            get;
            set;
        }

        [SqlColumn("table_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string table_name
        {
            get;
            set;
        }

        [SqlColumn("optimizer_hint", 3), SqlTypeFacets("smallint", false)]
        public short optimizer_hint
        {
            get;
            set;
        }

        [SqlColumn("lock_type", 4), SqlTypeFacets("smallint", false)]
        public short lock_type
        {
            get;
            set;
        }

        [SqlColumn("server_name", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string server_name
        {
            get;
            set;
        }

        [SqlColumn("objectid", 6), SqlTypeFacets("int", false)]
        public int objectid
        {
            get;
            set;
        }

        [SqlColumn("dbid", 7), SqlTypeFacets("int", false)]
        public int dbid
        {
            get;
            set;
        }

        [SqlColumn("dbname", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string dbname
        {
            get;
            set;
        }

        public syscursortables()
        {
        }

        public syscursortables(object[] items)
        {
            cursor_handle = (int)items[0];
            table_owner = (string)items[1];
            table_name = (string)items[2];
            optimizer_hint = (short)items[3];
            lock_type = (short)items[4];
            server_name = (string)items[5];
            objectid = (int)items[6];
            dbid = (int)items[7];
            dbname = (string)items[8];
        }

        public syscursortables(int cursor_handle, string table_owner, string table_name, short optimizer_hint, short lock_type, string server_name, int objectid, int dbid, string dbname)
        {
            this.cursor_handle = cursor_handle;
            this.table_owner = table_owner;
            this.table_name = table_name;
            this.optimizer_hint = optimizer_hint;
            this.lock_type = lock_type;
            this.server_name = server_name;
            this.objectid = objectid;
            this.dbid = dbid;
            this.dbname = dbname;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cursor_handle, table_owner, table_name, optimizer_hint, lock_type, server_name, objectid, dbid, dbname };
        }

        public override void SetItemArray(object[] items)
        {
            cursor_handle = (int)items[0];
            table_owner = (string)items[1];
            table_name = (string)items[2];
            optimizer_hint = (short)items[3];
            lock_type = (short)items[4];
            server_name = (string)items[5];
            objectid = (int)items[6];
            dbid = (int)items[7];
            dbname = (string)items[8];
        }
    }

    [SqlView("sys", "sysdatabases")]
    public partial class sysdatabases : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("dbid", 1), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("mode", 3), SqlTypeFacets("smallint", true)]
        public short? mode
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("status2", 5), SqlTypeFacets("int", true)]
        public int? status2
        {
            get;
            set;
        }

        [SqlColumn("crdate", 6), SqlTypeFacets("datetime", false)]
        public DateTime crdate
        {
            get;
            set;
        }

        [SqlColumn("reserved", 7), SqlTypeFacets("datetime", true)]
        public DateTime? reserved
        {
            get;
            set;
        }

        [SqlColumn("category", 8), SqlTypeFacets("int", true)]
        public int? category
        {
            get;
            set;
        }

        [SqlColumn("cmptlevel", 9), SqlTypeFacets("tinyint", false)]
        public byte cmptlevel
        {
            get;
            set;
        }

        [SqlColumn("filename", 10), SqlTypeFacets("nvarchar", true, 520)]
        public string filename
        {
            get;
            set;
        }

        [SqlColumn("version", 11), SqlTypeFacets("smallint", true)]
        public short? version
        {
            get;
            set;
        }

        public sysdatabases()
        {
        }

        public sysdatabases(object[] items)
        {
            name = (string)items[0];
            dbid = (short?)items[1];
            sid = (Byte[])items[2];
            mode = (short?)items[3];
            status = (int?)items[4];
            status2 = (int?)items[5];
            crdate = (DateTime)items[6];
            reserved = (DateTime?)items[7];
            category = (int?)items[8];
            cmptlevel = (byte)items[9];
            filename = (string)items[10];
            version = (short?)items[11];
        }

        public sysdatabases(string name, short? dbid, Byte[] sid, short? mode, int? status, int? status2, DateTime crdate, DateTime? reserved, int? category, byte cmptlevel, string filename, short? version)
        {
            this.name = name;
            this.dbid = dbid;
            this.sid = sid;
            this.mode = mode;
            this.status = status;
            this.status2 = status2;
            this.crdate = crdate;
            this.reserved = reserved;
            this.category = category;
            this.cmptlevel = cmptlevel;
            this.filename = filename;
            this.version = version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, dbid, sid, mode, status, status2, crdate, reserved, category, cmptlevel, filename, version };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            dbid = (short?)items[1];
            sid = (Byte[])items[2];
            mode = (short?)items[3];
            status = (int?)items[4];
            status2 = (int?)items[5];
            crdate = (DateTime)items[6];
            reserved = (DateTime?)items[7];
            category = (int?)items[8];
            cmptlevel = (byte)items[9];
            filename = (string)items[10];
            version = (short?)items[11];
        }
    }

    [SqlView("sys", "sysdevices")]
    public partial class sysdevices : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("size", 1), SqlTypeFacets("int", true)]
        public int? size
        {
            get;
            set;
        }

        [SqlColumn("low", 2), SqlTypeFacets("int", true)]
        public int? low
        {
            get;
            set;
        }

        [SqlColumn("high", 3), SqlTypeFacets("int", true)]
        public int? high
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("cntrltype", 5), SqlTypeFacets("smallint", true)]
        public short? cntrltype
        {
            get;
            set;
        }

        [SqlColumn("phyname", 6), SqlTypeFacets("nvarchar", true, 520)]
        public string phyname
        {
            get;
            set;
        }

        public sysdevices()
        {
        }

        public sysdevices(object[] items)
        {
            name = (string)items[0];
            size = (int?)items[1];
            low = (int?)items[2];
            high = (int?)items[3];
            status = (short?)items[4];
            cntrltype = (short?)items[5];
            phyname = (string)items[6];
        }

        public sysdevices(string name, int? size, int? low, int? high, short? status, short? cntrltype, string phyname)
        {
            this.name = name;
            this.size = size;
            this.low = low;
            this.high = high;
            this.status = status;
            this.cntrltype = cntrltype;
            this.phyname = phyname;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, size, low, high, status, cntrltype, phyname };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            size = (int?)items[1];
            low = (int?)items[2];
            high = (int?)items[3];
            status = (short?)items[4];
            cntrltype = (short?)items[5];
            phyname = (string)items[6];
        }
    }

    [SqlView("sys", "syslockinfo")]
    public partial class syslockinfo : SqlViewProxy
    {
        [SqlColumn("rsc_text", 0), SqlTypeFacets("nchar", false, 64)]
        public string rsc_text
        {
            get;
            set;
        }

        [SqlColumn("rsc_bin", 1), SqlTypeFacets("binary", false, 16)]
        public Byte[] rsc_bin
        {
            get;
            set;
        }

        [SqlColumn("rsc_valblk", 2), SqlTypeFacets("binary", false, 16)]
        public Byte[] rsc_valblk
        {
            get;
            set;
        }

        [SqlColumn("rsc_dbid", 3), SqlTypeFacets("smallint", false)]
        public short rsc_dbid
        {
            get;
            set;
        }

        [SqlColumn("rsc_indid", 4), SqlTypeFacets("smallint", false)]
        public short rsc_indid
        {
            get;
            set;
        }

        [SqlColumn("rsc_objid", 5), SqlTypeFacets("int", false)]
        public int rsc_objid
        {
            get;
            set;
        }

        [SqlColumn("rsc_type", 6), SqlTypeFacets("tinyint", false)]
        public byte rsc_type
        {
            get;
            set;
        }

        [SqlColumn("rsc_flag", 7), SqlTypeFacets("tinyint", false)]
        public byte rsc_flag
        {
            get;
            set;
        }

        [SqlColumn("req_mode", 8), SqlTypeFacets("tinyint", false)]
        public byte req_mode
        {
            get;
            set;
        }

        [SqlColumn("req_status", 9), SqlTypeFacets("tinyint", false)]
        public byte req_status
        {
            get;
            set;
        }

        [SqlColumn("req_refcnt", 10), SqlTypeFacets("smallint", false)]
        public short req_refcnt
        {
            get;
            set;
        }

        [SqlColumn("req_cryrefcnt", 11), SqlTypeFacets("smallint", false)]
        public short req_cryrefcnt
        {
            get;
            set;
        }

        [SqlColumn("req_lifetime", 12), SqlTypeFacets("int", false)]
        public int req_lifetime
        {
            get;
            set;
        }

        [SqlColumn("req_spid", 13), SqlTypeFacets("int", false)]
        public int req_spid
        {
            get;
            set;
        }

        [SqlColumn("req_ecid", 14), SqlTypeFacets("int", false)]
        public int req_ecid
        {
            get;
            set;
        }

        [SqlColumn("req_ownertype", 15), SqlTypeFacets("smallint", false)]
        public short req_ownertype
        {
            get;
            set;
        }

        [SqlColumn("req_transactionID", 16), SqlTypeFacets("bigint", true)]
        public long? req_transactionID
        {
            get;
            set;
        }

        [SqlColumn("req_transactionUOW", 17), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? req_transactionUOW
        {
            get;
            set;
        }

        public syslockinfo()
        {
        }

        public syslockinfo(object[] items)
        {
            rsc_text = (string)items[0];
            rsc_bin = (Byte[])items[1];
            rsc_valblk = (Byte[])items[2];
            rsc_dbid = (short)items[3];
            rsc_indid = (short)items[4];
            rsc_objid = (int)items[5];
            rsc_type = (byte)items[6];
            rsc_flag = (byte)items[7];
            req_mode = (byte)items[8];
            req_status = (byte)items[9];
            req_refcnt = (short)items[10];
            req_cryrefcnt = (short)items[11];
            req_lifetime = (int)items[12];
            req_spid = (int)items[13];
            req_ecid = (int)items[14];
            req_ownertype = (short)items[15];
            req_transactionID = (long?)items[16];
            req_transactionUOW = (Guid?)items[17];
        }

        public syslockinfo(string rsc_text, Byte[] rsc_bin, Byte[] rsc_valblk, short rsc_dbid, short rsc_indid, int rsc_objid, byte rsc_type, byte rsc_flag, byte req_mode, byte req_status, short req_refcnt, short req_cryrefcnt, int req_lifetime, int req_spid, int req_ecid, short req_ownertype, long? req_transactionID, Guid? req_transactionUOW)
        {
            this.rsc_text = rsc_text;
            this.rsc_bin = rsc_bin;
            this.rsc_valblk = rsc_valblk;
            this.rsc_dbid = rsc_dbid;
            this.rsc_indid = rsc_indid;
            this.rsc_objid = rsc_objid;
            this.rsc_type = rsc_type;
            this.rsc_flag = rsc_flag;
            this.req_mode = req_mode;
            this.req_status = req_status;
            this.req_refcnt = req_refcnt;
            this.req_cryrefcnt = req_cryrefcnt;
            this.req_lifetime = req_lifetime;
            this.req_spid = req_spid;
            this.req_ecid = req_ecid;
            this.req_ownertype = req_ownertype;
            this.req_transactionID = req_transactionID;
            this.req_transactionUOW = req_transactionUOW;
        }

        public override object[] GetItemArray()
        {
            return new object[] { rsc_text, rsc_bin, rsc_valblk, rsc_dbid, rsc_indid, rsc_objid, rsc_type, rsc_flag, req_mode, req_status, req_refcnt, req_cryrefcnt, req_lifetime, req_spid, req_ecid, req_ownertype, req_transactionID, req_transactionUOW };
        }

        public override void SetItemArray(object[] items)
        {
            rsc_text = (string)items[0];
            rsc_bin = (Byte[])items[1];
            rsc_valblk = (Byte[])items[2];
            rsc_dbid = (short)items[3];
            rsc_indid = (short)items[4];
            rsc_objid = (int)items[5];
            rsc_type = (byte)items[6];
            rsc_flag = (byte)items[7];
            req_mode = (byte)items[8];
            req_status = (byte)items[9];
            req_refcnt = (short)items[10];
            req_cryrefcnt = (short)items[11];
            req_lifetime = (int)items[12];
            req_spid = (int)items[13];
            req_ecid = (int)items[14];
            req_ownertype = (short)items[15];
            req_transactionID = (long?)items[16];
            req_transactionUOW = (Guid?)items[17];
        }
    }

    [SqlView("sys", "syslogins")]
    public partial class syslogins : SqlViewProxy
    {
        [SqlColumn("sid", 0), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("createdate", 2), SqlTypeFacets("datetime", false)]
        public DateTime createdate
        {
            get;
            set;
        }

        [SqlColumn("updatedate", 3), SqlTypeFacets("datetime", false)]
        public DateTime updatedate
        {
            get;
            set;
        }

        [SqlColumn("accdate", 4), SqlTypeFacets("datetime", false)]
        public DateTime accdate
        {
            get;
            set;
        }

        [SqlColumn("totcpu", 5), SqlTypeFacets("int", true)]
        public int? totcpu
        {
            get;
            set;
        }

        [SqlColumn("totio", 6), SqlTypeFacets("int", true)]
        public int? totio
        {
            get;
            set;
        }

        [SqlColumn("spacelimit", 7), SqlTypeFacets("int", true)]
        public int? spacelimit
        {
            get;
            set;
        }

        [SqlColumn("timelimit", 8), SqlTypeFacets("int", true)]
        public int? timelimit
        {
            get;
            set;
        }

        [SqlColumn("resultlimit", 9), SqlTypeFacets("int", true)]
        public int? resultlimit
        {
            get;
            set;
        }

        [SqlColumn("name", 10), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("dbname", 11), SqlTypeFacets("sysname", true)]
        public string dbname
        {
            get;
            set;
        }

        [SqlColumn("password", 12), SqlTypeFacets("sysname", true)]
        public string password
        {
            get;
            set;
        }

        [SqlColumn("language", 13), SqlTypeFacets("sysname", true)]
        public string language
        {
            get;
            set;
        }

        [SqlColumn("denylogin", 14), SqlTypeFacets("int", true)]
        public int? denylogin
        {
            get;
            set;
        }

        [SqlColumn("hasaccess", 15), SqlTypeFacets("int", true)]
        public int? hasaccess
        {
            get;
            set;
        }

        [SqlColumn("isntname", 16), SqlTypeFacets("int", true)]
        public int? isntname
        {
            get;
            set;
        }

        [SqlColumn("isntgroup", 17), SqlTypeFacets("int", true)]
        public int? isntgroup
        {
            get;
            set;
        }

        [SqlColumn("isntuser", 18), SqlTypeFacets("int", true)]
        public int? isntuser
        {
            get;
            set;
        }

        [SqlColumn("sysadmin", 19), SqlTypeFacets("int", true)]
        public int? sysadmin
        {
            get;
            set;
        }

        [SqlColumn("securityadmin", 20), SqlTypeFacets("int", true)]
        public int? securityadmin
        {
            get;
            set;
        }

        [SqlColumn("serveradmin", 21), SqlTypeFacets("int", true)]
        public int? serveradmin
        {
            get;
            set;
        }

        [SqlColumn("setupadmin", 22), SqlTypeFacets("int", true)]
        public int? setupadmin
        {
            get;
            set;
        }

        [SqlColumn("processadmin", 23), SqlTypeFacets("int", true)]
        public int? processadmin
        {
            get;
            set;
        }

        [SqlColumn("diskadmin", 24), SqlTypeFacets("int", true)]
        public int? diskadmin
        {
            get;
            set;
        }

        [SqlColumn("dbcreator", 25), SqlTypeFacets("int", true)]
        public int? dbcreator
        {
            get;
            set;
        }

        [SqlColumn("bulkadmin", 26), SqlTypeFacets("int", true)]
        public int? bulkadmin
        {
            get;
            set;
        }

        [SqlColumn("loginname", 27), SqlTypeFacets("sysname", false)]
        public string loginname
        {
            get;
            set;
        }

        public syslogins()
        {
        }

        public syslogins(object[] items)
        {
            sid = (Byte[])items[0];
            status = (short?)items[1];
            createdate = (DateTime)items[2];
            updatedate = (DateTime)items[3];
            accdate = (DateTime)items[4];
            totcpu = (int?)items[5];
            totio = (int?)items[6];
            spacelimit = (int?)items[7];
            timelimit = (int?)items[8];
            resultlimit = (int?)items[9];
            name = (string)items[10];
            dbname = (string)items[11];
            password = (string)items[12];
            language = (string)items[13];
            denylogin = (int?)items[14];
            hasaccess = (int?)items[15];
            isntname = (int?)items[16];
            isntgroup = (int?)items[17];
            isntuser = (int?)items[18];
            sysadmin = (int?)items[19];
            securityadmin = (int?)items[20];
            serveradmin = (int?)items[21];
            setupadmin = (int?)items[22];
            processadmin = (int?)items[23];
            diskadmin = (int?)items[24];
            dbcreator = (int?)items[25];
            bulkadmin = (int?)items[26];
            loginname = (string)items[27];
        }

        public syslogins(Byte[] sid, short? status, DateTime createdate, DateTime updatedate, DateTime accdate, int? totcpu, int? totio, int? spacelimit, int? timelimit, int? resultlimit, string name, string dbname, string password, string language, int? denylogin, int? hasaccess, int? isntname, int? isntgroup, int? isntuser, int? sysadmin, int? securityadmin, int? serveradmin, int? setupadmin, int? processadmin, int? diskadmin, int? dbcreator, int? bulkadmin, string loginname)
        {
            this.sid = sid;
            this.status = status;
            this.createdate = createdate;
            this.updatedate = updatedate;
            this.accdate = accdate;
            this.totcpu = totcpu;
            this.totio = totio;
            this.spacelimit = spacelimit;
            this.timelimit = timelimit;
            this.resultlimit = resultlimit;
            this.name = name;
            this.dbname = dbname;
            this.password = password;
            this.language = language;
            this.denylogin = denylogin;
            this.hasaccess = hasaccess;
            this.isntname = isntname;
            this.isntgroup = isntgroup;
            this.isntuser = isntuser;
            this.sysadmin = sysadmin;
            this.securityadmin = securityadmin;
            this.serveradmin = serveradmin;
            this.setupadmin = setupadmin;
            this.processadmin = processadmin;
            this.diskadmin = diskadmin;
            this.dbcreator = dbcreator;
            this.bulkadmin = bulkadmin;
            this.loginname = loginname;
        }

        public override object[] GetItemArray()
        {
            return new object[] { sid, status, createdate, updatedate, accdate, totcpu, totio, spacelimit, timelimit, resultlimit, name, dbname, password, language, denylogin, hasaccess, isntname, isntgroup, isntuser, sysadmin, securityadmin, serveradmin, setupadmin, processadmin, diskadmin, dbcreator, bulkadmin, loginname };
        }

        public override void SetItemArray(object[] items)
        {
            sid = (Byte[])items[0];
            status = (short?)items[1];
            createdate = (DateTime)items[2];
            updatedate = (DateTime)items[3];
            accdate = (DateTime)items[4];
            totcpu = (int?)items[5];
            totio = (int?)items[6];
            spacelimit = (int?)items[7];
            timelimit = (int?)items[8];
            resultlimit = (int?)items[9];
            name = (string)items[10];
            dbname = (string)items[11];
            password = (string)items[12];
            language = (string)items[13];
            denylogin = (int?)items[14];
            hasaccess = (int?)items[15];
            isntname = (int?)items[16];
            isntgroup = (int?)items[17];
            isntuser = (int?)items[18];
            sysadmin = (int?)items[19];
            securityadmin = (int?)items[20];
            serveradmin = (int?)items[21];
            setupadmin = (int?)items[22];
            processadmin = (int?)items[23];
            diskadmin = (int?)items[24];
            dbcreator = (int?)items[25];
            bulkadmin = (int?)items[26];
            loginname = (string)items[27];
        }
    }

    [SqlView("sys", "sysmessages")]
    public partial class sysmessages : SqlViewProxy
    {
        [SqlColumn("error", 0), SqlTypeFacets("int", false)]
        public int error
        {
            get;
            set;
        }

        [SqlColumn("severity", 1), SqlTypeFacets("tinyint", true)]
        public byte? severity
        {
            get;
            set;
        }

        [SqlColumn("dlevel", 2), SqlTypeFacets("smallint", true)]
        public short? dlevel
        {
            get;
            set;
        }

        [SqlColumn("description", 3), SqlTypeFacets("nvarchar", true, 510)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("msglangid", 4), SqlTypeFacets("smallint", false)]
        public short msglangid
        {
            get;
            set;
        }

        public sysmessages()
        {
        }

        public sysmessages(object[] items)
        {
            error = (int)items[0];
            severity = (byte?)items[1];
            dlevel = (short?)items[2];
            description = (string)items[3];
            msglangid = (short)items[4];
        }

        public sysmessages(int error, byte? severity, short? dlevel, string description, short msglangid)
        {
            this.error = error;
            this.severity = severity;
            this.dlevel = dlevel;
            this.description = description;
            this.msglangid = msglangid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { error, severity, dlevel, description, msglangid };
        }

        public override void SetItemArray(object[] items)
        {
            error = (int)items[0];
            severity = (byte?)items[1];
            dlevel = (short?)items[2];
            description = (string)items[3];
            msglangid = (short)items[4];
        }
    }

    [SqlView("sys", "sysoledbusers")]
    public partial class sysoledbusers : SqlViewProxy
    {
        [SqlColumn("rmtsrvid", 0), SqlTypeFacets("smallint", true)]
        public short? rmtsrvid
        {
            get;
            set;
        }

        [SqlColumn("rmtloginame", 1), SqlTypeFacets("sysname", true)]
        public string rmtloginame
        {
            get;
            set;
        }

        [SqlColumn("rmtpassword", 2), SqlTypeFacets("sysname", true)]
        public string rmtpassword
        {
            get;
            set;
        }

        [SqlColumn("loginsid", 3), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] loginsid
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("changedate", 5), SqlTypeFacets("datetime", false)]
        public DateTime changedate
        {
            get;
            set;
        }

        public sysoledbusers()
        {
        }

        public sysoledbusers(object[] items)
        {
            rmtsrvid = (short?)items[0];
            rmtloginame = (string)items[1];
            rmtpassword = (string)items[2];
            loginsid = (Byte[])items[3];
            status = (short?)items[4];
            changedate = (DateTime)items[5];
        }

        public sysoledbusers(short? rmtsrvid, string rmtloginame, string rmtpassword, Byte[] loginsid, short? status, DateTime changedate)
        {
            this.rmtsrvid = rmtsrvid;
            this.rmtloginame = rmtloginame;
            this.rmtpassword = rmtpassword;
            this.loginsid = loginsid;
            this.status = status;
            this.changedate = changedate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { rmtsrvid, rmtloginame, rmtpassword, loginsid, status, changedate };
        }

        public override void SetItemArray(object[] items)
        {
            rmtsrvid = (short?)items[0];
            rmtloginame = (string)items[1];
            rmtpassword = (string)items[2];
            loginsid = (Byte[])items[3];
            status = (short?)items[4];
            changedate = (DateTime)items[5];
        }
    }

    [SqlView("sys", "sysopentapes")]
    public partial class sysopentapes : SqlViewProxy
    {
        [SqlColumn("openTape", 0), SqlTypeFacets("nvarchar", false, 128)]
        public string openTape
        {
            get;
            set;
        }

        public sysopentapes()
        {
        }

        public sysopentapes(object[] items)
        {
            openTape = (string)items[0];
        }

        public sysopentapes(string openTape)
        {
            this.openTape = openTape;
        }

        public override object[] GetItemArray()
        {
            return new object[] { openTape };
        }

        public override void SetItemArray(object[] items)
        {
            openTape = (string)items[0];
        }
    }

    [SqlView("sys", "sysperfinfo")]
    public partial class sysperfinfo : SqlViewProxy
    {
        [SqlColumn("object_name", 0), SqlTypeFacets("nchar", false, 256)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("counter_name", 1), SqlTypeFacets("nchar", false, 256)]
        public string counter_name
        {
            get;
            set;
        }

        [SqlColumn("instance_name", 2), SqlTypeFacets("nchar", true, 256)]
        public string instance_name
        {
            get;
            set;
        }

        [SqlColumn("cntr_value", 3), SqlTypeFacets("bigint", false)]
        public long cntr_value
        {
            get;
            set;
        }

        [SqlColumn("cntr_type", 4), SqlTypeFacets("int", false)]
        public int cntr_type
        {
            get;
            set;
        }

        public sysperfinfo()
        {
        }

        public sysperfinfo(object[] items)
        {
            object_name = (string)items[0];
            counter_name = (string)items[1];
            instance_name = (string)items[2];
            cntr_value = (long)items[3];
            cntr_type = (int)items[4];
        }

        public sysperfinfo(string object_name, string counter_name, string instance_name, long cntr_value, int cntr_type)
        {
            this.object_name = object_name;
            this.counter_name = counter_name;
            this.instance_name = instance_name;
            this.cntr_value = cntr_value;
            this.cntr_type = cntr_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_name, counter_name, instance_name, cntr_value, cntr_type };
        }

        public override void SetItemArray(object[] items)
        {
            object_name = (string)items[0];
            counter_name = (string)items[1];
            instance_name = (string)items[2];
            cntr_value = (long)items[3];
            cntr_type = (int)items[4];
        }
    }

    [SqlView("sys", "sysprocesses")]
    public partial class sysprocesses : SqlViewProxy
    {
        [SqlColumn("spid", 0), SqlTypeFacets("smallint", false)]
        public short spid
        {
            get;
            set;
        }

        [SqlColumn("kpid", 1), SqlTypeFacets("smallint", false)]
        public short kpid
        {
            get;
            set;
        }

        [SqlColumn("blocked", 2), SqlTypeFacets("smallint", false)]
        public short blocked
        {
            get;
            set;
        }

        [SqlColumn("waittype", 3), SqlTypeFacets("binary", false, 2)]
        public Byte[] waittype
        {
            get;
            set;
        }

        [SqlColumn("waittime", 4), SqlTypeFacets("bigint", false)]
        public long waittime
        {
            get;
            set;
        }

        [SqlColumn("lastwaittype", 5), SqlTypeFacets("nchar", false, 64)]
        public string lastwaittype
        {
            get;
            set;
        }

        [SqlColumn("waitresource", 6), SqlTypeFacets("nchar", false, 512)]
        public string waitresource
        {
            get;
            set;
        }

        [SqlColumn("dbid", 7), SqlTypeFacets("smallint", false)]
        public short dbid
        {
            get;
            set;
        }

        [SqlColumn("uid", 8), SqlTypeFacets("smallint", true)]
        public short? uid
        {
            get;
            set;
        }

        [SqlColumn("cpu", 9), SqlTypeFacets("int", false)]
        public int cpu
        {
            get;
            set;
        }

        [SqlColumn("physical_io", 10), SqlTypeFacets("bigint", false)]
        public long physical_io
        {
            get;
            set;
        }

        [SqlColumn("memusage", 11), SqlTypeFacets("int", false)]
        public int memusage
        {
            get;
            set;
        }

        [SqlColumn("login_time", 12), SqlTypeFacets("datetime", false)]
        public DateTime login_time
        {
            get;
            set;
        }

        [SqlColumn("last_batch", 13), SqlTypeFacets("datetime", false)]
        public DateTime last_batch
        {
            get;
            set;
        }

        [SqlColumn("ecid", 14), SqlTypeFacets("smallint", false)]
        public short ecid
        {
            get;
            set;
        }

        [SqlColumn("open_tran", 15), SqlTypeFacets("smallint", false)]
        public short open_tran
        {
            get;
            set;
        }

        [SqlColumn("status", 16), SqlTypeFacets("nchar", false, 60)]
        public string status
        {
            get;
            set;
        }

        [SqlColumn("sid", 17), SqlTypeFacets("binary", false, 86)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("hostname", 18), SqlTypeFacets("nchar", false, 256)]
        public string hostname
        {
            get;
            set;
        }

        [SqlColumn("program_name", 19), SqlTypeFacets("nchar", false, 256)]
        public string program_name
        {
            get;
            set;
        }

        [SqlColumn("hostprocess", 20), SqlTypeFacets("nchar", false, 20)]
        public string hostprocess
        {
            get;
            set;
        }

        [SqlColumn("cmd", 21), SqlTypeFacets("nchar", false, 32)]
        public string cmd
        {
            get;
            set;
        }

        [SqlColumn("nt_domain", 22), SqlTypeFacets("nchar", false, 256)]
        public string nt_domain
        {
            get;
            set;
        }

        [SqlColumn("nt_username", 23), SqlTypeFacets("nchar", false, 256)]
        public string nt_username
        {
            get;
            set;
        }

        [SqlColumn("net_address", 24), SqlTypeFacets("nchar", false, 24)]
        public string net_address
        {
            get;
            set;
        }

        [SqlColumn("net_library", 25), SqlTypeFacets("nchar", false, 24)]
        public string net_library
        {
            get;
            set;
        }

        [SqlColumn("loginame", 26), SqlTypeFacets("nchar", false, 256)]
        public string loginame
        {
            get;
            set;
        }

        [SqlColumn("context_info", 27), SqlTypeFacets("binary", false, 128)]
        public Byte[] context_info
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 28), SqlTypeFacets("binary", false, 20)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("stmt_start", 29), SqlTypeFacets("int", false)]
        public int stmt_start
        {
            get;
            set;
        }

        [SqlColumn("stmt_end", 30), SqlTypeFacets("int", false)]
        public int stmt_end
        {
            get;
            set;
        }

        [SqlColumn("request_id", 31), SqlTypeFacets("int", false)]
        public int request_id
        {
            get;
            set;
        }

        public sysprocesses()
        {
        }

        public sysprocesses(object[] items)
        {
            spid = (short)items[0];
            kpid = (short)items[1];
            blocked = (short)items[2];
            waittype = (Byte[])items[3];
            waittime = (long)items[4];
            lastwaittype = (string)items[5];
            waitresource = (string)items[6];
            dbid = (short)items[7];
            uid = (short?)items[8];
            cpu = (int)items[9];
            physical_io = (long)items[10];
            memusage = (int)items[11];
            login_time = (DateTime)items[12];
            last_batch = (DateTime)items[13];
            ecid = (short)items[14];
            open_tran = (short)items[15];
            status = (string)items[16];
            sid = (Byte[])items[17];
            hostname = (string)items[18];
            program_name = (string)items[19];
            hostprocess = (string)items[20];
            cmd = (string)items[21];
            nt_domain = (string)items[22];
            nt_username = (string)items[23];
            net_address = (string)items[24];
            net_library = (string)items[25];
            loginame = (string)items[26];
            context_info = (Byte[])items[27];
            sql_handle = (Byte[])items[28];
            stmt_start = (int)items[29];
            stmt_end = (int)items[30];
            request_id = (int)items[31];
        }

        public sysprocesses(short spid, short kpid, short blocked, Byte[] waittype, long waittime, string lastwaittype, string waitresource, short dbid, short? uid, int cpu, long physical_io, int memusage, DateTime login_time, DateTime last_batch, short ecid, short open_tran, string status, Byte[] sid, string hostname, string program_name, string hostprocess, string cmd, string nt_domain, string nt_username, string net_address, string net_library, string loginame, Byte[] context_info, Byte[] sql_handle, int stmt_start, int stmt_end, int request_id)
        {
            this.spid = spid;
            this.kpid = kpid;
            this.blocked = blocked;
            this.waittype = waittype;
            this.waittime = waittime;
            this.lastwaittype = lastwaittype;
            this.waitresource = waitresource;
            this.dbid = dbid;
            this.uid = uid;
            this.cpu = cpu;
            this.physical_io = physical_io;
            this.memusage = memusage;
            this.login_time = login_time;
            this.last_batch = last_batch;
            this.ecid = ecid;
            this.open_tran = open_tran;
            this.status = status;
            this.sid = sid;
            this.hostname = hostname;
            this.program_name = program_name;
            this.hostprocess = hostprocess;
            this.cmd = cmd;
            this.nt_domain = nt_domain;
            this.nt_username = nt_username;
            this.net_address = net_address;
            this.net_library = net_library;
            this.loginame = loginame;
            this.context_info = context_info;
            this.sql_handle = sql_handle;
            this.stmt_start = stmt_start;
            this.stmt_end = stmt_end;
            this.request_id = request_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spid, kpid, blocked, waittype, waittime, lastwaittype, waitresource, dbid, uid, cpu, physical_io, memusage, login_time, last_batch, ecid, open_tran, status, sid, hostname, program_name, hostprocess, cmd, nt_domain, nt_username, net_address, net_library, loginame, context_info, sql_handle, stmt_start, stmt_end, request_id };
        }

        public override void SetItemArray(object[] items)
        {
            spid = (short)items[0];
            kpid = (short)items[1];
            blocked = (short)items[2];
            waittype = (Byte[])items[3];
            waittime = (long)items[4];
            lastwaittype = (string)items[5];
            waitresource = (string)items[6];
            dbid = (short)items[7];
            uid = (short?)items[8];
            cpu = (int)items[9];
            physical_io = (long)items[10];
            memusage = (int)items[11];
            login_time = (DateTime)items[12];
            last_batch = (DateTime)items[13];
            ecid = (short)items[14];
            open_tran = (short)items[15];
            status = (string)items[16];
            sid = (Byte[])items[17];
            hostname = (string)items[18];
            program_name = (string)items[19];
            hostprocess = (string)items[20];
            cmd = (string)items[21];
            nt_domain = (string)items[22];
            nt_username = (string)items[23];
            net_address = (string)items[24];
            net_library = (string)items[25];
            loginame = (string)items[26];
            context_info = (Byte[])items[27];
            sql_handle = (Byte[])items[28];
            stmt_start = (int)items[29];
            stmt_end = (int)items[30];
            request_id = (int)items[31];
        }
    }

    [SqlView("sys", "sysremotelogins")]
    public partial class sysremotelogins : SqlViewProxy
    {
        [SqlColumn("remoteserverid", 0), SqlTypeFacets("smallint", true)]
        public short? remoteserverid
        {
            get;
            set;
        }

        [SqlColumn("remoteusername", 1), SqlTypeFacets("sysname", true)]
        public string remoteusername
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        [SqlColumn("sid", 3), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("changedate", 4), SqlTypeFacets("datetime", false)]
        public DateTime changedate
        {
            get;
            set;
        }

        public sysremotelogins()
        {
        }

        public sysremotelogins(object[] items)
        {
            remoteserverid = (short?)items[0];
            remoteusername = (string)items[1];
            status = (short?)items[2];
            sid = (Byte[])items[3];
            changedate = (DateTime)items[4];
        }

        public sysremotelogins(short? remoteserverid, string remoteusername, short? status, Byte[] sid, DateTime changedate)
        {
            this.remoteserverid = remoteserverid;
            this.remoteusername = remoteusername;
            this.status = status;
            this.sid = sid;
            this.changedate = changedate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { remoteserverid, remoteusername, status, sid, changedate };
        }

        public override void SetItemArray(object[] items)
        {
            remoteserverid = (short?)items[0];
            remoteusername = (string)items[1];
            status = (short?)items[2];
            sid = (Byte[])items[3];
            changedate = (DateTime)items[4];
        }
    }

    [SqlView("sys", "sysservers")]
    public partial class sysservers : SqlViewProxy
    {
        [SqlColumn("srvid", 0), SqlTypeFacets("smallint", true)]
        public short? srvid
        {
            get;
            set;
        }

        [SqlColumn("srvstatus", 1), SqlTypeFacets("smallint", true)]
        public short? srvstatus
        {
            get;
            set;
        }

        [SqlColumn("srvname", 2), SqlTypeFacets("sysname", false)]
        public string srvname
        {
            get;
            set;
        }

        [SqlColumn("srvproduct", 3), SqlTypeFacets("sysname", false)]
        public string srvproduct
        {
            get;
            set;
        }

        [SqlColumn("providername", 4), SqlTypeFacets("nvarchar", false, 256)]
        public string providername
        {
            get;
            set;
        }

        [SqlColumn("datasource", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string datasource
        {
            get;
            set;
        }

        [SqlColumn("location", 6), SqlTypeFacets("nvarchar", true, 8000)]
        public string location
        {
            get;
            set;
        }

        [SqlColumn("providerstring", 7), SqlTypeFacets("nvarchar", true, 8000)]
        public string providerstring
        {
            get;
            set;
        }

        [SqlColumn("schemadate", 8), SqlTypeFacets("datetime", false)]
        public DateTime schemadate
        {
            get;
            set;
        }

        [SqlColumn("topologyx", 9), SqlTypeFacets("int", true)]
        public int? topologyx
        {
            get;
            set;
        }

        [SqlColumn("topologyy", 10), SqlTypeFacets("int", true)]
        public int? topologyy
        {
            get;
            set;
        }

        [SqlColumn("catalog", 11), SqlTypeFacets("sysname", true)]
        public string catalog
        {
            get;
            set;
        }

        [SqlColumn("srvcollation", 12), SqlTypeFacets("sysname", true)]
        public string srvcollation
        {
            get;
            set;
        }

        [SqlColumn("connecttimeout", 13), SqlTypeFacets("int", true)]
        public int? connecttimeout
        {
            get;
            set;
        }

        [SqlColumn("querytimeout", 14), SqlTypeFacets("int", true)]
        public int? querytimeout
        {
            get;
            set;
        }

        [SqlColumn("srvnetname", 15), SqlTypeFacets("char", true, 30)]
        public string srvnetname
        {
            get;
            set;
        }

        [SqlColumn("isremote", 16), SqlTypeFacets("bit", true)]
        public bool? isremote
        {
            get;
            set;
        }

        [SqlColumn("rpc", 17), SqlTypeFacets("bit", false)]
        public bool rpc
        {
            get;
            set;
        }

        [SqlColumn("pub", 18), SqlTypeFacets("bit", false)]
        public bool pub
        {
            get;
            set;
        }

        [SqlColumn("sub", 19), SqlTypeFacets("bit", true)]
        public bool? sub
        {
            get;
            set;
        }

        [SqlColumn("dist", 20), SqlTypeFacets("bit", true)]
        public bool? dist
        {
            get;
            set;
        }

        [SqlColumn("dpub", 21), SqlTypeFacets("bit", true)]
        public bool? dpub
        {
            get;
            set;
        }

        [SqlColumn("rpcout", 22), SqlTypeFacets("bit", false)]
        public bool rpcout
        {
            get;
            set;
        }

        [SqlColumn("dataaccess", 23), SqlTypeFacets("bit", false)]
        public bool dataaccess
        {
            get;
            set;
        }

        [SqlColumn("collationcompatible", 24), SqlTypeFacets("bit", false)]
        public bool collationcompatible
        {
            get;
            set;
        }

        [SqlColumn("system", 25), SqlTypeFacets("bit", false)]
        public bool system
        {
            get;
            set;
        }

        [SqlColumn("useremotecollation", 26), SqlTypeFacets("bit", false)]
        public bool useremotecollation
        {
            get;
            set;
        }

        [SqlColumn("lazyschemavalidation", 27), SqlTypeFacets("bit", false)]
        public bool lazyschemavalidation
        {
            get;
            set;
        }

        [SqlColumn("collation", 28), SqlTypeFacets("sysname", true)]
        public string collation
        {
            get;
            set;
        }

        [SqlColumn("nonsqlsub", 29), SqlTypeFacets("bit", true)]
        public bool? nonsqlsub
        {
            get;
            set;
        }

        public sysservers()
        {
        }

        public sysservers(object[] items)
        {
            srvid = (short?)items[0];
            srvstatus = (short?)items[1];
            srvname = (string)items[2];
            srvproduct = (string)items[3];
            providername = (string)items[4];
            datasource = (string)items[5];
            location = (string)items[6];
            providerstring = (string)items[7];
            schemadate = (DateTime)items[8];
            topologyx = (int?)items[9];
            topologyy = (int?)items[10];
            catalog = (string)items[11];
            srvcollation = (string)items[12];
            connecttimeout = (int?)items[13];
            querytimeout = (int?)items[14];
            srvnetname = (string)items[15];
            isremote = (bool?)items[16];
            rpc = (bool)items[17];
            pub = (bool)items[18];
            sub = (bool?)items[19];
            dist = (bool?)items[20];
            dpub = (bool?)items[21];
            rpcout = (bool)items[22];
            dataaccess = (bool)items[23];
            collationcompatible = (bool)items[24];
            system = (bool)items[25];
            useremotecollation = (bool)items[26];
            lazyschemavalidation = (bool)items[27];
            collation = (string)items[28];
            nonsqlsub = (bool?)items[29];
        }

        public sysservers(short? srvid, short? srvstatus, string srvname, string srvproduct, string providername, string datasource, string location, string providerstring, DateTime schemadate, int? topologyx, int? topologyy, string catalog, string srvcollation, int? connecttimeout, int? querytimeout, string srvnetname, bool? isremote, bool rpc, bool pub, bool? sub, bool? dist, bool? dpub, bool rpcout, bool dataaccess, bool collationcompatible, bool system, bool useremotecollation, bool lazyschemavalidation, string collation, bool? nonsqlsub)
        {
            this.srvid = srvid;
            this.srvstatus = srvstatus;
            this.srvname = srvname;
            this.srvproduct = srvproduct;
            this.providername = providername;
            this.datasource = datasource;
            this.location = location;
            this.providerstring = providerstring;
            this.schemadate = schemadate;
            this.topologyx = topologyx;
            this.topologyy = topologyy;
            this.catalog = catalog;
            this.srvcollation = srvcollation;
            this.connecttimeout = connecttimeout;
            this.querytimeout = querytimeout;
            this.srvnetname = srvnetname;
            this.isremote = isremote;
            this.rpc = rpc;
            this.pub = pub;
            this.sub = sub;
            this.dist = dist;
            this.dpub = dpub;
            this.rpcout = rpcout;
            this.dataaccess = dataaccess;
            this.collationcompatible = collationcompatible;
            this.system = system;
            this.useremotecollation = useremotecollation;
            this.lazyschemavalidation = lazyschemavalidation;
            this.collation = collation;
            this.nonsqlsub = nonsqlsub;
        }

        public override object[] GetItemArray()
        {
            return new object[] { srvid, srvstatus, srvname, srvproduct, providername, datasource, location, providerstring, schemadate, topologyx, topologyy, catalog, srvcollation, connecttimeout, querytimeout, srvnetname, isremote, rpc, pub, sub, dist, dpub, rpcout, dataaccess, collationcompatible, system, useremotecollation, lazyschemavalidation, collation, nonsqlsub };
        }

        public override void SetItemArray(object[] items)
        {
            srvid = (short?)items[0];
            srvstatus = (short?)items[1];
            srvname = (string)items[2];
            srvproduct = (string)items[3];
            providername = (string)items[4];
            datasource = (string)items[5];
            location = (string)items[6];
            providerstring = (string)items[7];
            schemadate = (DateTime)items[8];
            topologyx = (int?)items[9];
            topologyy = (int?)items[10];
            catalog = (string)items[11];
            srvcollation = (string)items[12];
            connecttimeout = (int?)items[13];
            querytimeout = (int?)items[14];
            srvnetname = (string)items[15];
            isremote = (bool?)items[16];
            rpc = (bool)items[17];
            pub = (bool)items[18];
            sub = (bool?)items[19];
            dist = (bool?)items[20];
            dpub = (bool?)items[21];
            rpcout = (bool)items[22];
            dataaccess = (bool)items[23];
            collationcompatible = (bool)items[24];
            system = (bool)items[25];
            useremotecollation = (bool)items[26];
            lazyschemavalidation = (bool)items[27];
            collation = (string)items[28];
            nonsqlsub = (bool?)items[29];
        }
    }

    [SqlView("sys", "databases")]
    public partial class databases : SqlViewProxy
    {
        [SqlColumn("two_digit_year_cutoff", 67), SqlTypeFacets("smallint", true)]
        public short? two_digit_year_cutoff
        {
            get;
            set;
        }

        [SqlColumn("containment", 68), SqlTypeFacets("tinyint", true)]
        public byte? containment
        {
            get;
            set;
        }

        [SqlColumn("containment_desc", 69), SqlTypeFacets("nvarchar", true, 120)]
        public string containment_desc
        {
            get;
            set;
        }

        [SqlColumn("target_recovery_time_in_seconds", 70), SqlTypeFacets("int", true)]
        public int? target_recovery_time_in_seconds
        {
            get;
            set;
        }

        [SqlColumn("delayed_durability", 71), SqlTypeFacets("int", true)]
        public int? delayed_durability
        {
            get;
            set;
        }

        [SqlColumn("delayed_durability_desc", 72), SqlTypeFacets("nvarchar", true, 120)]
        public string delayed_durability_desc
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized_elevate_to_snapshot_on", 73), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized_elevate_to_snapshot_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_create_stats_on", 24), SqlTypeFacets("bit", true)]
        public bool? is_auto_create_stats_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_create_stats_incremental_on", 25), SqlTypeFacets("bit", true)]
        public bool? is_auto_create_stats_incremental_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_update_stats_on", 26), SqlTypeFacets("bit", true)]
        public bool? is_auto_update_stats_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_update_stats_async_on", 27), SqlTypeFacets("bit", true)]
        public bool? is_auto_update_stats_async_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_null_default_on", 28), SqlTypeFacets("bit", true)]
        public bool? is_ansi_null_default_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_nulls_on", 29), SqlTypeFacets("bit", true)]
        public bool? is_ansi_nulls_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padding_on", 30), SqlTypeFacets("bit", true)]
        public bool? is_ansi_padding_on
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_warnings_on", 31), SqlTypeFacets("bit", true)]
        public bool? is_ansi_warnings_on
        {
            get;
            set;
        }

        [SqlColumn("is_arithabort_on", 32), SqlTypeFacets("bit", true)]
        public bool? is_arithabort_on
        {
            get;
            set;
        }

        [SqlColumn("is_concat_null_yields_null_on", 33), SqlTypeFacets("bit", true)]
        public bool? is_concat_null_yields_null_on
        {
            get;
            set;
        }

        [SqlColumn("is_numeric_roundabort_on", 34), SqlTypeFacets("bit", true)]
        public bool? is_numeric_roundabort_on
        {
            get;
            set;
        }

        [SqlColumn("is_quoted_identifier_on", 35), SqlTypeFacets("bit", true)]
        public bool? is_quoted_identifier_on
        {
            get;
            set;
        }

        [SqlColumn("is_recursive_triggers_on", 36), SqlTypeFacets("bit", true)]
        public bool? is_recursive_triggers_on
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_close_on_commit_on", 37), SqlTypeFacets("bit", true)]
        public bool? is_cursor_close_on_commit_on
        {
            get;
            set;
        }

        [SqlColumn("is_local_cursor_default", 38), SqlTypeFacets("bit", true)]
        public bool? is_local_cursor_default
        {
            get;
            set;
        }

        [SqlColumn("is_fulltext_enabled", 39), SqlTypeFacets("bit", true)]
        public bool? is_fulltext_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_trustworthy_on", 40), SqlTypeFacets("bit", true)]
        public bool? is_trustworthy_on
        {
            get;
            set;
        }

        [SqlColumn("is_db_chaining_on", 41), SqlTypeFacets("bit", true)]
        public bool? is_db_chaining_on
        {
            get;
            set;
        }

        [SqlColumn("is_parameterization_forced", 42), SqlTypeFacets("bit", true)]
        public bool? is_parameterization_forced
        {
            get;
            set;
        }

        [SqlColumn("is_master_key_encrypted_by_server", 43), SqlTypeFacets("bit", false)]
        public bool is_master_key_encrypted_by_server
        {
            get;
            set;
        }

        [SqlColumn("is_query_store_on", 44), SqlTypeFacets("bit", true)]
        public bool? is_query_store_on
        {
            get;
            set;
        }

        [SqlColumn("is_published", 45), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_subscribed", 46), SqlTypeFacets("bit", false)]
        public bool is_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 47), SqlTypeFacets("bit", false)]
        public bool is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_distributor", 48), SqlTypeFacets("bit", false)]
        public bool is_distributor
        {
            get;
            set;
        }

        [SqlColumn("is_sync_with_backup", 49), SqlTypeFacets("bit", false)]
        public bool is_sync_with_backup
        {
            get;
            set;
        }

        [SqlColumn("service_broker_guid", 50), SqlTypeFacets("uniqueidentifier", false)]
        public Guid service_broker_guid
        {
            get;
            set;
        }

        [SqlColumn("is_broker_enabled", 51), SqlTypeFacets("bit", false)]
        public bool is_broker_enabled
        {
            get;
            set;
        }

        [SqlColumn("log_reuse_wait", 52), SqlTypeFacets("tinyint", true)]
        public byte? log_reuse_wait
        {
            get;
            set;
        }

        [SqlColumn("log_reuse_wait_desc", 53), SqlTypeFacets("nvarchar", true, 120)]
        public string log_reuse_wait_desc
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_on", 54), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_on
        {
            get;
            set;
        }

        [SqlColumn("is_cdc_enabled", 55), SqlTypeFacets("bit", false)]
        public bool is_cdc_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_encrypted", 56), SqlTypeFacets("bit", true)]
        public bool? is_encrypted
        {
            get;
            set;
        }

        [SqlColumn("is_honor_broker_priority_on", 57), SqlTypeFacets("bit", true)]
        public bool? is_honor_broker_priority_on
        {
            get;
            set;
        }

        [SqlColumn("replica_id", 58), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_database_id", 59), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? group_database_id
        {
            get;
            set;
        }

        [SqlColumn("resource_pool_id", 60), SqlTypeFacets("int", true)]
        public int? resource_pool_id
        {
            get;
            set;
        }

        [SqlColumn("default_language_lcid", 61), SqlTypeFacets("smallint", true)]
        public short? default_language_lcid
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 62), SqlTypeFacets("nvarchar", true, 256)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("default_fulltext_language_lcid", 63), SqlTypeFacets("int", true)]
        public int? default_fulltext_language_lcid
        {
            get;
            set;
        }

        [SqlColumn("default_fulltext_language_name", 64), SqlTypeFacets("nvarchar", true, 256)]
        public string default_fulltext_language_name
        {
            get;
            set;
        }

        [SqlColumn("is_nested_triggers_on", 65), SqlTypeFacets("bit", true)]
        public bool? is_nested_triggers_on
        {
            get;
            set;
        }

        [SqlColumn("is_transform_noise_words_on", 66), SqlTypeFacets("bit", true)]
        public bool? is_transform_noise_words_on
        {
            get;
            set;
        }

        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("source_database_id", 2), SqlTypeFacets("int", true)]
        public int? source_database_id
        {
            get;
            set;
        }

        [SqlColumn("owner_sid", 3), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] owner_sid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("compatibility_level", 5), SqlTypeFacets("tinyint", false)]
        public byte compatibility_level
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 6), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_access", 7), SqlTypeFacets("tinyint", true)]
        public byte? user_access
        {
            get;
            set;
        }

        [SqlColumn("user_access_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string user_access_desc
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 9), SqlTypeFacets("bit", true)]
        public bool? is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_auto_close_on", 10), SqlTypeFacets("bit", false)]
        public bool is_auto_close_on
        {
            get;
            set;
        }

        [SqlColumn("is_auto_shrink_on", 11), SqlTypeFacets("bit", true)]
        public bool? is_auto_shrink_on
        {
            get;
            set;
        }

        [SqlColumn("state", 12), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 13), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_in_standby", 14), SqlTypeFacets("bit", true)]
        public bool? is_in_standby
        {
            get;
            set;
        }

        [SqlColumn("is_cleanly_shutdown", 15), SqlTypeFacets("bit", true)]
        public bool? is_cleanly_shutdown
        {
            get;
            set;
        }

        [SqlColumn("is_supplemental_logging_enabled", 16), SqlTypeFacets("bit", true)]
        public bool? is_supplemental_logging_enabled
        {
            get;
            set;
        }

        [SqlColumn("snapshot_isolation_state", 17), SqlTypeFacets("tinyint", true)]
        public byte? snapshot_isolation_state
        {
            get;
            set;
        }

        [SqlColumn("snapshot_isolation_state_desc", 18), SqlTypeFacets("nvarchar", true, 120)]
        public string snapshot_isolation_state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_read_committed_snapshot_on", 19), SqlTypeFacets("bit", true)]
        public bool? is_read_committed_snapshot_on
        {
            get;
            set;
        }

        [SqlColumn("recovery_model", 20), SqlTypeFacets("tinyint", true)]
        public byte? recovery_model
        {
            get;
            set;
        }

        [SqlColumn("recovery_model_desc", 21), SqlTypeFacets("nvarchar", true, 120)]
        public string recovery_model_desc
        {
            get;
            set;
        }

        [SqlColumn("page_verify_option", 22), SqlTypeFacets("tinyint", true)]
        public byte? page_verify_option
        {
            get;
            set;
        }

        [SqlColumn("page_verify_option_desc", 23), SqlTypeFacets("nvarchar", true, 120)]
        public string page_verify_option_desc
        {
            get;
            set;
        }

        public databases()
        {
        }

        public databases(object[] items)
        {
            two_digit_year_cutoff = (short?)items[0];
            containment = (byte?)items[1];
            containment_desc = (string)items[2];
            target_recovery_time_in_seconds = (int?)items[3];
            delayed_durability = (int?)items[4];
            delayed_durability_desc = (string)items[5];
            is_memory_optimized_elevate_to_snapshot_on = (bool?)items[6];
            is_auto_create_stats_on = (bool?)items[7];
            is_auto_create_stats_incremental_on = (bool?)items[8];
            is_auto_update_stats_on = (bool?)items[9];
            is_auto_update_stats_async_on = (bool?)items[10];
            is_ansi_null_default_on = (bool?)items[11];
            is_ansi_nulls_on = (bool?)items[12];
            is_ansi_padding_on = (bool?)items[13];
            is_ansi_warnings_on = (bool?)items[14];
            is_arithabort_on = (bool?)items[15];
            is_concat_null_yields_null_on = (bool?)items[16];
            is_numeric_roundabort_on = (bool?)items[17];
            is_quoted_identifier_on = (bool?)items[18];
            is_recursive_triggers_on = (bool?)items[19];
            is_cursor_close_on_commit_on = (bool?)items[20];
            is_local_cursor_default = (bool?)items[21];
            is_fulltext_enabled = (bool?)items[22];
            is_trustworthy_on = (bool?)items[23];
            is_db_chaining_on = (bool?)items[24];
            is_parameterization_forced = (bool?)items[25];
            is_master_key_encrypted_by_server = (bool)items[26];
            is_query_store_on = (bool?)items[27];
            is_published = (bool)items[28];
            is_subscribed = (bool)items[29];
            is_merge_published = (bool)items[30];
            is_distributor = (bool)items[31];
            is_sync_with_backup = (bool)items[32];
            service_broker_guid = (Guid)items[33];
            is_broker_enabled = (bool)items[34];
            log_reuse_wait = (byte?)items[35];
            log_reuse_wait_desc = (string)items[36];
            is_date_correlation_on = (bool)items[37];
            is_cdc_enabled = (bool)items[38];
            is_encrypted = (bool?)items[39];
            is_honor_broker_priority_on = (bool?)items[40];
            replica_id = (Guid?)items[41];
            group_database_id = (Guid?)items[42];
            resource_pool_id = (int?)items[43];
            default_language_lcid = (short?)items[44];
            default_language_name = (string)items[45];
            default_fulltext_language_lcid = (int?)items[46];
            default_fulltext_language_name = (string)items[47];
            is_nested_triggers_on = (bool?)items[48];
            is_transform_noise_words_on = (bool?)items[49];
            name = (string)items[50];
            database_id = (int)items[51];
            source_database_id = (int?)items[52];
            owner_sid = (Byte[])items[53];
            create_date = (DateTime)items[54];
            compatibility_level = (byte)items[55];
            collation_name = (string)items[56];
            user_access = (byte?)items[57];
            user_access_desc = (string)items[58];
            is_read_only = (bool?)items[59];
            is_auto_close_on = (bool)items[60];
            is_auto_shrink_on = (bool?)items[61];
            state = (byte?)items[62];
            state_desc = (string)items[63];
            is_in_standby = (bool?)items[64];
            is_cleanly_shutdown = (bool?)items[65];
            is_supplemental_logging_enabled = (bool?)items[66];
            snapshot_isolation_state = (byte?)items[67];
            snapshot_isolation_state_desc = (string)items[68];
            is_read_committed_snapshot_on = (bool?)items[69];
            recovery_model = (byte?)items[70];
            recovery_model_desc = (string)items[71];
            page_verify_option = (byte?)items[72];
            page_verify_option_desc = (string)items[73];
        }

        public databases(short? two_digit_year_cutoff, byte? containment, string containment_desc, int? target_recovery_time_in_seconds, int? delayed_durability, string delayed_durability_desc, bool? is_memory_optimized_elevate_to_snapshot_on, bool? is_auto_create_stats_on, bool? is_auto_create_stats_incremental_on, bool? is_auto_update_stats_on, bool? is_auto_update_stats_async_on, bool? is_ansi_null_default_on, bool? is_ansi_nulls_on, bool? is_ansi_padding_on, bool? is_ansi_warnings_on, bool? is_arithabort_on, bool? is_concat_null_yields_null_on, bool? is_numeric_roundabort_on, bool? is_quoted_identifier_on, bool? is_recursive_triggers_on, bool? is_cursor_close_on_commit_on, bool? is_local_cursor_default, bool? is_fulltext_enabled, bool? is_trustworthy_on, bool? is_db_chaining_on, bool? is_parameterization_forced, bool is_master_key_encrypted_by_server, bool? is_query_store_on, bool is_published, bool is_subscribed, bool is_merge_published, bool is_distributor, bool is_sync_with_backup, Guid service_broker_guid, bool is_broker_enabled, byte? log_reuse_wait, string log_reuse_wait_desc, bool is_date_correlation_on, bool is_cdc_enabled, bool? is_encrypted, bool? is_honor_broker_priority_on, Guid? replica_id, Guid? group_database_id, int? resource_pool_id, short? default_language_lcid, string default_language_name, int? default_fulltext_language_lcid, string default_fulltext_language_name, bool? is_nested_triggers_on, bool? is_transform_noise_words_on, string name, int database_id, int? source_database_id, Byte[] owner_sid, DateTime create_date, byte compatibility_level, string collation_name, byte? user_access, string user_access_desc, bool? is_read_only, bool is_auto_close_on, bool? is_auto_shrink_on, byte? state, string state_desc, bool? is_in_standby, bool? is_cleanly_shutdown, bool? is_supplemental_logging_enabled, byte? snapshot_isolation_state, string snapshot_isolation_state_desc, bool? is_read_committed_snapshot_on, byte? recovery_model, string recovery_model_desc, byte? page_verify_option, string page_verify_option_desc)
        {
            this.two_digit_year_cutoff = two_digit_year_cutoff;
            this.containment = containment;
            this.containment_desc = containment_desc;
            this.target_recovery_time_in_seconds = target_recovery_time_in_seconds;
            this.delayed_durability = delayed_durability;
            this.delayed_durability_desc = delayed_durability_desc;
            this.is_memory_optimized_elevate_to_snapshot_on = is_memory_optimized_elevate_to_snapshot_on;
            this.is_auto_create_stats_on = is_auto_create_stats_on;
            this.is_auto_create_stats_incremental_on = is_auto_create_stats_incremental_on;
            this.is_auto_update_stats_on = is_auto_update_stats_on;
            this.is_auto_update_stats_async_on = is_auto_update_stats_async_on;
            this.is_ansi_null_default_on = is_ansi_null_default_on;
            this.is_ansi_nulls_on = is_ansi_nulls_on;
            this.is_ansi_padding_on = is_ansi_padding_on;
            this.is_ansi_warnings_on = is_ansi_warnings_on;
            this.is_arithabort_on = is_arithabort_on;
            this.is_concat_null_yields_null_on = is_concat_null_yields_null_on;
            this.is_numeric_roundabort_on = is_numeric_roundabort_on;
            this.is_quoted_identifier_on = is_quoted_identifier_on;
            this.is_recursive_triggers_on = is_recursive_triggers_on;
            this.is_cursor_close_on_commit_on = is_cursor_close_on_commit_on;
            this.is_local_cursor_default = is_local_cursor_default;
            this.is_fulltext_enabled = is_fulltext_enabled;
            this.is_trustworthy_on = is_trustworthy_on;
            this.is_db_chaining_on = is_db_chaining_on;
            this.is_parameterization_forced = is_parameterization_forced;
            this.is_master_key_encrypted_by_server = is_master_key_encrypted_by_server;
            this.is_query_store_on = is_query_store_on;
            this.is_published = is_published;
            this.is_subscribed = is_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_distributor = is_distributor;
            this.is_sync_with_backup = is_sync_with_backup;
            this.service_broker_guid = service_broker_guid;
            this.is_broker_enabled = is_broker_enabled;
            this.log_reuse_wait = log_reuse_wait;
            this.log_reuse_wait_desc = log_reuse_wait_desc;
            this.is_date_correlation_on = is_date_correlation_on;
            this.is_cdc_enabled = is_cdc_enabled;
            this.is_encrypted = is_encrypted;
            this.is_honor_broker_priority_on = is_honor_broker_priority_on;
            this.replica_id = replica_id;
            this.group_database_id = group_database_id;
            this.resource_pool_id = resource_pool_id;
            this.default_language_lcid = default_language_lcid;
            this.default_language_name = default_language_name;
            this.default_fulltext_language_lcid = default_fulltext_language_lcid;
            this.default_fulltext_language_name = default_fulltext_language_name;
            this.is_nested_triggers_on = is_nested_triggers_on;
            this.is_transform_noise_words_on = is_transform_noise_words_on;
            this.name = name;
            this.database_id = database_id;
            this.source_database_id = source_database_id;
            this.owner_sid = owner_sid;
            this.create_date = create_date;
            this.compatibility_level = compatibility_level;
            this.collation_name = collation_name;
            this.user_access = user_access;
            this.user_access_desc = user_access_desc;
            this.is_read_only = is_read_only;
            this.is_auto_close_on = is_auto_close_on;
            this.is_auto_shrink_on = is_auto_shrink_on;
            this.state = state;
            this.state_desc = state_desc;
            this.is_in_standby = is_in_standby;
            this.is_cleanly_shutdown = is_cleanly_shutdown;
            this.is_supplemental_logging_enabled = is_supplemental_logging_enabled;
            this.snapshot_isolation_state = snapshot_isolation_state;
            this.snapshot_isolation_state_desc = snapshot_isolation_state_desc;
            this.is_read_committed_snapshot_on = is_read_committed_snapshot_on;
            this.recovery_model = recovery_model;
            this.recovery_model_desc = recovery_model_desc;
            this.page_verify_option = page_verify_option;
            this.page_verify_option_desc = page_verify_option_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { two_digit_year_cutoff, containment, containment_desc, target_recovery_time_in_seconds, delayed_durability, delayed_durability_desc, is_memory_optimized_elevate_to_snapshot_on, is_auto_create_stats_on, is_auto_create_stats_incremental_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_ansi_null_default_on, is_ansi_nulls_on, is_ansi_padding_on, is_ansi_warnings_on, is_arithabort_on, is_concat_null_yields_null_on, is_numeric_roundabort_on, is_quoted_identifier_on, is_recursive_triggers_on, is_cursor_close_on_commit_on, is_local_cursor_default, is_fulltext_enabled, is_trustworthy_on, is_db_chaining_on, is_parameterization_forced, is_master_key_encrypted_by_server, is_query_store_on, is_published, is_subscribed, is_merge_published, is_distributor, is_sync_with_backup, service_broker_guid, is_broker_enabled, log_reuse_wait, log_reuse_wait_desc, is_date_correlation_on, is_cdc_enabled, is_encrypted, is_honor_broker_priority_on, replica_id, group_database_id, resource_pool_id, default_language_lcid, default_language_name, default_fulltext_language_lcid, default_fulltext_language_name, is_nested_triggers_on, is_transform_noise_words_on, name, database_id, source_database_id, owner_sid, create_date, compatibility_level, collation_name, user_access, user_access_desc, is_read_only, is_auto_close_on, is_auto_shrink_on, state, state_desc, is_in_standby, is_cleanly_shutdown, is_supplemental_logging_enabled, snapshot_isolation_state, snapshot_isolation_state_desc, is_read_committed_snapshot_on, recovery_model, recovery_model_desc, page_verify_option, page_verify_option_desc };
        }

        public override void SetItemArray(object[] items)
        {
            two_digit_year_cutoff = (short?)items[0];
            containment = (byte?)items[1];
            containment_desc = (string)items[2];
            target_recovery_time_in_seconds = (int?)items[3];
            delayed_durability = (int?)items[4];
            delayed_durability_desc = (string)items[5];
            is_memory_optimized_elevate_to_snapshot_on = (bool?)items[6];
            is_auto_create_stats_on = (bool?)items[7];
            is_auto_create_stats_incremental_on = (bool?)items[8];
            is_auto_update_stats_on = (bool?)items[9];
            is_auto_update_stats_async_on = (bool?)items[10];
            is_ansi_null_default_on = (bool?)items[11];
            is_ansi_nulls_on = (bool?)items[12];
            is_ansi_padding_on = (bool?)items[13];
            is_ansi_warnings_on = (bool?)items[14];
            is_arithabort_on = (bool?)items[15];
            is_concat_null_yields_null_on = (bool?)items[16];
            is_numeric_roundabort_on = (bool?)items[17];
            is_quoted_identifier_on = (bool?)items[18];
            is_recursive_triggers_on = (bool?)items[19];
            is_cursor_close_on_commit_on = (bool?)items[20];
            is_local_cursor_default = (bool?)items[21];
            is_fulltext_enabled = (bool?)items[22];
            is_trustworthy_on = (bool?)items[23];
            is_db_chaining_on = (bool?)items[24];
            is_parameterization_forced = (bool?)items[25];
            is_master_key_encrypted_by_server = (bool)items[26];
            is_query_store_on = (bool?)items[27];
            is_published = (bool)items[28];
            is_subscribed = (bool)items[29];
            is_merge_published = (bool)items[30];
            is_distributor = (bool)items[31];
            is_sync_with_backup = (bool)items[32];
            service_broker_guid = (Guid)items[33];
            is_broker_enabled = (bool)items[34];
            log_reuse_wait = (byte?)items[35];
            log_reuse_wait_desc = (string)items[36];
            is_date_correlation_on = (bool)items[37];
            is_cdc_enabled = (bool)items[38];
            is_encrypted = (bool?)items[39];
            is_honor_broker_priority_on = (bool?)items[40];
            replica_id = (Guid?)items[41];
            group_database_id = (Guid?)items[42];
            resource_pool_id = (int?)items[43];
            default_language_lcid = (short?)items[44];
            default_language_name = (string)items[45];
            default_fulltext_language_lcid = (int?)items[46];
            default_fulltext_language_name = (string)items[47];
            is_nested_triggers_on = (bool?)items[48];
            is_transform_noise_words_on = (bool?)items[49];
            name = (string)items[50];
            database_id = (int)items[51];
            source_database_id = (int?)items[52];
            owner_sid = (Byte[])items[53];
            create_date = (DateTime)items[54];
            compatibility_level = (byte)items[55];
            collation_name = (string)items[56];
            user_access = (byte?)items[57];
            user_access_desc = (string)items[58];
            is_read_only = (bool?)items[59];
            is_auto_close_on = (bool)items[60];
            is_auto_shrink_on = (bool?)items[61];
            state = (byte?)items[62];
            state_desc = (string)items[63];
            is_in_standby = (bool?)items[64];
            is_cleanly_shutdown = (bool?)items[65];
            is_supplemental_logging_enabled = (bool?)items[66];
            snapshot_isolation_state = (byte?)items[67];
            snapshot_isolation_state_desc = (string)items[68];
            is_read_committed_snapshot_on = (bool?)items[69];
            recovery_model = (byte?)items[70];
            recovery_model_desc = (string)items[71];
            page_verify_option = (byte?)items[72];
            page_verify_option_desc = (string)items[73];
        }
    }

    [SqlView("sys", "database_mirroring_witnesses")]
    public partial class database_mirroring_witnesses : SqlViewProxy
    {
        [SqlColumn("database_name", 0), SqlTypeFacets("sysname", false)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("principal_server_name", 1), SqlTypeFacets("sysname", true)]
        public string principal_server_name
        {
            get;
            set;
        }

        [SqlColumn("mirror_server_name", 2), SqlTypeFacets("sysname", true)]
        public string mirror_server_name
        {
            get;
            set;
        }

        [SqlColumn("safety_level", 3), SqlTypeFacets("tinyint", false)]
        public byte safety_level
        {
            get;
            set;
        }

        [SqlColumn("safety_level_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string safety_level_desc
        {
            get;
            set;
        }

        [SqlColumn("safety_sequence_number", 5), SqlTypeFacets("int", false)]
        public int safety_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("role_sequence_number", 6), SqlTypeFacets("int", false)]
        public int role_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("mirroring_guid", 7), SqlTypeFacets("uniqueidentifier", false)]
        public Guid mirroring_guid
        {
            get;
            set;
        }

        [SqlColumn("family_guid", 8), SqlTypeFacets("uniqueidentifier", false)]
        public Guid family_guid
        {
            get;
            set;
        }

        [SqlColumn("is_suspended", 9), SqlTypeFacets("bit", true)]
        public bool? is_suspended
        {
            get;
            set;
        }

        [SqlColumn("is_suspended_sequence_number", 10), SqlTypeFacets("int", false)]
        public int is_suspended_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("partner_sync_state", 11), SqlTypeFacets("tinyint", true)]
        public byte? partner_sync_state
        {
            get;
            set;
        }

        [SqlColumn("partner_sync_state_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string partner_sync_state_desc
        {
            get;
            set;
        }

        public database_mirroring_witnesses()
        {
        }

        public database_mirroring_witnesses(object[] items)
        {
            database_name = (string)items[0];
            principal_server_name = (string)items[1];
            mirror_server_name = (string)items[2];
            safety_level = (byte)items[3];
            safety_level_desc = (string)items[4];
            safety_sequence_number = (int)items[5];
            role_sequence_number = (int)items[6];
            mirroring_guid = (Guid)items[7];
            family_guid = (Guid)items[8];
            is_suspended = (bool?)items[9];
            is_suspended_sequence_number = (int)items[10];
            partner_sync_state = (byte?)items[11];
            partner_sync_state_desc = (string)items[12];
        }

        public database_mirroring_witnesses(string database_name, string principal_server_name, string mirror_server_name, byte safety_level, string safety_level_desc, int safety_sequence_number, int role_sequence_number, Guid mirroring_guid, Guid family_guid, bool? is_suspended, int is_suspended_sequence_number, byte? partner_sync_state, string partner_sync_state_desc)
        {
            this.database_name = database_name;
            this.principal_server_name = principal_server_name;
            this.mirror_server_name = mirror_server_name;
            this.safety_level = safety_level;
            this.safety_level_desc = safety_level_desc;
            this.safety_sequence_number = safety_sequence_number;
            this.role_sequence_number = role_sequence_number;
            this.mirroring_guid = mirroring_guid;
            this.family_guid = family_guid;
            this.is_suspended = is_suspended;
            this.is_suspended_sequence_number = is_suspended_sequence_number;
            this.partner_sync_state = partner_sync_state;
            this.partner_sync_state_desc = partner_sync_state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_name, principal_server_name, mirror_server_name, safety_level, safety_level_desc, safety_sequence_number, role_sequence_number, mirroring_guid, family_guid, is_suspended, is_suspended_sequence_number, partner_sync_state, partner_sync_state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            database_name = (string)items[0];
            principal_server_name = (string)items[1];
            mirror_server_name = (string)items[2];
            safety_level = (byte)items[3];
            safety_level_desc = (string)items[4];
            safety_sequence_number = (int)items[5];
            role_sequence_number = (int)items[6];
            mirroring_guid = (Guid)items[7];
            family_guid = (Guid)items[8];
            is_suspended = (bool?)items[9];
            is_suspended_sequence_number = (int)items[10];
            partner_sync_state = (byte?)items[11];
            partner_sync_state_desc = (string)items[12];
        }
    }

    [SqlView("sys", "backup_devices")]
    public partial class backup_devices : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("tinyint", true)]
        public byte? type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("physical_name", 3), SqlTypeFacets("nvarchar", true, 520)]
        public string physical_name
        {
            get;
            set;
        }

        public backup_devices()
        {
        }

        public backup_devices(object[] items)
        {
            name = (string)items[0];
            type = (byte?)items[1];
            type_desc = (string)items[2];
            physical_name = (string)items[3];
        }

        public backup_devices(string name, byte? type, string type_desc, string physical_name)
        {
            this.name = name;
            this.type = type;
            this.type_desc = type_desc;
            this.physical_name = physical_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, type, type_desc, physical_name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            type = (byte?)items[1];
            type_desc = (string)items[2];
            physical_name = (string)items[3];
        }
    }

    [SqlView("sys", "master_files")]
    public partial class master_files : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("file_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? file_guid
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 5), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("name", 6), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("physical_name", 7), SqlTypeFacets("nvarchar", false, 520)]
        public string physical_name
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("size", 10), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("max_size", 11), SqlTypeFacets("int", false)]
        public int max_size
        {
            get;
            set;
        }

        [SqlColumn("growth", 12), SqlTypeFacets("int", false)]
        public int growth
        {
            get;
            set;
        }

        [SqlColumn("is_media_read_only", 13), SqlTypeFacets("bit", false)]
        public bool is_media_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 14), SqlTypeFacets("bit", false)]
        public bool is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 15), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_percent_growth", 16), SqlTypeFacets("bit", false)]
        public bool is_percent_growth
        {
            get;
            set;
        }

        [SqlColumn("is_name_reserved", 17), SqlTypeFacets("bit", false)]
        public bool is_name_reserved
        {
            get;
            set;
        }

        [SqlColumn("create_lsn", 18), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? create_lsn
        {
            get;
            set;
        }

        [SqlColumn("drop_lsn", 19), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? drop_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_only_lsn", 20), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? read_only_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_write_lsn", 21), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? read_write_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_lsn", 22), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? differential_base_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_guid", 23), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? differential_base_guid
        {
            get;
            set;
        }

        [SqlColumn("differential_base_time", 24), SqlTypeFacets("datetime", true)]
        public DateTime? differential_base_time
        {
            get;
            set;
        }

        [SqlColumn("redo_start_lsn", 25), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? redo_start_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_start_fork_guid", 26), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_start_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("redo_target_lsn", 27), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? redo_target_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_target_fork_guid", 28), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_target_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("backup_lsn", 29), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? backup_lsn
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 30), SqlTypeFacets("int", true)]
        public int? credential_id
        {
            get;
            set;
        }

        public master_files()
        {
        }

        public master_files(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            file_guid = (Guid?)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            data_space_id = (int)items[5];
            name = (string)items[6];
            physical_name = (string)items[7];
            state = (byte?)items[8];
            state_desc = (string)items[9];
            size = (int)items[10];
            max_size = (int)items[11];
            growth = (int)items[12];
            is_media_read_only = (bool)items[13];
            is_read_only = (bool)items[14];
            is_sparse = (bool)items[15];
            is_percent_growth = (bool)items[16];
            is_name_reserved = (bool)items[17];
            create_lsn = (decimal?)items[18];
            drop_lsn = (decimal?)items[19];
            read_only_lsn = (decimal?)items[20];
            read_write_lsn = (decimal?)items[21];
            differential_base_lsn = (decimal?)items[22];
            differential_base_guid = (Guid?)items[23];
            differential_base_time = (DateTime?)items[24];
            redo_start_lsn = (decimal?)items[25];
            redo_start_fork_guid = (Guid?)items[26];
            redo_target_lsn = (decimal?)items[27];
            redo_target_fork_guid = (Guid?)items[28];
            backup_lsn = (decimal?)items[29];
            credential_id = (int?)items[30];
        }

        public master_files(int database_id, int file_id, Guid? file_guid, byte type, string type_desc, int data_space_id, string name, string physical_name, byte? state, string state_desc, int size, int max_size, int growth, bool is_media_read_only, bool is_read_only, bool is_sparse, bool is_percent_growth, bool is_name_reserved, decimal? create_lsn, decimal? drop_lsn, decimal? read_only_lsn, decimal? read_write_lsn, decimal? differential_base_lsn, Guid? differential_base_guid, DateTime? differential_base_time, decimal? redo_start_lsn, Guid? redo_start_fork_guid, decimal? redo_target_lsn, Guid? redo_target_fork_guid, decimal? backup_lsn, int? credential_id)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.file_guid = file_guid;
            this.type = type;
            this.type_desc = type_desc;
            this.data_space_id = data_space_id;
            this.name = name;
            this.physical_name = physical_name;
            this.state = state;
            this.state_desc = state_desc;
            this.size = size;
            this.max_size = max_size;
            this.growth = growth;
            this.is_media_read_only = is_media_read_only;
            this.is_read_only = is_read_only;
            this.is_sparse = is_sparse;
            this.is_percent_growth = is_percent_growth;
            this.is_name_reserved = is_name_reserved;
            this.create_lsn = create_lsn;
            this.drop_lsn = drop_lsn;
            this.read_only_lsn = read_only_lsn;
            this.read_write_lsn = read_write_lsn;
            this.differential_base_lsn = differential_base_lsn;
            this.differential_base_guid = differential_base_guid;
            this.differential_base_time = differential_base_time;
            this.redo_start_lsn = redo_start_lsn;
            this.redo_start_fork_guid = redo_start_fork_guid;
            this.redo_target_lsn = redo_target_lsn;
            this.redo_target_fork_guid = redo_target_fork_guid;
            this.backup_lsn = backup_lsn;
            this.credential_id = credential_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, file_guid, type, type_desc, data_space_id, name, physical_name, state, state_desc, size, max_size, growth, is_media_read_only, is_read_only, is_sparse, is_percent_growth, is_name_reserved, create_lsn, drop_lsn, read_only_lsn, read_write_lsn, differential_base_lsn, differential_base_guid, differential_base_time, redo_start_lsn, redo_start_fork_guid, redo_target_lsn, redo_target_fork_guid, backup_lsn, credential_id };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            file_guid = (Guid?)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            data_space_id = (int)items[5];
            name = (string)items[6];
            physical_name = (string)items[7];
            state = (byte?)items[8];
            state_desc = (string)items[9];
            size = (int)items[10];
            max_size = (int)items[11];
            growth = (int)items[12];
            is_media_read_only = (bool)items[13];
            is_read_only = (bool)items[14];
            is_sparse = (bool)items[15];
            is_percent_growth = (bool)items[16];
            is_name_reserved = (bool)items[17];
            create_lsn = (decimal?)items[18];
            drop_lsn = (decimal?)items[19];
            read_only_lsn = (decimal?)items[20];
            read_write_lsn = (decimal?)items[21];
            differential_base_lsn = (decimal?)items[22];
            differential_base_guid = (Guid?)items[23];
            differential_base_time = (DateTime?)items[24];
            redo_start_lsn = (decimal?)items[25];
            redo_start_fork_guid = (Guid?)items[26];
            redo_target_lsn = (decimal?)items[27];
            redo_target_fork_guid = (Guid?)items[28];
            backup_lsn = (decimal?)items[29];
            credential_id = (int?)items[30];
        }
    }

    [SqlView("sys", "server_principals")]
    public partial class server_principals : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("char", false, 1)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("default_database_name", 8), SqlTypeFacets("sysname", true)]
        public string default_database_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 9), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 10), SqlTypeFacets("int", true)]
        public int? credential_id
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_id", 11), SqlTypeFacets("int", true)]
        public int? owning_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_role", 12), SqlTypeFacets("bit", false)]
        public bool is_fixed_role
        {
            get;
            set;
        }

        public server_principals()
        {
        }

        public server_principals(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            owning_principal_id = (int?)items[11];
            is_fixed_role = (bool)items[12];
        }

        public server_principals(string name, int principal_id, Byte[] sid, string type, string type_desc, bool? is_disabled, DateTime create_date, DateTime modify_date, string default_database_name, string default_language_name, int? credential_id, int? owning_principal_id, bool is_fixed_role)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.sid = sid;
            this.type = type;
            this.type_desc = type_desc;
            this.is_disabled = is_disabled;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.default_database_name = default_database_name;
            this.default_language_name = default_language_name;
            this.credential_id = credential_id;
            this.owning_principal_id = owning_principal_id;
            this.is_fixed_role = is_fixed_role;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, sid, type, type_desc, is_disabled, create_date, modify_date, default_database_name, default_language_name, credential_id, owning_principal_id, is_fixed_role };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            owning_principal_id = (int?)items[11];
            is_fixed_role = (bool)items[12];
        }
    }

    [SqlView("sys", "server_role_members")]
    public partial class server_role_members : SqlViewProxy
    {
        [SqlColumn("role_principal_id", 0), SqlTypeFacets("int", false)]
        public int role_principal_id
        {
            get;
            set;
        }

        [SqlColumn("member_principal_id", 1), SqlTypeFacets("int", false)]
        public int member_principal_id
        {
            get;
            set;
        }

        public server_role_members()
        {
        }

        public server_role_members(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }

        public server_role_members(int role_principal_id, int member_principal_id)
        {
            this.role_principal_id = role_principal_id;
            this.member_principal_id = member_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { role_principal_id, member_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }
    }

    [SqlView("sys", "server_permissions")]
    public partial class server_permissions : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("grantee_principal_id", 4), SqlTypeFacets("int", false)]
        public int grantee_principal_id
        {
            get;
            set;
        }

        [SqlColumn("grantor_principal_id", 5), SqlTypeFacets("int", false)]
        public int grantor_principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false, 4)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("char", false, 1)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        public server_permissions()
        {
        }

        public server_permissions(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }

        public server_permissions(byte @class, string class_desc, int major_id, int minor_id, int grantee_principal_id, int grantor_principal_id, string type, string permission_name, string state, string state_desc)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.grantee_principal_id = grantee_principal_id;
            this.grantor_principal_id = grantor_principal_id;
            this.type = type;
            this.permission_name = permission_name;
            this.state = state;
            this.state_desc = state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, grantee_principal_id, grantor_principal_id, type, permission_name, state, state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }
    }

    [SqlView("sys", "servers")]
    public partial class servers : SqlViewProxy
    {
        [SqlColumn("server_id", 0), SqlTypeFacets("int", false)]
        public int server_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("product", 2), SqlTypeFacets("sysname", false)]
        public string product
        {
            get;
            set;
        }

        [SqlColumn("provider", 3), SqlTypeFacets("sysname", false)]
        public string provider
        {
            get;
            set;
        }

        [SqlColumn("data_source", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string data_source
        {
            get;
            set;
        }

        [SqlColumn("location", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string location
        {
            get;
            set;
        }

        [SqlColumn("provider_string", 6), SqlTypeFacets("nvarchar", true, 8000)]
        public string provider_string
        {
            get;
            set;
        }

        [SqlColumn("catalog", 7), SqlTypeFacets("sysname", true)]
        public string catalog
        {
            get;
            set;
        }

        [SqlColumn("connect_timeout", 8), SqlTypeFacets("int", true)]
        public int? connect_timeout
        {
            get;
            set;
        }

        [SqlColumn("query_timeout", 9), SqlTypeFacets("int", true)]
        public int? query_timeout
        {
            get;
            set;
        }

        [SqlColumn("is_linked", 10), SqlTypeFacets("bit", false)]
        public bool is_linked
        {
            get;
            set;
        }

        [SqlColumn("is_remote_login_enabled", 11), SqlTypeFacets("bit", false)]
        public bool is_remote_login_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_rpc_out_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_rpc_out_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_data_access_enabled", 13), SqlTypeFacets("bit", false)]
        public bool is_data_access_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_collation_compatible", 14), SqlTypeFacets("bit", false)]
        public bool is_collation_compatible
        {
            get;
            set;
        }

        [SqlColumn("uses_remote_collation", 15), SqlTypeFacets("bit", false)]
        public bool uses_remote_collation
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 16), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("lazy_schema_validation", 17), SqlTypeFacets("bit", false)]
        public bool lazy_schema_validation
        {
            get;
            set;
        }

        [SqlColumn("is_system", 18), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("is_publisher", 19), SqlTypeFacets("bit", false)]
        public bool is_publisher
        {
            get;
            set;
        }

        [SqlColumn("is_subscriber", 20), SqlTypeFacets("bit", true)]
        public bool? is_subscriber
        {
            get;
            set;
        }

        [SqlColumn("is_distributor", 21), SqlTypeFacets("bit", true)]
        public bool? is_distributor
        {
            get;
            set;
        }

        [SqlColumn("is_nonsql_subscriber", 22), SqlTypeFacets("bit", true)]
        public bool? is_nonsql_subscriber
        {
            get;
            set;
        }

        [SqlColumn("is_remote_proc_transaction_promotion_enabled", 23), SqlTypeFacets("bit", true)]
        public bool? is_remote_proc_transaction_promotion_enabled
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 24), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public servers()
        {
        }

        public servers(object[] items)
        {
            server_id = (int)items[0];
            name = (string)items[1];
            product = (string)items[2];
            provider = (string)items[3];
            data_source = (string)items[4];
            location = (string)items[5];
            provider_string = (string)items[6];
            catalog = (string)items[7];
            connect_timeout = (int?)items[8];
            query_timeout = (int?)items[9];
            is_linked = (bool)items[10];
            is_remote_login_enabled = (bool)items[11];
            is_rpc_out_enabled = (bool)items[12];
            is_data_access_enabled = (bool)items[13];
            is_collation_compatible = (bool)items[14];
            uses_remote_collation = (bool)items[15];
            collation_name = (string)items[16];
            lazy_schema_validation = (bool)items[17];
            is_system = (bool)items[18];
            is_publisher = (bool)items[19];
            is_subscriber = (bool?)items[20];
            is_distributor = (bool?)items[21];
            is_nonsql_subscriber = (bool?)items[22];
            is_remote_proc_transaction_promotion_enabled = (bool?)items[23];
            modify_date = (DateTime)items[24];
        }

        public servers(int server_id, string name, string product, string provider, string data_source, string location, string provider_string, string catalog, int? connect_timeout, int? query_timeout, bool is_linked, bool is_remote_login_enabled, bool is_rpc_out_enabled, bool is_data_access_enabled, bool is_collation_compatible, bool uses_remote_collation, string collation_name, bool lazy_schema_validation, bool is_system, bool is_publisher, bool? is_subscriber, bool? is_distributor, bool? is_nonsql_subscriber, bool? is_remote_proc_transaction_promotion_enabled, DateTime modify_date)
        {
            this.server_id = server_id;
            this.name = name;
            this.product = product;
            this.provider = provider;
            this.data_source = data_source;
            this.location = location;
            this.provider_string = provider_string;
            this.catalog = catalog;
            this.connect_timeout = connect_timeout;
            this.query_timeout = query_timeout;
            this.is_linked = is_linked;
            this.is_remote_login_enabled = is_remote_login_enabled;
            this.is_rpc_out_enabled = is_rpc_out_enabled;
            this.is_data_access_enabled = is_data_access_enabled;
            this.is_collation_compatible = is_collation_compatible;
            this.uses_remote_collation = uses_remote_collation;
            this.collation_name = collation_name;
            this.lazy_schema_validation = lazy_schema_validation;
            this.is_system = is_system;
            this.is_publisher = is_publisher;
            this.is_subscriber = is_subscriber;
            this.is_distributor = is_distributor;
            this.is_nonsql_subscriber = is_nonsql_subscriber;
            this.is_remote_proc_transaction_promotion_enabled = is_remote_proc_transaction_promotion_enabled;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_id, name, product, provider, data_source, location, provider_string, catalog, connect_timeout, query_timeout, is_linked, is_remote_login_enabled, is_rpc_out_enabled, is_data_access_enabled, is_collation_compatible, uses_remote_collation, collation_name, lazy_schema_validation, is_system, is_publisher, is_subscriber, is_distributor, is_nonsql_subscriber, is_remote_proc_transaction_promotion_enabled, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            server_id = (int)items[0];
            name = (string)items[1];
            product = (string)items[2];
            provider = (string)items[3];
            data_source = (string)items[4];
            location = (string)items[5];
            provider_string = (string)items[6];
            catalog = (string)items[7];
            connect_timeout = (int?)items[8];
            query_timeout = (int?)items[9];
            is_linked = (bool)items[10];
            is_remote_login_enabled = (bool)items[11];
            is_rpc_out_enabled = (bool)items[12];
            is_data_access_enabled = (bool)items[13];
            is_collation_compatible = (bool)items[14];
            uses_remote_collation = (bool)items[15];
            collation_name = (string)items[16];
            lazy_schema_validation = (bool)items[17];
            is_system = (bool)items[18];
            is_publisher = (bool)items[19];
            is_subscriber = (bool?)items[20];
            is_distributor = (bool?)items[21];
            is_nonsql_subscriber = (bool?)items[22];
            is_remote_proc_transaction_promotion_enabled = (bool?)items[23];
            modify_date = (DateTime)items[24];
        }
    }

    [SqlView("sys", "remote_logins")]
    public partial class remote_logins : SqlViewProxy
    {
        [SqlColumn("server_id", 0), SqlTypeFacets("int", false)]
        public int server_id
        {
            get;
            set;
        }

        [SqlColumn("remote_name", 1), SqlTypeFacets("sysname", true)]
        public string remote_name
        {
            get;
            set;
        }

        [SqlColumn("local_principal_id", 2), SqlTypeFacets("int", true)]
        public int? local_principal_id
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public remote_logins()
        {
        }

        public remote_logins(object[] items)
        {
            server_id = (int)items[0];
            remote_name = (string)items[1];
            local_principal_id = (int?)items[2];
            modify_date = (DateTime)items[3];
        }

        public remote_logins(int server_id, string remote_name, int? local_principal_id, DateTime modify_date)
        {
            this.server_id = server_id;
            this.remote_name = remote_name;
            this.local_principal_id = local_principal_id;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_id, remote_name, local_principal_id, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            server_id = (int)items[0];
            remote_name = (string)items[1];
            local_principal_id = (int?)items[2];
            modify_date = (DateTime)items[3];
        }
    }

    [SqlView("sys", "linked_logins")]
    public partial class linked_logins : SqlViewProxy
    {
        [SqlColumn("server_id", 0), SqlTypeFacets("int", false)]
        public int server_id
        {
            get;
            set;
        }

        [SqlColumn("local_principal_id", 1), SqlTypeFacets("int", true)]
        public int? local_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_self_credential", 2), SqlTypeFacets("bit", false)]
        public bool uses_self_credential
        {
            get;
            set;
        }

        [SqlColumn("remote_name", 3), SqlTypeFacets("sysname", true)]
        public string remote_name
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public linked_logins()
        {
        }

        public linked_logins(object[] items)
        {
            server_id = (int)items[0];
            local_principal_id = (int?)items[1];
            uses_self_credential = (bool)items[2];
            remote_name = (string)items[3];
            modify_date = (DateTime)items[4];
        }

        public linked_logins(int server_id, int? local_principal_id, bool uses_self_credential, string remote_name, DateTime modify_date)
        {
            this.server_id = server_id;
            this.local_principal_id = local_principal_id;
            this.uses_self_credential = uses_self_credential;
            this.remote_name = remote_name;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_id, local_principal_id, uses_self_credential, remote_name, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            server_id = (int)items[0];
            local_principal_id = (int?)items[1];
            uses_self_credential = (bool)items[2];
            remote_name = (string)items[3];
            modify_date = (DateTime)items[4];
        }
    }

    [SqlView("sys", "sql_logins")]
    public partial class sql_logins : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("char", false, 1)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("default_database_name", 8), SqlTypeFacets("sysname", true)]
        public string default_database_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 9), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 10), SqlTypeFacets("int", true)]
        public int? credential_id
        {
            get;
            set;
        }

        [SqlColumn("is_policy_checked", 11), SqlTypeFacets("bit", true)]
        public bool? is_policy_checked
        {
            get;
            set;
        }

        [SqlColumn("is_expiration_checked", 12), SqlTypeFacets("bit", true)]
        public bool? is_expiration_checked
        {
            get;
            set;
        }

        [SqlColumn("password_hash", 13), SqlTypeFacets("varbinary", true, 256)]
        public Byte[] password_hash
        {
            get;
            set;
        }

        public sql_logins()
        {
        }

        public sql_logins(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            is_policy_checked = (bool?)items[11];
            is_expiration_checked = (bool?)items[12];
            password_hash = (Byte[])items[13];
        }

        public sql_logins(string name, int principal_id, Byte[] sid, string type, string type_desc, bool? is_disabled, DateTime create_date, DateTime modify_date, string default_database_name, string default_language_name, int? credential_id, bool? is_policy_checked, bool? is_expiration_checked, Byte[] password_hash)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.sid = sid;
            this.type = type;
            this.type_desc = type_desc;
            this.is_disabled = is_disabled;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.default_database_name = default_database_name;
            this.default_language_name = default_language_name;
            this.credential_id = credential_id;
            this.is_policy_checked = is_policy_checked;
            this.is_expiration_checked = is_expiration_checked;
            this.password_hash = password_hash;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, sid, type, type_desc, is_disabled, create_date, modify_date, default_database_name, default_language_name, credential_id, is_policy_checked, is_expiration_checked, password_hash };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            sid = (Byte[])items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            is_disabled = (bool?)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            default_database_name = (string)items[8];
            default_language_name = (string)items[9];
            credential_id = (int?)items[10];
            is_policy_checked = (bool?)items[11];
            is_expiration_checked = (bool?)items[12];
            password_hash = (Byte[])items[13];
        }
    }

    [SqlView("sys", "configurations")]
    public partial class configurations : SqlViewProxy
    {
        [SqlColumn("configuration_id", 0), SqlTypeFacets("int", false)]
        public int configuration_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 70)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 2), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        [SqlColumn("minimum", 3), SqlTypeFacets("sql_variant", true)]
        public Object minimum
        {
            get;
            set;
        }

        [SqlColumn("maximum", 4), SqlTypeFacets("sql_variant", true)]
        public Object maximum
        {
            get;
            set;
        }

        [SqlColumn("value_in_use", 5), SqlTypeFacets("sql_variant", true)]
        public Object value_in_use
        {
            get;
            set;
        }

        [SqlColumn("description", 6), SqlTypeFacets("nvarchar", false, 510)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("is_dynamic", 7), SqlTypeFacets("bit", false)]
        public bool is_dynamic
        {
            get;
            set;
        }

        [SqlColumn("is_advanced", 8), SqlTypeFacets("bit", false)]
        public bool is_advanced
        {
            get;
            set;
        }

        public configurations()
        {
        }

        public configurations(object[] items)
        {
            configuration_id = (int)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            minimum = (Object)items[3];
            maximum = (Object)items[4];
            value_in_use = (Object)items[5];
            description = (string)items[6];
            is_dynamic = (bool)items[7];
            is_advanced = (bool)items[8];
        }

        public configurations(int configuration_id, string name, Object value, Object minimum, Object maximum, Object value_in_use, string description, bool is_dynamic, bool is_advanced)
        {
            this.configuration_id = configuration_id;
            this.name = name;
            this.value = value;
            this.minimum = minimum;
            this.maximum = maximum;
            this.value_in_use = value_in_use;
            this.description = description;
            this.is_dynamic = is_dynamic;
            this.is_advanced = is_advanced;
        }

        public override object[] GetItemArray()
        {
            return new object[] { configuration_id, name, value, minimum, maximum, value_in_use, description, is_dynamic, is_advanced };
        }

        public override void SetItemArray(object[] items)
        {
            configuration_id = (int)items[0];
            name = (string)items[1];
            value = (Object)items[2];
            minimum = (Object)items[3];
            maximum = (Object)items[4];
            value_in_use = (Object)items[5];
            description = (string)items[6];
            is_dynamic = (bool)items[7];
            is_advanced = (bool)items[8];
        }
    }

    [SqlView("sys", "messages")]
    public partial class messages : SqlViewProxy
    {
        [SqlColumn("message_id", 0), SqlTypeFacets("int", false)]
        public int message_id
        {
            get;
            set;
        }

        [SqlColumn("language_id", 1), SqlTypeFacets("smallint", false)]
        public short language_id
        {
            get;
            set;
        }

        [SqlColumn("severity", 2), SqlTypeFacets("tinyint", true)]
        public byte? severity
        {
            get;
            set;
        }

        [SqlColumn("is_event_logged", 3), SqlTypeFacets("bit", false)]
        public bool is_event_logged
        {
            get;
            set;
        }

        [SqlColumn("text", 4), SqlTypeFacets("nvarchar", false, 4096)]
        public string text
        {
            get;
            set;
        }

        public messages()
        {
        }

        public messages(object[] items)
        {
            message_id = (int)items[0];
            language_id = (short)items[1];
            severity = (byte?)items[2];
            is_event_logged = (bool)items[3];
            text = (string)items[4];
        }

        public messages(int message_id, short language_id, byte? severity, bool is_event_logged, string text)
        {
            this.message_id = message_id;
            this.language_id = language_id;
            this.severity = severity;
            this.is_event_logged = is_event_logged;
            this.text = text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { message_id, language_id, severity, is_event_logged, text };
        }

        public override void SetItemArray(object[] items)
        {
            message_id = (int)items[0];
            language_id = (short)items[1];
            severity = (byte?)items[2];
            is_event_logged = (bool)items[3];
            text = (string)items[4];
        }
    }

    [SqlView("sys", "endpoints")]
    public partial class endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        public endpoints()
        {
        }

        public endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
        }

        public endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
        }
    }

    [SqlView("sys", "http_endpoints")]
    public partial class http_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("site", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string site
        {
            get;
            set;
        }

        [SqlColumn("url_path", 11), SqlTypeFacets("nvarchar", true, 8000)]
        public string url_path
        {
            get;
            set;
        }

        [SqlColumn("is_clear_port_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_clear_port_enabled
        {
            get;
            set;
        }

        [SqlColumn("clear_port", 13), SqlTypeFacets("int", false)]
        public int clear_port
        {
            get;
            set;
        }

        [SqlColumn("is_ssl_port_enabled", 14), SqlTypeFacets("bit", false)]
        public bool is_ssl_port_enabled
        {
            get;
            set;
        }

        [SqlColumn("ssl_port", 15), SqlTypeFacets("int", false)]
        public int ssl_port
        {
            get;
            set;
        }

        [SqlColumn("is_anonymous_enabled", 16), SqlTypeFacets("bit", false)]
        public bool is_anonymous_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_basic_auth_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_basic_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_digest_auth_enabled", 18), SqlTypeFacets("bit", false)]
        public bool is_digest_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_kerberos_auth_enabled", 19), SqlTypeFacets("bit", false)]
        public bool is_kerberos_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_ntlm_auth_enabled", 20), SqlTypeFacets("bit", false)]
        public bool is_ntlm_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_integrated_auth_enabled", 21), SqlTypeFacets("bit", false)]
        public bool is_integrated_auth_enabled
        {
            get;
            set;
        }

        [SqlColumn("authorization_realm", 22), SqlTypeFacets("nvarchar", true, 256)]
        public string authorization_realm
        {
            get;
            set;
        }

        [SqlColumn("default_logon_domain", 23), SqlTypeFacets("nvarchar", true, 256)]
        public string default_logon_domain
        {
            get;
            set;
        }

        [SqlColumn("is_compression_enabled", 24), SqlTypeFacets("bit", false)]
        public bool is_compression_enabled
        {
            get;
            set;
        }

        public http_endpoints()
        {
        }

        public http_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            site = (string)items[10];
            url_path = (string)items[11];
            is_clear_port_enabled = (bool)items[12];
            clear_port = (int)items[13];
            is_ssl_port_enabled = (bool)items[14];
            ssl_port = (int)items[15];
            is_anonymous_enabled = (bool)items[16];
            is_basic_auth_enabled = (bool)items[17];
            is_digest_auth_enabled = (bool)items[18];
            is_kerberos_auth_enabled = (bool)items[19];
            is_ntlm_auth_enabled = (bool)items[20];
            is_integrated_auth_enabled = (bool)items[21];
            authorization_realm = (string)items[22];
            default_logon_domain = (string)items[23];
            is_compression_enabled = (bool)items[24];
        }

        public http_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, string site, string url_path, bool is_clear_port_enabled, int clear_port, bool is_ssl_port_enabled, int ssl_port, bool is_anonymous_enabled, bool is_basic_auth_enabled, bool is_digest_auth_enabled, bool is_kerberos_auth_enabled, bool is_ntlm_auth_enabled, bool is_integrated_auth_enabled, string authorization_realm, string default_logon_domain, bool is_compression_enabled)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.site = site;
            this.url_path = url_path;
            this.is_clear_port_enabled = is_clear_port_enabled;
            this.clear_port = clear_port;
            this.is_ssl_port_enabled = is_ssl_port_enabled;
            this.ssl_port = ssl_port;
            this.is_anonymous_enabled = is_anonymous_enabled;
            this.is_basic_auth_enabled = is_basic_auth_enabled;
            this.is_digest_auth_enabled = is_digest_auth_enabled;
            this.is_kerberos_auth_enabled = is_kerberos_auth_enabled;
            this.is_ntlm_auth_enabled = is_ntlm_auth_enabled;
            this.is_integrated_auth_enabled = is_integrated_auth_enabled;
            this.authorization_realm = authorization_realm;
            this.default_logon_domain = default_logon_domain;
            this.is_compression_enabled = is_compression_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, site, url_path, is_clear_port_enabled, clear_port, is_ssl_port_enabled, ssl_port, is_anonymous_enabled, is_basic_auth_enabled, is_digest_auth_enabled, is_kerberos_auth_enabled, is_ntlm_auth_enabled, is_integrated_auth_enabled, authorization_realm, default_logon_domain, is_compression_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            site = (string)items[10];
            url_path = (string)items[11];
            is_clear_port_enabled = (bool)items[12];
            clear_port = (int)items[13];
            is_ssl_port_enabled = (bool)items[14];
            ssl_port = (int)items[15];
            is_anonymous_enabled = (bool)items[16];
            is_basic_auth_enabled = (bool)items[17];
            is_digest_auth_enabled = (bool)items[18];
            is_kerberos_auth_enabled = (bool)items[19];
            is_ntlm_auth_enabled = (bool)items[20];
            is_integrated_auth_enabled = (bool)items[21];
            authorization_realm = (string)items[22];
            default_logon_domain = (string)items[23];
            is_compression_enabled = (bool)items[24];
        }
    }

    [SqlView("sys", "tcp_endpoints")]
    public partial class tcp_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("port", 10), SqlTypeFacets("int", false)]
        public int port
        {
            get;
            set;
        }

        [SqlColumn("is_dynamic_port", 11), SqlTypeFacets("bit", false)]
        public bool is_dynamic_port
        {
            get;
            set;
        }

        [SqlColumn("ip_address", 12), SqlTypeFacets("varchar", true, 45)]
        public string ip_address
        {
            get;
            set;
        }

        public tcp_endpoints()
        {
        }

        public tcp_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            port = (int)items[10];
            is_dynamic_port = (bool)items[11];
            ip_address = (string)items[12];
        }

        public tcp_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, int port, bool is_dynamic_port, string ip_address)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.port = port;
            this.is_dynamic_port = is_dynamic_port;
            this.ip_address = ip_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, port, is_dynamic_port, ip_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            port = (int)items[10];
            is_dynamic_port = (bool)items[11];
            ip_address = (string)items[12];
        }
    }

    [SqlView("sys", "via_endpoints")]
    public partial class via_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("discriminator", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string discriminator
        {
            get;
            set;
        }

        public via_endpoints()
        {
        }

        public via_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            discriminator = (string)items[10];
        }

        public via_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, string discriminator)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.discriminator = discriminator;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, discriminator };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            discriminator = (string)items[10];
        }
    }

    [SqlView("sys", "soap_endpoints")]
    public partial class soap_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("is_sql_language_enabled", 10), SqlTypeFacets("bit", false)]
        public bool is_sql_language_enabled
        {
            get;
            set;
        }

        [SqlColumn("wsdl_generator_procedure", 11), SqlTypeFacets("nvarchar", true, 1552)]
        public string wsdl_generator_procedure
        {
            get;
            set;
        }

        [SqlColumn("default_database", 12), SqlTypeFacets("sysname", true)]
        public string default_database
        {
            get;
            set;
        }

        [SqlColumn("default_namespace", 13), SqlTypeFacets("nvarchar", true, 768)]
        public string default_namespace
        {
            get;
            set;
        }

        [SqlColumn("default_result_schema", 14), SqlTypeFacets("tinyint", true)]
        public byte? default_result_schema
        {
            get;
            set;
        }

        [SqlColumn("default_result_schema_desc", 15), SqlTypeFacets("nvarchar", true, 120)]
        public string default_result_schema_desc
        {
            get;
            set;
        }

        [SqlColumn("is_xml_charset_enforced", 16), SqlTypeFacets("bit", false)]
        public bool is_xml_charset_enforced
        {
            get;
            set;
        }

        [SqlColumn("is_session_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_session_enabled
        {
            get;
            set;
        }

        [SqlColumn("session_timeout", 18), SqlTypeFacets("int", false)]
        public int session_timeout
        {
            get;
            set;
        }

        [SqlColumn("login_type", 19), SqlTypeFacets("nvarchar", true, 120)]
        public string login_type
        {
            get;
            set;
        }

        [SqlColumn("header_limit", 20), SqlTypeFacets("int", false)]
        public int header_limit
        {
            get;
            set;
        }

        public soap_endpoints()
        {
        }

        public soap_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_sql_language_enabled = (bool)items[10];
            wsdl_generator_procedure = (string)items[11];
            default_database = (string)items[12];
            default_namespace = (string)items[13];
            default_result_schema = (byte?)items[14];
            default_result_schema_desc = (string)items[15];
            is_xml_charset_enforced = (bool)items[16];
            is_session_enabled = (bool)items[17];
            session_timeout = (int)items[18];
            login_type = (string)items[19];
            header_limit = (int)items[20];
        }

        public soap_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, bool is_sql_language_enabled, string wsdl_generator_procedure, string default_database, string default_namespace, byte? default_result_schema, string default_result_schema_desc, bool is_xml_charset_enforced, bool is_session_enabled, int session_timeout, string login_type, int header_limit)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.is_sql_language_enabled = is_sql_language_enabled;
            this.wsdl_generator_procedure = wsdl_generator_procedure;
            this.default_database = default_database;
            this.default_namespace = default_namespace;
            this.default_result_schema = default_result_schema;
            this.default_result_schema_desc = default_result_schema_desc;
            this.is_xml_charset_enforced = is_xml_charset_enforced;
            this.is_session_enabled = is_session_enabled;
            this.session_timeout = session_timeout;
            this.login_type = login_type;
            this.header_limit = header_limit;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, is_sql_language_enabled, wsdl_generator_procedure, default_database, default_namespace, default_result_schema, default_result_schema_desc, is_xml_charset_enforced, is_session_enabled, session_timeout, login_type, header_limit };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_sql_language_enabled = (bool)items[10];
            wsdl_generator_procedure = (string)items[11];
            default_database = (string)items[12];
            default_namespace = (string)items[13];
            default_result_schema = (byte?)items[14];
            default_result_schema_desc = (string)items[15];
            is_xml_charset_enforced = (bool)items[16];
            is_session_enabled = (bool)items[17];
            session_timeout = (int)items[18];
            login_type = (string)items[19];
            header_limit = (int)items[20];
        }
    }

    [SqlView("sys", "service_broker_endpoints")]
    public partial class service_broker_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("is_message_forwarding_enabled", 10), SqlTypeFacets("bit", false)]
        public bool is_message_forwarding_enabled
        {
            get;
            set;
        }

        [SqlColumn("message_forwarding_size", 11), SqlTypeFacets("int", false)]
        public int message_forwarding_size
        {
            get;
            set;
        }

        [SqlColumn("connection_auth", 12), SqlTypeFacets("tinyint", false)]
        public byte connection_auth
        {
            get;
            set;
        }

        [SqlColumn("connection_auth_desc", 13), SqlTypeFacets("nvarchar", true, 120)]
        public string connection_auth_desc
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 14), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 15), SqlTypeFacets("tinyint", false)]
        public byte encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 16), SqlTypeFacets("nvarchar", true, 120)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        public service_broker_endpoints()
        {
        }

        public service_broker_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_message_forwarding_enabled = (bool)items[10];
            message_forwarding_size = (int)items[11];
            connection_auth = (byte)items[12];
            connection_auth_desc = (string)items[13];
            certificate_id = (int)items[14];
            encryption_algorithm = (byte)items[15];
            encryption_algorithm_desc = (string)items[16];
        }

        public service_broker_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, bool is_message_forwarding_enabled, int message_forwarding_size, byte connection_auth, string connection_auth_desc, int certificate_id, byte encryption_algorithm, string encryption_algorithm_desc)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.is_message_forwarding_enabled = is_message_forwarding_enabled;
            this.message_forwarding_size = message_forwarding_size;
            this.connection_auth = connection_auth;
            this.connection_auth_desc = connection_auth_desc;
            this.certificate_id = certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, is_message_forwarding_enabled, message_forwarding_size, connection_auth, connection_auth_desc, certificate_id, encryption_algorithm, encryption_algorithm_desc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            is_message_forwarding_enabled = (bool)items[10];
            message_forwarding_size = (int)items[11];
            connection_auth = (byte)items[12];
            connection_auth_desc = (string)items[13];
            certificate_id = (int)items[14];
            encryption_algorithm = (byte)items[15];
            encryption_algorithm_desc = (string)items[16];
        }
    }

    [SqlView("sys", "endpoint_webmethods")]
    public partial class endpoint_webmethods : SqlViewProxy
    {
        [SqlColumn("endpoint_id", 0), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("namespace", 1), SqlTypeFacets("nvarchar", true, 768)]
        public string @namespace
        {
            get;
            set;
        }

        [SqlColumn("method_alias", 2), SqlTypeFacets("nvarchar", false, 128)]
        public string method_alias
        {
            get;
            set;
        }

        [SqlColumn("object_name", 3), SqlTypeFacets("nvarchar", true, 1552)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("result_schema", 4), SqlTypeFacets("tinyint", true)]
        public byte? result_schema
        {
            get;
            set;
        }

        [SqlColumn("result_schema_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string result_schema_desc
        {
            get;
            set;
        }

        [SqlColumn("result_format", 6), SqlTypeFacets("tinyint", true)]
        public byte? result_format
        {
            get;
            set;
        }

        [SqlColumn("result_format_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string result_format_desc
        {
            get;
            set;
        }

        public endpoint_webmethods()
        {
        }

        public endpoint_webmethods(object[] items)
        {
            endpoint_id = (int)items[0];
            @namespace = (string)items[1];
            method_alias = (string)items[2];
            object_name = (string)items[3];
            result_schema = (byte?)items[4];
            result_schema_desc = (string)items[5];
            result_format = (byte?)items[6];
            result_format_desc = (string)items[7];
        }

        public endpoint_webmethods(int endpoint_id, string @namespace, string method_alias, string object_name, byte? result_schema, string result_schema_desc, byte? result_format, string result_format_desc)
        {
            this.endpoint_id = endpoint_id;
            this.@namespace = @namespace;
            this.method_alias = method_alias;
            this.object_name = object_name;
            this.result_schema = result_schema;
            this.result_schema_desc = result_schema_desc;
            this.result_format = result_format;
            this.result_format_desc = result_format_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { endpoint_id, @namespace, method_alias, object_name, result_schema, result_schema_desc, result_format, result_format_desc };
        }

        public override void SetItemArray(object[] items)
        {
            endpoint_id = (int)items[0];
            @namespace = (string)items[1];
            method_alias = (string)items[2];
            object_name = (string)items[3];
            result_schema = (byte?)items[4];
            result_schema_desc = (string)items[5];
            result_format = (byte?)items[6];
            result_format_desc = (string)items[7];
        }
    }

    [SqlView("sys", "server_event_notifications")]
    public partial class server_event_notifications : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("service_name", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("creator_sid", 9), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] creator_sid
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 10), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public server_event_notifications()
        {
        }

        public server_event_notifications(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }

        public server_event_notifications(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, DateTime create_date, DateTime modify_date, string service_name, string broker_instance, Byte[] creator_sid, int? principal_id)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.service_name = service_name;
            this.broker_instance = broker_instance;
            this.creator_sid = creator_sid;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, create_date, modify_date, service_name, broker_instance, creator_sid, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }
    }

    [SqlView("sys", "server_events")]
    public partial class server_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false, 256)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 4), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public server_events()
        {
        }

        public server_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }

        public server_events(int object_id, int type, string type_desc, bool? is_trigger_event, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }
    }

    [SqlView("sys", "database_mirroring_endpoints")]
    public partial class database_mirroring_endpoints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 1), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("protocol", 3), SqlTypeFacets("tinyint", false)]
        public byte protocol
        {
            get;
            set;
        }

        [SqlColumn("protocol_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string protocol_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_admin_endpoint", 9), SqlTypeFacets("bit", false)]
        public bool is_admin_endpoint
        {
            get;
            set;
        }

        [SqlColumn("role", 10), SqlTypeFacets("tinyint", true)]
        public byte? role
        {
            get;
            set;
        }

        [SqlColumn("role_desc", 11), SqlTypeFacets("nvarchar", true, 120)]
        public string role_desc
        {
            get;
            set;
        }

        [SqlColumn("is_encryption_enabled", 12), SqlTypeFacets("bit", false)]
        public bool is_encryption_enabled
        {
            get;
            set;
        }

        [SqlColumn("connection_auth", 13), SqlTypeFacets("tinyint", false)]
        public byte connection_auth
        {
            get;
            set;
        }

        [SqlColumn("connection_auth_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string connection_auth_desc
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 15), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 16), SqlTypeFacets("tinyint", false)]
        public byte encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 17), SqlTypeFacets("nvarchar", true, 120)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        public database_mirroring_endpoints()
        {
        }

        public database_mirroring_endpoints(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            role = (byte?)items[10];
            role_desc = (string)items[11];
            is_encryption_enabled = (bool)items[12];
            connection_auth = (byte)items[13];
            connection_auth_desc = (string)items[14];
            certificate_id = (int)items[15];
            encryption_algorithm = (byte)items[16];
            encryption_algorithm_desc = (string)items[17];
        }

        public database_mirroring_endpoints(string name, int endpoint_id, int? principal_id, byte protocol, string protocol_desc, byte type, string type_desc, byte? state, string state_desc, bool is_admin_endpoint, byte? role, string role_desc, bool is_encryption_enabled, byte connection_auth, string connection_auth_desc, int certificate_id, byte encryption_algorithm, string encryption_algorithm_desc)
        {
            this.name = name;
            this.endpoint_id = endpoint_id;
            this.principal_id = principal_id;
            this.protocol = protocol;
            this.protocol_desc = protocol_desc;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.is_admin_endpoint = is_admin_endpoint;
            this.role = role;
            this.role_desc = role_desc;
            this.is_encryption_enabled = is_encryption_enabled;
            this.connection_auth = connection_auth;
            this.connection_auth_desc = connection_auth_desc;
            this.certificate_id = certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, endpoint_id, principal_id, protocol, protocol_desc, type, type_desc, state, state_desc, is_admin_endpoint, role, role_desc, is_encryption_enabled, connection_auth, connection_auth_desc, certificate_id, encryption_algorithm, encryption_algorithm_desc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            endpoint_id = (int)items[1];
            principal_id = (int?)items[2];
            protocol = (byte)items[3];
            protocol_desc = (string)items[4];
            type = (byte)items[5];
            type_desc = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            is_admin_endpoint = (bool)items[9];
            role = (byte?)items[10];
            role_desc = (string)items[11];
            is_encryption_enabled = (bool)items[12];
            connection_auth = (byte)items[13];
            connection_auth_desc = (string)items[14];
            certificate_id = (int)items[15];
            encryption_algorithm = (byte)items[16];
            encryption_algorithm_desc = (string)items[17];
        }
    }

    [SqlView("sys", "server_triggers")]
    public partial class server_triggers : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 10), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        public server_triggers()
        {
        }

        public server_triggers(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
        }

        public server_triggers(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_disabled)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_disabled = is_disabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_disabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
        }
    }

    [SqlView("sys", "server_trigger_events")]
    public partial class server_trigger_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false, 256)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("is_first", 4), SqlTypeFacets("bit", true)]
        public bool? is_first
        {
            get;
            set;
        }

        [SqlColumn("is_last", 5), SqlTypeFacets("bit", true)]
        public bool? is_last
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 6), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public server_trigger_events()
        {
        }

        public server_trigger_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            is_first = (bool?)items[4];
            is_last = (bool?)items[5];
            event_group_type = (int?)items[6];
            event_group_type_desc = (string)items[7];
        }

        public server_trigger_events(int object_id, int type, string type_desc, bool? is_trigger_event, bool? is_first, bool? is_last, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.is_first = is_first;
            this.is_last = is_last;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, is_first, is_last, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            is_first = (bool?)items[4];
            is_last = (bool?)items[5];
            event_group_type = (int?)items[6];
            event_group_type_desc = (string)items[7];
        }
    }

    [SqlView("sys", "server_sql_modules")]
    public partial class server_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 4), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public server_sql_modules()
        {
        }

        public server_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            execute_as_principal_id = (int?)items[4];
        }

        public server_sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            execute_as_principal_id = (int?)items[4];
        }
    }

    [SqlView("sys", "server_assembly_modules")]
    public partial class server_assembly_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("assembly_method", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string assembly_method
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 4), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public server_assembly_modules()
        {
        }

        public server_assembly_modules(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            execute_as_principal_id = (int?)items[4];
        }

        public server_assembly_modules(int object_id, int assembly_id, string assembly_class, string assembly_method, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.assembly_method = assembly_method;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id, assembly_class, assembly_method, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            execute_as_principal_id = (int?)items[4];
        }
    }

    [SqlView("sys", "credentials")]
    public partial class credentials : SqlViewProxy
    {
        [SqlColumn("credential_id", 0), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("credential_identity", 2), SqlTypeFacets("nvarchar", true, 8000)]
        public string credential_identity
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("target_type", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string target_type
        {
            get;
            set;
        }

        [SqlColumn("target_id", 6), SqlTypeFacets("int", true)]
        public int? target_id
        {
            get;
            set;
        }

        public credentials()
        {
        }

        public credentials(object[] items)
        {
            credential_id = (int)items[0];
            name = (string)items[1];
            credential_identity = (string)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            target_type = (string)items[5];
            target_id = (int?)items[6];
        }

        public credentials(int credential_id, string name, string credential_identity, DateTime create_date, DateTime modify_date, string target_type, int? target_id)
        {
            this.credential_id = credential_id;
            this.name = name;
            this.credential_identity = credential_identity;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.target_type = target_type;
            this.target_id = target_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { credential_id, name, credential_identity, create_date, modify_date, target_type, target_id };
        }

        public override void SetItemArray(object[] items)
        {
            credential_id = (int)items[0];
            name = (string)items[1];
            credential_identity = (string)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            target_type = (string)items[5];
            target_id = (int?)items[6];
        }
    }

    [SqlView("sys", "database_mirroring")]
    public partial class database_mirroring : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("mirroring_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? mirroring_guid
        {
            get;
            set;
        }

        [SqlColumn("mirroring_state", 2), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_state
        {
            get;
            set;
        }

        [SqlColumn("mirroring_state_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string mirroring_state_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role", 4), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_role
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string mirroring_role_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role_sequence", 6), SqlTypeFacets("int", true)]
        public int? mirroring_role_sequence
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_level", 7), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_safety_level
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_level_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string mirroring_safety_level_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_safety_sequence", 9), SqlTypeFacets("int", true)]
        public int? mirroring_safety_sequence
        {
            get;
            set;
        }

        [SqlColumn("mirroring_partner_name", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string mirroring_partner_name
        {
            get;
            set;
        }

        [SqlColumn("mirroring_partner_instance", 11), SqlTypeFacets("nvarchar", true, 256)]
        public string mirroring_partner_instance
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_name", 12), SqlTypeFacets("nvarchar", true, 256)]
        public string mirroring_witness_name
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_state", 13), SqlTypeFacets("tinyint", true)]
        public byte? mirroring_witness_state
        {
            get;
            set;
        }

        [SqlColumn("mirroring_witness_state_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string mirroring_witness_state_desc
        {
            get;
            set;
        }

        [SqlColumn("mirroring_failover_lsn", 15), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? mirroring_failover_lsn
        {
            get;
            set;
        }

        [SqlColumn("mirroring_connection_timeout", 16), SqlTypeFacets("int", true)]
        public int? mirroring_connection_timeout
        {
            get;
            set;
        }

        [SqlColumn("mirroring_redo_queue", 17), SqlTypeFacets("int", true)]
        public int? mirroring_redo_queue
        {
            get;
            set;
        }

        [SqlColumn("mirroring_redo_queue_type", 18), SqlTypeFacets("nvarchar", true, 120)]
        public string mirroring_redo_queue_type
        {
            get;
            set;
        }

        [SqlColumn("mirroring_end_of_log_lsn", 19), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? mirroring_end_of_log_lsn
        {
            get;
            set;
        }

        [SqlColumn("mirroring_replication_lsn", 20), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? mirroring_replication_lsn
        {
            get;
            set;
        }

        public database_mirroring()
        {
        }

        public database_mirroring(object[] items)
        {
            database_id = (int)items[0];
            mirroring_guid = (Guid?)items[1];
            mirroring_state = (byte?)items[2];
            mirroring_state_desc = (string)items[3];
            mirroring_role = (byte?)items[4];
            mirroring_role_desc = (string)items[5];
            mirroring_role_sequence = (int?)items[6];
            mirroring_safety_level = (byte?)items[7];
            mirroring_safety_level_desc = (string)items[8];
            mirroring_safety_sequence = (int?)items[9];
            mirroring_partner_name = (string)items[10];
            mirroring_partner_instance = (string)items[11];
            mirroring_witness_name = (string)items[12];
            mirroring_witness_state = (byte?)items[13];
            mirroring_witness_state_desc = (string)items[14];
            mirroring_failover_lsn = (decimal?)items[15];
            mirroring_connection_timeout = (int?)items[16];
            mirroring_redo_queue = (int?)items[17];
            mirroring_redo_queue_type = (string)items[18];
            mirroring_end_of_log_lsn = (decimal?)items[19];
            mirroring_replication_lsn = (decimal?)items[20];
        }

        public database_mirroring(int database_id, Guid? mirroring_guid, byte? mirroring_state, string mirroring_state_desc, byte? mirroring_role, string mirroring_role_desc, int? mirroring_role_sequence, byte? mirroring_safety_level, string mirroring_safety_level_desc, int? mirroring_safety_sequence, string mirroring_partner_name, string mirroring_partner_instance, string mirroring_witness_name, byte? mirroring_witness_state, string mirroring_witness_state_desc, decimal? mirroring_failover_lsn, int? mirroring_connection_timeout, int? mirroring_redo_queue, string mirroring_redo_queue_type, decimal? mirroring_end_of_log_lsn, decimal? mirroring_replication_lsn)
        {
            this.database_id = database_id;
            this.mirroring_guid = mirroring_guid;
            this.mirroring_state = mirroring_state;
            this.mirroring_state_desc = mirroring_state_desc;
            this.mirroring_role = mirroring_role;
            this.mirroring_role_desc = mirroring_role_desc;
            this.mirroring_role_sequence = mirroring_role_sequence;
            this.mirroring_safety_level = mirroring_safety_level;
            this.mirroring_safety_level_desc = mirroring_safety_level_desc;
            this.mirroring_safety_sequence = mirroring_safety_sequence;
            this.mirroring_partner_name = mirroring_partner_name;
            this.mirroring_partner_instance = mirroring_partner_instance;
            this.mirroring_witness_name = mirroring_witness_name;
            this.mirroring_witness_state = mirroring_witness_state;
            this.mirroring_witness_state_desc = mirroring_witness_state_desc;
            this.mirroring_failover_lsn = mirroring_failover_lsn;
            this.mirroring_connection_timeout = mirroring_connection_timeout;
            this.mirroring_redo_queue = mirroring_redo_queue;
            this.mirroring_redo_queue_type = mirroring_redo_queue_type;
            this.mirroring_end_of_log_lsn = mirroring_end_of_log_lsn;
            this.mirroring_replication_lsn = mirroring_replication_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, mirroring_guid, mirroring_state, mirroring_state_desc, mirroring_role, mirroring_role_desc, mirroring_role_sequence, mirroring_safety_level, mirroring_safety_level_desc, mirroring_safety_sequence, mirroring_partner_name, mirroring_partner_instance, mirroring_witness_name, mirroring_witness_state, mirroring_witness_state_desc, mirroring_failover_lsn, mirroring_connection_timeout, mirroring_redo_queue, mirroring_redo_queue_type, mirroring_end_of_log_lsn, mirroring_replication_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            mirroring_guid = (Guid?)items[1];
            mirroring_state = (byte?)items[2];
            mirroring_state_desc = (string)items[3];
            mirroring_role = (byte?)items[4];
            mirroring_role_desc = (string)items[5];
            mirroring_role_sequence = (int?)items[6];
            mirroring_safety_level = (byte?)items[7];
            mirroring_safety_level_desc = (string)items[8];
            mirroring_safety_sequence = (int?)items[9];
            mirroring_partner_name = (string)items[10];
            mirroring_partner_instance = (string)items[11];
            mirroring_witness_name = (string)items[12];
            mirroring_witness_state = (byte?)items[13];
            mirroring_witness_state_desc = (string)items[14];
            mirroring_failover_lsn = (decimal?)items[15];
            mirroring_connection_timeout = (int?)items[16];
            mirroring_redo_queue = (int?)items[17];
            mirroring_redo_queue_type = (string)items[18];
            mirroring_end_of_log_lsn = (decimal?)items[19];
            mirroring_replication_lsn = (decimal?)items[20];
        }
    }

    [SqlView("sys", "database_recovery_status")]
    public partial class database_recovery_status : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("database_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? database_guid
        {
            get;
            set;
        }

        [SqlColumn("family_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? family_guid
        {
            get;
            set;
        }

        [SqlColumn("last_log_backup_lsn", 3), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_log_backup_lsn
        {
            get;
            set;
        }

        [SqlColumn("recovery_fork_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? recovery_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("first_recovery_fork_guid", 5), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? first_recovery_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("fork_point_lsn", 6), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? fork_point_lsn
        {
            get;
            set;
        }

        public database_recovery_status()
        {
        }

        public database_recovery_status(object[] items)
        {
            database_id = (int)items[0];
            database_guid = (Guid?)items[1];
            family_guid = (Guid?)items[2];
            last_log_backup_lsn = (decimal?)items[3];
            recovery_fork_guid = (Guid?)items[4];
            first_recovery_fork_guid = (Guid?)items[5];
            fork_point_lsn = (decimal?)items[6];
        }

        public database_recovery_status(int database_id, Guid? database_guid, Guid? family_guid, decimal? last_log_backup_lsn, Guid? recovery_fork_guid, Guid? first_recovery_fork_guid, decimal? fork_point_lsn)
        {
            this.database_id = database_id;
            this.database_guid = database_guid;
            this.family_guid = family_guid;
            this.last_log_backup_lsn = last_log_backup_lsn;
            this.recovery_fork_guid = recovery_fork_guid;
            this.first_recovery_fork_guid = first_recovery_fork_guid;
            this.fork_point_lsn = fork_point_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, database_guid, family_guid, last_log_backup_lsn, recovery_fork_guid, first_recovery_fork_guid, fork_point_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            database_guid = (Guid?)items[1];
            family_guid = (Guid?)items[2];
            last_log_backup_lsn = (decimal?)items[3];
            recovery_fork_guid = (Guid?)items[4];
            first_recovery_fork_guid = (Guid?)items[5];
            fork_point_lsn = (decimal?)items[6];
        }
    }

    [SqlView("sys", "master_key_passwords")]
    public partial class master_key_passwords : SqlViewProxy
    {
        [SqlColumn("credential_id", 0), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        [SqlColumn("family_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? family_guid
        {
            get;
            set;
        }

        public master_key_passwords()
        {
        }

        public master_key_passwords(object[] items)
        {
            credential_id = (int)items[0];
            family_guid = (Guid?)items[1];
        }

        public master_key_passwords(int credential_id, Guid? family_guid)
        {
            this.credential_id = credential_id;
            this.family_guid = family_guid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { credential_id, family_guid };
        }

        public override void SetItemArray(object[] items)
        {
            credential_id = (int)items[0];
            family_guid = (Guid?)items[1];
        }
    }

    [SqlView("sys", "server_event_session_actions")]
    public partial class server_event_session_actions : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("event_id", 1), SqlTypeFacets("int", false)]
        public int event_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string module
        {
            get;
            set;
        }

        public server_event_session_actions()
        {
        }

        public server_event_session_actions(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }

        public server_event_session_actions(int event_session_id, int event_id, string name, string package, string module)
        {
            this.event_session_id = event_session_id;
            this.event_id = event_id;
            this.name = name;
            this.package = package;
            this.module = module;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, event_id, name, package, module };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }
    }

    [SqlView("sys", "server_event_session_events")]
    public partial class server_event_session_events : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("event_id", 1), SqlTypeFacets("int", false)]
        public int event_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string module
        {
            get;
            set;
        }

        [SqlColumn("predicate", 5), SqlTypeFacets("nvarchar", true, 6000)]
        public string predicate
        {
            get;
            set;
        }

        [SqlColumn("predicate_xml", 6), SqlTypeFacets("nvarchar", true, -1)]
        public string predicate_xml
        {
            get;
            set;
        }

        public server_event_session_events()
        {
        }

        public server_event_session_events(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
            predicate = (string)items[5];
            predicate_xml = (string)items[6];
        }

        public server_event_session_events(int event_session_id, int event_id, string name, string package, string module, string predicate, string predicate_xml)
        {
            this.event_session_id = event_session_id;
            this.event_id = event_id;
            this.name = name;
            this.package = package;
            this.module = module;
            this.predicate = predicate;
            this.predicate_xml = predicate_xml;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, event_id, name, package, module, predicate, predicate_xml };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            event_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
            predicate = (string)items[5];
            predicate_xml = (string)items[6];
        }
    }

    [SqlView("sys", "server_event_session_fields")]
    public partial class server_event_session_fields : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public server_event_session_fields()
        {
        }

        public server_event_session_fields(object[] items)
        {
            event_session_id = (int)items[0];
            object_id = (int)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }

        public server_event_session_fields(int event_session_id, int object_id, string name, Object value)
        {
            this.event_session_id = event_session_id;
            this.object_id = object_id;
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, object_id, name, value };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            object_id = (int)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }
    }

    [SqlView("sys", "server_event_session_targets")]
    public partial class server_event_session_targets : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("target_id", 1), SqlTypeFacets("int", false)]
        public int target_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("package", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string package
        {
            get;
            set;
        }

        [SqlColumn("module", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string module
        {
            get;
            set;
        }

        public server_event_session_targets()
        {
        }

        public server_event_session_targets(object[] items)
        {
            event_session_id = (int)items[0];
            target_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }

        public server_event_session_targets(int event_session_id, int target_id, string name, string package, string module)
        {
            this.event_session_id = event_session_id;
            this.target_id = target_id;
            this.name = name;
            this.package = package;
            this.module = module;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, target_id, name, package, module };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            target_id = (int)items[1];
            name = (string)items[2];
            package = (string)items[3];
            module = (string)items[4];
        }
    }

    [SqlView("sys", "server_event_sessions")]
    public partial class server_event_sessions : SqlViewProxy
    {
        [SqlColumn("event_session_id", 0), SqlTypeFacets("int", false)]
        public int event_session_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("event_retention_mode", 2), SqlTypeFacets("char", true, 1)]
        public string event_retention_mode
        {
            get;
            set;
        }

        [SqlColumn("event_retention_mode_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string event_retention_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("max_dispatch_latency", 4), SqlTypeFacets("int", true)]
        public int? max_dispatch_latency
        {
            get;
            set;
        }

        [SqlColumn("max_memory", 5), SqlTypeFacets("int", true)]
        public int? max_memory
        {
            get;
            set;
        }

        [SqlColumn("max_event_size", 6), SqlTypeFacets("int", true)]
        public int? max_event_size
        {
            get;
            set;
        }

        [SqlColumn("memory_partition_mode", 7), SqlTypeFacets("char", true, 1)]
        public string memory_partition_mode
        {
            get;
            set;
        }

        [SqlColumn("memory_partition_mode_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string memory_partition_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("track_causality", 9), SqlTypeFacets("bit", true)]
        public bool? track_causality
        {
            get;
            set;
        }

        [SqlColumn("startup_state", 10), SqlTypeFacets("bit", true)]
        public bool? startup_state
        {
            get;
            set;
        }

        public server_event_sessions()
        {
        }

        public server_event_sessions(object[] items)
        {
            event_session_id = (int)items[0];
            name = (string)items[1];
            event_retention_mode = (string)items[2];
            event_retention_mode_desc = (string)items[3];
            max_dispatch_latency = (int?)items[4];
            max_memory = (int?)items[5];
            max_event_size = (int?)items[6];
            memory_partition_mode = (string)items[7];
            memory_partition_mode_desc = (string)items[8];
            track_causality = (bool?)items[9];
            startup_state = (bool?)items[10];
        }

        public server_event_sessions(int event_session_id, string name, string event_retention_mode, string event_retention_mode_desc, int? max_dispatch_latency, int? max_memory, int? max_event_size, string memory_partition_mode, string memory_partition_mode_desc, bool? track_causality, bool? startup_state)
        {
            this.event_session_id = event_session_id;
            this.name = name;
            this.event_retention_mode = event_retention_mode;
            this.event_retention_mode_desc = event_retention_mode_desc;
            this.max_dispatch_latency = max_dispatch_latency;
            this.max_memory = max_memory;
            this.max_event_size = max_event_size;
            this.memory_partition_mode = memory_partition_mode;
            this.memory_partition_mode_desc = memory_partition_mode_desc;
            this.track_causality = track_causality;
            this.startup_state = startup_state;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_id, name, event_retention_mode, event_retention_mode_desc, max_dispatch_latency, max_memory, max_event_size, memory_partition_mode, memory_partition_mode_desc, track_causality, startup_state };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_id = (int)items[0];
            name = (string)items[1];
            event_retention_mode = (string)items[2];
            event_retention_mode_desc = (string)items[3];
            max_dispatch_latency = (int?)items[4];
            max_memory = (int?)items[5];
            max_event_size = (int?)items[6];
            memory_partition_mode = (string)items[7];
            memory_partition_mode_desc = (string)items[8];
            track_causality = (bool?)items[9];
            startup_state = (bool?)items[10];
        }
    }

    [SqlView("sys", "resource_governor_configuration")]
    public partial class resource_governor_configuration : SqlViewProxy
    {
        [SqlColumn("classifier_function_id", 0), SqlTypeFacets("int", false)]
        public int classifier_function_id
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 1), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        [SqlColumn("max_outstanding_io_per_volume", 2), SqlTypeFacets("int", false)]
        public int max_outstanding_io_per_volume
        {
            get;
            set;
        }

        public resource_governor_configuration()
        {
        }

        public resource_governor_configuration(object[] items)
        {
            classifier_function_id = (int)items[0];
            is_enabled = (bool)items[1];
            max_outstanding_io_per_volume = (int)items[2];
        }

        public resource_governor_configuration(int classifier_function_id, bool is_enabled, int max_outstanding_io_per_volume)
        {
            this.classifier_function_id = classifier_function_id;
            this.is_enabled = is_enabled;
            this.max_outstanding_io_per_volume = max_outstanding_io_per_volume;
        }

        public override object[] GetItemArray()
        {
            return new object[] { classifier_function_id, is_enabled, max_outstanding_io_per_volume };
        }

        public override void SetItemArray(object[] items)
        {
            classifier_function_id = (int)items[0];
            is_enabled = (bool)items[1];
            max_outstanding_io_per_volume = (int)items[2];
        }
    }

    [SqlView("sys", "resource_governor_workload_groups")]
    public partial class resource_governor_workload_groups : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("int", false)]
        public int group_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("importance", 2), SqlTypeFacets("sysname", false)]
        public string importance
        {
            get;
            set;
        }

        [SqlColumn("request_max_memory_grant_percent", 3), SqlTypeFacets("int", false)]
        public int request_max_memory_grant_percent
        {
            get;
            set;
        }

        [SqlColumn("request_max_cpu_time_sec", 4), SqlTypeFacets("int", false)]
        public int request_max_cpu_time_sec
        {
            get;
            set;
        }

        [SqlColumn("request_memory_grant_timeout_sec", 5), SqlTypeFacets("int", false)]
        public int request_memory_grant_timeout_sec
        {
            get;
            set;
        }

        [SqlColumn("max_dop", 6), SqlTypeFacets("int", false)]
        public int max_dop
        {
            get;
            set;
        }

        [SqlColumn("group_max_requests", 7), SqlTypeFacets("int", false)]
        public int group_max_requests
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 8), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        public resource_governor_workload_groups()
        {
        }

        public resource_governor_workload_groups(object[] items)
        {
            group_id = (int)items[0];
            name = (string)items[1];
            importance = (string)items[2];
            request_max_memory_grant_percent = (int)items[3];
            request_max_cpu_time_sec = (int)items[4];
            request_memory_grant_timeout_sec = (int)items[5];
            max_dop = (int)items[6];
            group_max_requests = (int)items[7];
            pool_id = (int)items[8];
        }

        public resource_governor_workload_groups(int group_id, string name, string importance, int request_max_memory_grant_percent, int request_max_cpu_time_sec, int request_memory_grant_timeout_sec, int max_dop, int group_max_requests, int pool_id)
        {
            this.group_id = group_id;
            this.name = name;
            this.importance = importance;
            this.request_max_memory_grant_percent = request_max_memory_grant_percent;
            this.request_max_cpu_time_sec = request_max_cpu_time_sec;
            this.request_memory_grant_timeout_sec = request_memory_grant_timeout_sec;
            this.max_dop = max_dop;
            this.group_max_requests = group_max_requests;
            this.pool_id = pool_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, name, importance, request_max_memory_grant_percent, request_max_cpu_time_sec, request_memory_grant_timeout_sec, max_dop, group_max_requests, pool_id };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (int)items[0];
            name = (string)items[1];
            importance = (string)items[2];
            request_max_memory_grant_percent = (int)items[3];
            request_max_cpu_time_sec = (int)items[4];
            request_memory_grant_timeout_sec = (int)items[5];
            max_dop = (int)items[6];
            group_max_requests = (int)items[7];
            pool_id = (int)items[8];
        }
    }

    [SqlView("sys", "resource_governor_resource_pools")]
    public partial class resource_governor_resource_pools : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("min_cpu_percent", 2), SqlTypeFacets("int", false)]
        public int min_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("max_cpu_percent", 3), SqlTypeFacets("int", false)]
        public int max_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("min_memory_percent", 4), SqlTypeFacets("int", false)]
        public int min_memory_percent
        {
            get;
            set;
        }

        [SqlColumn("max_memory_percent", 5), SqlTypeFacets("int", false)]
        public int max_memory_percent
        {
            get;
            set;
        }

        [SqlColumn("cap_cpu_percent", 6), SqlTypeFacets("int", false)]
        public int cap_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("min_iops_per_volume", 7), SqlTypeFacets("int", false)]
        public int min_iops_per_volume
        {
            get;
            set;
        }

        [SqlColumn("max_iops_per_volume", 8), SqlTypeFacets("int", false)]
        public int max_iops_per_volume
        {
            get;
            set;
        }

        public resource_governor_resource_pools()
        {
        }

        public resource_governor_resource_pools(object[] items)
        {
            pool_id = (int)items[0];
            name = (string)items[1];
            min_cpu_percent = (int)items[2];
            max_cpu_percent = (int)items[3];
            min_memory_percent = (int)items[4];
            max_memory_percent = (int)items[5];
            cap_cpu_percent = (int)items[6];
            min_iops_per_volume = (int)items[7];
            max_iops_per_volume = (int)items[8];
        }

        public resource_governor_resource_pools(int pool_id, string name, int min_cpu_percent, int max_cpu_percent, int min_memory_percent, int max_memory_percent, int cap_cpu_percent, int min_iops_per_volume, int max_iops_per_volume)
        {
            this.pool_id = pool_id;
            this.name = name;
            this.min_cpu_percent = min_cpu_percent;
            this.max_cpu_percent = max_cpu_percent;
            this.min_memory_percent = min_memory_percent;
            this.max_memory_percent = max_memory_percent;
            this.cap_cpu_percent = cap_cpu_percent;
            this.min_iops_per_volume = min_iops_per_volume;
            this.max_iops_per_volume = max_iops_per_volume;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, name, min_cpu_percent, max_cpu_percent, min_memory_percent, max_memory_percent, cap_cpu_percent, min_iops_per_volume, max_iops_per_volume };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            name = (string)items[1];
            min_cpu_percent = (int)items[2];
            max_cpu_percent = (int)items[3];
            min_memory_percent = (int)items[4];
            max_memory_percent = (int)items[5];
            cap_cpu_percent = (int)items[6];
            min_iops_per_volume = (int)items[7];
            max_iops_per_volume = (int)items[8];
        }
    }

    [SqlView("sys", "cryptographic_providers")]
    public partial class cryptographic_providers : SqlViewProxy
    {
        [SqlColumn("provider_id", 0), SqlTypeFacets("int", false)]
        public int provider_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? guid
        {
            get;
            set;
        }

        [SqlColumn("version", 3), SqlTypeFacets("nvarchar", true, 48)]
        public string version
        {
            get;
            set;
        }

        [SqlColumn("dll_path", 4), SqlTypeFacets("nvarchar", true, 1040)]
        public string dll_path
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 5), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        public cryptographic_providers()
        {
        }

        public cryptographic_providers(object[] items)
        {
            provider_id = (int)items[0];
            name = (string)items[1];
            guid = (Guid?)items[2];
            version = (string)items[3];
            dll_path = (string)items[4];
            is_enabled = (bool)items[5];
        }

        public cryptographic_providers(int provider_id, string name, Guid? guid, string version, string dll_path, bool is_enabled)
        {
            this.provider_id = provider_id;
            this.name = name;
            this.guid = guid;
            this.version = version;
            this.dll_path = dll_path;
            this.is_enabled = is_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { provider_id, name, guid, version, dll_path, is_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            provider_id = (int)items[0];
            name = (string)items[1];
            guid = (Guid?)items[2];
            version = (string)items[3];
            dll_path = (string)items[4];
            is_enabled = (bool)items[5];
        }
    }

    [SqlView("sys", "server_principal_credentials")]
    public partial class server_principal_credentials : SqlViewProxy
    {
        [SqlColumn("principal_id", 0), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("credential_id", 1), SqlTypeFacets("int", false)]
        public int credential_id
        {
            get;
            set;
        }

        public server_principal_credentials()
        {
        }

        public server_principal_credentials(object[] items)
        {
            principal_id = (int)items[0];
            credential_id = (int)items[1];
        }

        public server_principal_credentials(int principal_id, int credential_id)
        {
            this.principal_id = principal_id;
            this.credential_id = credential_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { principal_id, credential_id };
        }

        public override void SetItemArray(object[] items)
        {
            principal_id = (int)items[0];
            credential_id = (int)items[1];
        }
    }

    [SqlView("sys", "change_tracking_databases")]
    public partial class change_tracking_databases : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("is_auto_cleanup_on", 1), SqlTypeFacets("tinyint", true)]
        public byte? is_auto_cleanup_on
        {
            get;
            set;
        }

        [SqlColumn("retention_period", 2), SqlTypeFacets("int", true)]
        public int? retention_period
        {
            get;
            set;
        }

        [SqlColumn("retention_period_units", 3), SqlTypeFacets("tinyint", true)]
        public byte? retention_period_units
        {
            get;
            set;
        }

        [SqlColumn("retention_period_units_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string retention_period_units_desc
        {
            get;
            set;
        }

        [SqlColumn("max_cleanup_version", 5), SqlTypeFacets("bigint", true)]
        public long? max_cleanup_version
        {
            get;
            set;
        }

        public change_tracking_databases()
        {
        }

        public change_tracking_databases(object[] items)
        {
            database_id = (int)items[0];
            is_auto_cleanup_on = (byte?)items[1];
            retention_period = (int?)items[2];
            retention_period_units = (byte?)items[3];
            retention_period_units_desc = (string)items[4];
            max_cleanup_version = (long?)items[5];
        }

        public change_tracking_databases(int database_id, byte? is_auto_cleanup_on, int? retention_period, byte? retention_period_units, string retention_period_units_desc, long? max_cleanup_version)
        {
            this.database_id = database_id;
            this.is_auto_cleanup_on = is_auto_cleanup_on;
            this.retention_period = retention_period;
            this.retention_period_units = retention_period_units;
            this.retention_period_units_desc = retention_period_units_desc;
            this.max_cleanup_version = max_cleanup_version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, is_auto_cleanup_on, retention_period, retention_period_units, retention_period_units_desc, max_cleanup_version };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            is_auto_cleanup_on = (byte?)items[1];
            retention_period = (int?)items[2];
            retention_period_units = (byte?)items[3];
            retention_period_units_desc = (string)items[4];
            max_cleanup_version = (long?)items[5];
        }
    }

    [SqlView("sys", "server_audits")]
    public partial class server_audits : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 5), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("on_failure", 8), SqlTypeFacets("tinyint", true)]
        public byte? on_failure
        {
            get;
            set;
        }

        [SqlColumn("on_failure_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string on_failure_desc
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 10), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        [SqlColumn("queue_delay", 11), SqlTypeFacets("int", true)]
        public int? queue_delay
        {
            get;
            set;
        }

        [SqlColumn("predicate", 12), SqlTypeFacets("nvarchar", true, 6000)]
        public string predicate
        {
            get;
            set;
        }

        public server_audits()
        {
        }

        public server_audits(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
        }

        public server_audits(int audit_id, string name, Guid? audit_guid, DateTime create_date, DateTime modify_date, int? principal_id, string type, string type_desc, byte? on_failure, string on_failure_desc, bool? is_state_enabled, int? queue_delay, string predicate)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.audit_guid = audit_guid;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.on_failure = on_failure;
            this.on_failure_desc = on_failure_desc;
            this.is_state_enabled = is_state_enabled;
            this.queue_delay = queue_delay;
            this.predicate = predicate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, audit_guid, create_date, modify_date, principal_id, type, type_desc, on_failure, on_failure_desc, is_state_enabled, queue_delay, predicate };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
        }
    }

    [SqlView("sys", "server_file_audits")]
    public partial class server_file_audits : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("create_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 5), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("on_failure", 8), SqlTypeFacets("tinyint", true)]
        public byte? on_failure
        {
            get;
            set;
        }

        [SqlColumn("on_failure_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string on_failure_desc
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 10), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        [SqlColumn("queue_delay", 11), SqlTypeFacets("int", true)]
        public int? queue_delay
        {
            get;
            set;
        }

        [SqlColumn("predicate", 12), SqlTypeFacets("nvarchar", true, 6000)]
        public string predicate
        {
            get;
            set;
        }

        [SqlColumn("max_file_size", 13), SqlTypeFacets("bigint", true)]
        public long? max_file_size
        {
            get;
            set;
        }

        [SqlColumn("max_rollover_files", 14), SqlTypeFacets("int", true)]
        public int? max_rollover_files
        {
            get;
            set;
        }

        [SqlColumn("max_files", 15), SqlTypeFacets("int", true)]
        public int? max_files
        {
            get;
            set;
        }

        [SqlColumn("reserve_disk_space", 16), SqlTypeFacets("bit", true)]
        public bool? reserve_disk_space
        {
            get;
            set;
        }

        [SqlColumn("log_file_path", 17), SqlTypeFacets("nvarchar", true, 520)]
        public string log_file_path
        {
            get;
            set;
        }

        [SqlColumn("log_file_name", 18), SqlTypeFacets("nvarchar", true, 520)]
        public string log_file_name
        {
            get;
            set;
        }

        public server_file_audits()
        {
        }

        public server_file_audits(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
            max_file_size = (long?)items[13];
            max_rollover_files = (int?)items[14];
            max_files = (int?)items[15];
            reserve_disk_space = (bool?)items[16];
            log_file_path = (string)items[17];
            log_file_name = (string)items[18];
        }

        public server_file_audits(int audit_id, string name, Guid? audit_guid, DateTime create_date, DateTime modify_date, int? principal_id, string type, string type_desc, byte? on_failure, string on_failure_desc, bool? is_state_enabled, int? queue_delay, string predicate, long? max_file_size, int? max_rollover_files, int? max_files, bool? reserve_disk_space, string log_file_path, string log_file_name)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.audit_guid = audit_guid;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.on_failure = on_failure;
            this.on_failure_desc = on_failure_desc;
            this.is_state_enabled = is_state_enabled;
            this.queue_delay = queue_delay;
            this.predicate = predicate;
            this.max_file_size = max_file_size;
            this.max_rollover_files = max_rollover_files;
            this.max_files = max_files;
            this.reserve_disk_space = reserve_disk_space;
            this.log_file_path = log_file_path;
            this.log_file_name = log_file_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, audit_guid, create_date, modify_date, principal_id, type, type_desc, on_failure, on_failure_desc, is_state_enabled, queue_delay, predicate, max_file_size, max_rollover_files, max_files, reserve_disk_space, log_file_path, log_file_name };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            audit_guid = (Guid?)items[2];
            create_date = (DateTime)items[3];
            modify_date = (DateTime)items[4];
            principal_id = (int?)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            on_failure = (byte?)items[8];
            on_failure_desc = (string)items[9];
            is_state_enabled = (bool?)items[10];
            queue_delay = (int?)items[11];
            predicate = (string)items[12];
            max_file_size = (long?)items[13];
            max_rollover_files = (int?)items[14];
            max_files = (int?)items[15];
            reserve_disk_space = (bool?)items[16];
            log_file_path = (string)items[17];
            log_file_name = (string)items[18];
        }
    }

    [SqlView("sys", "server_audit_specifications")]
    public partial class server_audit_specifications : SqlViewProxy
    {
        [SqlColumn("server_specification_id", 0), SqlTypeFacets("int", false)]
        public int server_specification_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        public server_audit_specifications()
        {
        }

        public server_audit_specifications(object[] items)
        {
            server_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }

        public server_audit_specifications(int server_specification_id, string name, DateTime create_date, DateTime modify_date, Guid? audit_guid, bool? is_state_enabled)
        {
            this.server_specification_id = server_specification_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.audit_guid = audit_guid;
            this.is_state_enabled = is_state_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_specification_id, name, create_date, modify_date, audit_guid, is_state_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            server_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }
    }

    [SqlView("sys", "server_audit_specification_details")]
    public partial class server_audit_specification_details : SqlViewProxy
    {
        [SqlColumn("server_specification_id", 0), SqlTypeFacets("int", false)]
        public int server_specification_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_id", 1), SqlTypeFacets("char", false, 4)]
        public string audit_action_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_name", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string audit_action_name
        {
            get;
            set;
        }

        [SqlColumn("class", 3), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 5), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 6), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("audited_principal_id", 7), SqlTypeFacets("int", false)]
        public int audited_principal_id
        {
            get;
            set;
        }

        [SqlColumn("audited_result", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string audited_result
        {
            get;
            set;
        }

        [SqlColumn("is_group", 9), SqlTypeFacets("bit", true)]
        public bool? is_group
        {
            get;
            set;
        }

        public server_audit_specification_details()
        {
        }

        public server_audit_specification_details(object[] items)
        {
            server_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }

        public server_audit_specification_details(int server_specification_id, string audit_action_id, string audit_action_name, byte @class, string class_desc, int major_id, int minor_id, int audited_principal_id, string audited_result, bool? is_group)
        {
            this.server_specification_id = server_specification_id;
            this.audit_action_id = audit_action_id;
            this.audit_action_name = audit_action_name;
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.audited_principal_id = audited_principal_id;
            this.audited_result = audited_result;
            this.is_group = is_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { server_specification_id, audit_action_id, audit_action_name, @class, class_desc, major_id, minor_id, audited_principal_id, audited_result, is_group };
        }

        public override void SetItemArray(object[] items)
        {
            server_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }
    }

    [SqlView("sys", "fulltext_semantic_language_statistics_database")]
    public partial class fulltext_semantic_language_statistics_database : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("register_date", 1), SqlTypeFacets("datetime", false)]
        public DateTime register_date
        {
            get;
            set;
        }

        [SqlColumn("registered_by", 2), SqlTypeFacets("int", false)]
        public int registered_by
        {
            get;
            set;
        }

        [SqlColumn("version", 3), SqlTypeFacets("nvarchar", false, 256)]
        public string version
        {
            get;
            set;
        }

        public fulltext_semantic_language_statistics_database()
        {
        }

        public fulltext_semantic_language_statistics_database(object[] items)
        {
            database_id = (int)items[0];
            register_date = (DateTime)items[1];
            registered_by = (int)items[2];
            version = (string)items[3];
        }

        public fulltext_semantic_language_statistics_database(int database_id, DateTime register_date, int registered_by, string version)
        {
            this.database_id = database_id;
            this.register_date = register_date;
            this.registered_by = registered_by;
            this.version = version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, register_date, registered_by, version };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            register_date = (DateTime)items[1];
            registered_by = (int)items[2];
            version = (string)items[3];
        }
    }

    [SqlView("sys", "database_filestream_options")]
    public partial class database_filestream_options : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("non_transacted_access", 1), SqlTypeFacets("tinyint", false)]
        public byte non_transacted_access
        {
            get;
            set;
        }

        [SqlColumn("non_transacted_access_desc", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string non_transacted_access_desc
        {
            get;
            set;
        }

        [SqlColumn("directory_name", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string directory_name
        {
            get;
            set;
        }

        public database_filestream_options()
        {
        }

        public database_filestream_options(object[] items)
        {
            database_id = (int)items[0];
            non_transacted_access = (byte)items[1];
            non_transacted_access_desc = (string)items[2];
            directory_name = (string)items[3];
        }

        public database_filestream_options(int database_id, byte non_transacted_access, string non_transacted_access_desc, string directory_name)
        {
            this.database_id = database_id;
            this.non_transacted_access = non_transacted_access;
            this.non_transacted_access_desc = non_transacted_access_desc;
            this.directory_name = directory_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, non_transacted_access, non_transacted_access_desc, directory_name };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            non_transacted_access = (byte)items[1];
            non_transacted_access_desc = (string)items[2];
            directory_name = (string)items[3];
        }
    }

    [SqlView("sys", "resource_governor_resource_pool_affinity")]
    public partial class resource_governor_resource_pool_affinity : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 1), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        [SqlColumn("scheduler_mask", 2), SqlTypeFacets("bigint", false)]
        public long scheduler_mask
        {
            get;
            set;
        }

        public resource_governor_resource_pool_affinity()
        {
        }

        public resource_governor_resource_pool_affinity(object[] items)
        {
            pool_id = (int)items[0];
            processor_group = (short)items[1];
            scheduler_mask = (long)items[2];
        }

        public resource_governor_resource_pool_affinity(int pool_id, short processor_group, long scheduler_mask)
        {
            this.pool_id = pool_id;
            this.processor_group = processor_group;
            this.scheduler_mask = scheduler_mask;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, processor_group, scheduler_mask };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            processor_group = (short)items[1];
            scheduler_mask = (long)items[2];
        }
    }

    [SqlView("sys", "external_data_sources")]
    public partial class external_data_sources : SqlViewProxy
    {
        [SqlColumn("data_source_id", 0), SqlTypeFacets("int", false)]
        public int data_source_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("location", 2), SqlTypeFacets("nvarchar", false, 8000)]
        public string location
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", false, 510)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("type", 4), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("job_tracker_location", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string job_tracker_location
        {
            get;
            set;
        }

        public external_data_sources()
        {
        }

        public external_data_sources(object[] items)
        {
            data_source_id = (int)items[0];
            name = (string)items[1];
            location = (string)items[2];
            type_desc = (string)items[3];
            type = (byte)items[4];
            job_tracker_location = (string)items[5];
        }

        public external_data_sources(int data_source_id, string name, string location, string type_desc, byte type, string job_tracker_location)
        {
            this.data_source_id = data_source_id;
            this.name = name;
            this.location = location;
            this.type_desc = type_desc;
            this.type = type;
            this.job_tracker_location = job_tracker_location;
        }

        public override object[] GetItemArray()
        {
            return new object[] { data_source_id, name, location, type_desc, type, job_tracker_location };
        }

        public override void SetItemArray(object[] items)
        {
            data_source_id = (int)items[0];
            name = (string)items[1];
            location = (string)items[2];
            type_desc = (string)items[3];
            type = (byte)items[4];
            job_tracker_location = (string)items[5];
        }
    }

    [SqlView("sys", "external_file_formats")]
    public partial class external_file_formats : SqlViewProxy
    {
        [SqlColumn("file_format_id", 0), SqlTypeFacets("int", false)]
        public int file_format_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("format_type", 2), SqlTypeFacets("nvarchar", false, 200)]
        public string format_type
        {
            get;
            set;
        }

        [SqlColumn("field_terminator", 3), SqlTypeFacets("nvarchar", true, 20)]
        public string field_terminator
        {
            get;
            set;
        }

        [SqlColumn("string_delimiter", 4), SqlTypeFacets("nvarchar", true, 20)]
        public string string_delimiter
        {
            get;
            set;
        }

        [SqlColumn("date_format", 5), SqlTypeFacets("nvarchar", true, 100)]
        public string date_format
        {
            get;
            set;
        }

        [SqlColumn("use_type_default", 6), SqlTypeFacets("bit", true)]
        public bool? use_type_default
        {
            get;
            set;
        }

        [SqlColumn("serde_method", 7), SqlTypeFacets("nvarchar", true, 510)]
        public string serde_method
        {
            get;
            set;
        }

        [SqlColumn("row_terminator", 8), SqlTypeFacets("nvarchar", true, 20)]
        public string row_terminator
        {
            get;
            set;
        }

        [SqlColumn("encoding", 9), SqlTypeFacets("nvarchar", true, 20)]
        public string encoding
        {
            get;
            set;
        }

        [SqlColumn("data_compression", 10), SqlTypeFacets("nvarchar", true, 510)]
        public string data_compression
        {
            get;
            set;
        }

        public external_file_formats()
        {
        }

        public external_file_formats(object[] items)
        {
            file_format_id = (int)items[0];
            name = (string)items[1];
            format_type = (string)items[2];
            field_terminator = (string)items[3];
            string_delimiter = (string)items[4];
            date_format = (string)items[5];
            use_type_default = (bool?)items[6];
            serde_method = (string)items[7];
            row_terminator = (string)items[8];
            encoding = (string)items[9];
            data_compression = (string)items[10];
        }

        public external_file_formats(int file_format_id, string name, string format_type, string field_terminator, string string_delimiter, string date_format, bool? use_type_default, string serde_method, string row_terminator, string encoding, string data_compression)
        {
            this.file_format_id = file_format_id;
            this.name = name;
            this.format_type = format_type;
            this.field_terminator = field_terminator;
            this.string_delimiter = string_delimiter;
            this.date_format = date_format;
            this.use_type_default = use_type_default;
            this.serde_method = serde_method;
            this.row_terminator = row_terminator;
            this.encoding = encoding;
            this.data_compression = data_compression;
        }

        public override object[] GetItemArray()
        {
            return new object[] { file_format_id, name, format_type, field_terminator, string_delimiter, date_format, use_type_default, serde_method, row_terminator, encoding, data_compression };
        }

        public override void SetItemArray(object[] items)
        {
            file_format_id = (int)items[0];
            name = (string)items[1];
            format_type = (string)items[2];
            field_terminator = (string)items[3];
            string_delimiter = (string)items[4];
            date_format = (string)items[5];
            use_type_default = (bool?)items[6];
            serde_method = (string)items[7];
            row_terminator = (string)items[8];
            encoding = (string)items[9];
            data_compression = (string)items[10];
        }
    }

    [SqlView("sys", "objects")]
    public partial class objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        public objects()
        {
        }

        public objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
        }

        public objects(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
        }
    }

    [SqlView("sys", "tables")]
    public partial class tables : SqlViewProxy
    {
        [SqlColumn("large_value_types_out_of_row", 23), SqlTypeFacets("bit", true)]
        public bool? large_value_types_out_of_row
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 24), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        [SqlColumn("lock_escalation", 25), SqlTypeFacets("tinyint", true)]
        public byte? lock_escalation
        {
            get;
            set;
        }

        [SqlColumn("lock_escalation_desc", 26), SqlTypeFacets("nvarchar", true, 120)]
        public string lock_escalation_desc
        {
            get;
            set;
        }

        [SqlColumn("is_filetable", 27), SqlTypeFacets("bit", true)]
        public bool? is_filetable
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized", 28), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized
        {
            get;
            set;
        }

        [SqlColumn("durability", 29), SqlTypeFacets("tinyint", true)]
        public byte? durability
        {
            get;
            set;
        }

        [SqlColumn("durability_desc", 30), SqlTypeFacets("nvarchar", true, 120)]
        public string durability_desc
        {
            get;
            set;
        }

        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("lob_data_space_id", 12), SqlTypeFacets("int", false)]
        public int lob_data_space_id
        {
            get;
            set;
        }

        [SqlColumn("filestream_data_space_id", 13), SqlTypeFacets("int", true)]
        public int? filestream_data_space_id
        {
            get;
            set;
        }

        [SqlColumn("max_column_id_used", 14), SqlTypeFacets("int", false)]
        public int max_column_id_used
        {
            get;
            set;
        }

        [SqlColumn("lock_on_bulk_load", 15), SqlTypeFacets("bit", false)]
        public bool lock_on_bulk_load
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 16), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 18), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 19), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_sync_tran_subscribed", 20), SqlTypeFacets("bit", true)]
        public bool? is_sync_tran_subscribed
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 21), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("text_in_row_limit", 22), SqlTypeFacets("int", true)]
        public int? text_in_row_limit
        {
            get;
            set;
        }

        public tables()
        {
        }

        public tables(object[] items)
        {
            large_value_types_out_of_row = (bool?)items[0];
            is_tracked_by_cdc = (bool?)items[1];
            lock_escalation = (byte?)items[2];
            lock_escalation_desc = (string)items[3];
            is_filetable = (bool?)items[4];
            is_memory_optimized = (bool?)items[5];
            durability = (byte?)items[6];
            durability_desc = (string)items[7];
            name = (string)items[8];
            object_id = (int)items[9];
            principal_id = (int?)items[10];
            schema_id = (int)items[11];
            parent_object_id = (int)items[12];
            type = (string)items[13];
            type_desc = (string)items[14];
            create_date = (DateTime)items[15];
            modify_date = (DateTime)items[16];
            is_ms_shipped = (bool)items[17];
            is_published = (bool)items[18];
            is_schema_published = (bool)items[19];
            lob_data_space_id = (int)items[20];
            filestream_data_space_id = (int?)items[21];
            max_column_id_used = (int)items[22];
            lock_on_bulk_load = (bool)items[23];
            uses_ansi_nulls = (bool?)items[24];
            is_replicated = (bool?)items[25];
            has_replication_filter = (bool?)items[26];
            is_merge_published = (bool?)items[27];
            is_sync_tran_subscribed = (bool?)items[28];
            has_unchecked_assembly_data = (bool)items[29];
            text_in_row_limit = (int?)items[30];
        }

        public tables(bool? large_value_types_out_of_row, bool? is_tracked_by_cdc, byte? lock_escalation, string lock_escalation_desc, bool? is_filetable, bool? is_memory_optimized, byte? durability, string durability_desc, string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int lob_data_space_id, int? filestream_data_space_id, int max_column_id_used, bool lock_on_bulk_load, bool? uses_ansi_nulls, bool? is_replicated, bool? has_replication_filter, bool? is_merge_published, bool? is_sync_tran_subscribed, bool has_unchecked_assembly_data, int? text_in_row_limit)
        {
            this.large_value_types_out_of_row = large_value_types_out_of_row;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
            this.lock_escalation = lock_escalation;
            this.lock_escalation_desc = lock_escalation_desc;
            this.is_filetable = is_filetable;
            this.is_memory_optimized = is_memory_optimized;
            this.durability = durability;
            this.durability_desc = durability_desc;
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.lob_data_space_id = lob_data_space_id;
            this.filestream_data_space_id = filestream_data_space_id;
            this.max_column_id_used = max_column_id_used;
            this.lock_on_bulk_load = lock_on_bulk_load;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.is_merge_published = is_merge_published;
            this.is_sync_tran_subscribed = is_sync_tran_subscribed;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.text_in_row_limit = text_in_row_limit;
        }

        public override object[] GetItemArray()
        {
            return new object[] { large_value_types_out_of_row, is_tracked_by_cdc, lock_escalation, lock_escalation_desc, is_filetable, is_memory_optimized, durability, durability_desc, name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, lob_data_space_id, filestream_data_space_id, max_column_id_used, lock_on_bulk_load, uses_ansi_nulls, is_replicated, has_replication_filter, is_merge_published, is_sync_tran_subscribed, has_unchecked_assembly_data, text_in_row_limit };
        }

        public override void SetItemArray(object[] items)
        {
            large_value_types_out_of_row = (bool?)items[0];
            is_tracked_by_cdc = (bool?)items[1];
            lock_escalation = (byte?)items[2];
            lock_escalation_desc = (string)items[3];
            is_filetable = (bool?)items[4];
            is_memory_optimized = (bool?)items[5];
            durability = (byte?)items[6];
            durability_desc = (string)items[7];
            name = (string)items[8];
            object_id = (int)items[9];
            principal_id = (int?)items[10];
            schema_id = (int)items[11];
            parent_object_id = (int)items[12];
            type = (string)items[13];
            type_desc = (string)items[14];
            create_date = (DateTime)items[15];
            modify_date = (DateTime)items[16];
            is_ms_shipped = (bool)items[17];
            is_published = (bool)items[18];
            is_schema_published = (bool)items[19];
            lob_data_space_id = (int)items[20];
            filestream_data_space_id = (int?)items[21];
            max_column_id_used = (int)items[22];
            lock_on_bulk_load = (bool)items[23];
            uses_ansi_nulls = (bool?)items[24];
            is_replicated = (bool?)items[25];
            has_replication_filter = (bool?)items[26];
            is_merge_published = (bool?)items[27];
            is_sync_tran_subscribed = (bool?)items[28];
            has_unchecked_assembly_data = (bool)items[29];
            text_in_row_limit = (int?)items[30];
        }
    }

    [SqlView("sys", "views")]
    public partial class views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", true)]
        public bool? has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", false)]
        public bool has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", false)]
        public bool with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", true)]
        public bool? is_tracked_by_cdc
        {
            get;
            set;
        }

        public views()
        {
        }

        public views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }

        public views(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool? is_replicated, bool? has_replication_filter, bool has_opaque_metadata, bool has_unchecked_assembly_data, bool with_check_option, bool is_date_correlation_view, bool? is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_replicated = (bool?)items[12];
            has_replication_filter = (bool?)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool?)items[18];
        }
    }

    [SqlView("sys", "extended_procedures")]
    public partial class extended_procedures : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("dll_name", 12), SqlTypeFacets("nvarchar", true, 520)]
        public string dll_name
        {
            get;
            set;
        }

        public extended_procedures()
        {
        }

        public extended_procedures(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            dll_name = (string)items[12];
        }

        public extended_procedures(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, string dll_name)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.dll_name = dll_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, dll_name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            dll_name = (string)items[12];
        }
    }

    [SqlView("sys", "system_objects")]
    public partial class system_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", true)]
        public int? parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        public system_objects()
        {
        }

        public system_objects(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }

        public system_objects(string name, int object_id, int? principal_id, int schema_id, int? parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
        }
    }

    [SqlView("sys", "system_views")]
    public partial class system_views : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", true)]
        public int? parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 12), SqlTypeFacets("bit", false)]
        public bool is_replicated
        {
            get;
            set;
        }

        [SqlColumn("has_replication_filter", 13), SqlTypeFacets("bit", false)]
        public bool has_replication_filter
        {
            get;
            set;
        }

        [SqlColumn("has_opaque_metadata", 14), SqlTypeFacets("bit", false)]
        public bool has_opaque_metadata
        {
            get;
            set;
        }

        [SqlColumn("has_unchecked_assembly_data", 15), SqlTypeFacets("bit", false)]
        public bool has_unchecked_assembly_data
        {
            get;
            set;
        }

        [SqlColumn("with_check_option", 16), SqlTypeFacets("bit", false)]
        public bool with_check_option
        {
            get;
            set;
        }

        [SqlColumn("is_date_correlation_view", 17), SqlTypeFacets("bit", false)]
        public bool is_date_correlation_view
        {
            get;
            set;
        }

        [SqlColumn("is_tracked_by_cdc", 18), SqlTypeFacets("bit", false)]
        public bool is_tracked_by_cdc
        {
            get;
            set;
        }

        public system_views()
        {
        }

        public system_views(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool)items[12];
            has_replication_filter = (bool)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool)items[18];
        }

        public system_views(string name, int object_id, int? principal_id, int schema_id, int? parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published, bool is_replicated, bool has_replication_filter, bool has_opaque_metadata, bool has_unchecked_assembly_data, bool with_check_option, bool is_date_correlation_view, bool is_tracked_by_cdc)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_replicated = is_replicated;
            this.has_replication_filter = has_replication_filter;
            this.has_opaque_metadata = has_opaque_metadata;
            this.has_unchecked_assembly_data = has_unchecked_assembly_data;
            this.with_check_option = with_check_option;
            this.is_date_correlation_view = is_date_correlation_view;
            this.is_tracked_by_cdc = is_tracked_by_cdc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_replicated, has_replication_filter, has_opaque_metadata, has_unchecked_assembly_data, with_check_option, is_date_correlation_view, is_tracked_by_cdc };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool?)items[9];
            is_published = (bool?)items[10];
            is_schema_published = (bool?)items[11];
            is_replicated = (bool)items[12];
            has_replication_filter = (bool)items[13];
            has_opaque_metadata = (bool)items[14];
            has_unchecked_assembly_data = (bool)items[15];
            with_check_option = (bool)items[16];
            is_date_correlation_view = (bool)items[17];
            is_tracked_by_cdc = (bool)items[18];
        }
    }

    [SqlView("sys", "columns")]
    public partial class columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", true)]
        public bool? is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", true)]
        public bool? is_column_set
        {
            get;
            set;
        }

        public columns()
        {
        }

        public columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
        }

        public columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool? is_sparse, bool? is_column_set)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_computed = (bool)items[13];
            is_filestream = (bool)items[14];
            is_replicated = (bool?)items[15];
            is_non_sql_subscribed = (bool?)items[16];
            is_merge_published = (bool?)items[17];
            is_dts_replicated = (bool?)items[18];
            is_xml_document = (bool)items[19];
            xml_collection_id = (int)items[20];
            default_object_id = (int)items[21];
            rule_object_id = (int)items[22];
            is_sparse = (bool?)items[23];
            is_column_set = (bool?)items[24];
        }
    }

    [SqlView("sys", "system_columns")]
    public partial class system_columns : SqlViewProxy
    {
        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 13), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 14), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 15), SqlTypeFacets("bit", false)]
        public bool is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 16), SqlTypeFacets("bit", false)]
        public bool is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 17), SqlTypeFacets("bit", false)]
        public bool is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 18), SqlTypeFacets("bit", false)]
        public bool is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 20), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 21), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 22), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 23), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 24), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        public system_columns()
        {
        }

        public system_columns(object[] items)
        {
            scale = (byte)items[0];
            collation_name = (string)items[1];
            is_nullable = (bool?)items[2];
            is_ansi_padded = (bool)items[3];
            is_rowguidcol = (bool)items[4];
            is_identity = (bool)items[5];
            is_computed = (bool)items[6];
            is_filestream = (bool)items[7];
            is_replicated = (bool)items[8];
            is_non_sql_subscribed = (bool)items[9];
            is_merge_published = (bool)items[10];
            is_dts_replicated = (bool)items[11];
            is_xml_document = (bool)items[12];
            xml_collection_id = (int)items[13];
            default_object_id = (int)items[14];
            rule_object_id = (int)items[15];
            is_sparse = (bool)items[16];
            is_column_set = (bool)items[17];
            object_id = (int)items[18];
            name = (string)items[19];
            column_id = (int)items[20];
            system_type_id = (byte)items[21];
            user_type_id = (int)items[22];
            max_length = (short)items[23];
            precision = (byte)items[24];
        }

        public system_columns(byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_computed, bool is_filestream, bool is_replicated, bool is_non_sql_subscribed, bool is_merge_published, bool is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, bool is_sparse, bool is_column_set, int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision)
        {
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_computed = is_computed;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
        }

        public override object[] GetItemArray()
        {
            return new object[] { scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_computed, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, is_sparse, is_column_set, object_id, name, column_id, system_type_id, user_type_id, max_length, precision };
        }

        public override void SetItemArray(object[] items)
        {
            scale = (byte)items[0];
            collation_name = (string)items[1];
            is_nullable = (bool?)items[2];
            is_ansi_padded = (bool)items[3];
            is_rowguidcol = (bool)items[4];
            is_identity = (bool)items[5];
            is_computed = (bool)items[6];
            is_filestream = (bool)items[7];
            is_replicated = (bool)items[8];
            is_non_sql_subscribed = (bool)items[9];
            is_merge_published = (bool)items[10];
            is_dts_replicated = (bool)items[11];
            is_xml_document = (bool)items[12];
            xml_collection_id = (int)items[13];
            default_object_id = (int)items[14];
            rule_object_id = (int)items[15];
            is_sparse = (bool)items[16];
            is_column_set = (bool)items[17];
            object_id = (int)items[18];
            name = (string)items[19];
            column_id = (int)items[20];
            system_type_id = (byte)items[21];
            user_type_id = (int)items[22];
            max_length = (short)items[23];
            precision = (byte)items[24];
        }
    }

    [SqlView("sys", "parameters")]
    public partial class parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        public parameters()
        {
        }

        public parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }

        public parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }
    }

    [SqlView("sys", "system_parameters")]
    public partial class system_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 8), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 9), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        [SqlColumn("has_default_value", 10), SqlTypeFacets("bit", false)]
        public bool has_default_value
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 11), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("default_value", 12), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 13), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("is_readonly", 14), SqlTypeFacets("bit", false)]
        public bool is_readonly
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 15), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        public system_parameters()
        {
        }

        public system_parameters(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }

        public system_parameters(int object_id, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref, bool has_default_value, bool is_xml_document, Object default_value, int xml_collection_id, bool is_readonly, bool? is_nullable)
        {
            this.object_id = object_id;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
            this.has_default_value = has_default_value;
            this.is_xml_document = is_xml_document;
            this.default_value = default_value;
            this.xml_collection_id = xml_collection_id;
            this.is_readonly = is_readonly;
            this.is_nullable = is_nullable;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref, has_default_value, is_xml_document, default_value, xml_collection_id, is_readonly, is_nullable };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            parameter_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            is_output = (bool)items[8];
            is_cursor_ref = (bool)items[9];
            has_default_value = (bool)items[10];
            is_xml_document = (bool)items[11];
            default_value = (Object)items[12];
            xml_collection_id = (int)items[13];
            is_readonly = (bool)items[14];
            is_nullable = (bool?)items[15];
        }
    }

    [SqlView("sys", "computed_columns")]
    public partial class computed_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 13), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 14), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 15), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 16), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 18), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 19), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 20), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 21), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 22), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 23), SqlTypeFacets("bit", false)]
        public bool uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_persisted", 24), SqlTypeFacets("bit", false)]
        public bool is_persisted
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 25), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 26), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 27), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        public computed_columns()
        {
        }

        public computed_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            definition = (string)items[22];
            uses_database_collation = (bool)items[23];
            is_persisted = (bool)items[24];
            is_computed = (bool)items[25];
            is_sparse = (bool)items[26];
            is_column_set = (bool)items[27];
        }

        public computed_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, string definition, bool uses_database_collation, bool is_persisted, bool is_computed, bool is_sparse, bool is_column_set)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.definition = definition;
            this.uses_database_collation = uses_database_collation;
            this.is_persisted = is_persisted;
            this.is_computed = is_computed;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, definition, uses_database_collation, is_persisted, is_computed, is_sparse, is_column_set };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            definition = (string)items[22];
            uses_database_collation = (bool)items[23];
            is_persisted = (bool)items[24];
            is_computed = (bool)items[25];
            is_sparse = (bool)items[26];
            is_column_set = (bool)items[27];
        }
    }

    [SqlView("sys", "identity_columns")]
    public partial class identity_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 3), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 4), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_ansi_padded", 10), SqlTypeFacets("bit", false)]
        public bool is_ansi_padded
        {
            get;
            set;
        }

        [SqlColumn("is_rowguidcol", 11), SqlTypeFacets("bit", false)]
        public bool is_rowguidcol
        {
            get;
            set;
        }

        [SqlColumn("is_identity", 12), SqlTypeFacets("bit", false)]
        public bool is_identity
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 13), SqlTypeFacets("bit", false)]
        public bool is_filestream
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 14), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_non_sql_subscribed", 15), SqlTypeFacets("bit", true)]
        public bool? is_non_sql_subscribed
        {
            get;
            set;
        }

        [SqlColumn("is_merge_published", 16), SqlTypeFacets("bit", true)]
        public bool? is_merge_published
        {
            get;
            set;
        }

        [SqlColumn("is_dts_replicated", 17), SqlTypeFacets("bit", true)]
        public bool? is_dts_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 18), SqlTypeFacets("bit", false)]
        public bool is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 19), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 20), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 21), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("seed_value", 22), SqlTypeFacets("sql_variant", true)]
        public Object seed_value
        {
            get;
            set;
        }

        [SqlColumn("increment_value", 23), SqlTypeFacets("sql_variant", true)]
        public Object increment_value
        {
            get;
            set;
        }

        [SqlColumn("last_value", 24), SqlTypeFacets("sql_variant", true)]
        public Object last_value
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 25), SqlTypeFacets("bit", true)]
        public bool? is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_computed", 26), SqlTypeFacets("bit", false)]
        public bool is_computed
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 27), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_column_set", 28), SqlTypeFacets("bit", false)]
        public bool is_column_set
        {
            get;
            set;
        }

        public identity_columns()
        {
        }

        public identity_columns(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            seed_value = (Object)items[22];
            increment_value = (Object)items[23];
            last_value = (Object)items[24];
            is_not_for_replication = (bool?)items[25];
            is_computed = (bool)items[26];
            is_sparse = (bool)items[27];
            is_column_set = (bool)items[28];
        }

        public identity_columns(int object_id, string name, int column_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_ansi_padded, bool is_rowguidcol, bool is_identity, bool is_filestream, bool? is_replicated, bool? is_non_sql_subscribed, bool? is_merge_published, bool? is_dts_replicated, bool is_xml_document, int xml_collection_id, int default_object_id, int rule_object_id, Object seed_value, Object increment_value, Object last_value, bool? is_not_for_replication, bool is_computed, bool is_sparse, bool is_column_set)
        {
            this.object_id = object_id;
            this.name = name;
            this.column_id = column_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_ansi_padded = is_ansi_padded;
            this.is_rowguidcol = is_rowguidcol;
            this.is_identity = is_identity;
            this.is_filestream = is_filestream;
            this.is_replicated = is_replicated;
            this.is_non_sql_subscribed = is_non_sql_subscribed;
            this.is_merge_published = is_merge_published;
            this.is_dts_replicated = is_dts_replicated;
            this.is_xml_document = is_xml_document;
            this.xml_collection_id = xml_collection_id;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.seed_value = seed_value;
            this.increment_value = increment_value;
            this.last_value = last_value;
            this.is_not_for_replication = is_not_for_replication;
            this.is_computed = is_computed;
            this.is_sparse = is_sparse;
            this.is_column_set = is_column_set;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, column_id, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_nullable, is_ansi_padded, is_rowguidcol, is_identity, is_filestream, is_replicated, is_non_sql_subscribed, is_merge_published, is_dts_replicated, is_xml_document, xml_collection_id, default_object_id, rule_object_id, seed_value, increment_value, last_value, is_not_for_replication, is_computed, is_sparse, is_column_set };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            column_id = (int)items[2];
            system_type_id = (byte)items[3];
            user_type_id = (int)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_ansi_padded = (bool)items[10];
            is_rowguidcol = (bool)items[11];
            is_identity = (bool)items[12];
            is_filestream = (bool)items[13];
            is_replicated = (bool?)items[14];
            is_non_sql_subscribed = (bool?)items[15];
            is_merge_published = (bool?)items[16];
            is_dts_replicated = (bool?)items[17];
            is_xml_document = (bool)items[18];
            xml_collection_id = (int)items[19];
            default_object_id = (int)items[20];
            rule_object_id = (int)items[21];
            seed_value = (Object)items[22];
            increment_value = (Object)items[23];
            last_value = (Object)items[24];
            is_not_for_replication = (bool?)items[25];
            is_computed = (bool)items[26];
            is_sparse = (bool)items[27];
            is_column_set = (bool)items[28];
        }
    }

    [SqlView("sys", "indexes")]
    public partial class indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", true)]
        public int? data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 14), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 16), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 17), SqlTypeFacets("nvarchar", true, -1)]
        public string filter_definition
        {
            get;
            set;
        }

        public indexes()
        {
        }

        public indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int?)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            has_filter = (bool?)items[16];
            filter_definition = (string)items[17];
        }

        public indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int? data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? allow_row_locks, bool? allow_page_locks, bool? has_filter, string filter_definition)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, allow_row_locks, allow_page_locks, has_filter, filter_definition };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int?)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            has_filter = (bool?)items[16];
            filter_definition = (string)items[17];
        }
    }

    [SqlView("sys", "xml_indexes")]
    public partial class xml_indexes : SqlViewProxy
    {
        [SqlColumn("filter_definition", 20), SqlTypeFacets("nvarchar", true, -1)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("xml_index_type", 21), SqlTypeFacets("tinyint", true)]
        public byte? xml_index_type
        {
            get;
            set;
        }

        [SqlColumn("xml_index_type_description", 22), SqlTypeFacets("nvarchar", true, 120)]
        public string xml_index_type_description
        {
            get;
            set;
        }

        [SqlColumn("path_id", 23), SqlTypeFacets("int", true)]
        public int? path_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 14), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("using_xml_index_id", 16), SqlTypeFacets("int", true)]
        public int? using_xml_index_id
        {
            get;
            set;
        }

        [SqlColumn("secondary_type", 17), SqlTypeFacets("char", true, 1)]
        public string secondary_type
        {
            get;
            set;
        }

        [SqlColumn("secondary_type_desc", 18), SqlTypeFacets("nvarchar", true, 120)]
        public string secondary_type_desc
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 19), SqlTypeFacets("bit", false)]
        public bool has_filter
        {
            get;
            set;
        }

        public xml_indexes()
        {
        }

        public xml_indexes(object[] items)
        {
            filter_definition = (string)items[0];
            xml_index_type = (byte?)items[1];
            xml_index_type_description = (string)items[2];
            path_id = (int?)items[3];
            object_id = (int)items[4];
            name = (string)items[5];
            index_id = (int)items[6];
            type = (byte)items[7];
            type_desc = (string)items[8];
            is_unique = (bool?)items[9];
            data_space_id = (int)items[10];
            ignore_dup_key = (bool?)items[11];
            is_primary_key = (bool?)items[12];
            is_unique_constraint = (bool?)items[13];
            fill_factor = (byte)items[14];
            is_padded = (bool?)items[15];
            is_disabled = (bool?)items[16];
            is_hypothetical = (bool?)items[17];
            allow_row_locks = (bool?)items[18];
            allow_page_locks = (bool?)items[19];
            using_xml_index_id = (int?)items[20];
            secondary_type = (string)items[21];
            secondary_type_desc = (string)items[22];
            has_filter = (bool)items[23];
        }

        public xml_indexes(string filter_definition, byte? xml_index_type, string xml_index_type_description, int? path_id, int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? allow_row_locks, bool? allow_page_locks, int? using_xml_index_id, string secondary_type, string secondary_type_desc, bool has_filter)
        {
            this.filter_definition = filter_definition;
            this.xml_index_type = xml_index_type;
            this.xml_index_type_description = xml_index_type_description;
            this.path_id = path_id;
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.using_xml_index_id = using_xml_index_id;
            this.secondary_type = secondary_type;
            this.secondary_type_desc = secondary_type_desc;
            this.has_filter = has_filter;
        }

        public override object[] GetItemArray()
        {
            return new object[] { filter_definition, xml_index_type, xml_index_type_description, path_id, object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, allow_row_locks, allow_page_locks, using_xml_index_id, secondary_type, secondary_type_desc, has_filter };
        }

        public override void SetItemArray(object[] items)
        {
            filter_definition = (string)items[0];
            xml_index_type = (byte?)items[1];
            xml_index_type_description = (string)items[2];
            path_id = (int?)items[3];
            object_id = (int)items[4];
            name = (string)items[5];
            index_id = (int)items[6];
            type = (byte)items[7];
            type_desc = (string)items[8];
            is_unique = (bool?)items[9];
            data_space_id = (int)items[10];
            ignore_dup_key = (bool?)items[11];
            is_primary_key = (bool?)items[12];
            is_unique_constraint = (bool?)items[13];
            fill_factor = (byte)items[14];
            is_padded = (bool?)items[15];
            is_disabled = (bool?)items[16];
            is_hypothetical = (bool?)items[17];
            allow_row_locks = (bool?)items[18];
            allow_page_locks = (bool?)items[19];
            using_xml_index_id = (int?)items[20];
            secondary_type = (string)items[21];
            secondary_type_desc = (string)items[22];
            has_filter = (bool)items[23];
        }
    }

    [SqlView("sys", "partitions")]
    public partial class partitions : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", true)]
        public long? partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 4), SqlTypeFacets("bigint", true)]
        public long? hobt_id
        {
            get;
            set;
        }

        [SqlColumn("rows", 5), SqlTypeFacets("bigint", true)]
        public long? rows
        {
            get;
            set;
        }

        [SqlColumn("filestream_filegroup_id", 6), SqlTypeFacets("smallint", true)]
        public short? filestream_filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("data_compression", 7), SqlTypeFacets("tinyint", true)]
        public byte? data_compression
        {
            get;
            set;
        }

        [SqlColumn("data_compression_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string data_compression_desc
        {
            get;
            set;
        }

        public partitions()
        {
        }

        public partitions(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long?)items[4];
            rows = (long?)items[5];
            filestream_filegroup_id = (short?)items[6];
            data_compression = (byte?)items[7];
            data_compression_desc = (string)items[8];
        }

        public partitions(long? partition_id, int object_id, int index_id, int partition_number, long? hobt_id, long? rows, short? filestream_filegroup_id, byte? data_compression, string data_compression_desc)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.hobt_id = hobt_id;
            this.rows = rows;
            this.filestream_filegroup_id = filestream_filegroup_id;
            this.data_compression = data_compression;
            this.data_compression_desc = data_compression_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, hobt_id, rows, filestream_filegroup_id, data_compression, data_compression_desc };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            hobt_id = (long?)items[4];
            rows = (long?)items[5];
            filestream_filegroup_id = (short?)items[6];
            data_compression = (byte?)items[7];
            data_compression_desc = (string)items[8];
        }
    }

    [SqlView("sys", "allocation_units")]
    public partial class allocation_units : SqlViewProxy
    {
        [SqlColumn("allocation_unit_id", 0), SqlTypeFacets("bigint", false)]
        public long allocation_unit_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("container_id", 3), SqlTypeFacets("bigint", false)]
        public long container_id
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 4), SqlTypeFacets("int", true)]
        public int? data_space_id
        {
            get;
            set;
        }

        [SqlColumn("total_pages", 5), SqlTypeFacets("bigint", false)]
        public long total_pages
        {
            get;
            set;
        }

        [SqlColumn("used_pages", 6), SqlTypeFacets("bigint", false)]
        public long used_pages
        {
            get;
            set;
        }

        [SqlColumn("data_pages", 7), SqlTypeFacets("bigint", false)]
        public long data_pages
        {
            get;
            set;
        }

        public allocation_units()
        {
        }

        public allocation_units(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            data_space_id = (int?)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
        }

        public allocation_units(long allocation_unit_id, byte type, string type_desc, long container_id, int? data_space_id, long total_pages, long used_pages, long data_pages)
        {
            this.allocation_unit_id = allocation_unit_id;
            this.type = type;
            this.type_desc = type_desc;
            this.container_id = container_id;
            this.data_space_id = data_space_id;
            this.total_pages = total_pages;
            this.used_pages = used_pages;
            this.data_pages = data_pages;
        }

        public override object[] GetItemArray()
        {
            return new object[] { allocation_unit_id, type, type_desc, container_id, data_space_id, total_pages, used_pages, data_pages };
        }

        public override void SetItemArray(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            data_space_id = (int?)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
        }
    }

    [SqlView("sys", "index_columns")]
    public partial class index_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("index_column_id", 2), SqlTypeFacets("int", false)]
        public int index_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("key_ordinal", 4), SqlTypeFacets("tinyint", false)]
        public byte key_ordinal
        {
            get;
            set;
        }

        [SqlColumn("partition_ordinal", 5), SqlTypeFacets("tinyint", false)]
        public byte partition_ordinal
        {
            get;
            set;
        }

        [SqlColumn("is_descending_key", 6), SqlTypeFacets("bit", true)]
        public bool? is_descending_key
        {
            get;
            set;
        }

        [SqlColumn("is_included_column", 7), SqlTypeFacets("bit", true)]
        public bool? is_included_column
        {
            get;
            set;
        }

        public index_columns()
        {
        }

        public index_columns(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            index_column_id = (int)items[2];
            column_id = (int)items[3];
            key_ordinal = (byte)items[4];
            partition_ordinal = (byte)items[5];
            is_descending_key = (bool?)items[6];
            is_included_column = (bool?)items[7];
        }

        public index_columns(int object_id, int index_id, int index_column_id, int column_id, byte key_ordinal, byte partition_ordinal, bool? is_descending_key, bool? is_included_column)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.index_column_id = index_column_id;
            this.column_id = column_id;
            this.key_ordinal = key_ordinal;
            this.partition_ordinal = partition_ordinal;
            this.is_descending_key = is_descending_key;
            this.is_included_column = is_included_column;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, index_column_id, column_id, key_ordinal, partition_ordinal, is_descending_key, is_included_column };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            index_column_id = (int)items[2];
            column_id = (int)items[3];
            key_ordinal = (byte)items[4];
            partition_ordinal = (byte)items[5];
            is_descending_key = (bool?)items[6];
            is_included_column = (bool?)items[7];
        }
    }

    [SqlView("sys", "stats")]
    public partial class stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 2), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("auto_created", 3), SqlTypeFacets("bit", true)]
        public bool? auto_created
        {
            get;
            set;
        }

        [SqlColumn("user_created", 4), SqlTypeFacets("bit", true)]
        public bool? user_created
        {
            get;
            set;
        }

        [SqlColumn("no_recompute", 5), SqlTypeFacets("bit", true)]
        public bool? no_recompute
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 6), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 7), SqlTypeFacets("nvarchar", true, -1)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("is_temporary", 8), SqlTypeFacets("bit", true)]
        public bool? is_temporary
        {
            get;
            set;
        }

        [SqlColumn("is_incremental", 9), SqlTypeFacets("bit", true)]
        public bool? is_incremental
        {
            get;
            set;
        }

        public stats()
        {
        }

        public stats(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            stats_id = (int)items[2];
            auto_created = (bool?)items[3];
            user_created = (bool?)items[4];
            no_recompute = (bool?)items[5];
            has_filter = (bool?)items[6];
            filter_definition = (string)items[7];
            is_temporary = (bool?)items[8];
            is_incremental = (bool?)items[9];
        }

        public stats(int object_id, string name, int stats_id, bool? auto_created, bool? user_created, bool? no_recompute, bool? has_filter, string filter_definition, bool? is_temporary, bool? is_incremental)
        {
            this.object_id = object_id;
            this.name = name;
            this.stats_id = stats_id;
            this.auto_created = auto_created;
            this.user_created = user_created;
            this.no_recompute = no_recompute;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.is_temporary = is_temporary;
            this.is_incremental = is_incremental;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, stats_id, auto_created, user_created, no_recompute, has_filter, filter_definition, is_temporary, is_incremental };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            stats_id = (int)items[2];
            auto_created = (bool?)items[3];
            user_created = (bool?)items[4];
            no_recompute = (bool?)items[5];
            has_filter = (bool?)items[6];
            filter_definition = (string)items[7];
            is_temporary = (bool?)items[8];
            is_incremental = (bool?)items[9];
        }
    }

    [SqlView("sys", "stats_columns")]
    public partial class stats_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 1), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("stats_column_id", 2), SqlTypeFacets("int", true)]
        public int? stats_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", true)]
        public int? column_id
        {
            get;
            set;
        }

        public stats_columns()
        {
        }

        public stats_columns(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            stats_column_id = (int?)items[2];
            column_id = (int?)items[3];
        }

        public stats_columns(int object_id, int stats_id, int? stats_column_id, int? column_id)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
            this.stats_column_id = stats_column_id;
            this.column_id = column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id, stats_column_id, column_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            stats_column_id = (int?)items[2];
            column_id = (int?)items[3];
        }
    }

    [SqlView("sys", "fulltext_indexes")]
    public partial class fulltext_indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("unique_index_id", 1), SqlTypeFacets("int", false)]
        public int unique_index_id
        {
            get;
            set;
        }

        [SqlColumn("fulltext_catalog_id", 2), SqlTypeFacets("int", true)]
        public int? fulltext_catalog_id
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 3), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        [SqlColumn("change_tracking_state", 4), SqlTypeFacets("char", true, 1)]
        public string change_tracking_state
        {
            get;
            set;
        }

        [SqlColumn("change_tracking_state_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string change_tracking_state_desc
        {
            get;
            set;
        }

        [SqlColumn("has_crawl_completed", 6), SqlTypeFacets("bit", false)]
        public bool has_crawl_completed
        {
            get;
            set;
        }

        [SqlColumn("crawl_type", 7), SqlTypeFacets("char", false, 1)]
        public string crawl_type
        {
            get;
            set;
        }

        [SqlColumn("crawl_type_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string crawl_type_desc
        {
            get;
            set;
        }

        [SqlColumn("crawl_start_date", 9), SqlTypeFacets("datetime", true)]
        public DateTime? crawl_start_date
        {
            get;
            set;
        }

        [SqlColumn("crawl_end_date", 10), SqlTypeFacets("datetime", true)]
        public DateTime? crawl_end_date
        {
            get;
            set;
        }

        [SqlColumn("incremental_timestamp", 11), SqlTypeFacets("binary", true, 8)]
        public Byte[] incremental_timestamp
        {
            get;
            set;
        }

        [SqlColumn("stoplist_id", 12), SqlTypeFacets("int", true)]
        public int? stoplist_id
        {
            get;
            set;
        }

        [SqlColumn("property_list_id", 13), SqlTypeFacets("int", true)]
        public int? property_list_id
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 14), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        public fulltext_indexes()
        {
        }

        public fulltext_indexes(object[] items)
        {
            object_id = (int)items[0];
            unique_index_id = (int)items[1];
            fulltext_catalog_id = (int?)items[2];
            is_enabled = (bool)items[3];
            change_tracking_state = (string)items[4];
            change_tracking_state_desc = (string)items[5];
            has_crawl_completed = (bool)items[6];
            crawl_type = (string)items[7];
            crawl_type_desc = (string)items[8];
            crawl_start_date = (DateTime?)items[9];
            crawl_end_date = (DateTime?)items[10];
            incremental_timestamp = (Byte[])items[11];
            stoplist_id = (int?)items[12];
            property_list_id = (int?)items[13];
            data_space_id = (int)items[14];
        }

        public fulltext_indexes(int object_id, int unique_index_id, int? fulltext_catalog_id, bool is_enabled, string change_tracking_state, string change_tracking_state_desc, bool has_crawl_completed, string crawl_type, string crawl_type_desc, DateTime? crawl_start_date, DateTime? crawl_end_date, Byte[] incremental_timestamp, int? stoplist_id, int? property_list_id, int data_space_id)
        {
            this.object_id = object_id;
            this.unique_index_id = unique_index_id;
            this.fulltext_catalog_id = fulltext_catalog_id;
            this.is_enabled = is_enabled;
            this.change_tracking_state = change_tracking_state;
            this.change_tracking_state_desc = change_tracking_state_desc;
            this.has_crawl_completed = has_crawl_completed;
            this.crawl_type = crawl_type;
            this.crawl_type_desc = crawl_type_desc;
            this.crawl_start_date = crawl_start_date;
            this.crawl_end_date = crawl_end_date;
            this.incremental_timestamp = incremental_timestamp;
            this.stoplist_id = stoplist_id;
            this.property_list_id = property_list_id;
            this.data_space_id = data_space_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, unique_index_id, fulltext_catalog_id, is_enabled, change_tracking_state, change_tracking_state_desc, has_crawl_completed, crawl_type, crawl_type_desc, crawl_start_date, crawl_end_date, incremental_timestamp, stoplist_id, property_list_id, data_space_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            unique_index_id = (int)items[1];
            fulltext_catalog_id = (int?)items[2];
            is_enabled = (bool)items[3];
            change_tracking_state = (string)items[4];
            change_tracking_state_desc = (string)items[5];
            has_crawl_completed = (bool)items[6];
            crawl_type = (string)items[7];
            crawl_type_desc = (string)items[8];
            crawl_start_date = (DateTime?)items[9];
            crawl_end_date = (DateTime?)items[10];
            incremental_timestamp = (Byte[])items[11];
            stoplist_id = (int?)items[12];
            property_list_id = (int?)items[13];
            data_space_id = (int)items[14];
        }
    }

    [SqlView("sys", "fulltext_index_columns")]
    public partial class fulltext_index_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("type_column_id", 2), SqlTypeFacets("int", true)]
        public int? type_column_id
        {
            get;
            set;
        }

        [SqlColumn("language_id", 3), SqlTypeFacets("int", false)]
        public int language_id
        {
            get;
            set;
        }

        [SqlColumn("statistical_semantics", 4), SqlTypeFacets("int", false)]
        public int statistical_semantics
        {
            get;
            set;
        }

        public fulltext_index_columns()
        {
        }

        public fulltext_index_columns(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            type_column_id = (int?)items[2];
            language_id = (int)items[3];
            statistical_semantics = (int)items[4];
        }

        public fulltext_index_columns(int object_id, int column_id, int? type_column_id, int language_id, int statistical_semantics)
        {
            this.object_id = object_id;
            this.column_id = column_id;
            this.type_column_id = type_column_id;
            this.language_id = language_id;
            this.statistical_semantics = statistical_semantics;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, column_id, type_column_id, language_id, statistical_semantics };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            type_column_id = (int?)items[2];
            language_id = (int)items[3];
            statistical_semantics = (int)items[4];
        }
    }

    [SqlView("sys", "key_constraints")]
    public partial class key_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("unique_index_id", 12), SqlTypeFacets("int", true)]
        public int? unique_index_id
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 13), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public key_constraints()
        {
        }

        public key_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            unique_index_id = (int?)items[12];
            is_system_named = (bool)items[13];
        }

        public key_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int? unique_index_id, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.unique_index_id = unique_index_id;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, unique_index_id, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            unique_index_id = (int?)items[12];
            is_system_named = (bool)items[13];
        }
    }

    [SqlView("sys", "check_constraints")]
    public partial class check_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 13), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_not_trusted", 14), SqlTypeFacets("bit", false)]
        public bool is_not_trusted
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 15), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 16), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 17), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 18), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public check_constraints()
        {
        }

        public check_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_disabled = (bool)items[12];
            is_not_for_replication = (bool)items[13];
            is_not_trusted = (bool)items[14];
            parent_column_id = (int)items[15];
            definition = (string)items[16];
            uses_database_collation = (bool?)items[17];
            is_system_named = (bool)items[18];
        }

        public check_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool is_disabled, bool is_not_for_replication, bool is_not_trusted, int parent_column_id, string definition, bool? uses_database_collation, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_not_trusted = is_not_trusted;
            this.parent_column_id = parent_column_id;
            this.definition = definition;
            this.uses_database_collation = uses_database_collation;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_disabled, is_not_for_replication, is_not_trusted, parent_column_id, definition, uses_database_collation, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_disabled = (bool)items[12];
            is_not_for_replication = (bool)items[13];
            is_not_trusted = (bool)items[14];
            parent_column_id = (int)items[15];
            definition = (string)items[16];
            uses_database_collation = (bool?)items[17];
            is_system_named = (bool)items[18];
        }
    }

    [SqlView("sys", "default_constraints")]
    public partial class default_constraints : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 12), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 13), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 14), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public default_constraints()
        {
        }

        public default_constraints(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            parent_column_id = (int)items[12];
            definition = (string)items[13];
            is_system_named = (bool)items[14];
        }

        public default_constraints(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int parent_column_id, string definition, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.parent_column_id = parent_column_id;
            this.definition = definition;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, parent_column_id, definition, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            parent_column_id = (int)items[12];
            definition = (string)items[13];
            is_system_named = (bool)items[14];
        }
    }

    [SqlView("sys", "foreign_keys")]
    public partial class foreign_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("referenced_object_id", 12), SqlTypeFacets("int", true)]
        public int? referenced_object_id
        {
            get;
            set;
        }

        [SqlColumn("key_index_id", 13), SqlTypeFacets("int", true)]
        public int? key_index_id
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 14), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 15), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_not_trusted", 16), SqlTypeFacets("bit", false)]
        public bool is_not_trusted
        {
            get;
            set;
        }

        [SqlColumn("delete_referential_action", 17), SqlTypeFacets("tinyint", true)]
        public byte? delete_referential_action
        {
            get;
            set;
        }

        [SqlColumn("delete_referential_action_desc", 18), SqlTypeFacets("nvarchar", true, 120)]
        public string delete_referential_action_desc
        {
            get;
            set;
        }

        [SqlColumn("update_referential_action", 19), SqlTypeFacets("tinyint", true)]
        public byte? update_referential_action
        {
            get;
            set;
        }

        [SqlColumn("update_referential_action_desc", 20), SqlTypeFacets("nvarchar", true, 120)]
        public string update_referential_action_desc
        {
            get;
            set;
        }

        [SqlColumn("is_system_named", 21), SqlTypeFacets("bit", false)]
        public bool is_system_named
        {
            get;
            set;
        }

        public foreign_keys()
        {
        }

        public foreign_keys(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            referenced_object_id = (int?)items[12];
            key_index_id = (int?)items[13];
            is_disabled = (bool)items[14];
            is_not_for_replication = (bool)items[15];
            is_not_trusted = (bool)items[16];
            delete_referential_action = (byte?)items[17];
            delete_referential_action_desc = (string)items[18];
            update_referential_action = (byte?)items[19];
            update_referential_action_desc = (string)items[20];
            is_system_named = (bool)items[21];
        }

        public foreign_keys(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int? referenced_object_id, int? key_index_id, bool is_disabled, bool is_not_for_replication, bool is_not_trusted, byte? delete_referential_action, string delete_referential_action_desc, byte? update_referential_action, string update_referential_action_desc, bool is_system_named)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.referenced_object_id = referenced_object_id;
            this.key_index_id = key_index_id;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_not_trusted = is_not_trusted;
            this.delete_referential_action = delete_referential_action;
            this.delete_referential_action_desc = delete_referential_action_desc;
            this.update_referential_action = update_referential_action;
            this.update_referential_action_desc = update_referential_action_desc;
            this.is_system_named = is_system_named;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, referenced_object_id, key_index_id, is_disabled, is_not_for_replication, is_not_trusted, delete_referential_action, delete_referential_action_desc, update_referential_action, update_referential_action_desc, is_system_named };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            referenced_object_id = (int?)items[12];
            key_index_id = (int?)items[13];
            is_disabled = (bool)items[14];
            is_not_for_replication = (bool)items[15];
            is_not_trusted = (bool)items[16];
            delete_referential_action = (byte?)items[17];
            delete_referential_action_desc = (string)items[18];
            update_referential_action = (byte?)items[19];
            update_referential_action_desc = (string)items[20];
            is_system_named = (bool)items[21];
        }
    }

    [SqlView("sys", "foreign_key_columns")]
    public partial class foreign_key_columns : SqlViewProxy
    {
        [SqlColumn("constraint_object_id", 0), SqlTypeFacets("int", false)]
        public int constraint_object_id
        {
            get;
            set;
        }

        [SqlColumn("constraint_column_id", 1), SqlTypeFacets("int", false)]
        public int constraint_column_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 2), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_column_id", 3), SqlTypeFacets("int", false)]
        public int parent_column_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_object_id", 4), SqlTypeFacets("int", false)]
        public int referenced_object_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_column_id", 5), SqlTypeFacets("int", false)]
        public int referenced_column_id
        {
            get;
            set;
        }

        public foreign_key_columns()
        {
        }

        public foreign_key_columns(object[] items)
        {
            constraint_object_id = (int)items[0];
            constraint_column_id = (int)items[1];
            parent_object_id = (int)items[2];
            parent_column_id = (int)items[3];
            referenced_object_id = (int)items[4];
            referenced_column_id = (int)items[5];
        }

        public foreign_key_columns(int constraint_object_id, int constraint_column_id, int parent_object_id, int parent_column_id, int referenced_object_id, int referenced_column_id)
        {
            this.constraint_object_id = constraint_object_id;
            this.constraint_column_id = constraint_column_id;
            this.parent_object_id = parent_object_id;
            this.parent_column_id = parent_column_id;
            this.referenced_object_id = referenced_object_id;
            this.referenced_column_id = referenced_column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { constraint_object_id, constraint_column_id, parent_object_id, parent_column_id, referenced_object_id, referenced_column_id };
        }

        public override void SetItemArray(object[] items)
        {
            constraint_object_id = (int)items[0];
            constraint_column_id = (int)items[1];
            parent_object_id = (int)items[2];
            parent_column_id = (int)items[3];
            referenced_object_id = (int)items[4];
            referenced_column_id = (int)items[5];
        }
    }

    [SqlView("sys", "procedures")]
    public partial class procedures : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("is_auto_executed", 12), SqlTypeFacets("bit", false)]
        public bool is_auto_executed
        {
            get;
            set;
        }

        [SqlColumn("is_execution_replicated", 13), SqlTypeFacets("bit", true)]
        public bool? is_execution_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_repl_serializable_only", 14), SqlTypeFacets("bit", true)]
        public bool? is_repl_serializable_only
        {
            get;
            set;
        }

        [SqlColumn("skips_repl_constraints", 15), SqlTypeFacets("bit", true)]
        public bool? skips_repl_constraints
        {
            get;
            set;
        }

        public procedures()
        {
        }

        public procedures(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_auto_executed = (bool)items[12];
            is_execution_replicated = (bool?)items[13];
            is_repl_serializable_only = (bool?)items[14];
            skips_repl_constraints = (bool?)items[15];
        }

        public procedures(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, bool is_auto_executed, bool? is_execution_replicated, bool? is_repl_serializable_only, bool? skips_repl_constraints)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.is_auto_executed = is_auto_executed;
            this.is_execution_replicated = is_execution_replicated;
            this.is_repl_serializable_only = is_repl_serializable_only;
            this.skips_repl_constraints = skips_repl_constraints;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, is_auto_executed, is_execution_replicated, is_repl_serializable_only, skips_repl_constraints };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            is_auto_executed = (bool)items[12];
            is_execution_replicated = (bool?)items[13];
            is_repl_serializable_only = (bool?)items[14];
            skips_repl_constraints = (bool?)items[15];
        }
    }

    [SqlView("sys", "triggers")]
    public partial class triggers : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 10), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_not_for_replication", 11), SqlTypeFacets("bit", false)]
        public bool is_not_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_instead_of_trigger", 12), SqlTypeFacets("bit", false)]
        public bool is_instead_of_trigger
        {
            get;
            set;
        }

        public triggers()
        {
        }

        public triggers(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            is_instead_of_trigger = (bool)items[12];
        }

        public triggers(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_disabled, bool is_not_for_replication, bool is_instead_of_trigger)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_disabled = is_disabled;
            this.is_not_for_replication = is_not_for_replication;
            this.is_instead_of_trigger = is_instead_of_trigger;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_disabled, is_not_for_replication, is_instead_of_trigger };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_disabled = (bool)items[10];
            is_not_for_replication = (bool)items[11];
            is_instead_of_trigger = (bool)items[12];
        }
    }

    [SqlView("sys", "event_notifications")]
    public partial class event_notifications : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_class", 2), SqlTypeFacets("tinyint", false)]
        public byte parent_class
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 4), SqlTypeFacets("int", false)]
        public int parent_id
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("service_name", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("creator_sid", 9), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] creator_sid
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 10), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public event_notifications()
        {
        }

        public event_notifications(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }

        public event_notifications(string name, int object_id, byte parent_class, string parent_class_desc, int parent_id, DateTime create_date, DateTime modify_date, string service_name, string broker_instance, Byte[] creator_sid, int? principal_id)
        {
            this.name = name;
            this.object_id = object_id;
            this.parent_class = parent_class;
            this.parent_class_desc = parent_class_desc;
            this.parent_id = parent_id;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.service_name = service_name;
            this.broker_instance = broker_instance;
            this.creator_sid = creator_sid;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, parent_class, parent_class_desc, parent_id, create_date, modify_date, service_name, broker_instance, creator_sid, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            parent_class = (byte)items[2];
            parent_class_desc = (string)items[3];
            parent_id = (int)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            service_name = (string)items[7];
            broker_instance = (string)items[8];
            creator_sid = (Byte[])items[9];
            principal_id = (int?)items[10];
        }
    }

    [SqlView("sys", "events")]
    public partial class events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false, 256)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 3), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 4), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        public events()
        {
        }

        public events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }

        public events(int object_id, int type, string type_desc, bool? is_trigger_event, int? event_group_type, string event_group_type_desc)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_trigger_event = is_trigger_event;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_trigger_event, event_group_type, event_group_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_trigger_event = (bool?)items[3];
            event_group_type = (int?)items[4];
            event_group_type_desc = (string)items[5];
        }
    }

    [SqlView("sys", "trigger_events")]
    public partial class trigger_events : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", false, 256)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_first", 3), SqlTypeFacets("bit", true)]
        public bool? is_first
        {
            get;
            set;
        }

        [SqlColumn("is_last", 4), SqlTypeFacets("bit", true)]
        public bool? is_last
        {
            get;
            set;
        }

        [SqlColumn("event_group_type", 5), SqlTypeFacets("int", true)]
        public int? event_group_type
        {
            get;
            set;
        }

        [SqlColumn("event_group_type_desc", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string event_group_type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_trigger_event", 7), SqlTypeFacets("bit", true)]
        public bool? is_trigger_event
        {
            get;
            set;
        }

        public trigger_events()
        {
        }

        public trigger_events(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_first = (bool?)items[3];
            is_last = (bool?)items[4];
            event_group_type = (int?)items[5];
            event_group_type_desc = (string)items[6];
            is_trigger_event = (bool?)items[7];
        }

        public trigger_events(int object_id, int type, string type_desc, bool? is_first, bool? is_last, int? event_group_type, string event_group_type_desc, bool? is_trigger_event)
        {
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_first = is_first;
            this.is_last = is_last;
            this.event_group_type = event_group_type;
            this.event_group_type_desc = event_group_type_desc;
            this.is_trigger_event = is_trigger_event;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, type, type_desc, is_first, is_last, event_group_type, event_group_type_desc, is_trigger_event };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            type = (int)items[1];
            type_desc = (string)items[2];
            is_first = (bool?)items[3];
            is_last = (bool?)items[4];
            event_group_type = (int?)items[5];
            event_group_type_desc = (string)items[6];
            is_trigger_event = (bool?)items[7];
        }
    }

    [SqlView("sys", "sql_modules")]
    public partial class sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", true)]
        public bool? uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", true)]
        public bool? is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", true)]
        public bool? uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", true)]
        public bool? is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", true)]
        public bool? uses_native_compilation
        {
            get;
            set;
        }

        public sql_modules()
        {
        }

        public sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }

        public sql_modules(int object_id, string definition, bool? uses_ansi_nulls, bool? uses_quoted_identifier, bool? is_schema_bound, bool? uses_database_collation, bool? is_recompiled, bool? null_on_null_input, int? execute_as_principal_id, bool? uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool?)items[2];
            uses_quoted_identifier = (bool?)items[3];
            is_schema_bound = (bool?)items[4];
            uses_database_collation = (bool?)items[5];
            is_recompiled = (bool?)items[6];
            null_on_null_input = (bool?)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool?)items[9];
        }
    }

    [SqlView("sys", "assembly_modules")]
    public partial class assembly_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("assembly_method", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string assembly_method
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 4), SqlTypeFacets("bit", true)]
        public bool? null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 5), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        public assembly_modules()
        {
        }

        public assembly_modules(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            null_on_null_input = (bool?)items[4];
            execute_as_principal_id = (int?)items[5];
        }

        public assembly_modules(int object_id, int assembly_id, string assembly_class, string assembly_method, bool? null_on_null_input, int? execute_as_principal_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.assembly_method = assembly_method;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id, assembly_class, assembly_method, null_on_null_input, execute_as_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
            assembly_class = (string)items[2];
            assembly_method = (string)items[3];
            null_on_null_input = (bool?)items[4];
            execute_as_principal_id = (int?)items[5];
        }
    }

    [SqlView("sys", "numbered_procedures")]
    public partial class numbered_procedures : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_number", 1), SqlTypeFacets("smallint", true)]
        public short? procedure_number
        {
            get;
            set;
        }

        [SqlColumn("definition", 2), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        public numbered_procedures()
        {
        }

        public numbered_procedures(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short?)items[1];
            definition = (string)items[2];
        }

        public numbered_procedures(int object_id, short? procedure_number, string definition)
        {
            this.object_id = object_id;
            this.procedure_number = procedure_number;
            this.definition = definition;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, procedure_number, definition };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short?)items[1];
            definition = (string)items[2];
        }
    }

    [SqlView("sys", "numbered_procedure_parameters")]
    public partial class numbered_procedure_parameters : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_number", 1), SqlTypeFacets("smallint", false)]
        public short procedure_number
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 3), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 4), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 5), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 6), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 7), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 8), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("is_output", 9), SqlTypeFacets("bit", false)]
        public bool is_output
        {
            get;
            set;
        }

        [SqlColumn("is_cursor_ref", 10), SqlTypeFacets("bit", false)]
        public bool is_cursor_ref
        {
            get;
            set;
        }

        public numbered_procedure_parameters()
        {
        }

        public numbered_procedure_parameters(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short)items[1];
            name = (string)items[2];
            parameter_id = (int)items[3];
            system_type_id = (byte)items[4];
            user_type_id = (int)items[5];
            max_length = (short)items[6];
            precision = (byte)items[7];
            scale = (byte)items[8];
            is_output = (bool)items[9];
            is_cursor_ref = (bool)items[10];
        }

        public numbered_procedure_parameters(int object_id, short procedure_number, string name, int parameter_id, byte system_type_id, int user_type_id, short max_length, byte precision, byte scale, bool is_output, bool is_cursor_ref)
        {
            this.object_id = object_id;
            this.procedure_number = procedure_number;
            this.name = name;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.is_output = is_output;
            this.is_cursor_ref = is_cursor_ref;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, procedure_number, name, parameter_id, system_type_id, user_type_id, max_length, precision, scale, is_output, is_cursor_ref };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            procedure_number = (short)items[1];
            name = (string)items[2];
            parameter_id = (int)items[3];
            system_type_id = (byte)items[4];
            user_type_id = (int)items[5];
            max_length = (short)items[6];
            precision = (byte)items[7];
            scale = (byte)items[8];
            is_output = (bool)items[9];
            is_cursor_ref = (bool)items[10];
        }
    }

    [SqlView("sys", "synonyms")]
    public partial class synonyms : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("base_object_name", 12), SqlTypeFacets("nvarchar", true, 2070)]
        public string base_object_name
        {
            get;
            set;
        }

        public synonyms()
        {
        }

        public synonyms(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            base_object_name = (string)items[12];
        }

        public synonyms(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, string base_object_name)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.base_object_name = base_object_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, base_object_name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            base_object_name = (string)items[12];
        }
    }

    [SqlView("sys", "service_queues")]
    public partial class service_queues : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("max_readers", 12), SqlTypeFacets("smallint", true)]
        public short? max_readers
        {
            get;
            set;
        }

        [SqlColumn("activation_procedure", 13), SqlTypeFacets("nvarchar", true, 1552)]
        public string activation_procedure
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 14), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_activation_enabled", 15), SqlTypeFacets("bit", false)]
        public bool is_activation_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_receive_enabled", 16), SqlTypeFacets("bit", false)]
        public bool is_receive_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_enqueue_enabled", 17), SqlTypeFacets("bit", false)]
        public bool is_enqueue_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_retention_enabled", 18), SqlTypeFacets("bit", false)]
        public bool is_retention_enabled
        {
            get;
            set;
        }

        [SqlColumn("is_poison_message_handling_enabled", 19), SqlTypeFacets("bit", true)]
        public bool? is_poison_message_handling_enabled
        {
            get;
            set;
        }

        public service_queues()
        {
        }

        public service_queues(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_readers = (short?)items[12];
            activation_procedure = (string)items[13];
            execute_as_principal_id = (int?)items[14];
            is_activation_enabled = (bool)items[15];
            is_receive_enabled = (bool)items[16];
            is_enqueue_enabled = (bool)items[17];
            is_retention_enabled = (bool)items[18];
            is_poison_message_handling_enabled = (bool?)items[19];
        }

        public service_queues(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, short? max_readers, string activation_procedure, int? execute_as_principal_id, bool is_activation_enabled, bool is_receive_enabled, bool is_enqueue_enabled, bool is_retention_enabled, bool? is_poison_message_handling_enabled)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.max_readers = max_readers;
            this.activation_procedure = activation_procedure;
            this.execute_as_principal_id = execute_as_principal_id;
            this.is_activation_enabled = is_activation_enabled;
            this.is_receive_enabled = is_receive_enabled;
            this.is_enqueue_enabled = is_enqueue_enabled;
            this.is_retention_enabled = is_retention_enabled;
            this.is_poison_message_handling_enabled = is_poison_message_handling_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, max_readers, activation_procedure, execute_as_principal_id, is_activation_enabled, is_receive_enabled, is_enqueue_enabled, is_retention_enabled, is_poison_message_handling_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_readers = (short?)items[12];
            activation_procedure = (string)items[13];
            execute_as_principal_id = (int?)items[14];
            is_activation_enabled = (bool)items[15];
            is_receive_enabled = (bool)items[16];
            is_enqueue_enabled = (bool)items[17];
            is_retention_enabled = (bool)items[18];
            is_poison_message_handling_enabled = (bool?)items[19];
        }
    }

    [SqlView("sys", "sql_dependencies")]
    public partial class sql_dependencies : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("object_id", 2), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 3), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_major_id", 4), SqlTypeFacets("int", false)]
        public int referenced_major_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_id", 5), SqlTypeFacets("int", false)]
        public int referenced_minor_id
        {
            get;
            set;
        }

        [SqlColumn("is_selected", 6), SqlTypeFacets("bit", false)]
        public bool is_selected
        {
            get;
            set;
        }

        [SqlColumn("is_updated", 7), SqlTypeFacets("bit", false)]
        public bool is_updated
        {
            get;
            set;
        }

        [SqlColumn("is_select_all", 8), SqlTypeFacets("bit", false)]
        public bool is_select_all
        {
            get;
            set;
        }

        public sql_dependencies()
        {
        }

        public sql_dependencies(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            object_id = (int)items[2];
            column_id = (int)items[3];
            referenced_major_id = (int)items[4];
            referenced_minor_id = (int)items[5];
            is_selected = (bool)items[6];
            is_updated = (bool)items[7];
            is_select_all = (bool)items[8];
        }

        public sql_dependencies(byte @class, string class_desc, int object_id, int column_id, int referenced_major_id, int referenced_minor_id, bool is_selected, bool is_updated, bool is_select_all)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.object_id = object_id;
            this.column_id = column_id;
            this.referenced_major_id = referenced_major_id;
            this.referenced_minor_id = referenced_minor_id;
            this.is_selected = is_selected;
            this.is_updated = is_updated;
            this.is_select_all = is_select_all;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, object_id, column_id, referenced_major_id, referenced_minor_id, is_selected, is_updated, is_select_all };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            object_id = (int)items[2];
            column_id = (int)items[3];
            referenced_major_id = (int)items[4];
            referenced_minor_id = (int)items[5];
            is_selected = (bool)items[6];
            is_updated = (bool)items[7];
            is_select_all = (bool)items[8];
        }
    }

    [SqlView("sys", "types")]
    public partial class types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 14), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        public types()
        {
        }

        public types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
        }

        public types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, bool is_table_type)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_table_type = is_table_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, is_table_type };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
        }
    }

    [SqlView("sys", "assembly_types")]
    public partial class assembly_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 14), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_class", 15), SqlTypeFacets("sysname", true)]
        public string assembly_class
        {
            get;
            set;
        }

        [SqlColumn("is_binary_ordered", 16), SqlTypeFacets("bit", true)]
        public bool? is_binary_ordered
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_length", 17), SqlTypeFacets("bit", true)]
        public bool? is_fixed_length
        {
            get;
            set;
        }

        [SqlColumn("prog_id", 18), SqlTypeFacets("nvarchar", true, 80)]
        public string prog_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_qualified_name", 19), SqlTypeFacets("nvarchar", true, 8000)]
        public string assembly_qualified_name
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 20), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        public assembly_types()
        {
        }

        public assembly_types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            assembly_id = (int)items[14];
            assembly_class = (string)items[15];
            is_binary_ordered = (bool?)items[16];
            is_fixed_length = (bool?)items[17];
            prog_id = (string)items[18];
            assembly_qualified_name = (string)items[19];
            is_table_type = (bool)items[20];
        }

        public assembly_types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, int assembly_id, string assembly_class, bool? is_binary_ordered, bool? is_fixed_length, string prog_id, string assembly_qualified_name, bool is_table_type)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.assembly_id = assembly_id;
            this.assembly_class = assembly_class;
            this.is_binary_ordered = is_binary_ordered;
            this.is_fixed_length = is_fixed_length;
            this.prog_id = prog_id;
            this.assembly_qualified_name = assembly_qualified_name;
            this.is_table_type = is_table_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, assembly_id, assembly_class, is_binary_ordered, is_fixed_length, prog_id, assembly_qualified_name, is_table_type };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            assembly_id = (int)items[14];
            assembly_class = (string)items[15];
            is_binary_ordered = (bool?)items[16];
            is_fixed_length = (bool?)items[17];
            prog_id = (string)items[18];
            assembly_qualified_name = (string)items[19];
            is_table_type = (bool)items[20];
        }
    }

    [SqlView("sys", "schemas")]
    public partial class schemas : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 1), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public schemas()
        {
        }

        public schemas(object[] items)
        {
            name = (string)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
        }

        public schemas(string name, int schema_id, int? principal_id)
        {
            this.name = name;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, schema_id, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
        }
    }

    [SqlView("sys", "database_principals")]
    public partial class database_principals : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 1)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("default_schema_name", 4), SqlTypeFacets("sysname", true)]
        public string default_schema_name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_id", 7), SqlTypeFacets("int", true)]
        public int? owning_principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 8), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_role", 9), SqlTypeFacets("bit", false)]
        public bool is_fixed_role
        {
            get;
            set;
        }

        [SqlColumn("authentication_type", 10), SqlTypeFacets("int", false)]
        public int authentication_type
        {
            get;
            set;
        }

        [SqlColumn("authentication_type_desc", 11), SqlTypeFacets("nvarchar", true, 120)]
        public string authentication_type_desc
        {
            get;
            set;
        }

        [SqlColumn("default_language_name", 12), SqlTypeFacets("sysname", true)]
        public string default_language_name
        {
            get;
            set;
        }

        [SqlColumn("default_language_lcid", 13), SqlTypeFacets("int", true)]
        public int? default_language_lcid
        {
            get;
            set;
        }

        public database_principals()
        {
        }

        public database_principals(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            default_schema_name = (string)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            owning_principal_id = (int?)items[7];
            sid = (Byte[])items[8];
            is_fixed_role = (bool)items[9];
            authentication_type = (int)items[10];
            authentication_type_desc = (string)items[11];
            default_language_name = (string)items[12];
            default_language_lcid = (int?)items[13];
        }

        public database_principals(string name, int principal_id, string type, string type_desc, string default_schema_name, DateTime create_date, DateTime modify_date, int? owning_principal_id, Byte[] sid, bool is_fixed_role, int authentication_type, string authentication_type_desc, string default_language_name, int? default_language_lcid)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.type = type;
            this.type_desc = type_desc;
            this.default_schema_name = default_schema_name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.owning_principal_id = owning_principal_id;
            this.sid = sid;
            this.is_fixed_role = is_fixed_role;
            this.authentication_type = authentication_type;
            this.authentication_type_desc = authentication_type_desc;
            this.default_language_name = default_language_name;
            this.default_language_lcid = default_language_lcid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, type, type_desc, default_schema_name, create_date, modify_date, owning_principal_id, sid, is_fixed_role, authentication_type, authentication_type_desc, default_language_name, default_language_lcid };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            default_schema_name = (string)items[4];
            create_date = (DateTime)items[5];
            modify_date = (DateTime)items[6];
            owning_principal_id = (int?)items[7];
            sid = (Byte[])items[8];
            is_fixed_role = (bool)items[9];
            authentication_type = (int)items[10];
            authentication_type_desc = (string)items[11];
            default_language_name = (string)items[12];
            default_language_lcid = (int?)items[13];
        }
    }

    [SqlView("sys", "database_role_members")]
    public partial class database_role_members : SqlViewProxy
    {
        [SqlColumn("role_principal_id", 0), SqlTypeFacets("int", false)]
        public int role_principal_id
        {
            get;
            set;
        }

        [SqlColumn("member_principal_id", 1), SqlTypeFacets("int", false)]
        public int member_principal_id
        {
            get;
            set;
        }

        public database_role_members()
        {
        }

        public database_role_members(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }

        public database_role_members(int role_principal_id, int member_principal_id)
        {
            this.role_principal_id = role_principal_id;
            this.member_principal_id = member_principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { role_principal_id, member_principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            role_principal_id = (int)items[0];
            member_principal_id = (int)items[1];
        }
    }

    [SqlView("sys", "database_permissions")]
    public partial class database_permissions : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("grantee_principal_id", 4), SqlTypeFacets("int", false)]
        public int grantee_principal_id
        {
            get;
            set;
        }

        [SqlColumn("grantor_principal_id", 5), SqlTypeFacets("int", false)]
        public int grantor_principal_id
        {
            get;
            set;
        }

        [SqlColumn("type", 6), SqlTypeFacets("char", false, 4)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("char", false, 1)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        public database_permissions()
        {
        }

        public database_permissions(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }

        public database_permissions(byte @class, string class_desc, int major_id, int minor_id, int grantee_principal_id, int grantor_principal_id, string type, string permission_name, string state, string state_desc)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.grantee_principal_id = grantee_principal_id;
            this.grantor_principal_id = grantor_principal_id;
            this.type = type;
            this.permission_name = permission_name;
            this.state = state;
            this.state_desc = state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, grantee_principal_id, grantor_principal_id, type, permission_name, state, state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            grantee_principal_id = (int)items[4];
            grantor_principal_id = (int)items[5];
            type = (string)items[6];
            permission_name = (string)items[7];
            state = (string)items[8];
            state_desc = (string)items[9];
        }
    }

    [SqlView("sys", "assemblies")]
    public partial class assemblies : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 2), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("clr_name", 3), SqlTypeFacets("nvarchar", true, 8000)]
        public string clr_name
        {
            get;
            set;
        }

        [SqlColumn("permission_set", 4), SqlTypeFacets("tinyint", true)]
        public byte? permission_set
        {
            get;
            set;
        }

        [SqlColumn("permission_set_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string permission_set_desc
        {
            get;
            set;
        }

        [SqlColumn("is_visible", 6), SqlTypeFacets("bit", false)]
        public bool is_visible
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 9), SqlTypeFacets("bit", true)]
        public bool? is_user_defined
        {
            get;
            set;
        }

        public assemblies()
        {
        }

        public assemblies(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            assembly_id = (int)items[2];
            clr_name = (string)items[3];
            permission_set = (byte?)items[4];
            permission_set_desc = (string)items[5];
            is_visible = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_user_defined = (bool?)items[9];
        }

        public assemblies(string name, int? principal_id, int assembly_id, string clr_name, byte? permission_set, string permission_set_desc, bool is_visible, DateTime create_date, DateTime modify_date, bool? is_user_defined)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.assembly_id = assembly_id;
            this.clr_name = clr_name;
            this.permission_set = permission_set;
            this.permission_set_desc = permission_set_desc;
            this.is_visible = is_visible;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_user_defined = is_user_defined;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, assembly_id, clr_name, permission_set, permission_set_desc, is_visible, create_date, modify_date, is_user_defined };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            assembly_id = (int)items[2];
            clr_name = (string)items[3];
            permission_set = (byte?)items[4];
            permission_set_desc = (string)items[5];
            is_visible = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_user_defined = (bool?)items[9];
        }
    }

    [SqlView("sys", "assembly_files")]
    public partial class assembly_files : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 520)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("file_id", 2), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("content", 3), SqlTypeFacets("varbinary", true, -1)]
        public Byte[] content
        {
            get;
            set;
        }

        public assembly_files()
        {
        }

        public assembly_files(object[] items)
        {
            assembly_id = (int)items[0];
            name = (string)items[1];
            file_id = (int)items[2];
            content = (Byte[])items[3];
        }

        public assembly_files(int assembly_id, string name, int file_id, Byte[] content)
        {
            this.assembly_id = assembly_id;
            this.name = name;
            this.file_id = file_id;
            this.content = content;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, name, file_id, content };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int)items[0];
            name = (string)items[1];
            file_id = (int)items[2];
            content = (Byte[])items[3];
        }
    }

    [SqlView("sys", "assembly_references")]
    public partial class assembly_references : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_assembly_id", 1), SqlTypeFacets("int", false)]
        public int referenced_assembly_id
        {
            get;
            set;
        }

        public assembly_references()
        {
        }

        public assembly_references(object[] items)
        {
            assembly_id = (int)items[0];
            referenced_assembly_id = (int)items[1];
        }

        public assembly_references(int assembly_id, int referenced_assembly_id)
        {
            this.assembly_id = assembly_id;
            this.referenced_assembly_id = referenced_assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, referenced_assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int)items[0];
            referenced_assembly_id = (int)items[1];
        }
    }

    [SqlView("sys", "partition_functions")]
    public partial class partition_functions : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("function_id", 1), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("fanout", 4), SqlTypeFacets("int", false)]
        public int fanout
        {
            get;
            set;
        }

        [SqlColumn("boundary_value_on_right", 5), SqlTypeFacets("bit", false)]
        public bool boundary_value_on_right
        {
            get;
            set;
        }

        [SqlColumn("is_system", 6), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public partition_functions()
        {
        }

        public partition_functions(object[] items)
        {
            name = (string)items[0];
            function_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            fanout = (int)items[4];
            boundary_value_on_right = (bool)items[5];
            is_system = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
        }

        public partition_functions(string name, int function_id, string type, string type_desc, int fanout, bool boundary_value_on_right, bool is_system, DateTime create_date, DateTime modify_date)
        {
            this.name = name;
            this.function_id = function_id;
            this.type = type;
            this.type_desc = type_desc;
            this.fanout = fanout;
            this.boundary_value_on_right = boundary_value_on_right;
            this.is_system = is_system;
            this.create_date = create_date;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, function_id, type, type_desc, fanout, boundary_value_on_right, is_system, create_date, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            function_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            fanout = (int)items[4];
            boundary_value_on_right = (bool)items[5];
            is_system = (bool)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
        }
    }

    [SqlView("sys", "partition_parameters")]
    public partial class partition_parameters : SqlViewProxy
    {
        [SqlColumn("function_id", 0), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 2), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 3), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 4), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 5), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 6), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 7), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public partition_parameters()
        {
        }

        public partition_parameters(object[] items)
        {
            function_id = (int)items[0];
            parameter_id = (int)items[1];
            system_type_id = (byte)items[2];
            max_length = (short)items[3];
            precision = (byte)items[4];
            scale = (byte)items[5];
            collation_name = (string)items[6];
            user_type_id = (int)items[7];
        }

        public partition_parameters(int function_id, int parameter_id, byte system_type_id, short max_length, byte precision, byte scale, string collation_name, int user_type_id)
        {
            this.function_id = function_id;
            this.parameter_id = parameter_id;
            this.system_type_id = system_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { function_id, parameter_id, system_type_id, max_length, precision, scale, collation_name, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            function_id = (int)items[0];
            parameter_id = (int)items[1];
            system_type_id = (byte)items[2];
            max_length = (short)items[3];
            precision = (byte)items[4];
            scale = (byte)items[5];
            collation_name = (string)items[6];
            user_type_id = (int)items[7];
        }
    }

    [SqlView("sys", "partition_range_values")]
    public partial class partition_range_values : SqlViewProxy
    {
        [SqlColumn("function_id", 0), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        [SqlColumn("boundary_id", 1), SqlTypeFacets("int", false)]
        public int boundary_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 2), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public partition_range_values()
        {
        }

        public partition_range_values(object[] items)
        {
            function_id = (int)items[0];
            boundary_id = (int)items[1];
            parameter_id = (int)items[2];
            value = (Object)items[3];
        }

        public partition_range_values(int function_id, int boundary_id, int parameter_id, Object value)
        {
            this.function_id = function_id;
            this.boundary_id = boundary_id;
            this.parameter_id = parameter_id;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { function_id, boundary_id, parameter_id, value };
        }

        public override void SetItemArray(object[] items)
        {
            function_id = (int)items[0];
            boundary_id = (int)items[1];
            parameter_id = (int)items[2];
            value = (Object)items[3];
        }
    }

    [SqlView("sys", "data_spaces")]
    public partial class data_spaces : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", false)]
        public bool is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        public data_spaces()
        {
        }

        public data_spaces(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool)items[4];
            is_system = (bool?)items[5];
        }

        public data_spaces(string name, int data_space_id, string type, string type_desc, bool is_default, bool? is_system)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool)items[4];
            is_system = (bool?)items[5];
        }
    }

    [SqlView("sys", "filegroups")]
    public partial class filegroups : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        [SqlColumn("filegroup_guid", 6), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? filegroup_guid
        {
            get;
            set;
        }

        [SqlColumn("log_filegroup_id", 7), SqlTypeFacets("int", true)]
        public int? log_filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 8), SqlTypeFacets("bit", true)]
        public bool? is_read_only
        {
            get;
            set;
        }

        public filegroups()
        {
        }

        public filegroups(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            filegroup_guid = (Guid?)items[6];
            log_filegroup_id = (int?)items[7];
            is_read_only = (bool?)items[8];
        }

        public filegroups(string name, int data_space_id, string type, string type_desc, bool? is_default, bool? is_system, Guid? filegroup_guid, int? log_filegroup_id, bool? is_read_only)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
            this.filegroup_guid = filegroup_guid;
            this.log_filegroup_id = log_filegroup_id;
            this.is_read_only = is_read_only;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system, filegroup_guid, log_filegroup_id, is_read_only };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            filegroup_guid = (Guid?)items[6];
            log_filegroup_id = (int?)items[7];
            is_read_only = (bool?)items[8];
        }
    }

    [SqlView("sys", "partition_schemes")]
    public partial class partition_schemes : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 1), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_default", 4), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("is_system", 5), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        [SqlColumn("function_id", 6), SqlTypeFacets("int", false)]
        public int function_id
        {
            get;
            set;
        }

        public partition_schemes()
        {
        }

        public partition_schemes(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            function_id = (int)items[6];
        }

        public partition_schemes(string name, int data_space_id, string type, string type_desc, bool? is_default, bool? is_system, int function_id)
        {
            this.name = name;
            this.data_space_id = data_space_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_default = is_default;
            this.is_system = is_system;
            this.function_id = function_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, data_space_id, type, type_desc, is_default, is_system, function_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            data_space_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            is_default = (bool?)items[4];
            is_system = (bool?)items[5];
            function_id = (int)items[6];
        }
    }

    [SqlView("sys", "destination_data_spaces")]
    public partial class destination_data_spaces : SqlViewProxy
    {
        [SqlColumn("partition_scheme_id", 0), SqlTypeFacets("int", false)]
        public int partition_scheme_id
        {
            get;
            set;
        }

        [SqlColumn("destination_id", 1), SqlTypeFacets("int", false)]
        public int destination_id
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 2), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        public destination_data_spaces()
        {
        }

        public destination_data_spaces(object[] items)
        {
            partition_scheme_id = (int)items[0];
            destination_id = (int)items[1];
            data_space_id = (int)items[2];
        }

        public destination_data_spaces(int partition_scheme_id, int destination_id, int data_space_id)
        {
            this.partition_scheme_id = partition_scheme_id;
            this.destination_id = destination_id;
            this.data_space_id = data_space_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_scheme_id, destination_id, data_space_id };
        }

        public override void SetItemArray(object[] items)
        {
            partition_scheme_id = (int)items[0];
            destination_id = (int)items[1];
            data_space_id = (int)items[2];
        }
    }

    [SqlView("sys", "fulltext_catalogs")]
    public partial class fulltext_catalogs : SqlViewProxy
    {
        [SqlColumn("fulltext_catalog_id", 0), SqlTypeFacets("int", false)]
        public int fulltext_catalog_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("path", 2), SqlTypeFacets("nvarchar", true, 520)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("is_default", 3), SqlTypeFacets("bit", false)]
        public bool is_default
        {
            get;
            set;
        }

        [SqlColumn("is_accent_sensitivity_on", 4), SqlTypeFacets("bit", false)]
        public bool is_accent_sensitivity_on
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 5), SqlTypeFacets("int", true)]
        public int? data_space_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 6), SqlTypeFacets("int", true)]
        public int? file_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 7), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_importing", 8), SqlTypeFacets("bit", false)]
        public bool is_importing
        {
            get;
            set;
        }

        public fulltext_catalogs()
        {
        }

        public fulltext_catalogs(object[] items)
        {
            fulltext_catalog_id = (int)items[0];
            name = (string)items[1];
            path = (string)items[2];
            is_default = (bool)items[3];
            is_accent_sensitivity_on = (bool)items[4];
            data_space_id = (int?)items[5];
            file_id = (int?)items[6];
            principal_id = (int?)items[7];
            is_importing = (bool)items[8];
        }

        public fulltext_catalogs(int fulltext_catalog_id, string name, string path, bool is_default, bool is_accent_sensitivity_on, int? data_space_id, int? file_id, int? principal_id, bool is_importing)
        {
            this.fulltext_catalog_id = fulltext_catalog_id;
            this.name = name;
            this.path = path;
            this.is_default = is_default;
            this.is_accent_sensitivity_on = is_accent_sensitivity_on;
            this.data_space_id = data_space_id;
            this.file_id = file_id;
            this.principal_id = principal_id;
            this.is_importing = is_importing;
        }

        public override object[] GetItemArray()
        {
            return new object[] { fulltext_catalog_id, name, path, is_default, is_accent_sensitivity_on, data_space_id, file_id, principal_id, is_importing };
        }

        public override void SetItemArray(object[] items)
        {
            fulltext_catalog_id = (int)items[0];
            name = (string)items[1];
            path = (string)items[2];
            is_default = (bool)items[3];
            is_accent_sensitivity_on = (bool)items[4];
            data_space_id = (int?)items[5];
            file_id = (int?)items[6];
            principal_id = (int?)items[7];
            is_importing = (bool)items[8];
        }
    }

    [SqlView("sys", "service_message_types")]
    public partial class service_message_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("message_type_id", 1), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("validation", 3), SqlTypeFacets("char", false, 2)]
        public string validation
        {
            get;
            set;
        }

        [SqlColumn("validation_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string validation_desc
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 5), SqlTypeFacets("int", true)]
        public int? xml_collection_id
        {
            get;
            set;
        }

        public service_message_types()
        {
        }

        public service_message_types(object[] items)
        {
            name = (string)items[0];
            message_type_id = (int)items[1];
            principal_id = (int?)items[2];
            validation = (string)items[3];
            validation_desc = (string)items[4];
            xml_collection_id = (int?)items[5];
        }

        public service_message_types(string name, int message_type_id, int? principal_id, string validation, string validation_desc, int? xml_collection_id)
        {
            this.name = name;
            this.message_type_id = message_type_id;
            this.principal_id = principal_id;
            this.validation = validation;
            this.validation_desc = validation_desc;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, message_type_id, principal_id, validation, validation_desc, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            message_type_id = (int)items[1];
            principal_id = (int?)items[2];
            validation = (string)items[3];
            validation_desc = (string)items[4];
            xml_collection_id = (int?)items[5];
        }
    }

    [SqlView("sys", "service_contracts")]
    public partial class service_contracts : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 1), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public service_contracts()
        {
        }

        public service_contracts(object[] items)
        {
            name = (string)items[0];
            service_contract_id = (int)items[1];
            principal_id = (int?)items[2];
        }

        public service_contracts(string name, int service_contract_id, int? principal_id)
        {
            this.name = name;
            this.service_contract_id = service_contract_id;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, service_contract_id, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            service_contract_id = (int)items[1];
            principal_id = (int?)items[2];
        }
    }

    [SqlView("sys", "service_contract_message_usages")]
    public partial class service_contract_message_usages : SqlViewProxy
    {
        [SqlColumn("service_contract_id", 0), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("message_type_id", 1), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("is_sent_by_initiator", 2), SqlTypeFacets("bit", false)]
        public bool is_sent_by_initiator
        {
            get;
            set;
        }

        [SqlColumn("is_sent_by_target", 3), SqlTypeFacets("bit", false)]
        public bool is_sent_by_target
        {
            get;
            set;
        }

        public service_contract_message_usages()
        {
        }

        public service_contract_message_usages(object[] items)
        {
            service_contract_id = (int)items[0];
            message_type_id = (int)items[1];
            is_sent_by_initiator = (bool)items[2];
            is_sent_by_target = (bool)items[3];
        }

        public service_contract_message_usages(int service_contract_id, int message_type_id, bool is_sent_by_initiator, bool is_sent_by_target)
        {
            this.service_contract_id = service_contract_id;
            this.message_type_id = message_type_id;
            this.is_sent_by_initiator = is_sent_by_initiator;
            this.is_sent_by_target = is_sent_by_target;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_contract_id, message_type_id, is_sent_by_initiator, is_sent_by_target };
        }

        public override void SetItemArray(object[] items)
        {
            service_contract_id = (int)items[0];
            message_type_id = (int)items[1];
            is_sent_by_initiator = (bool)items[2];
            is_sent_by_target = (bool)items[3];
        }
    }

    [SqlView("sys", "services")]
    public partial class services : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_id", 1), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("service_queue_id", 3), SqlTypeFacets("int", false)]
        public int service_queue_id
        {
            get;
            set;
        }

        public services()
        {
        }

        public services(object[] items)
        {
            name = (string)items[0];
            service_id = (int)items[1];
            principal_id = (int?)items[2];
            service_queue_id = (int)items[3];
        }

        public services(string name, int service_id, int? principal_id, int service_queue_id)
        {
            this.name = name;
            this.service_id = service_id;
            this.principal_id = principal_id;
            this.service_queue_id = service_queue_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, service_id, principal_id, service_queue_id };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            service_id = (int)items[1];
            principal_id = (int?)items[2];
            service_queue_id = (int)items[3];
        }
    }

    [SqlView("sys", "service_contract_usages")]
    public partial class service_contract_usages : SqlViewProxy
    {
        [SqlColumn("service_id", 0), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 1), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        public service_contract_usages()
        {
        }

        public service_contract_usages(object[] items)
        {
            service_id = (int)items[0];
            service_contract_id = (int)items[1];
        }

        public service_contract_usages(int service_id, int service_contract_id)
        {
            this.service_id = service_id;
            this.service_contract_id = service_contract_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_id, service_contract_id };
        }

        public override void SetItemArray(object[] items)
        {
            service_id = (int)items[0];
            service_contract_id = (int)items[1];
        }
    }

    [SqlView("sys", "conversation_groups")]
    public partial class conversation_groups : SqlViewProxy
    {
        [SqlColumn("conversation_group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_group_id
        {
            get;
            set;
        }

        [SqlColumn("service_id", 1), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("is_system", 2), SqlTypeFacets("bit", true)]
        public bool? is_system
        {
            get;
            set;
        }

        public conversation_groups()
        {
        }

        public conversation_groups(object[] items)
        {
            conversation_group_id = (Guid)items[0];
            service_id = (int)items[1];
            is_system = (bool?)items[2];
        }

        public conversation_groups(Guid conversation_group_id, int service_id, bool? is_system)
        {
            this.conversation_group_id = conversation_group_id;
            this.service_id = service_id;
            this.is_system = is_system;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_group_id, service_id, is_system };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_group_id = (Guid)items[0];
            service_id = (int)items[1];
            is_system = (bool?)items[2];
        }
    }

    [SqlView("sys", "conversation_endpoints")]
    public partial class conversation_endpoints : SqlViewProxy
    {
        [SqlColumn("conversation_handle", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_handle
        {
            get;
            set;
        }

        [SqlColumn("conversation_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_id
        {
            get;
            set;
        }

        [SqlColumn("is_initiator", 2), SqlTypeFacets("bit", false)]
        public bool is_initiator
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 3), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("conversation_group_id", 4), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_group_id
        {
            get;
            set;
        }

        [SqlColumn("service_id", 5), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("lifetime", 6), SqlTypeFacets("datetime", false)]
        public DateTime lifetime
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("char", false, 2)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("far_service", 9), SqlTypeFacets("nvarchar", false, 512)]
        public string far_service
        {
            get;
            set;
        }

        [SqlColumn("far_broker_instance", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string far_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 11), SqlTypeFacets("int", false)]
        public int principal_id
        {
            get;
            set;
        }

        [SqlColumn("far_principal_id", 12), SqlTypeFacets("int", false)]
        public int far_principal_id
        {
            get;
            set;
        }

        [SqlColumn("outbound_session_key_identifier", 13), SqlTypeFacets("uniqueidentifier", false)]
        public Guid outbound_session_key_identifier
        {
            get;
            set;
        }

        [SqlColumn("inbound_session_key_identifier", 14), SqlTypeFacets("uniqueidentifier", false)]
        public Guid inbound_session_key_identifier
        {
            get;
            set;
        }

        [SqlColumn("security_timestamp", 15), SqlTypeFacets("datetime", false)]
        public DateTime security_timestamp
        {
            get;
            set;
        }

        [SqlColumn("dialog_timer", 16), SqlTypeFacets("datetime", false)]
        public DateTime dialog_timer
        {
            get;
            set;
        }

        [SqlColumn("send_sequence", 17), SqlTypeFacets("bigint", false)]
        public long send_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_send_tran_id", 18), SqlTypeFacets("binary", false, 6)]
        public Byte[] last_send_tran_id
        {
            get;
            set;
        }

        [SqlColumn("end_dialog_sequence", 19), SqlTypeFacets("bigint", false)]
        public long end_dialog_sequence
        {
            get;
            set;
        }

        [SqlColumn("receive_sequence", 20), SqlTypeFacets("bigint", false)]
        public long receive_sequence
        {
            get;
            set;
        }

        [SqlColumn("receive_sequence_frag", 21), SqlTypeFacets("int", false)]
        public int receive_sequence_frag
        {
            get;
            set;
        }

        [SqlColumn("system_sequence", 22), SqlTypeFacets("bigint", false)]
        public long system_sequence
        {
            get;
            set;
        }

        [SqlColumn("first_out_of_order_sequence", 23), SqlTypeFacets("bigint", false)]
        public long first_out_of_order_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_out_of_order_sequence", 24), SqlTypeFacets("bigint", false)]
        public long last_out_of_order_sequence
        {
            get;
            set;
        }

        [SqlColumn("last_out_of_order_frag", 25), SqlTypeFacets("int", false)]
        public int last_out_of_order_frag
        {
            get;
            set;
        }

        [SqlColumn("is_system", 26), SqlTypeFacets("bit", false)]
        public bool is_system
        {
            get;
            set;
        }

        [SqlColumn("priority", 27), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public conversation_endpoints()
        {
        }

        public conversation_endpoints(object[] items)
        {
            conversation_handle = (Guid)items[0];
            conversation_id = (Guid)items[1];
            is_initiator = (bool)items[2];
            service_contract_id = (int)items[3];
            conversation_group_id = (Guid)items[4];
            service_id = (int)items[5];
            lifetime = (DateTime)items[6];
            state = (string)items[7];
            state_desc = (string)items[8];
            far_service = (string)items[9];
            far_broker_instance = (string)items[10];
            principal_id = (int)items[11];
            far_principal_id = (int)items[12];
            outbound_session_key_identifier = (Guid)items[13];
            inbound_session_key_identifier = (Guid)items[14];
            security_timestamp = (DateTime)items[15];
            dialog_timer = (DateTime)items[16];
            send_sequence = (long)items[17];
            last_send_tran_id = (Byte[])items[18];
            end_dialog_sequence = (long)items[19];
            receive_sequence = (long)items[20];
            receive_sequence_frag = (int)items[21];
            system_sequence = (long)items[22];
            first_out_of_order_sequence = (long)items[23];
            last_out_of_order_sequence = (long)items[24];
            last_out_of_order_frag = (int)items[25];
            is_system = (bool)items[26];
            priority = (byte)items[27];
        }

        public conversation_endpoints(Guid conversation_handle, Guid conversation_id, bool is_initiator, int service_contract_id, Guid conversation_group_id, int service_id, DateTime lifetime, string state, string state_desc, string far_service, string far_broker_instance, int principal_id, int far_principal_id, Guid outbound_session_key_identifier, Guid inbound_session_key_identifier, DateTime security_timestamp, DateTime dialog_timer, long send_sequence, Byte[] last_send_tran_id, long end_dialog_sequence, long receive_sequence, int receive_sequence_frag, long system_sequence, long first_out_of_order_sequence, long last_out_of_order_sequence, int last_out_of_order_frag, bool is_system, byte priority)
        {
            this.conversation_handle = conversation_handle;
            this.conversation_id = conversation_id;
            this.is_initiator = is_initiator;
            this.service_contract_id = service_contract_id;
            this.conversation_group_id = conversation_group_id;
            this.service_id = service_id;
            this.lifetime = lifetime;
            this.state = state;
            this.state_desc = state_desc;
            this.far_service = far_service;
            this.far_broker_instance = far_broker_instance;
            this.principal_id = principal_id;
            this.far_principal_id = far_principal_id;
            this.outbound_session_key_identifier = outbound_session_key_identifier;
            this.inbound_session_key_identifier = inbound_session_key_identifier;
            this.security_timestamp = security_timestamp;
            this.dialog_timer = dialog_timer;
            this.send_sequence = send_sequence;
            this.last_send_tran_id = last_send_tran_id;
            this.end_dialog_sequence = end_dialog_sequence;
            this.receive_sequence = receive_sequence;
            this.receive_sequence_frag = receive_sequence_frag;
            this.system_sequence = system_sequence;
            this.first_out_of_order_sequence = first_out_of_order_sequence;
            this.last_out_of_order_sequence = last_out_of_order_sequence;
            this.last_out_of_order_frag = last_out_of_order_frag;
            this.is_system = is_system;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_handle, conversation_id, is_initiator, service_contract_id, conversation_group_id, service_id, lifetime, state, state_desc, far_service, far_broker_instance, principal_id, far_principal_id, outbound_session_key_identifier, inbound_session_key_identifier, security_timestamp, dialog_timer, send_sequence, last_send_tran_id, end_dialog_sequence, receive_sequence, receive_sequence_frag, system_sequence, first_out_of_order_sequence, last_out_of_order_sequence, last_out_of_order_frag, is_system, priority };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_handle = (Guid)items[0];
            conversation_id = (Guid)items[1];
            is_initiator = (bool)items[2];
            service_contract_id = (int)items[3];
            conversation_group_id = (Guid)items[4];
            service_id = (int)items[5];
            lifetime = (DateTime)items[6];
            state = (string)items[7];
            state_desc = (string)items[8];
            far_service = (string)items[9];
            far_broker_instance = (string)items[10];
            principal_id = (int)items[11];
            far_principal_id = (int)items[12];
            outbound_session_key_identifier = (Guid)items[13];
            inbound_session_key_identifier = (Guid)items[14];
            security_timestamp = (DateTime)items[15];
            dialog_timer = (DateTime)items[16];
            send_sequence = (long)items[17];
            last_send_tran_id = (Byte[])items[18];
            end_dialog_sequence = (long)items[19];
            receive_sequence = (long)items[20];
            receive_sequence_frag = (int)items[21];
            system_sequence = (long)items[22];
            first_out_of_order_sequence = (long)items[23];
            last_out_of_order_sequence = (long)items[24];
            last_out_of_order_frag = (int)items[25];
            is_system = (bool)items[26];
            priority = (byte)items[27];
        }
    }

    [SqlView("sys", "database_files")]
    public partial class database_files : SqlViewProxy
    {
        [SqlColumn("file_id", 0), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("file_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? file_guid
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 4), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("name", 5), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("physical_name", 6), SqlTypeFacets("nvarchar", false, 520)]
        public string physical_name
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("size", 9), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("max_size", 10), SqlTypeFacets("int", false)]
        public int max_size
        {
            get;
            set;
        }

        [SqlColumn("growth", 11), SqlTypeFacets("int", false)]
        public int growth
        {
            get;
            set;
        }

        [SqlColumn("is_media_read_only", 12), SqlTypeFacets("bit", false)]
        public bool is_media_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 13), SqlTypeFacets("bit", false)]
        public bool is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 14), SqlTypeFacets("bit", false)]
        public bool is_sparse
        {
            get;
            set;
        }

        [SqlColumn("is_percent_growth", 15), SqlTypeFacets("bit", false)]
        public bool is_percent_growth
        {
            get;
            set;
        }

        [SqlColumn("is_name_reserved", 16), SqlTypeFacets("bit", false)]
        public bool is_name_reserved
        {
            get;
            set;
        }

        [SqlColumn("create_lsn", 17), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? create_lsn
        {
            get;
            set;
        }

        [SqlColumn("drop_lsn", 18), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? drop_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_only_lsn", 19), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? read_only_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_write_lsn", 20), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? read_write_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_lsn", 21), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? differential_base_lsn
        {
            get;
            set;
        }

        [SqlColumn("differential_base_guid", 22), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? differential_base_guid
        {
            get;
            set;
        }

        [SqlColumn("differential_base_time", 23), SqlTypeFacets("datetime", true)]
        public DateTime? differential_base_time
        {
            get;
            set;
        }

        [SqlColumn("redo_start_lsn", 24), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? redo_start_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_start_fork_guid", 25), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_start_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("redo_target_lsn", 26), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? redo_target_lsn
        {
            get;
            set;
        }

        [SqlColumn("redo_target_fork_guid", 27), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? redo_target_fork_guid
        {
            get;
            set;
        }

        [SqlColumn("backup_lsn", 28), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? backup_lsn
        {
            get;
            set;
        }

        public database_files()
        {
        }

        public database_files(object[] items)
        {
            file_id = (int)items[0];
            file_guid = (Guid?)items[1];
            type = (byte)items[2];
            type_desc = (string)items[3];
            data_space_id = (int)items[4];
            name = (string)items[5];
            physical_name = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            size = (int)items[9];
            max_size = (int)items[10];
            growth = (int)items[11];
            is_media_read_only = (bool)items[12];
            is_read_only = (bool)items[13];
            is_sparse = (bool)items[14];
            is_percent_growth = (bool)items[15];
            is_name_reserved = (bool)items[16];
            create_lsn = (decimal?)items[17];
            drop_lsn = (decimal?)items[18];
            read_only_lsn = (decimal?)items[19];
            read_write_lsn = (decimal?)items[20];
            differential_base_lsn = (decimal?)items[21];
            differential_base_guid = (Guid?)items[22];
            differential_base_time = (DateTime?)items[23];
            redo_start_lsn = (decimal?)items[24];
            redo_start_fork_guid = (Guid?)items[25];
            redo_target_lsn = (decimal?)items[26];
            redo_target_fork_guid = (Guid?)items[27];
            backup_lsn = (decimal?)items[28];
        }

        public database_files(int file_id, Guid? file_guid, byte type, string type_desc, int data_space_id, string name, string physical_name, byte? state, string state_desc, int size, int max_size, int growth, bool is_media_read_only, bool is_read_only, bool is_sparse, bool is_percent_growth, bool is_name_reserved, decimal? create_lsn, decimal? drop_lsn, decimal? read_only_lsn, decimal? read_write_lsn, decimal? differential_base_lsn, Guid? differential_base_guid, DateTime? differential_base_time, decimal? redo_start_lsn, Guid? redo_start_fork_guid, decimal? redo_target_lsn, Guid? redo_target_fork_guid, decimal? backup_lsn)
        {
            this.file_id = file_id;
            this.file_guid = file_guid;
            this.type = type;
            this.type_desc = type_desc;
            this.data_space_id = data_space_id;
            this.name = name;
            this.physical_name = physical_name;
            this.state = state;
            this.state_desc = state_desc;
            this.size = size;
            this.max_size = max_size;
            this.growth = growth;
            this.is_media_read_only = is_media_read_only;
            this.is_read_only = is_read_only;
            this.is_sparse = is_sparse;
            this.is_percent_growth = is_percent_growth;
            this.is_name_reserved = is_name_reserved;
            this.create_lsn = create_lsn;
            this.drop_lsn = drop_lsn;
            this.read_only_lsn = read_only_lsn;
            this.read_write_lsn = read_write_lsn;
            this.differential_base_lsn = differential_base_lsn;
            this.differential_base_guid = differential_base_guid;
            this.differential_base_time = differential_base_time;
            this.redo_start_lsn = redo_start_lsn;
            this.redo_start_fork_guid = redo_start_fork_guid;
            this.redo_target_lsn = redo_target_lsn;
            this.redo_target_fork_guid = redo_target_fork_guid;
            this.backup_lsn = backup_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { file_id, file_guid, type, type_desc, data_space_id, name, physical_name, state, state_desc, size, max_size, growth, is_media_read_only, is_read_only, is_sparse, is_percent_growth, is_name_reserved, create_lsn, drop_lsn, read_only_lsn, read_write_lsn, differential_base_lsn, differential_base_guid, differential_base_time, redo_start_lsn, redo_start_fork_guid, redo_target_lsn, redo_target_fork_guid, backup_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            file_id = (int)items[0];
            file_guid = (Guid?)items[1];
            type = (byte)items[2];
            type_desc = (string)items[3];
            data_space_id = (int)items[4];
            name = (string)items[5];
            physical_name = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
            size = (int)items[9];
            max_size = (int)items[10];
            growth = (int)items[11];
            is_media_read_only = (bool)items[12];
            is_read_only = (bool)items[13];
            is_sparse = (bool)items[14];
            is_percent_growth = (bool)items[15];
            is_name_reserved = (bool)items[16];
            create_lsn = (decimal?)items[17];
            drop_lsn = (decimal?)items[18];
            read_only_lsn = (decimal?)items[19];
            read_write_lsn = (decimal?)items[20];
            differential_base_lsn = (decimal?)items[21];
            differential_base_guid = (Guid?)items[22];
            differential_base_time = (DateTime?)items[23];
            redo_start_lsn = (decimal?)items[24];
            redo_start_fork_guid = (Guid?)items[25];
            redo_target_lsn = (decimal?)items[26];
            redo_target_fork_guid = (Guid?)items[27];
            backup_lsn = (decimal?)items[28];
        }
    }

    [SqlView("sys", "extended_properties")]
    public partial class extended_properties : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 5), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public extended_properties()
        {
        }

        public extended_properties(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            name = (string)items[4];
            value = (Object)items[5];
        }

        public extended_properties(byte @class, string class_desc, int major_id, int minor_id, string name, Object value)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, name, value };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int)items[3];
            name = (string)items[4];
            value = (Object)items[5];
        }
    }

    [SqlView("sys", "xml_schema_namespaces")]
    public partial class xml_schema_namespaces : SqlViewProxy
    {
        [SqlColumn("xml_collection_id", 0), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        public xml_schema_namespaces()
        {
        }

        public xml_schema_namespaces(object[] items)
        {
            xml_collection_id = (int)items[0];
            name = (string)items[1];
            xml_namespace_id = (int)items[2];
        }

        public xml_schema_namespaces(int xml_collection_id, string name, int xml_namespace_id)
        {
            this.xml_collection_id = xml_collection_id;
            this.name = name;
            this.xml_namespace_id = xml_namespace_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_collection_id, name, xml_namespace_id };
        }

        public override void SetItemArray(object[] items)
        {
            xml_collection_id = (int)items[0];
            name = (string)items[1];
            xml_namespace_id = (int)items[2];
        }
    }

    [SqlView("sys", "xml_schema_components")]
    public partial class xml_schema_components : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        public xml_schema_components()
        {
        }

        public xml_schema_components(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
        }

        public xml_schema_components(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
        }
    }

    [SqlView("sys", "xml_schema_types")]
    public partial class xml_schema_types : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_abstract", 13), SqlTypeFacets("bit", false)]
        public bool is_abstract
        {
            get;
            set;
        }

        [SqlColumn("allows_mixed_content", 14), SqlTypeFacets("bit", false)]
        public bool allows_mixed_content
        {
            get;
            set;
        }

        [SqlColumn("is_extension_blocked", 15), SqlTypeFacets("bit", false)]
        public bool is_extension_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_restriction_blocked", 16), SqlTypeFacets("bit", false)]
        public bool is_restriction_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_final_extension", 17), SqlTypeFacets("bit", false)]
        public bool is_final_extension
        {
            get;
            set;
        }

        [SqlColumn("is_final_restriction", 18), SqlTypeFacets("bit", false)]
        public bool is_final_restriction
        {
            get;
            set;
        }

        [SqlColumn("is_final_list_member", 19), SqlTypeFacets("bit", false)]
        public bool is_final_list_member
        {
            get;
            set;
        }

        [SqlColumn("is_final_union_member", 20), SqlTypeFacets("bit", false)]
        public bool is_final_union_member
        {
            get;
            set;
        }

        public xml_schema_types()
        {
        }

        public xml_schema_types(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_abstract = (bool)items[13];
            allows_mixed_content = (bool)items[14];
            is_extension_blocked = (bool)items[15];
            is_restriction_blocked = (bool)items[16];
            is_final_extension = (bool)items[17];
            is_final_restriction = (bool)items[18];
            is_final_list_member = (bool)items[19];
            is_final_union_member = (bool)items[20];
        }

        public xml_schema_types(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_abstract, bool allows_mixed_content, bool is_extension_blocked, bool is_restriction_blocked, bool is_final_extension, bool is_final_restriction, bool is_final_list_member, bool is_final_union_member)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_abstract = is_abstract;
            this.allows_mixed_content = allows_mixed_content;
            this.is_extension_blocked = is_extension_blocked;
            this.is_restriction_blocked = is_restriction_blocked;
            this.is_final_extension = is_final_extension;
            this.is_final_restriction = is_final_restriction;
            this.is_final_list_member = is_final_list_member;
            this.is_final_union_member = is_final_union_member;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_abstract, allows_mixed_content, is_extension_blocked, is_restriction_blocked, is_final_extension, is_final_restriction, is_final_list_member, is_final_union_member };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_abstract = (bool)items[13];
            allows_mixed_content = (bool)items[14];
            is_extension_blocked = (bool)items[15];
            is_restriction_blocked = (bool)items[16];
            is_final_extension = (bool)items[17];
            is_final_restriction = (bool)items[18];
            is_final_list_member = (bool)items[19];
            is_final_union_member = (bool)items[20];
        }
    }

    [SqlView("sys", "xml_schema_facets")]
    public partial class xml_schema_facets : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("facet_id", 1), SqlTypeFacets("int", false)]
        public int facet_id
        {
            get;
            set;
        }

        [SqlColumn("kind", 2), SqlTypeFacets("char", false, 2)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("is_fixed", 4), SqlTypeFacets("bit", false)]
        public bool is_fixed
        {
            get;
            set;
        }

        [SqlColumn("value", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string value
        {
            get;
            set;
        }

        public xml_schema_facets()
        {
        }

        public xml_schema_facets(object[] items)
        {
            xml_component_id = (int)items[0];
            facet_id = (int)items[1];
            kind = (string)items[2];
            kind_desc = (string)items[3];
            is_fixed = (bool)items[4];
            value = (string)items[5];
        }

        public xml_schema_facets(int xml_component_id, int facet_id, string kind, string kind_desc, bool is_fixed, string value)
        {
            this.xml_component_id = xml_component_id;
            this.facet_id = facet_id;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.is_fixed = is_fixed;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, facet_id, kind, kind_desc, is_fixed, value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            facet_id = (int)items[1];
            kind = (string)items[2];
            kind_desc = (string)items[3];
            is_fixed = (bool)items[4];
            value = (string)items[5];
        }
    }

    [SqlView("sys", "xml_schema_elements")]
    public partial class xml_schema_elements : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 13), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("is_abstract", 14), SqlTypeFacets("bit", false)]
        public bool is_abstract
        {
            get;
            set;
        }

        [SqlColumn("is_nillable", 15), SqlTypeFacets("bit", false)]
        public bool is_nillable
        {
            get;
            set;
        }

        [SqlColumn("must_be_qualified", 16), SqlTypeFacets("bit", false)]
        public bool must_be_qualified
        {
            get;
            set;
        }

        [SqlColumn("is_extension_blocked", 17), SqlTypeFacets("bit", false)]
        public bool is_extension_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_restriction_blocked", 18), SqlTypeFacets("bit", false)]
        public bool is_restriction_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_substitution_blocked", 19), SqlTypeFacets("bit", false)]
        public bool is_substitution_blocked
        {
            get;
            set;
        }

        [SqlColumn("is_final_extension", 20), SqlTypeFacets("bit", false)]
        public bool is_final_extension
        {
            get;
            set;
        }

        [SqlColumn("is_final_restriction", 21), SqlTypeFacets("bit", false)]
        public bool is_final_restriction
        {
            get;
            set;
        }

        [SqlColumn("default_value", 22), SqlTypeFacets("nvarchar", true, 8000)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_elements()
        {
        }

        public xml_schema_elements(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            is_abstract = (bool)items[14];
            is_nillable = (bool)items[15];
            must_be_qualified = (bool)items[16];
            is_extension_blocked = (bool)items[17];
            is_restriction_blocked = (bool)items[18];
            is_substitution_blocked = (bool)items[19];
            is_final_extension = (bool)items[20];
            is_final_restriction = (bool)items[21];
            default_value = (string)items[22];
        }

        public xml_schema_elements(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_default_fixed, bool is_abstract, bool is_nillable, bool must_be_qualified, bool is_extension_blocked, bool is_restriction_blocked, bool is_substitution_blocked, bool is_final_extension, bool is_final_restriction, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.is_abstract = is_abstract;
            this.is_nillable = is_nillable;
            this.must_be_qualified = must_be_qualified;
            this.is_extension_blocked = is_extension_blocked;
            this.is_restriction_blocked = is_restriction_blocked;
            this.is_substitution_blocked = is_substitution_blocked;
            this.is_final_extension = is_final_extension;
            this.is_final_restriction = is_final_restriction;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_default_fixed, is_abstract, is_nillable, must_be_qualified, is_extension_blocked, is_restriction_blocked, is_substitution_blocked, is_final_extension, is_final_restriction, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            is_abstract = (bool)items[14];
            is_nillable = (bool)items[15];
            must_be_qualified = (bool)items[16];
            is_extension_blocked = (bool)items[17];
            is_restriction_blocked = (bool)items[18];
            is_substitution_blocked = (bool)items[19];
            is_final_extension = (bool)items[20];
            is_final_restriction = (bool)items[21];
            default_value = (string)items[22];
        }
    }

    [SqlView("sys", "xml_schema_model_groups")]
    public partial class xml_schema_model_groups : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("compositor", 13), SqlTypeFacets("char", false, 1)]
        public string compositor
        {
            get;
            set;
        }

        [SqlColumn("compositor_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string compositor_desc
        {
            get;
            set;
        }

        public xml_schema_model_groups()
        {
        }

        public xml_schema_model_groups(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            compositor = (string)items[13];
            compositor_desc = (string)items[14];
        }

        public xml_schema_model_groups(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, string compositor, string compositor_desc)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.compositor = compositor;
            this.compositor_desc = compositor_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, compositor, compositor_desc };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            compositor = (string)items[13];
            compositor_desc = (string)items[14];
        }
    }

    [SqlView("sys", "xml_schema_attributes")]
    public partial class xml_schema_attributes : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 13), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("must_be_qualified", 14), SqlTypeFacets("bit", false)]
        public bool must_be_qualified
        {
            get;
            set;
        }

        [SqlColumn("default_value", 15), SqlTypeFacets("nvarchar", true, 8000)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_attributes()
        {
        }

        public xml_schema_attributes(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            must_be_qualified = (bool)items[14];
            default_value = (string)items[15];
        }

        public xml_schema_attributes(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, bool is_default_fixed, bool must_be_qualified, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.must_be_qualified = must_be_qualified;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, is_default_fixed, must_be_qualified, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            is_default_fixed = (bool)items[13];
            must_be_qualified = (bool)items[14];
            default_value = (string)items[15];
        }
    }

    [SqlView("sys", "xml_schema_wildcards")]
    public partial class xml_schema_wildcards : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_namespace_id", 2), SqlTypeFacets("int", false)]
        public int xml_namespace_id
        {
            get;
            set;
        }

        [SqlColumn("is_qualified", 3), SqlTypeFacets("bit", false)]
        public bool is_qualified
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("symbol_space", 5), SqlTypeFacets("char", false, 1)]
        public string symbol_space
        {
            get;
            set;
        }

        [SqlColumn("symbol_space_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string symbol_space_desc
        {
            get;
            set;
        }

        [SqlColumn("kind", 7), SqlTypeFacets("char", false, 1)]
        public string kind
        {
            get;
            set;
        }

        [SqlColumn("kind_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string kind_desc
        {
            get;
            set;
        }

        [SqlColumn("derivation", 9), SqlTypeFacets("char", false, 1)]
        public string derivation
        {
            get;
            set;
        }

        [SqlColumn("derivation_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string derivation_desc
        {
            get;
            set;
        }

        [SqlColumn("base_xml_component_id", 11), SqlTypeFacets("int", true)]
        public int? base_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("scoping_xml_component_id", 12), SqlTypeFacets("int", true)]
        public int? scoping_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("process_content", 13), SqlTypeFacets("char", false, 1)]
        public string process_content
        {
            get;
            set;
        }

        [SqlColumn("process_content_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string process_content_desc
        {
            get;
            set;
        }

        [SqlColumn("disallow_namespaces", 15), SqlTypeFacets("bit", false)]
        public bool disallow_namespaces
        {
            get;
            set;
        }

        public xml_schema_wildcards()
        {
        }

        public xml_schema_wildcards(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            process_content = (string)items[13];
            process_content_desc = (string)items[14];
            disallow_namespaces = (bool)items[15];
        }

        public xml_schema_wildcards(int xml_component_id, int xml_collection_id, int xml_namespace_id, bool is_qualified, string name, string symbol_space, string symbol_space_desc, string kind, string kind_desc, string derivation, string derivation_desc, int? base_xml_component_id, int? scoping_xml_component_id, string process_content, string process_content_desc, bool disallow_namespaces)
        {
            this.xml_component_id = xml_component_id;
            this.xml_collection_id = xml_collection_id;
            this.xml_namespace_id = xml_namespace_id;
            this.is_qualified = is_qualified;
            this.name = name;
            this.symbol_space = symbol_space;
            this.symbol_space_desc = symbol_space_desc;
            this.kind = kind;
            this.kind_desc = kind_desc;
            this.derivation = derivation;
            this.derivation_desc = derivation_desc;
            this.base_xml_component_id = base_xml_component_id;
            this.scoping_xml_component_id = scoping_xml_component_id;
            this.process_content = process_content;
            this.process_content_desc = process_content_desc;
            this.disallow_namespaces = disallow_namespaces;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, xml_collection_id, xml_namespace_id, is_qualified, name, symbol_space, symbol_space_desc, kind, kind_desc, derivation, derivation_desc, base_xml_component_id, scoping_xml_component_id, process_content, process_content_desc, disallow_namespaces };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            xml_collection_id = (int)items[1];
            xml_namespace_id = (int)items[2];
            is_qualified = (bool)items[3];
            name = (string)items[4];
            symbol_space = (string)items[5];
            symbol_space_desc = (string)items[6];
            kind = (string)items[7];
            kind_desc = (string)items[8];
            derivation = (string)items[9];
            derivation_desc = (string)items[10];
            base_xml_component_id = (int?)items[11];
            scoping_xml_component_id = (int?)items[12];
            process_content = (string)items[13];
            process_content_desc = (string)items[14];
            disallow_namespaces = (bool)items[15];
        }
    }

    [SqlView("sys", "xml_schema_wildcard_namespaces")]
    public partial class xml_schema_wildcard_namespaces : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("namespace", 1), SqlTypeFacets("nvarchar", false, 8000)]
        public string @namespace
        {
            get;
            set;
        }

        public xml_schema_wildcard_namespaces()
        {
        }

        public xml_schema_wildcard_namespaces(object[] items)
        {
            xml_component_id = (int)items[0];
            @namespace = (string)items[1];
        }

        public xml_schema_wildcard_namespaces(int xml_component_id, string @namespace)
        {
            this.xml_component_id = xml_component_id;
            this.@namespace = @namespace;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, @namespace };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            @namespace = (string)items[1];
        }
    }

    [SqlView("sys", "xml_schema_component_placements")]
    public partial class xml_schema_component_placements : SqlViewProxy
    {
        [SqlColumn("xml_component_id", 0), SqlTypeFacets("int", false)]
        public int xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("placement_id", 1), SqlTypeFacets("int", false)]
        public int placement_id
        {
            get;
            set;
        }

        [SqlColumn("placed_xml_component_id", 2), SqlTypeFacets("int", false)]
        public int placed_xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_fixed", 3), SqlTypeFacets("bit", false)]
        public bool is_default_fixed
        {
            get;
            set;
        }

        [SqlColumn("min_occurences", 4), SqlTypeFacets("int", false)]
        public int min_occurences
        {
            get;
            set;
        }

        [SqlColumn("max_occurences", 5), SqlTypeFacets("int", false)]
        public int max_occurences
        {
            get;
            set;
        }

        [SqlColumn("default_value", 6), SqlTypeFacets("nvarchar", true, 8000)]
        public string default_value
        {
            get;
            set;
        }

        public xml_schema_component_placements()
        {
        }

        public xml_schema_component_placements(object[] items)
        {
            xml_component_id = (int)items[0];
            placement_id = (int)items[1];
            placed_xml_component_id = (int)items[2];
            is_default_fixed = (bool)items[3];
            min_occurences = (int)items[4];
            max_occurences = (int)items[5];
            default_value = (string)items[6];
        }

        public xml_schema_component_placements(int xml_component_id, int placement_id, int placed_xml_component_id, bool is_default_fixed, int min_occurences, int max_occurences, string default_value)
        {
            this.xml_component_id = xml_component_id;
            this.placement_id = placement_id;
            this.placed_xml_component_id = placed_xml_component_id;
            this.is_default_fixed = is_default_fixed;
            this.min_occurences = min_occurences;
            this.max_occurences = max_occurences;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_component_id, placement_id, placed_xml_component_id, is_default_fixed, min_occurences, max_occurences, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            xml_component_id = (int)items[0];
            placement_id = (int)items[1];
            placed_xml_component_id = (int)items[2];
            is_default_fixed = (bool)items[3];
            min_occurences = (int)items[4];
            max_occurences = (int)items[5];
            default_value = (string)items[6];
        }
    }

    [SqlView("sys", "remote_service_bindings")]
    public partial class remote_service_bindings : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("remote_service_binding_id", 1), SqlTypeFacets("int", false)]
        public int remote_service_binding_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 4), SqlTypeFacets("int", false)]
        public int service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("remote_principal_id", 5), SqlTypeFacets("int", true)]
        public int? remote_principal_id
        {
            get;
            set;
        }

        [SqlColumn("is_anonymous_on", 6), SqlTypeFacets("bit", false)]
        public bool is_anonymous_on
        {
            get;
            set;
        }

        public remote_service_bindings()
        {
        }

        public remote_service_bindings(object[] items)
        {
            name = (string)items[0];
            remote_service_binding_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            service_contract_id = (int)items[4];
            remote_principal_id = (int?)items[5];
            is_anonymous_on = (bool)items[6];
        }

        public remote_service_bindings(string name, int remote_service_binding_id, int? principal_id, string remote_service_name, int service_contract_id, int? remote_principal_id, bool is_anonymous_on)
        {
            this.name = name;
            this.remote_service_binding_id = remote_service_binding_id;
            this.principal_id = principal_id;
            this.remote_service_name = remote_service_name;
            this.service_contract_id = service_contract_id;
            this.remote_principal_id = remote_principal_id;
            this.is_anonymous_on = is_anonymous_on;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, remote_service_binding_id, principal_id, remote_service_name, service_contract_id, remote_principal_id, is_anonymous_on };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            remote_service_binding_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            service_contract_id = (int)items[4];
            remote_principal_id = (int?)items[5];
            is_anonymous_on = (bool)items[6];
        }
    }

    [SqlView("sys", "routes")]
    public partial class routes : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("route_id", 1), SqlTypeFacets("int", false)]
        public int route_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("broker_instance", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string broker_instance
        {
            get;
            set;
        }

        [SqlColumn("lifetime", 5), SqlTypeFacets("datetime", true)]
        public DateTime? lifetime
        {
            get;
            set;
        }

        [SqlColumn("address", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string address
        {
            get;
            set;
        }

        [SqlColumn("mirror_address", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string mirror_address
        {
            get;
            set;
        }

        public routes()
        {
        }

        public routes(object[] items)
        {
            name = (string)items[0];
            route_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            broker_instance = (string)items[4];
            lifetime = (DateTime?)items[5];
            address = (string)items[6];
            mirror_address = (string)items[7];
        }

        public routes(string name, int route_id, int? principal_id, string remote_service_name, string broker_instance, DateTime? lifetime, string address, string mirror_address)
        {
            this.name = name;
            this.route_id = route_id;
            this.principal_id = principal_id;
            this.remote_service_name = remote_service_name;
            this.broker_instance = broker_instance;
            this.lifetime = lifetime;
            this.address = address;
            this.mirror_address = mirror_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, route_id, principal_id, remote_service_name, broker_instance, lifetime, address, mirror_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            route_id = (int)items[1];
            principal_id = (int?)items[2];
            remote_service_name = (string)items[3];
            broker_instance = (string)items[4];
            lifetime = (DateTime?)items[5];
            address = (string)items[6];
            mirror_address = (string)items[7];
        }
    }

    [SqlView("sys", "transmission_queue")]
    public partial class transmission_queue : SqlViewProxy
    {
        [SqlColumn("conversation_handle", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid conversation_handle
        {
            get;
            set;
        }

        [SqlColumn("to_service_name", 1), SqlTypeFacets("nvarchar", true, 512)]
        public string to_service_name
        {
            get;
            set;
        }

        [SqlColumn("to_broker_instance", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string to_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("from_service_name", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string from_service_name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_name", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string service_contract_name
        {
            get;
            set;
        }

        [SqlColumn("enqueue_time", 5), SqlTypeFacets("datetime", false)]
        public DateTime enqueue_time
        {
            get;
            set;
        }

        [SqlColumn("message_sequence_number", 6), SqlTypeFacets("bigint", false)]
        public long message_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("message_type_name", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string message_type_name
        {
            get;
            set;
        }

        [SqlColumn("is_conversation_error", 8), SqlTypeFacets("bit", false)]
        public bool is_conversation_error
        {
            get;
            set;
        }

        [SqlColumn("is_end_of_dialog", 9), SqlTypeFacets("bit", false)]
        public bool is_end_of_dialog
        {
            get;
            set;
        }

        [SqlColumn("message_body", 10), SqlTypeFacets("varbinary", true, -1)]
        public Byte[] message_body
        {
            get;
            set;
        }

        [SqlColumn("transmission_status", 11), SqlTypeFacets("nvarchar", true, 8000)]
        public string transmission_status
        {
            get;
            set;
        }

        [SqlColumn("priority", 12), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public transmission_queue()
        {
        }

        public transmission_queue(object[] items)
        {
            conversation_handle = (Guid)items[0];
            to_service_name = (string)items[1];
            to_broker_instance = (string)items[2];
            from_service_name = (string)items[3];
            service_contract_name = (string)items[4];
            enqueue_time = (DateTime)items[5];
            message_sequence_number = (long)items[6];
            message_type_name = (string)items[7];
            is_conversation_error = (bool)items[8];
            is_end_of_dialog = (bool)items[9];
            message_body = (Byte[])items[10];
            transmission_status = (string)items[11];
            priority = (byte)items[12];
        }

        public transmission_queue(Guid conversation_handle, string to_service_name, string to_broker_instance, string from_service_name, string service_contract_name, DateTime enqueue_time, long message_sequence_number, string message_type_name, bool is_conversation_error, bool is_end_of_dialog, Byte[] message_body, string transmission_status, byte priority)
        {
            this.conversation_handle = conversation_handle;
            this.to_service_name = to_service_name;
            this.to_broker_instance = to_broker_instance;
            this.from_service_name = from_service_name;
            this.service_contract_name = service_contract_name;
            this.enqueue_time = enqueue_time;
            this.message_sequence_number = message_sequence_number;
            this.message_type_name = message_type_name;
            this.is_conversation_error = is_conversation_error;
            this.is_end_of_dialog = is_end_of_dialog;
            this.message_body = message_body;
            this.transmission_status = transmission_status;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_handle, to_service_name, to_broker_instance, from_service_name, service_contract_name, enqueue_time, message_sequence_number, message_type_name, is_conversation_error, is_end_of_dialog, message_body, transmission_status, priority };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_handle = (Guid)items[0];
            to_service_name = (string)items[1];
            to_broker_instance = (string)items[2];
            from_service_name = (string)items[3];
            service_contract_name = (string)items[4];
            enqueue_time = (DateTime)items[5];
            message_sequence_number = (long)items[6];
            message_type_name = (string)items[7];
            is_conversation_error = (bool)items[8];
            is_end_of_dialog = (bool)items[9];
            message_body = (Byte[])items[10];
            transmission_status = (string)items[11];
            priority = (byte)items[12];
        }
    }

    [SqlView("sys", "xml_schema_collections")]
    public partial class xml_schema_collections : SqlViewProxy
    {
        [SqlColumn("xml_collection_id", 0), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 1), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("name", 3), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 4), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 5), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        public xml_schema_collections()
        {
        }

        public xml_schema_collections(object[] items)
        {
            xml_collection_id = (int)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
            name = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
        }

        public xml_schema_collections(int xml_collection_id, int schema_id, int? principal_id, string name, DateTime create_date, DateTime modify_date)
        {
            this.xml_collection_id = xml_collection_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xml_collection_id, schema_id, principal_id, name, create_date, modify_date };
        }

        public override void SetItemArray(object[] items)
        {
            xml_collection_id = (int)items[0];
            schema_id = (int)items[1];
            principal_id = (int?)items[2];
            name = (string)items[3];
            create_date = (DateTime)items[4];
            modify_date = (DateTime)items[5];
        }
    }

    [SqlView("sys", "symmetric_keys")]
    public partial class symmetric_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_id", 2), SqlTypeFacets("int", false)]
        public int symmetric_key_id
        {
            get;
            set;
        }

        [SqlColumn("key_length", 3), SqlTypeFacets("int", false)]
        public int key_length
        {
            get;
            set;
        }

        [SqlColumn("key_algorithm", 4), SqlTypeFacets("char", false, 2)]
        public string key_algorithm
        {
            get;
            set;
        }

        [SqlColumn("algorithm_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 6), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("key_guid", 8), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? key_guid
        {
            get;
            set;
        }

        [SqlColumn("key_thumbprint", 9), SqlTypeFacets("sql_variant", true)]
        public Object key_thumbprint
        {
            get;
            set;
        }

        [SqlColumn("provider_type", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string provider_type
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_guid", 11), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? cryptographic_provider_guid
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_algid", 12), SqlTypeFacets("sql_variant", true)]
        public Object cryptographic_provider_algid
        {
            get;
            set;
        }

        public symmetric_keys()
        {
        }

        public symmetric_keys(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            symmetric_key_id = (int)items[2];
            key_length = (int)items[3];
            key_algorithm = (string)items[4];
            algorithm_desc = (string)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            key_guid = (Guid?)items[8];
            key_thumbprint = (Object)items[9];
            provider_type = (string)items[10];
            cryptographic_provider_guid = (Guid?)items[11];
            cryptographic_provider_algid = (Object)items[12];
        }

        public symmetric_keys(string name, int? principal_id, int symmetric_key_id, int key_length, string key_algorithm, string algorithm_desc, DateTime create_date, DateTime modify_date, Guid? key_guid, Object key_thumbprint, string provider_type, Guid? cryptographic_provider_guid, Object cryptographic_provider_algid)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.symmetric_key_id = symmetric_key_id;
            this.key_length = key_length;
            this.key_algorithm = key_algorithm;
            this.algorithm_desc = algorithm_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.key_guid = key_guid;
            this.key_thumbprint = key_thumbprint;
            this.provider_type = provider_type;
            this.cryptographic_provider_guid = cryptographic_provider_guid;
            this.cryptographic_provider_algid = cryptographic_provider_algid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, symmetric_key_id, key_length, key_algorithm, algorithm_desc, create_date, modify_date, key_guid, key_thumbprint, provider_type, cryptographic_provider_guid, cryptographic_provider_algid };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            symmetric_key_id = (int)items[2];
            key_length = (int)items[3];
            key_algorithm = (string)items[4];
            algorithm_desc = (string)items[5];
            create_date = (DateTime)items[6];
            modify_date = (DateTime)items[7];
            key_guid = (Guid?)items[8];
            key_thumbprint = (Object)items[9];
            provider_type = (string)items[10];
            cryptographic_provider_guid = (Guid?)items[11];
            cryptographic_provider_algid = (Object)items[12];
        }
    }

    [SqlView("sys", "key_encryptions")]
    public partial class key_encryptions : SqlViewProxy
    {
        [SqlColumn("key_id", 0), SqlTypeFacets("int", false)]
        public int key_id
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 1), SqlTypeFacets("varbinary", true, 32)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("crypt_type", 2), SqlTypeFacets("char", false, 4)]
        public string crypt_type
        {
            get;
            set;
        }

        [SqlColumn("crypt_type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string crypt_type_desc
        {
            get;
            set;
        }

        [SqlColumn("crypt_property", 4), SqlTypeFacets("varbinary", true, -1)]
        public Byte[] crypt_property
        {
            get;
            set;
        }

        public key_encryptions()
        {
        }

        public key_encryptions(object[] items)
        {
            key_id = (int)items[0];
            thumbprint = (Byte[])items[1];
            crypt_type = (string)items[2];
            crypt_type_desc = (string)items[3];
            crypt_property = (Byte[])items[4];
        }

        public key_encryptions(int key_id, Byte[] thumbprint, string crypt_type, string crypt_type_desc, Byte[] crypt_property)
        {
            this.key_id = key_id;
            this.thumbprint = thumbprint;
            this.crypt_type = crypt_type;
            this.crypt_type_desc = crypt_type_desc;
            this.crypt_property = crypt_property;
        }

        public override object[] GetItemArray()
        {
            return new object[] { key_id, thumbprint, crypt_type, crypt_type_desc, crypt_property };
        }

        public override void SetItemArray(object[] items)
        {
            key_id = (int)items[0];
            thumbprint = (Byte[])items[1];
            crypt_type = (string)items[2];
            crypt_type_desc = (string)items[3];
            crypt_property = (Byte[])items[4];
        }
    }

    [SqlView("sys", "crypt_properties")]
    public partial class crypt_properties : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 3), SqlTypeFacets("varbinary", false, 32)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("crypt_type", 4), SqlTypeFacets("char", false, 4)]
        public string crypt_type
        {
            get;
            set;
        }

        [SqlColumn("crypt_type_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string crypt_type_desc
        {
            get;
            set;
        }

        [SqlColumn("crypt_property", 6), SqlTypeFacets("varbinary", false, -1)]
        public Byte[] crypt_property
        {
            get;
            set;
        }

        public crypt_properties()
        {
        }

        public crypt_properties(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            thumbprint = (Byte[])items[3];
            crypt_type = (string)items[4];
            crypt_type_desc = (string)items[5];
            crypt_property = (Byte[])items[6];
        }

        public crypt_properties(byte @class, string class_desc, int major_id, Byte[] thumbprint, string crypt_type, string crypt_type_desc, Byte[] crypt_property)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.thumbprint = thumbprint;
            this.crypt_type = crypt_type;
            this.crypt_type_desc = crypt_type_desc;
            this.crypt_property = crypt_property;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, thumbprint, crypt_type, crypt_type_desc, crypt_property };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (byte)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            thumbprint = (Byte[])items[3];
            crypt_type = (string)items[4];
            crypt_type_desc = (string)items[5];
            crypt_property = (Byte[])items[6];
        }
    }

    [SqlView("sys", "certificates")]
    public partial class certificates : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("certificate_id", 1), SqlTypeFacets("int", false)]
        public int certificate_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type", 3), SqlTypeFacets("char", false, 2)]
        public string pvt_key_encryption_type
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string pvt_key_encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_active_for_begin_dialog", 5), SqlTypeFacets("bit", true)]
        public bool? is_active_for_begin_dialog
        {
            get;
            set;
        }

        [SqlColumn("issuer_name", 6), SqlTypeFacets("nvarchar", true, 884)]
        public string issuer_name
        {
            get;
            set;
        }

        [SqlColumn("cert_serial_number", 7), SqlTypeFacets("nvarchar", true, 128)]
        public string cert_serial_number
        {
            get;
            set;
        }

        [SqlColumn("sid", 8), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("string_sid", 9), SqlTypeFacets("nvarchar", true, 256)]
        public string string_sid
        {
            get;
            set;
        }

        [SqlColumn("subject", 10), SqlTypeFacets("nvarchar", true, 8000)]
        public string subject
        {
            get;
            set;
        }

        [SqlColumn("expiry_date", 11), SqlTypeFacets("datetime", true)]
        public DateTime? expiry_date
        {
            get;
            set;
        }

        [SqlColumn("start_date", 12), SqlTypeFacets("datetime", true)]
        public DateTime? start_date
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 13), SqlTypeFacets("varbinary", false, 32)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("attested_by", 14), SqlTypeFacets("nvarchar", true, 520)]
        public string attested_by
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_last_backup_date", 15), SqlTypeFacets("datetime", true)]
        public DateTime? pvt_key_last_backup_date
        {
            get;
            set;
        }

        public certificates()
        {
        }

        public certificates(object[] items)
        {
            name = (string)items[0];
            certificate_id = (int)items[1];
            principal_id = (int?)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            is_active_for_begin_dialog = (bool?)items[5];
            issuer_name = (string)items[6];
            cert_serial_number = (string)items[7];
            sid = (Byte[])items[8];
            string_sid = (string)items[9];
            subject = (string)items[10];
            expiry_date = (DateTime?)items[11];
            start_date = (DateTime?)items[12];
            thumbprint = (Byte[])items[13];
            attested_by = (string)items[14];
            pvt_key_last_backup_date = (DateTime?)items[15];
        }

        public certificates(string name, int certificate_id, int? principal_id, string pvt_key_encryption_type, string pvt_key_encryption_type_desc, bool? is_active_for_begin_dialog, string issuer_name, string cert_serial_number, Byte[] sid, string string_sid, string subject, DateTime? expiry_date, DateTime? start_date, Byte[] thumbprint, string attested_by, DateTime? pvt_key_last_backup_date)
        {
            this.name = name;
            this.certificate_id = certificate_id;
            this.principal_id = principal_id;
            this.pvt_key_encryption_type = pvt_key_encryption_type;
            this.pvt_key_encryption_type_desc = pvt_key_encryption_type_desc;
            this.is_active_for_begin_dialog = is_active_for_begin_dialog;
            this.issuer_name = issuer_name;
            this.cert_serial_number = cert_serial_number;
            this.sid = sid;
            this.string_sid = string_sid;
            this.subject = subject;
            this.expiry_date = expiry_date;
            this.start_date = start_date;
            this.thumbprint = thumbprint;
            this.attested_by = attested_by;
            this.pvt_key_last_backup_date = pvt_key_last_backup_date;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, certificate_id, principal_id, pvt_key_encryption_type, pvt_key_encryption_type_desc, is_active_for_begin_dialog, issuer_name, cert_serial_number, sid, string_sid, subject, expiry_date, start_date, thumbprint, attested_by, pvt_key_last_backup_date };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            certificate_id = (int)items[1];
            principal_id = (int?)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            is_active_for_begin_dialog = (bool?)items[5];
            issuer_name = (string)items[6];
            cert_serial_number = (string)items[7];
            sid = (Byte[])items[8];
            string_sid = (string)items[9];
            subject = (string)items[10];
            expiry_date = (DateTime?)items[11];
            start_date = (DateTime?)items[12];
            thumbprint = (Byte[])items[13];
            attested_by = (string)items[14];
            pvt_key_last_backup_date = (DateTime?)items[15];
        }
    }

    [SqlView("sys", "internal_tables")]
    public partial class internal_tables : SqlViewProxy
    {
        [SqlColumn("filestream_data_space_id", 17), SqlTypeFacets("int", true)]
        public int? filestream_data_space_id
        {
            get;
            set;
        }

        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", true)]
        public bool? is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", true)]
        public bool? is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", true)]
        public bool? is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("internal_type", 12), SqlTypeFacets("tinyint", true)]
        public byte? internal_type
        {
            get;
            set;
        }

        [SqlColumn("internal_type_desc", 13), SqlTypeFacets("nvarchar", true, 120)]
        public string internal_type_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_id", 14), SqlTypeFacets("int", true)]
        public int? parent_id
        {
            get;
            set;
        }

        [SqlColumn("parent_minor_id", 15), SqlTypeFacets("int", true)]
        public int? parent_minor_id
        {
            get;
            set;
        }

        [SqlColumn("lob_data_space_id", 16), SqlTypeFacets("int", false)]
        public int lob_data_space_id
        {
            get;
            set;
        }

        public internal_tables()
        {
        }

        public internal_tables(object[] items)
        {
            filestream_data_space_id = (int?)items[0];
            name = (string)items[1];
            object_id = (int)items[2];
            principal_id = (int?)items[3];
            schema_id = (int)items[4];
            parent_object_id = (int)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            create_date = (DateTime)items[8];
            modify_date = (DateTime)items[9];
            is_ms_shipped = (bool?)items[10];
            is_published = (bool?)items[11];
            is_schema_published = (bool?)items[12];
            internal_type = (byte?)items[13];
            internal_type_desc = (string)items[14];
            parent_id = (int?)items[15];
            parent_minor_id = (int?)items[16];
            lob_data_space_id = (int)items[17];
        }

        public internal_tables(int? filestream_data_space_id, string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool? is_ms_shipped, bool? is_published, bool? is_schema_published, byte? internal_type, string internal_type_desc, int? parent_id, int? parent_minor_id, int lob_data_space_id)
        {
            this.filestream_data_space_id = filestream_data_space_id;
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.internal_type = internal_type;
            this.internal_type_desc = internal_type_desc;
            this.parent_id = parent_id;
            this.parent_minor_id = parent_minor_id;
            this.lob_data_space_id = lob_data_space_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { filestream_data_space_id, name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, internal_type, internal_type_desc, parent_id, parent_minor_id, lob_data_space_id };
        }

        public override void SetItemArray(object[] items)
        {
            filestream_data_space_id = (int?)items[0];
            name = (string)items[1];
            object_id = (int)items[2];
            principal_id = (int?)items[3];
            schema_id = (int)items[4];
            parent_object_id = (int)items[5];
            type = (string)items[6];
            type_desc = (string)items[7];
            create_date = (DateTime)items[8];
            modify_date = (DateTime)items[9];
            is_ms_shipped = (bool?)items[10];
            is_published = (bool?)items[11];
            is_schema_published = (bool?)items[12];
            internal_type = (byte?)items[13];
            internal_type_desc = (string)items[14];
            parent_id = (int?)items[15];
            parent_minor_id = (int?)items[16];
            lob_data_space_id = (int)items[17];
        }
    }

    [SqlView("sys", "asymmetric_keys")]
    public partial class asymmetric_keys : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 1), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_id", 2), SqlTypeFacets("int", false)]
        public int asymmetric_key_id
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type", 3), SqlTypeFacets("char", false, 2)]
        public string pvt_key_encryption_type
        {
            get;
            set;
        }

        [SqlColumn("pvt_key_encryption_type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string pvt_key_encryption_type_desc
        {
            get;
            set;
        }

        [SqlColumn("thumbprint", 5), SqlTypeFacets("varbinary", false, 32)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        [SqlColumn("algorithm", 6), SqlTypeFacets("char", false, 2)]
        public string algorithm
        {
            get;
            set;
        }

        [SqlColumn("algorithm_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("key_length", 8), SqlTypeFacets("int", false)]
        public int key_length
        {
            get;
            set;
        }

        [SqlColumn("sid", 9), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("string_sid", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string string_sid
        {
            get;
            set;
        }

        [SqlColumn("public_key", 11), SqlTypeFacets("varbinary", false, -1)]
        public Byte[] public_key
        {
            get;
            set;
        }

        [SqlColumn("attested_by", 12), SqlTypeFacets("nvarchar", true, 520)]
        public string attested_by
        {
            get;
            set;
        }

        [SqlColumn("provider_type", 13), SqlTypeFacets("nvarchar", true, 120)]
        public string provider_type
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_guid", 14), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? cryptographic_provider_guid
        {
            get;
            set;
        }

        [SqlColumn("cryptographic_provider_algid", 15), SqlTypeFacets("sql_variant", true)]
        public Object cryptographic_provider_algid
        {
            get;
            set;
        }

        public asymmetric_keys()
        {
        }

        public asymmetric_keys(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            asymmetric_key_id = (int)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            thumbprint = (Byte[])items[5];
            algorithm = (string)items[6];
            algorithm_desc = (string)items[7];
            key_length = (int)items[8];
            sid = (Byte[])items[9];
            string_sid = (string)items[10];
            public_key = (Byte[])items[11];
            attested_by = (string)items[12];
            provider_type = (string)items[13];
            cryptographic_provider_guid = (Guid?)items[14];
            cryptographic_provider_algid = (Object)items[15];
        }

        public asymmetric_keys(string name, int? principal_id, int asymmetric_key_id, string pvt_key_encryption_type, string pvt_key_encryption_type_desc, Byte[] thumbprint, string algorithm, string algorithm_desc, int key_length, Byte[] sid, string string_sid, Byte[] public_key, string attested_by, string provider_type, Guid? cryptographic_provider_guid, Object cryptographic_provider_algid)
        {
            this.name = name;
            this.principal_id = principal_id;
            this.asymmetric_key_id = asymmetric_key_id;
            this.pvt_key_encryption_type = pvt_key_encryption_type;
            this.pvt_key_encryption_type_desc = pvt_key_encryption_type_desc;
            this.thumbprint = thumbprint;
            this.algorithm = algorithm;
            this.algorithm_desc = algorithm_desc;
            this.key_length = key_length;
            this.sid = sid;
            this.string_sid = string_sid;
            this.public_key = public_key;
            this.attested_by = attested_by;
            this.provider_type = provider_type;
            this.cryptographic_provider_guid = cryptographic_provider_guid;
            this.cryptographic_provider_algid = cryptographic_provider_algid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, principal_id, asymmetric_key_id, pvt_key_encryption_type, pvt_key_encryption_type_desc, thumbprint, algorithm, algorithm_desc, key_length, sid, string_sid, public_key, attested_by, provider_type, cryptographic_provider_guid, cryptographic_provider_algid };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            principal_id = (int?)items[1];
            asymmetric_key_id = (int)items[2];
            pvt_key_encryption_type = (string)items[3];
            pvt_key_encryption_type_desc = (string)items[4];
            thumbprint = (Byte[])items[5];
            algorithm = (string)items[6];
            algorithm_desc = (string)items[7];
            key_length = (int)items[8];
            sid = (Byte[])items[9];
            string_sid = (string)items[10];
            public_key = (Byte[])items[11];
            attested_by = (string)items[12];
            provider_type = (string)items[13];
            cryptographic_provider_guid = (Guid?)items[14];
            cryptographic_provider_algid = (Object)items[15];
        }
    }

    [SqlView("sys", "column_xml_schema_collection_usages")]
    public partial class column_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 2), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public column_xml_schema_collection_usages()
        {
        }

        public column_xml_schema_collection_usages(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }

        public column_xml_schema_collection_usages(int object_id, int column_id, int xml_collection_id)
        {
            this.object_id = object_id;
            this.column_id = column_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, column_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }
    }

    [SqlView("sys", "parameter_xml_schema_collection_usages")]
    public partial class parameter_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 2), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public parameter_xml_schema_collection_usages()
        {
        }

        public parameter_xml_schema_collection_usages(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }

        public parameter_xml_schema_collection_usages(int object_id, int parameter_id, int xml_collection_id)
        {
            this.object_id = object_id;
            this.parameter_id = parameter_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parameter_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            xml_collection_id = (int)items[2];
        }
    }

    [SqlView("sys", "message_type_xml_schema_collection_usages")]
    public partial class message_type_xml_schema_collection_usages : SqlViewProxy
    {
        [SqlColumn("message_type_id", 0), SqlTypeFacets("int", false)]
        public int message_type_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 1), SqlTypeFacets("int", false)]
        public int xml_collection_id
        {
            get;
            set;
        }

        public message_type_xml_schema_collection_usages()
        {
        }

        public message_type_xml_schema_collection_usages(object[] items)
        {
            message_type_id = (int)items[0];
            xml_collection_id = (int)items[1];
        }

        public message_type_xml_schema_collection_usages(int message_type_id, int xml_collection_id)
        {
            this.message_type_id = message_type_id;
            this.xml_collection_id = xml_collection_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { message_type_id, xml_collection_id };
        }

        public override void SetItemArray(object[] items)
        {
            message_type_id = (int)items[0];
            xml_collection_id = (int)items[1];
        }
    }

    [SqlView("sys", "column_type_usages")]
    public partial class column_type_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public column_type_usages()
        {
        }

        public column_type_usages(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            user_type_id = (int)items[2];
        }

        public column_type_usages(int object_id, int column_id, int user_type_id)
        {
            this.object_id = object_id;
            this.column_id = column_id;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, column_id, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            column_id = (int)items[1];
            user_type_id = (int)items[2];
        }
    }

    [SqlView("sys", "parameter_type_usages")]
    public partial class parameter_type_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parameter_id", 1), SqlTypeFacets("int", false)]
        public int parameter_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        public parameter_type_usages()
        {
        }

        public parameter_type_usages(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            user_type_id = (int)items[2];
        }

        public parameter_type_usages(int object_id, int parameter_id, int user_type_id)
        {
            this.object_id = object_id;
            this.parameter_id = parameter_id;
            this.user_type_id = user_type_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parameter_id, user_type_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parameter_id = (int)items[1];
            user_type_id = (int)items[2];
        }
    }

    [SqlView("sys", "service_queue_usages")]
    public partial class service_queue_usages : SqlViewProxy
    {
        [SqlColumn("service_id", 0), SqlTypeFacets("int", false)]
        public int service_id
        {
            get;
            set;
        }

        [SqlColumn("service_queue_id", 1), SqlTypeFacets("int", false)]
        public int service_queue_id
        {
            get;
            set;
        }

        public service_queue_usages()
        {
        }

        public service_queue_usages(object[] items)
        {
            service_id = (int)items[0];
            service_queue_id = (int)items[1];
        }

        public service_queue_usages(int service_id, int service_queue_id)
        {
            this.service_id = service_id;
            this.service_queue_id = service_queue_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { service_id, service_queue_id };
        }

        public override void SetItemArray(object[] items)
        {
            service_id = (int)items[0];
            service_queue_id = (int)items[1];
        }
    }

    [SqlView("sys", "fulltext_index_catalog_usages")]
    public partial class fulltext_index_catalog_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("fulltext_catalog_id", 2), SqlTypeFacets("int", false)]
        public int fulltext_catalog_id
        {
            get;
            set;
        }

        public fulltext_index_catalog_usages()
        {
        }

        public fulltext_index_catalog_usages(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int?)items[1];
            fulltext_catalog_id = (int)items[2];
        }

        public fulltext_index_catalog_usages(int object_id, int? index_id, int fulltext_catalog_id)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.fulltext_catalog_id = fulltext_catalog_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, fulltext_catalog_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int?)items[1];
            fulltext_catalog_id = (int)items[2];
        }
    }

    [SqlView("sys", "type_assembly_usages")]
    public partial class type_assembly_usages : SqlViewProxy
    {
        [SqlColumn("user_type_id", 0), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        public type_assembly_usages()
        {
        }

        public type_assembly_usages(object[] items)
        {
            user_type_id = (int)items[0];
            assembly_id = (int)items[1];
        }

        public type_assembly_usages(int user_type_id, int assembly_id)
        {
            this.user_type_id = user_type_id;
            this.assembly_id = assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { user_type_id, assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            user_type_id = (int)items[0];
            assembly_id = (int)items[1];
        }
    }

    [SqlView("sys", "module_assembly_usages")]
    public partial class module_assembly_usages : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("assembly_id", 1), SqlTypeFacets("int", false)]
        public int assembly_id
        {
            get;
            set;
        }

        public module_assembly_usages()
        {
        }

        public module_assembly_usages(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
        }

        public module_assembly_usages(int object_id, int assembly_id)
        {
            this.object_id = object_id;
            this.assembly_id = assembly_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, assembly_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            assembly_id = (int)items[1];
        }
    }

    [SqlView("sys", "plan_guides")]
    public partial class plan_guides : SqlViewProxy
    {
        [SqlColumn("plan_guide_id", 0), SqlTypeFacets("int", false)]
        public int plan_guide_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 4), SqlTypeFacets("bit", false)]
        public bool is_disabled
        {
            get;
            set;
        }

        [SqlColumn("query_text", 5), SqlTypeFacets("nvarchar", true, -1)]
        public string query_text
        {
            get;
            set;
        }

        [SqlColumn("scope_type", 6), SqlTypeFacets("tinyint", false)]
        public byte scope_type
        {
            get;
            set;
        }

        [SqlColumn("scope_type_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string scope_type_desc
        {
            get;
            set;
        }

        [SqlColumn("scope_object_id", 8), SqlTypeFacets("int", true)]
        public int? scope_object_id
        {
            get;
            set;
        }

        [SqlColumn("scope_batch", 9), SqlTypeFacets("nvarchar", true, -1)]
        public string scope_batch
        {
            get;
            set;
        }

        [SqlColumn("parameters", 10), SqlTypeFacets("nvarchar", true, -1)]
        public string parameters
        {
            get;
            set;
        }

        [SqlColumn("hints", 11), SqlTypeFacets("nvarchar", true, -1)]
        public string hints
        {
            get;
            set;
        }

        public plan_guides()
        {
        }

        public plan_guides(object[] items)
        {
            plan_guide_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            is_disabled = (bool)items[4];
            query_text = (string)items[5];
            scope_type = (byte)items[6];
            scope_type_desc = (string)items[7];
            scope_object_id = (int?)items[8];
            scope_batch = (string)items[9];
            parameters = (string)items[10];
            hints = (string)items[11];
        }

        public plan_guides(int plan_guide_id, string name, DateTime create_date, DateTime modify_date, bool is_disabled, string query_text, byte scope_type, string scope_type_desc, int? scope_object_id, string scope_batch, string parameters, string hints)
        {
            this.plan_guide_id = plan_guide_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_disabled = is_disabled;
            this.query_text = query_text;
            this.scope_type = scope_type;
            this.scope_type_desc = scope_type_desc;
            this.scope_object_id = scope_object_id;
            this.scope_batch = scope_batch;
            this.parameters = parameters;
            this.hints = hints;
        }

        public override object[] GetItemArray()
        {
            return new object[] { plan_guide_id, name, create_date, modify_date, is_disabled, query_text, scope_type, scope_type_desc, scope_object_id, scope_batch, parameters, hints };
        }

        public override void SetItemArray(object[] items)
        {
            plan_guide_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            is_disabled = (bool)items[4];
            query_text = (string)items[5];
            scope_type = (byte)items[6];
            scope_type_desc = (string)items[7];
            scope_object_id = (int?)items[8];
            scope_batch = (string)items[9];
            parameters = (string)items[10];
            hints = (string)items[11];
        }
    }

    [SqlView("sys", "system_internals_partitions")]
    public partial class system_internals_partitions : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("rows", 4), SqlTypeFacets("bigint", false)]
        public long rows
        {
            get;
            set;
        }

        [SqlColumn("filestream_filegroup_id", 5), SqlTypeFacets("smallint", false)]
        public short filestream_filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("is_orphaned", 6), SqlTypeFacets("bit", true)]
        public bool? is_orphaned
        {
            get;
            set;
        }

        [SqlColumn("dropped_lob_column_state", 7), SqlTypeFacets("tinyint", true)]
        public byte? dropped_lob_column_state
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 8), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 9), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_logged_for_replication", 10), SqlTypeFacets("bit", true)]
        public bool? is_logged_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_sereplicated", 11), SqlTypeFacets("bit", false)]
        public bool is_sereplicated
        {
            get;
            set;
        }

        [SqlColumn("max_null_bit_used", 12), SqlTypeFacets("smallint", false)]
        public short max_null_bit_used
        {
            get;
            set;
        }

        [SqlColumn("max_leaf_length", 13), SqlTypeFacets("int", false)]
        public int max_leaf_length
        {
            get;
            set;
        }

        [SqlColumn("min_leaf_length", 14), SqlTypeFacets("smallint", false)]
        public short min_leaf_length
        {
            get;
            set;
        }

        [SqlColumn("max_internal_length", 15), SqlTypeFacets("smallint", false)]
        public short max_internal_length
        {
            get;
            set;
        }

        [SqlColumn("min_internal_length", 16), SqlTypeFacets("smallint", false)]
        public short min_internal_length
        {
            get;
            set;
        }

        [SqlColumn("allows_nullable_keys", 17), SqlTypeFacets("bit", true)]
        public bool? allows_nullable_keys
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 18), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 19), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("is_data_row_format", 20), SqlTypeFacets("bit", true)]
        public bool? is_data_row_format
        {
            get;
            set;
        }

        [SqlColumn("is_not_versioned", 21), SqlTypeFacets("bit", true)]
        public bool? is_not_versioned
        {
            get;
            set;
        }

        [SqlColumn("filestream_guid", 22), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? filestream_guid
        {
            get;
            set;
        }

        [SqlColumn("ownertype", 23), SqlTypeFacets("tinyint", false)]
        public byte ownertype
        {
            get;
            set;
        }

        [SqlColumn("is_columnstore", 24), SqlTypeFacets("bit", true)]
        public bool? is_columnstore
        {
            get;
            set;
        }

        public system_internals_partitions()
        {
        }

        public system_internals_partitions(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            rows = (long)items[4];
            filestream_filegroup_id = (short)items[5];
            is_orphaned = (bool?)items[6];
            dropped_lob_column_state = (byte?)items[7];
            is_unique = (bool?)items[8];
            is_replicated = (bool?)items[9];
            is_logged_for_replication = (bool?)items[10];
            is_sereplicated = (bool)items[11];
            max_null_bit_used = (short)items[12];
            max_leaf_length = (int)items[13];
            min_leaf_length = (short)items[14];
            max_internal_length = (short)items[15];
            min_internal_length = (short)items[16];
            allows_nullable_keys = (bool?)items[17];
            allow_row_locks = (bool?)items[18];
            allow_page_locks = (bool?)items[19];
            is_data_row_format = (bool?)items[20];
            is_not_versioned = (bool?)items[21];
            filestream_guid = (Guid?)items[22];
            ownertype = (byte)items[23];
            is_columnstore = (bool?)items[24];
        }

        public system_internals_partitions(long partition_id, int object_id, int index_id, int partition_number, long rows, short filestream_filegroup_id, bool? is_orphaned, byte? dropped_lob_column_state, bool? is_unique, bool? is_replicated, bool? is_logged_for_replication, bool is_sereplicated, short max_null_bit_used, int max_leaf_length, short min_leaf_length, short max_internal_length, short min_internal_length, bool? allows_nullable_keys, bool? allow_row_locks, bool? allow_page_locks, bool? is_data_row_format, bool? is_not_versioned, Guid? filestream_guid, byte ownertype, bool? is_columnstore)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.rows = rows;
            this.filestream_filegroup_id = filestream_filegroup_id;
            this.is_orphaned = is_orphaned;
            this.dropped_lob_column_state = dropped_lob_column_state;
            this.is_unique = is_unique;
            this.is_replicated = is_replicated;
            this.is_logged_for_replication = is_logged_for_replication;
            this.is_sereplicated = is_sereplicated;
            this.max_null_bit_used = max_null_bit_used;
            this.max_leaf_length = max_leaf_length;
            this.min_leaf_length = min_leaf_length;
            this.max_internal_length = max_internal_length;
            this.min_internal_length = min_internal_length;
            this.allows_nullable_keys = allows_nullable_keys;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.is_data_row_format = is_data_row_format;
            this.is_not_versioned = is_not_versioned;
            this.filestream_guid = filestream_guid;
            this.ownertype = ownertype;
            this.is_columnstore = is_columnstore;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, rows, filestream_filegroup_id, is_orphaned, dropped_lob_column_state, is_unique, is_replicated, is_logged_for_replication, is_sereplicated, max_null_bit_used, max_leaf_length, min_leaf_length, max_internal_length, min_internal_length, allows_nullable_keys, allow_row_locks, allow_page_locks, is_data_row_format, is_not_versioned, filestream_guid, ownertype, is_columnstore };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            rows = (long)items[4];
            filestream_filegroup_id = (short)items[5];
            is_orphaned = (bool?)items[6];
            dropped_lob_column_state = (byte?)items[7];
            is_unique = (bool?)items[8];
            is_replicated = (bool?)items[9];
            is_logged_for_replication = (bool?)items[10];
            is_sereplicated = (bool)items[11];
            max_null_bit_used = (short)items[12];
            max_leaf_length = (int)items[13];
            min_leaf_length = (short)items[14];
            max_internal_length = (short)items[15];
            min_internal_length = (short)items[16];
            allows_nullable_keys = (bool?)items[17];
            allow_row_locks = (bool?)items[18];
            allow_page_locks = (bool?)items[19];
            is_data_row_format = (bool?)items[20];
            is_not_versioned = (bool?)items[21];
            filestream_guid = (Guid?)items[22];
            ownertype = (byte)items[23];
            is_columnstore = (bool?)items[24];
        }
    }

    [SqlView("sys", "system_internals_partition_columns")]
    public partial class system_internals_partition_columns : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("partition_column_id", 1), SqlTypeFacets("int", false)]
        public int partition_column_id
        {
            get;
            set;
        }

        [SqlColumn("modified_count", 2), SqlTypeFacets("bigint", false)]
        public long modified_count
        {
            get;
            set;
        }

        [SqlColumn("max_inrow_length", 3), SqlTypeFacets("smallint", true)]
        public short? max_inrow_length
        {
            get;
            set;
        }

        [SqlColumn("is_replicated", 4), SqlTypeFacets("bit", true)]
        public bool? is_replicated
        {
            get;
            set;
        }

        [SqlColumn("is_logged_for_replication", 5), SqlTypeFacets("bit", true)]
        public bool? is_logged_for_replication
        {
            get;
            set;
        }

        [SqlColumn("is_dropped", 6), SqlTypeFacets("bit", true)]
        public bool? is_dropped
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 7), SqlTypeFacets("tinyint", true)]
        public byte? system_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 8), SqlTypeFacets("smallint", true)]
        public short? max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 9), SqlTypeFacets("tinyint", true)]
        public byte? precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 10), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 11), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_filestream", 12), SqlTypeFacets("bit", true)]
        public bool? is_filestream
        {
            get;
            set;
        }

        [SqlColumn("key_ordinal", 13), SqlTypeFacets("smallint", false)]
        public short key_ordinal
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 14), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_descending_key", 15), SqlTypeFacets("bit", true)]
        public bool? is_descending_key
        {
            get;
            set;
        }

        [SqlColumn("is_uniqueifier", 16), SqlTypeFacets("bit", true)]
        public bool? is_uniqueifier
        {
            get;
            set;
        }

        [SqlColumn("leaf_offset", 17), SqlTypeFacets("smallint", true)]
        public short? leaf_offset
        {
            get;
            set;
        }

        [SqlColumn("internal_offset", 18), SqlTypeFacets("smallint", true)]
        public short? internal_offset
        {
            get;
            set;
        }

        [SqlColumn("leaf_bit_position", 19), SqlTypeFacets("tinyint", true)]
        public byte? leaf_bit_position
        {
            get;
            set;
        }

        [SqlColumn("internal_bit_position", 20), SqlTypeFacets("tinyint", true)]
        public byte? internal_bit_position
        {
            get;
            set;
        }

        [SqlColumn("leaf_null_bit", 21), SqlTypeFacets("smallint", true)]
        public short? leaf_null_bit
        {
            get;
            set;
        }

        [SqlColumn("internal_null_bit", 22), SqlTypeFacets("smallint", true)]
        public short? internal_null_bit
        {
            get;
            set;
        }

        [SqlColumn("is_anti_matter", 23), SqlTypeFacets("bit", true)]
        public bool? is_anti_matter
        {
            get;
            set;
        }

        [SqlColumn("partition_column_guid", 24), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? partition_column_guid
        {
            get;
            set;
        }

        [SqlColumn("is_sparse", 25), SqlTypeFacets("bit", true)]
        public bool? is_sparse
        {
            get;
            set;
        }

        [SqlColumn("has_default", 26), SqlTypeFacets("bit", false)]
        public bool has_default
        {
            get;
            set;
        }

        [SqlColumn("default_value", 27), SqlTypeFacets("sql_variant", true)]
        public Object default_value
        {
            get;
            set;
        }

        public system_internals_partition_columns()
        {
        }

        public system_internals_partition_columns(object[] items)
        {
            partition_id = (long)items[0];
            partition_column_id = (int)items[1];
            modified_count = (long)items[2];
            max_inrow_length = (short?)items[3];
            is_replicated = (bool?)items[4];
            is_logged_for_replication = (bool?)items[5];
            is_dropped = (bool?)items[6];
            system_type_id = (byte?)items[7];
            max_length = (short?)items[8];
            precision = (byte?)items[9];
            scale = (byte?)items[10];
            collation_name = (string)items[11];
            is_filestream = (bool?)items[12];
            key_ordinal = (short)items[13];
            is_nullable = (bool?)items[14];
            is_descending_key = (bool?)items[15];
            is_uniqueifier = (bool?)items[16];
            leaf_offset = (short?)items[17];
            internal_offset = (short?)items[18];
            leaf_bit_position = (byte?)items[19];
            internal_bit_position = (byte?)items[20];
            leaf_null_bit = (short?)items[21];
            internal_null_bit = (short?)items[22];
            is_anti_matter = (bool?)items[23];
            partition_column_guid = (Guid?)items[24];
            is_sparse = (bool?)items[25];
            has_default = (bool)items[26];
            default_value = (Object)items[27];
        }

        public system_internals_partition_columns(long partition_id, int partition_column_id, long modified_count, short? max_inrow_length, bool? is_replicated, bool? is_logged_for_replication, bool? is_dropped, byte? system_type_id, short? max_length, byte? precision, byte? scale, string collation_name, bool? is_filestream, short key_ordinal, bool? is_nullable, bool? is_descending_key, bool? is_uniqueifier, short? leaf_offset, short? internal_offset, byte? leaf_bit_position, byte? internal_bit_position, short? leaf_null_bit, short? internal_null_bit, bool? is_anti_matter, Guid? partition_column_guid, bool? is_sparse, bool has_default, Object default_value)
        {
            this.partition_id = partition_id;
            this.partition_column_id = partition_column_id;
            this.modified_count = modified_count;
            this.max_inrow_length = max_inrow_length;
            this.is_replicated = is_replicated;
            this.is_logged_for_replication = is_logged_for_replication;
            this.is_dropped = is_dropped;
            this.system_type_id = system_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_filestream = is_filestream;
            this.key_ordinal = key_ordinal;
            this.is_nullable = is_nullable;
            this.is_descending_key = is_descending_key;
            this.is_uniqueifier = is_uniqueifier;
            this.leaf_offset = leaf_offset;
            this.internal_offset = internal_offset;
            this.leaf_bit_position = leaf_bit_position;
            this.internal_bit_position = internal_bit_position;
            this.leaf_null_bit = leaf_null_bit;
            this.internal_null_bit = internal_null_bit;
            this.is_anti_matter = is_anti_matter;
            this.partition_column_guid = partition_column_guid;
            this.is_sparse = is_sparse;
            this.has_default = has_default;
            this.default_value = default_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, partition_column_id, modified_count, max_inrow_length, is_replicated, is_logged_for_replication, is_dropped, system_type_id, max_length, precision, scale, collation_name, is_filestream, key_ordinal, is_nullable, is_descending_key, is_uniqueifier, leaf_offset, internal_offset, leaf_bit_position, internal_bit_position, leaf_null_bit, internal_null_bit, is_anti_matter, partition_column_guid, is_sparse, has_default, default_value };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            partition_column_id = (int)items[1];
            modified_count = (long)items[2];
            max_inrow_length = (short?)items[3];
            is_replicated = (bool?)items[4];
            is_logged_for_replication = (bool?)items[5];
            is_dropped = (bool?)items[6];
            system_type_id = (byte?)items[7];
            max_length = (short?)items[8];
            precision = (byte?)items[9];
            scale = (byte?)items[10];
            collation_name = (string)items[11];
            is_filestream = (bool?)items[12];
            key_ordinal = (short)items[13];
            is_nullable = (bool?)items[14];
            is_descending_key = (bool?)items[15];
            is_uniqueifier = (bool?)items[16];
            leaf_offset = (short?)items[17];
            internal_offset = (short?)items[18];
            leaf_bit_position = (byte?)items[19];
            internal_bit_position = (byte?)items[20];
            leaf_null_bit = (short?)items[21];
            internal_null_bit = (short?)items[22];
            is_anti_matter = (bool?)items[23];
            partition_column_guid = (Guid?)items[24];
            is_sparse = (bool?)items[25];
            has_default = (bool)items[26];
            default_value = (Object)items[27];
        }
    }

    [SqlView("sys", "system_internals_allocation_units")]
    public partial class system_internals_allocation_units : SqlViewProxy
    {
        [SqlColumn("allocation_unit_id", 0), SqlTypeFacets("bigint", false)]
        public long allocation_unit_id
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("container_id", 3), SqlTypeFacets("bigint", false)]
        public long container_id
        {
            get;
            set;
        }

        [SqlColumn("filegroup_id", 4), SqlTypeFacets("smallint", false)]
        public short filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("total_pages", 5), SqlTypeFacets("bigint", false)]
        public long total_pages
        {
            get;
            set;
        }

        [SqlColumn("used_pages", 6), SqlTypeFacets("bigint", false)]
        public long used_pages
        {
            get;
            set;
        }

        [SqlColumn("data_pages", 7), SqlTypeFacets("bigint", false)]
        public long data_pages
        {
            get;
            set;
        }

        [SqlColumn("first_page", 8), SqlTypeFacets("binary", false, 6)]
        public Byte[] first_page
        {
            get;
            set;
        }

        [SqlColumn("root_page", 9), SqlTypeFacets("binary", false, 6)]
        public Byte[] root_page
        {
            get;
            set;
        }

        [SqlColumn("first_iam_page", 10), SqlTypeFacets("binary", false, 6)]
        public Byte[] first_iam_page
        {
            get;
            set;
        }

        public system_internals_allocation_units()
        {
        }

        public system_internals_allocation_units(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            filegroup_id = (short)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
            first_page = (Byte[])items[8];
            root_page = (Byte[])items[9];
            first_iam_page = (Byte[])items[10];
        }

        public system_internals_allocation_units(long allocation_unit_id, byte type, string type_desc, long container_id, short filegroup_id, long total_pages, long used_pages, long data_pages, Byte[] first_page, Byte[] root_page, Byte[] first_iam_page)
        {
            this.allocation_unit_id = allocation_unit_id;
            this.type = type;
            this.type_desc = type_desc;
            this.container_id = container_id;
            this.filegroup_id = filegroup_id;
            this.total_pages = total_pages;
            this.used_pages = used_pages;
            this.data_pages = data_pages;
            this.first_page = first_page;
            this.root_page = root_page;
            this.first_iam_page = first_iam_page;
        }

        public override object[] GetItemArray()
        {
            return new object[] { allocation_unit_id, type, type_desc, container_id, filegroup_id, total_pages, used_pages, data_pages, first_page, root_page, first_iam_page };
        }

        public override void SetItemArray(object[] items)
        {
            allocation_unit_id = (long)items[0];
            type = (byte)items[1];
            type_desc = (string)items[2];
            container_id = (long)items[3];
            filegroup_id = (short)items[4];
            total_pages = (long)items[5];
            used_pages = (long)items[6];
            data_pages = (long)items[7];
            first_page = (Byte[])items[8];
            root_page = (Byte[])items[9];
            first_iam_page = (Byte[])items[10];
        }
    }

    [SqlView("sys", "system_sql_modules")]
    public partial class system_sql_modules : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("definition", 1), SqlTypeFacets("nvarchar", true, -1)]
        public string definition
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 2), SqlTypeFacets("bit", false)]
        public bool uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("uses_quoted_identifier", 3), SqlTypeFacets("bit", false)]
        public bool uses_quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound", 4), SqlTypeFacets("bit", false)]
        public bool is_schema_bound
        {
            get;
            set;
        }

        [SqlColumn("uses_database_collation", 5), SqlTypeFacets("bit", false)]
        public bool uses_database_collation
        {
            get;
            set;
        }

        [SqlColumn("is_recompiled", 6), SqlTypeFacets("bit", false)]
        public bool is_recompiled
        {
            get;
            set;
        }

        [SqlColumn("null_on_null_input", 7), SqlTypeFacets("bit", false)]
        public bool null_on_null_input
        {
            get;
            set;
        }

        [SqlColumn("execute_as_principal_id", 8), SqlTypeFacets("int", true)]
        public int? execute_as_principal_id
        {
            get;
            set;
        }

        [SqlColumn("uses_native_compilation", 9), SqlTypeFacets("bit", false)]
        public bool uses_native_compilation
        {
            get;
            set;
        }

        public system_sql_modules()
        {
        }

        public system_sql_modules(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool)items[2];
            uses_quoted_identifier = (bool)items[3];
            is_schema_bound = (bool)items[4];
            uses_database_collation = (bool)items[5];
            is_recompiled = (bool)items[6];
            null_on_null_input = (bool)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool)items[9];
        }

        public system_sql_modules(int object_id, string definition, bool uses_ansi_nulls, bool uses_quoted_identifier, bool is_schema_bound, bool uses_database_collation, bool is_recompiled, bool null_on_null_input, int? execute_as_principal_id, bool uses_native_compilation)
        {
            this.object_id = object_id;
            this.definition = definition;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.uses_quoted_identifier = uses_quoted_identifier;
            this.is_schema_bound = is_schema_bound;
            this.uses_database_collation = uses_database_collation;
            this.is_recompiled = is_recompiled;
            this.null_on_null_input = null_on_null_input;
            this.execute_as_principal_id = execute_as_principal_id;
            this.uses_native_compilation = uses_native_compilation;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, definition, uses_ansi_nulls, uses_quoted_identifier, is_schema_bound, uses_database_collation, is_recompiled, null_on_null_input, execute_as_principal_id, uses_native_compilation };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            definition = (string)items[1];
            uses_ansi_nulls = (bool)items[2];
            uses_quoted_identifier = (bool)items[3];
            is_schema_bound = (bool)items[4];
            uses_database_collation = (bool)items[5];
            is_recompiled = (bool)items[6];
            null_on_null_input = (bool)items[7];
            execute_as_principal_id = (int?)items[8];
            uses_native_compilation = (bool)items[9];
        }
    }

    [SqlView("sys", "table_types")]
    public partial class table_types : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 1), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 2), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 5), SqlTypeFacets("smallint", false)]
        public short max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 6), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 7), SqlTypeFacets("tinyint", false)]
        public byte scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 8), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 9), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("is_user_defined", 10), SqlTypeFacets("bit", false)]
        public bool is_user_defined
        {
            get;
            set;
        }

        [SqlColumn("is_assembly_type", 11), SqlTypeFacets("bit", false)]
        public bool is_assembly_type
        {
            get;
            set;
        }

        [SqlColumn("default_object_id", 12), SqlTypeFacets("int", false)]
        public int default_object_id
        {
            get;
            set;
        }

        [SqlColumn("rule_object_id", 13), SqlTypeFacets("int", false)]
        public int rule_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_table_type", 14), SqlTypeFacets("bit", false)]
        public bool is_table_type
        {
            get;
            set;
        }

        [SqlColumn("type_table_object_id", 15), SqlTypeFacets("int", false)]
        public int type_table_object_id
        {
            get;
            set;
        }

        [SqlColumn("is_memory_optimized", 16), SqlTypeFacets("bit", true)]
        public bool? is_memory_optimized
        {
            get;
            set;
        }

        public table_types()
        {
        }

        public table_types(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
            type_table_object_id = (int)items[15];
            is_memory_optimized = (bool?)items[16];
        }

        public table_types(string name, byte system_type_id, int user_type_id, int schema_id, int? principal_id, short max_length, byte precision, byte scale, string collation_name, bool? is_nullable, bool is_user_defined, bool is_assembly_type, int default_object_id, int rule_object_id, bool is_table_type, int type_table_object_id, bool? is_memory_optimized)
        {
            this.name = name;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.schema_id = schema_id;
            this.principal_id = principal_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_nullable = is_nullable;
            this.is_user_defined = is_user_defined;
            this.is_assembly_type = is_assembly_type;
            this.default_object_id = default_object_id;
            this.rule_object_id = rule_object_id;
            this.is_table_type = is_table_type;
            this.type_table_object_id = type_table_object_id;
            this.is_memory_optimized = is_memory_optimized;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, system_type_id, user_type_id, schema_id, principal_id, max_length, precision, scale, collation_name, is_nullable, is_user_defined, is_assembly_type, default_object_id, rule_object_id, is_table_type, type_table_object_id, is_memory_optimized };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            system_type_id = (byte)items[1];
            user_type_id = (int)items[2];
            schema_id = (int)items[3];
            principal_id = (int?)items[4];
            max_length = (short)items[5];
            precision = (byte)items[6];
            scale = (byte)items[7];
            collation_name = (string)items[8];
            is_nullable = (bool?)items[9];
            is_user_defined = (bool)items[10];
            is_assembly_type = (bool)items[11];
            default_object_id = (int)items[12];
            rule_object_id = (int)items[13];
            is_table_type = (bool)items[14];
            type_table_object_id = (int)items[15];
            is_memory_optimized = (bool?)items[16];
        }
    }

    [SqlView("sys", "sql_expression_dependencies")]
    public partial class sql_expression_dependencies : SqlViewProxy
    {
        [SqlColumn("referencing_id", 0), SqlTypeFacets("int", false)]
        public int referencing_id
        {
            get;
            set;
        }

        [SqlColumn("referencing_minor_id", 1), SqlTypeFacets("int", false)]
        public int referencing_minor_id
        {
            get;
            set;
        }

        [SqlColumn("referencing_class", 2), SqlTypeFacets("tinyint", true)]
        public byte? referencing_class
        {
            get;
            set;
        }

        [SqlColumn("referencing_class_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string referencing_class_desc
        {
            get;
            set;
        }

        [SqlColumn("is_schema_bound_reference", 4), SqlTypeFacets("bit", false)]
        public bool is_schema_bound_reference
        {
            get;
            set;
        }

        [SqlColumn("referenced_class", 5), SqlTypeFacets("tinyint", true)]
        public byte? referenced_class
        {
            get;
            set;
        }

        [SqlColumn("referenced_class_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string referenced_class_desc
        {
            get;
            set;
        }

        [SqlColumn("referenced_server_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_server_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_database_name", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_database_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_schema_name", 9), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_schema_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_entity_name", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_entity_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_id", 11), SqlTypeFacets("int", true)]
        public int? referenced_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_id", 12), SqlTypeFacets("int", false)]
        public int referenced_minor_id
        {
            get;
            set;
        }

        [SqlColumn("is_caller_dependent", 13), SqlTypeFacets("bit", false)]
        public bool is_caller_dependent
        {
            get;
            set;
        }

        [SqlColumn("is_ambiguous", 14), SqlTypeFacets("bit", false)]
        public bool is_ambiguous
        {
            get;
            set;
        }

        public sql_expression_dependencies()
        {
        }

        public sql_expression_dependencies(object[] items)
        {
            referencing_id = (int)items[0];
            referencing_minor_id = (int)items[1];
            referencing_class = (byte?)items[2];
            referencing_class_desc = (string)items[3];
            is_schema_bound_reference = (bool)items[4];
            referenced_class = (byte?)items[5];
            referenced_class_desc = (string)items[6];
            referenced_server_name = (string)items[7];
            referenced_database_name = (string)items[8];
            referenced_schema_name = (string)items[9];
            referenced_entity_name = (string)items[10];
            referenced_id = (int?)items[11];
            referenced_minor_id = (int)items[12];
            is_caller_dependent = (bool)items[13];
            is_ambiguous = (bool)items[14];
        }

        public sql_expression_dependencies(int referencing_id, int referencing_minor_id, byte? referencing_class, string referencing_class_desc, bool is_schema_bound_reference, byte? referenced_class, string referenced_class_desc, string referenced_server_name, string referenced_database_name, string referenced_schema_name, string referenced_entity_name, int? referenced_id, int referenced_minor_id, bool is_caller_dependent, bool is_ambiguous)
        {
            this.referencing_id = referencing_id;
            this.referencing_minor_id = referencing_minor_id;
            this.referencing_class = referencing_class;
            this.referencing_class_desc = referencing_class_desc;
            this.is_schema_bound_reference = is_schema_bound_reference;
            this.referenced_class = referenced_class;
            this.referenced_class_desc = referenced_class_desc;
            this.referenced_server_name = referenced_server_name;
            this.referenced_database_name = referenced_database_name;
            this.referenced_schema_name = referenced_schema_name;
            this.referenced_entity_name = referenced_entity_name;
            this.referenced_id = referenced_id;
            this.referenced_minor_id = referenced_minor_id;
            this.is_caller_dependent = is_caller_dependent;
            this.is_ambiguous = is_ambiguous;
        }

        public override object[] GetItemArray()
        {
            return new object[] { referencing_id, referencing_minor_id, referencing_class, referencing_class_desc, is_schema_bound_reference, referenced_class, referenced_class_desc, referenced_server_name, referenced_database_name, referenced_schema_name, referenced_entity_name, referenced_id, referenced_minor_id, is_caller_dependent, is_ambiguous };
        }

        public override void SetItemArray(object[] items)
        {
            referencing_id = (int)items[0];
            referencing_minor_id = (int)items[1];
            referencing_class = (byte?)items[2];
            referencing_class_desc = (string)items[3];
            is_schema_bound_reference = (bool)items[4];
            referenced_class = (byte?)items[5];
            referenced_class_desc = (string)items[6];
            referenced_server_name = (string)items[7];
            referenced_database_name = (string)items[8];
            referenced_schema_name = (string)items[9];
            referenced_entity_name = (string)items[10];
            referenced_id = (int?)items[11];
            referenced_minor_id = (int)items[12];
            is_caller_dependent = (bool)items[13];
            is_ambiguous = (bool)items[14];
        }
    }

    [SqlView("sys", "function_order_columns")]
    public partial class function_order_columns : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("order_column_id", 1), SqlTypeFacets("int", false)]
        public int order_column_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("is_descending", 3), SqlTypeFacets("bit", true)]
        public bool? is_descending
        {
            get;
            set;
        }

        public function_order_columns()
        {
        }

        public function_order_columns(object[] items)
        {
            object_id = (int)items[0];
            order_column_id = (int)items[1];
            column_id = (int)items[2];
            is_descending = (bool?)items[3];
        }

        public function_order_columns(int object_id, int order_column_id, int column_id, bool? is_descending)
        {
            this.object_id = object_id;
            this.order_column_id = order_column_id;
            this.column_id = column_id;
            this.is_descending = is_descending;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, order_column_id, column_id, is_descending };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            order_column_id = (int)items[1];
            column_id = (int)items[2];
            is_descending = (bool?)items[3];
        }
    }

    [SqlView("sys", "spatial_indexes")]
    public partial class spatial_indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 14), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("spatial_index_type", 16), SqlTypeFacets("int", false)]
        public int spatial_index_type
        {
            get;
            set;
        }

        [SqlColumn("spatial_index_type_desc", 17), SqlTypeFacets("nvarchar", true, 120)]
        public string spatial_index_type_desc
        {
            get;
            set;
        }

        [SqlColumn("tessellation_scheme", 18), SqlTypeFacets("nvarchar", true, 120)]
        public string tessellation_scheme
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 19), SqlTypeFacets("bit", false)]
        public bool has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 20), SqlTypeFacets("nvarchar", true, -1)]
        public string filter_definition
        {
            get;
            set;
        }

        public spatial_indexes()
        {
        }

        public spatial_indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            spatial_index_type = (int)items[16];
            spatial_index_type_desc = (string)items[17];
            tessellation_scheme = (string)items[18];
            has_filter = (bool)items[19];
            filter_definition = (string)items[20];
        }

        public spatial_indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? allow_row_locks, bool? allow_page_locks, int spatial_index_type, string spatial_index_type_desc, string tessellation_scheme, bool has_filter, string filter_definition)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.spatial_index_type = spatial_index_type;
            this.spatial_index_type_desc = spatial_index_type_desc;
            this.tessellation_scheme = tessellation_scheme;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, allow_row_locks, allow_page_locks, spatial_index_type, spatial_index_type_desc, tessellation_scheme, has_filter, filter_definition };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            spatial_index_type = (int)items[16];
            spatial_index_type_desc = (string)items[17];
            tessellation_scheme = (string)items[18];
            has_filter = (bool)items[19];
            filter_definition = (string)items[20];
        }
    }

    [SqlView("sys", "spatial_index_tessellations")]
    public partial class spatial_index_tessellations : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("tessellation_scheme", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string tessellation_scheme
        {
            get;
            set;
        }

        [SqlColumn("bounding_box_xmin", 3), SqlTypeFacets("float", true)]
        public double? bounding_box_xmin
        {
            get;
            set;
        }

        [SqlColumn("bounding_box_ymin", 4), SqlTypeFacets("float", true)]
        public double? bounding_box_ymin
        {
            get;
            set;
        }

        [SqlColumn("bounding_box_xmax", 5), SqlTypeFacets("float", true)]
        public double? bounding_box_xmax
        {
            get;
            set;
        }

        [SqlColumn("bounding_box_ymax", 6), SqlTypeFacets("float", true)]
        public double? bounding_box_ymax
        {
            get;
            set;
        }

        [SqlColumn("level_1_grid", 7), SqlTypeFacets("smallint", true)]
        public short? level_1_grid
        {
            get;
            set;
        }

        [SqlColumn("level_1_grid_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string level_1_grid_desc
        {
            get;
            set;
        }

        [SqlColumn("level_2_grid", 9), SqlTypeFacets("smallint", true)]
        public short? level_2_grid
        {
            get;
            set;
        }

        [SqlColumn("level_2_grid_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string level_2_grid_desc
        {
            get;
            set;
        }

        [SqlColumn("level_3_grid", 11), SqlTypeFacets("smallint", true)]
        public short? level_3_grid
        {
            get;
            set;
        }

        [SqlColumn("level_3_grid_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string level_3_grid_desc
        {
            get;
            set;
        }

        [SqlColumn("level_4_grid", 13), SqlTypeFacets("smallint", true)]
        public short? level_4_grid
        {
            get;
            set;
        }

        [SqlColumn("level_4_grid_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string level_4_grid_desc
        {
            get;
            set;
        }

        [SqlColumn("cells_per_object", 15), SqlTypeFacets("int", true)]
        public int? cells_per_object
        {
            get;
            set;
        }

        public spatial_index_tessellations()
        {
        }

        public spatial_index_tessellations(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            tessellation_scheme = (string)items[2];
            bounding_box_xmin = (double?)items[3];
            bounding_box_ymin = (double?)items[4];
            bounding_box_xmax = (double?)items[5];
            bounding_box_ymax = (double?)items[6];
            level_1_grid = (short?)items[7];
            level_1_grid_desc = (string)items[8];
            level_2_grid = (short?)items[9];
            level_2_grid_desc = (string)items[10];
            level_3_grid = (short?)items[11];
            level_3_grid_desc = (string)items[12];
            level_4_grid = (short?)items[13];
            level_4_grid_desc = (string)items[14];
            cells_per_object = (int?)items[15];
        }

        public spatial_index_tessellations(int object_id, int index_id, string tessellation_scheme, double? bounding_box_xmin, double? bounding_box_ymin, double? bounding_box_xmax, double? bounding_box_ymax, short? level_1_grid, string level_1_grid_desc, short? level_2_grid, string level_2_grid_desc, short? level_3_grid, string level_3_grid_desc, short? level_4_grid, string level_4_grid_desc, int? cells_per_object)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.tessellation_scheme = tessellation_scheme;
            this.bounding_box_xmin = bounding_box_xmin;
            this.bounding_box_ymin = bounding_box_ymin;
            this.bounding_box_xmax = bounding_box_xmax;
            this.bounding_box_ymax = bounding_box_ymax;
            this.level_1_grid = level_1_grid;
            this.level_1_grid_desc = level_1_grid_desc;
            this.level_2_grid = level_2_grid;
            this.level_2_grid_desc = level_2_grid_desc;
            this.level_3_grid = level_3_grid;
            this.level_3_grid_desc = level_3_grid_desc;
            this.level_4_grid = level_4_grid;
            this.level_4_grid_desc = level_4_grid_desc;
            this.cells_per_object = cells_per_object;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, tessellation_scheme, bounding_box_xmin, bounding_box_ymin, bounding_box_xmax, bounding_box_ymax, level_1_grid, level_1_grid_desc, level_2_grid, level_2_grid_desc, level_3_grid, level_3_grid_desc, level_4_grid, level_4_grid_desc, cells_per_object };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            tessellation_scheme = (string)items[2];
            bounding_box_xmin = (double?)items[3];
            bounding_box_ymin = (double?)items[4];
            bounding_box_xmax = (double?)items[5];
            bounding_box_ymax = (double?)items[6];
            level_1_grid = (short?)items[7];
            level_1_grid_desc = (string)items[8];
            level_2_grid = (short?)items[9];
            level_2_grid_desc = (string)items[10];
            level_3_grid = (short?)items[11];
            level_3_grid_desc = (string)items[12];
            level_4_grid = (short?)items[13];
            level_4_grid_desc = (string)items[14];
            cells_per_object = (int?)items[15];
        }
    }

    [SqlView("sys", "change_tracking_tables")]
    public partial class change_tracking_tables : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("is_track_columns_updated_on", 1), SqlTypeFacets("bit", false)]
        public bool is_track_columns_updated_on
        {
            get;
            set;
        }

        [SqlColumn("min_valid_version", 2), SqlTypeFacets("bigint", true)]
        public long? min_valid_version
        {
            get;
            set;
        }

        [SqlColumn("begin_version", 3), SqlTypeFacets("bigint", true)]
        public long? begin_version
        {
            get;
            set;
        }

        [SqlColumn("cleanup_version", 4), SqlTypeFacets("bigint", true)]
        public long? cleanup_version
        {
            get;
            set;
        }

        public change_tracking_tables()
        {
        }

        public change_tracking_tables(object[] items)
        {
            object_id = (int)items[0];
            is_track_columns_updated_on = (bool)items[1];
            min_valid_version = (long?)items[2];
            begin_version = (long?)items[3];
            cleanup_version = (long?)items[4];
        }

        public change_tracking_tables(int object_id, bool is_track_columns_updated_on, long? min_valid_version, long? begin_version, long? cleanup_version)
        {
            this.object_id = object_id;
            this.is_track_columns_updated_on = is_track_columns_updated_on;
            this.min_valid_version = min_valid_version;
            this.begin_version = begin_version;
            this.cleanup_version = cleanup_version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, is_track_columns_updated_on, min_valid_version, begin_version, cleanup_version };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            is_track_columns_updated_on = (bool)items[1];
            min_valid_version = (long?)items[2];
            begin_version = (long?)items[3];
            cleanup_version = (long?)items[4];
        }
    }

    [SqlView("sys", "conversation_priorities")]
    public partial class conversation_priorities : SqlViewProxy
    {
        [SqlColumn("priority_id", 0), SqlTypeFacets("int", false)]
        public int priority_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("service_contract_id", 2), SqlTypeFacets("int", true)]
        public int? service_contract_id
        {
            get;
            set;
        }

        [SqlColumn("local_service_id", 3), SqlTypeFacets("int", true)]
        public int? local_service_id
        {
            get;
            set;
        }

        [SqlColumn("remote_service_name", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string remote_service_name
        {
            get;
            set;
        }

        [SqlColumn("priority", 5), SqlTypeFacets("tinyint", false)]
        public byte priority
        {
            get;
            set;
        }

        public conversation_priorities()
        {
        }

        public conversation_priorities(object[] items)
        {
            priority_id = (int)items[0];
            name = (string)items[1];
            service_contract_id = (int?)items[2];
            local_service_id = (int?)items[3];
            remote_service_name = (string)items[4];
            priority = (byte)items[5];
        }

        public conversation_priorities(int priority_id, string name, int? service_contract_id, int? local_service_id, string remote_service_name, byte priority)
        {
            this.priority_id = priority_id;
            this.name = name;
            this.service_contract_id = service_contract_id;
            this.local_service_id = local_service_id;
            this.remote_service_name = remote_service_name;
            this.priority = priority;
        }

        public override object[] GetItemArray()
        {
            return new object[] { priority_id, name, service_contract_id, local_service_id, remote_service_name, priority };
        }

        public override void SetItemArray(object[] items)
        {
            priority_id = (int)items[0];
            name = (string)items[1];
            service_contract_id = (int?)items[2];
            local_service_id = (int?)items[3];
            remote_service_name = (string)items[4];
            priority = (byte)items[5];
        }
    }

    [SqlView("sys", "database_audit_specifications")]
    public partial class database_audit_specifications : SqlViewProxy
    {
        [SqlColumn("database_specification_id", 0), SqlTypeFacets("int", false)]
        public int database_specification_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("audit_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? audit_guid
        {
            get;
            set;
        }

        [SqlColumn("is_state_enabled", 5), SqlTypeFacets("bit", true)]
        public bool? is_state_enabled
        {
            get;
            set;
        }

        public database_audit_specifications()
        {
        }

        public database_audit_specifications(object[] items)
        {
            database_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }

        public database_audit_specifications(int database_specification_id, string name, DateTime create_date, DateTime modify_date, Guid? audit_guid, bool? is_state_enabled)
        {
            this.database_specification_id = database_specification_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.audit_guid = audit_guid;
            this.is_state_enabled = is_state_enabled;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_specification_id, name, create_date, modify_date, audit_guid, is_state_enabled };
        }

        public override void SetItemArray(object[] items)
        {
            database_specification_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            audit_guid = (Guid?)items[4];
            is_state_enabled = (bool?)items[5];
        }
    }

    [SqlView("sys", "database_audit_specification_details")]
    public partial class database_audit_specification_details : SqlViewProxy
    {
        [SqlColumn("database_specification_id", 0), SqlTypeFacets("int", false)]
        public int database_specification_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_id", 1), SqlTypeFacets("char", false, 4)]
        public string audit_action_id
        {
            get;
            set;
        }

        [SqlColumn("audit_action_name", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string audit_action_name
        {
            get;
            set;
        }

        [SqlColumn("class", 3), SqlTypeFacets("tinyint", false)]
        public byte @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 5), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 6), SqlTypeFacets("int", false)]
        public int minor_id
        {
            get;
            set;
        }

        [SqlColumn("audited_principal_id", 7), SqlTypeFacets("int", false)]
        public int audited_principal_id
        {
            get;
            set;
        }

        [SqlColumn("audited_result", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string audited_result
        {
            get;
            set;
        }

        [SqlColumn("is_group", 9), SqlTypeFacets("bit", true)]
        public bool? is_group
        {
            get;
            set;
        }

        public database_audit_specification_details()
        {
        }

        public database_audit_specification_details(object[] items)
        {
            database_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }

        public database_audit_specification_details(int database_specification_id, string audit_action_id, string audit_action_name, byte @class, string class_desc, int major_id, int minor_id, int audited_principal_id, string audited_result, bool? is_group)
        {
            this.database_specification_id = database_specification_id;
            this.audit_action_id = audit_action_id;
            this.audit_action_name = audit_action_name;
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.audited_principal_id = audited_principal_id;
            this.audited_result = audited_result;
            this.is_group = is_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_specification_id, audit_action_id, audit_action_name, @class, class_desc, major_id, minor_id, audited_principal_id, audited_result, is_group };
        }

        public override void SetItemArray(object[] items)
        {
            database_specification_id = (int)items[0];
            audit_action_id = (string)items[1];
            audit_action_name = (string)items[2];
            @class = (byte)items[3];
            class_desc = (string)items[4];
            major_id = (int)items[5];
            minor_id = (int)items[6];
            audited_principal_id = (int)items[7];
            audited_result = (string)items[8];
            is_group = (bool?)items[9];
        }
    }

    [SqlView("sys", "fulltext_index_fragments")]
    public partial class fulltext_index_fragments : SqlViewProxy
    {
        [SqlColumn("table_id", 0), SqlTypeFacets("int", false)]
        public int table_id
        {
            get;
            set;
        }

        [SqlColumn("fragment_id", 1), SqlTypeFacets("int", false)]
        public int fragment_id
        {
            get;
            set;
        }

        [SqlColumn("fragment_object_id", 2), SqlTypeFacets("int", false)]
        public int fragment_object_id
        {
            get;
            set;
        }

        [SqlColumn("timestamp", 3), SqlTypeFacets("binary", false, 8)]
        public Byte[] timestamp
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("data_size", 5), SqlTypeFacets("bigint", false)]
        public long data_size
        {
            get;
            set;
        }

        [SqlColumn("row_count", 6), SqlTypeFacets("bigint", false)]
        public long row_count
        {
            get;
            set;
        }

        public fulltext_index_fragments()
        {
        }

        public fulltext_index_fragments(object[] items)
        {
            table_id = (int)items[0];
            fragment_id = (int)items[1];
            fragment_object_id = (int)items[2];
            timestamp = (Byte[])items[3];
            status = (int)items[4];
            data_size = (long)items[5];
            row_count = (long)items[6];
        }

        public fulltext_index_fragments(int table_id, int fragment_id, int fragment_object_id, Byte[] timestamp, int status, long data_size, long row_count)
        {
            this.table_id = table_id;
            this.fragment_id = fragment_id;
            this.fragment_object_id = fragment_object_id;
            this.timestamp = timestamp;
            this.status = status;
            this.data_size = data_size;
            this.row_count = row_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { table_id, fragment_id, fragment_object_id, timestamp, status, data_size, row_count };
        }

        public override void SetItemArray(object[] items)
        {
            table_id = (int)items[0];
            fragment_id = (int)items[1];
            fragment_object_id = (int)items[2];
            timestamp = (Byte[])items[3];
            status = (int)items[4];
            data_size = (long)items[5];
            row_count = (long)items[6];
        }
    }

    [SqlView("sys", "fulltext_stoplists")]
    public partial class fulltext_stoplists : SqlViewProxy
    {
        [SqlColumn("stoplist_id", 0), SqlTypeFacets("int", false)]
        public int stoplist_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public fulltext_stoplists()
        {
        }

        public fulltext_stoplists(object[] items)
        {
            stoplist_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            principal_id = (int?)items[4];
        }

        public fulltext_stoplists(int stoplist_id, string name, DateTime create_date, DateTime modify_date, int? principal_id)
        {
            this.stoplist_id = stoplist_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { stoplist_id, name, create_date, modify_date, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            stoplist_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            principal_id = (int?)items[4];
        }
    }

    [SqlView("sys", "fulltext_stopwords")]
    public partial class fulltext_stopwords : SqlViewProxy
    {
        [SqlColumn("stoplist_id", 0), SqlTypeFacets("int", false)]
        public int stoplist_id
        {
            get;
            set;
        }

        [SqlColumn("stopword", 1), SqlTypeFacets("nvarchar", false, 128)]
        public string stopword
        {
            get;
            set;
        }

        [SqlColumn("language", 2), SqlTypeFacets("nvarchar", false, 256)]
        public string language
        {
            get;
            set;
        }

        [SqlColumn("language_id", 3), SqlTypeFacets("int", false)]
        public int language_id
        {
            get;
            set;
        }

        public fulltext_stopwords()
        {
        }

        public fulltext_stopwords(object[] items)
        {
            stoplist_id = (int)items[0];
            stopword = (string)items[1];
            language = (string)items[2];
            language_id = (int)items[3];
        }

        public fulltext_stopwords(int stoplist_id, string stopword, string language, int language_id)
        {
            this.stoplist_id = stoplist_id;
            this.stopword = stopword;
            this.language = language;
            this.language_id = language_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { stoplist_id, stopword, language, language_id };
        }

        public override void SetItemArray(object[] items)
        {
            stoplist_id = (int)items[0];
            stopword = (string)items[1];
            language = (string)items[2];
            language_id = (int)items[3];
        }
    }

    [SqlView("sys", "registered_search_property_lists")]
    public partial class registered_search_property_lists : SqlViewProxy
    {
        [SqlColumn("property_list_id", 0), SqlTypeFacets("int", false)]
        public int property_list_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 3), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 4), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        public registered_search_property_lists()
        {
        }

        public registered_search_property_lists(object[] items)
        {
            property_list_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            principal_id = (int?)items[4];
        }

        public registered_search_property_lists(int property_list_id, string name, DateTime create_date, DateTime modify_date, int? principal_id)
        {
            this.property_list_id = property_list_id;
            this.name = name;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.principal_id = principal_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { property_list_id, name, create_date, modify_date, principal_id };
        }

        public override void SetItemArray(object[] items)
        {
            property_list_id = (int)items[0];
            name = (string)items[1];
            create_date = (DateTime)items[2];
            modify_date = (DateTime)items[3];
            principal_id = (int?)items[4];
        }
    }

    [SqlView("sys", "registered_search_properties")]
    public partial class registered_search_properties : SqlViewProxy
    {
        [SqlColumn("property_list_id", 0), SqlTypeFacets("int", false)]
        public int property_list_id
        {
            get;
            set;
        }

        [SqlColumn("property_id", 1), SqlTypeFacets("int", false)]
        public int property_id
        {
            get;
            set;
        }

        [SqlColumn("property_name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string property_name
        {
            get;
            set;
        }

        [SqlColumn("property_set_guid", 3), SqlTypeFacets("uniqueidentifier", false)]
        public Guid property_set_guid
        {
            get;
            set;
        }

        [SqlColumn("property_int_id", 4), SqlTypeFacets("int", false)]
        public int property_int_id
        {
            get;
            set;
        }

        [SqlColumn("property_description", 5), SqlTypeFacets("nvarchar", true, 1024)]
        public string property_description
        {
            get;
            set;
        }

        public registered_search_properties()
        {
        }

        public registered_search_properties(object[] items)
        {
            property_list_id = (int)items[0];
            property_id = (int)items[1];
            property_name = (string)items[2];
            property_set_guid = (Guid)items[3];
            property_int_id = (int)items[4];
            property_description = (string)items[5];
        }

        public registered_search_properties(int property_list_id, int property_id, string property_name, Guid property_set_guid, int property_int_id, string property_description)
        {
            this.property_list_id = property_list_id;
            this.property_id = property_id;
            this.property_name = property_name;
            this.property_set_guid = property_set_guid;
            this.property_int_id = property_int_id;
            this.property_description = property_description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { property_list_id, property_id, property_name, property_set_guid, property_int_id, property_description };
        }

        public override void SetItemArray(object[] items)
        {
            property_list_id = (int)items[0];
            property_id = (int)items[1];
            property_name = (string)items[2];
            property_set_guid = (Guid)items[3];
            property_int_id = (int)items[4];
            property_description = (string)items[5];
        }
    }

    [SqlView("sys", "sequences")]
    public partial class sequences : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("start_value", 12), SqlTypeFacets("sql_variant", false)]
        public Object start_value
        {
            get;
            set;
        }

        [SqlColumn("increment", 13), SqlTypeFacets("sql_variant", false)]
        public Object increment
        {
            get;
            set;
        }

        [SqlColumn("minimum_value", 14), SqlTypeFacets("sql_variant", false)]
        public Object minimum_value
        {
            get;
            set;
        }

        [SqlColumn("maximum_value", 15), SqlTypeFacets("sql_variant", false)]
        public Object maximum_value
        {
            get;
            set;
        }

        [SqlColumn("is_cycling", 16), SqlTypeFacets("bit", true)]
        public bool? is_cycling
        {
            get;
            set;
        }

        [SqlColumn("is_cached", 17), SqlTypeFacets("bit", true)]
        public bool? is_cached
        {
            get;
            set;
        }

        [SqlColumn("cache_size", 18), SqlTypeFacets("int", true)]
        public int? cache_size
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 19), SqlTypeFacets("tinyint", false)]
        public byte system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 20), SqlTypeFacets("int", false)]
        public int user_type_id
        {
            get;
            set;
        }

        [SqlColumn("precision", 21), SqlTypeFacets("tinyint", false)]
        public byte precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 22), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("current_value", 23), SqlTypeFacets("sql_variant", false)]
        public Object current_value
        {
            get;
            set;
        }

        [SqlColumn("is_exhausted", 24), SqlTypeFacets("bit", false)]
        public bool is_exhausted
        {
            get;
            set;
        }

        public sequences()
        {
        }

        public sequences(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            start_value = (Object)items[12];
            increment = (Object)items[13];
            minimum_value = (Object)items[14];
            maximum_value = (Object)items[15];
            is_cycling = (bool?)items[16];
            is_cached = (bool?)items[17];
            cache_size = (int?)items[18];
            system_type_id = (byte)items[19];
            user_type_id = (int)items[20];
            precision = (byte)items[21];
            scale = (byte?)items[22];
            current_value = (Object)items[23];
            is_exhausted = (bool)items[24];
        }

        public sequences(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, Object start_value, Object increment, Object minimum_value, Object maximum_value, bool? is_cycling, bool? is_cached, int? cache_size, byte system_type_id, int user_type_id, byte precision, byte? scale, Object current_value, bool is_exhausted)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.start_value = start_value;
            this.increment = increment;
            this.minimum_value = minimum_value;
            this.maximum_value = maximum_value;
            this.is_cycling = is_cycling;
            this.is_cached = is_cached;
            this.cache_size = cache_size;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.precision = precision;
            this.scale = scale;
            this.current_value = current_value;
            this.is_exhausted = is_exhausted;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, start_value, increment, minimum_value, maximum_value, is_cycling, is_cached, cache_size, system_type_id, user_type_id, precision, scale, current_value, is_exhausted };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            start_value = (Object)items[12];
            increment = (Object)items[13];
            minimum_value = (Object)items[14];
            maximum_value = (Object)items[15];
            is_cycling = (bool?)items[16];
            is_cached = (bool?)items[17];
            cache_size = (int?)items[18];
            system_type_id = (byte)items[19];
            user_type_id = (int)items[20];
            precision = (byte)items[21];
            scale = (byte?)items[22];
            current_value = (Object)items[23];
            is_exhausted = (bool)items[24];
        }
    }

    [SqlView("sys", "filetables")]
    public partial class filetables : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("is_enabled", 1), SqlTypeFacets("bit", false)]
        public bool is_enabled
        {
            get;
            set;
        }

        [SqlColumn("directory_name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string directory_name
        {
            get;
            set;
        }

        [SqlColumn("filename_collation_id", 3), SqlTypeFacets("int", false)]
        public int filename_collation_id
        {
            get;
            set;
        }

        [SqlColumn("filename_collation_name", 4), SqlTypeFacets("nvarchar", false, 258)]
        public string filename_collation_name
        {
            get;
            set;
        }

        public filetables()
        {
        }

        public filetables(object[] items)
        {
            object_id = (int)items[0];
            is_enabled = (bool)items[1];
            directory_name = (string)items[2];
            filename_collation_id = (int)items[3];
            filename_collation_name = (string)items[4];
        }

        public filetables(int object_id, bool is_enabled, string directory_name, int filename_collation_id, string filename_collation_name)
        {
            this.object_id = object_id;
            this.is_enabled = is_enabled;
            this.directory_name = directory_name;
            this.filename_collation_id = filename_collation_id;
            this.filename_collation_name = filename_collation_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, is_enabled, directory_name, filename_collation_id, filename_collation_name };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            is_enabled = (bool)items[1];
            directory_name = (string)items[2];
            filename_collation_id = (int)items[3];
            filename_collation_name = (string)items[4];
        }
    }

    [SqlView("sys", "filetable_system_defined_objects")]
    public partial class filetable_system_defined_objects : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 1), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        public filetable_system_defined_objects()
        {
        }

        public filetable_system_defined_objects(object[] items)
        {
            object_id = (int)items[0];
            parent_object_id = (int)items[1];
        }

        public filetable_system_defined_objects(int object_id, int parent_object_id)
        {
            this.object_id = object_id;
            this.parent_object_id = parent_object_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, parent_object_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            parent_object_id = (int)items[1];
        }
    }

    [SqlView("sys", "column_store_segments")]
    public partial class column_store_segments : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 1), SqlTypeFacets("bigint", false)]
        public long hobt_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("segment_id", 3), SqlTypeFacets("int", false)]
        public int segment_id
        {
            get;
            set;
        }

        [SqlColumn("version", 4), SqlTypeFacets("int", false)]
        public int version
        {
            get;
            set;
        }

        [SqlColumn("encoding_type", 5), SqlTypeFacets("int", false)]
        public int encoding_type
        {
            get;
            set;
        }

        [SqlColumn("row_count", 6), SqlTypeFacets("int", false)]
        public int row_count
        {
            get;
            set;
        }

        [SqlColumn("has_nulls", 7), SqlTypeFacets("bit", true)]
        public bool? has_nulls
        {
            get;
            set;
        }

        [SqlColumn("base_id", 8), SqlTypeFacets("bigint", true)]
        public long? base_id
        {
            get;
            set;
        }

        [SqlColumn("magnitude", 9), SqlTypeFacets("float", true)]
        public double? magnitude
        {
            get;
            set;
        }

        [SqlColumn("primary_dictionary_id", 10), SqlTypeFacets("int", false)]
        public int primary_dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("secondary_dictionary_id", 11), SqlTypeFacets("int", false)]
        public int secondary_dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("min_data_id", 12), SqlTypeFacets("bigint", true)]
        public long? min_data_id
        {
            get;
            set;
        }

        [SqlColumn("max_data_id", 13), SqlTypeFacets("bigint", true)]
        public long? max_data_id
        {
            get;
            set;
        }

        [SqlColumn("null_value", 14), SqlTypeFacets("bigint", true)]
        public long? null_value
        {
            get;
            set;
        }

        [SqlColumn("on_disk_size", 15), SqlTypeFacets("bigint", false)]
        public long on_disk_size
        {
            get;
            set;
        }

        public column_store_segments()
        {
        }

        public column_store_segments(object[] items)
        {
            partition_id = (long)items[0];
            hobt_id = (long)items[1];
            column_id = (int)items[2];
            segment_id = (int)items[3];
            version = (int)items[4];
            encoding_type = (int)items[5];
            row_count = (int)items[6];
            has_nulls = (bool?)items[7];
            base_id = (long?)items[8];
            magnitude = (double?)items[9];
            primary_dictionary_id = (int)items[10];
            secondary_dictionary_id = (int)items[11];
            min_data_id = (long?)items[12];
            max_data_id = (long?)items[13];
            null_value = (long?)items[14];
            on_disk_size = (long)items[15];
        }

        public column_store_segments(long partition_id, long hobt_id, int column_id, int segment_id, int version, int encoding_type, int row_count, bool? has_nulls, long? base_id, double? magnitude, int primary_dictionary_id, int secondary_dictionary_id, long? min_data_id, long? max_data_id, long? null_value, long on_disk_size)
        {
            this.partition_id = partition_id;
            this.hobt_id = hobt_id;
            this.column_id = column_id;
            this.segment_id = segment_id;
            this.version = version;
            this.encoding_type = encoding_type;
            this.row_count = row_count;
            this.has_nulls = has_nulls;
            this.base_id = base_id;
            this.magnitude = magnitude;
            this.primary_dictionary_id = primary_dictionary_id;
            this.secondary_dictionary_id = secondary_dictionary_id;
            this.min_data_id = min_data_id;
            this.max_data_id = max_data_id;
            this.null_value = null_value;
            this.on_disk_size = on_disk_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, hobt_id, column_id, segment_id, version, encoding_type, row_count, has_nulls, base_id, magnitude, primary_dictionary_id, secondary_dictionary_id, min_data_id, max_data_id, null_value, on_disk_size };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            hobt_id = (long)items[1];
            column_id = (int)items[2];
            segment_id = (int)items[3];
            version = (int)items[4];
            encoding_type = (int)items[5];
            row_count = (int)items[6];
            has_nulls = (bool?)items[7];
            base_id = (long?)items[8];
            magnitude = (double?)items[9];
            primary_dictionary_id = (int)items[10];
            secondary_dictionary_id = (int)items[11];
            min_data_id = (long?)items[12];
            max_data_id = (long?)items[13];
            null_value = (long?)items[14];
            on_disk_size = (long)items[15];
        }
    }

    [SqlView("sys", "column_store_dictionaries")]
    public partial class column_store_dictionaries : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("hobt_id", 1), SqlTypeFacets("bigint", false)]
        public long hobt_id
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("dictionary_id", 3), SqlTypeFacets("int", false)]
        public int dictionary_id
        {
            get;
            set;
        }

        [SqlColumn("version", 4), SqlTypeFacets("int", false)]
        public int version
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("last_id", 6), SqlTypeFacets("int", true)]
        public int? last_id
        {
            get;
            set;
        }

        [SqlColumn("entry_count", 7), SqlTypeFacets("bigint", true)]
        public long? entry_count
        {
            get;
            set;
        }

        [SqlColumn("on_disk_size", 8), SqlTypeFacets("bigint", false)]
        public long on_disk_size
        {
            get;
            set;
        }

        public column_store_dictionaries()
        {
        }

        public column_store_dictionaries(object[] items)
        {
            partition_id = (long)items[0];
            hobt_id = (long)items[1];
            column_id = (int)items[2];
            dictionary_id = (int)items[3];
            version = (int)items[4];
            type = (int)items[5];
            last_id = (int?)items[6];
            entry_count = (long?)items[7];
            on_disk_size = (long)items[8];
        }

        public column_store_dictionaries(long partition_id, long hobt_id, int column_id, int dictionary_id, int version, int type, int? last_id, long? entry_count, long on_disk_size)
        {
            this.partition_id = partition_id;
            this.hobt_id = hobt_id;
            this.column_id = column_id;
            this.dictionary_id = dictionary_id;
            this.version = version;
            this.type = type;
            this.last_id = last_id;
            this.entry_count = entry_count;
            this.on_disk_size = on_disk_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, hobt_id, column_id, dictionary_id, version, type, last_id, entry_count, on_disk_size };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            hobt_id = (long)items[1];
            column_id = (int)items[2];
            dictionary_id = (int)items[3];
            version = (int)items[4];
            type = (int)items[5];
            last_id = (int?)items[6];
            entry_count = (long?)items[7];
            on_disk_size = (long)items[8];
        }
    }

    [SqlView("sys", "hash_indexes")]
    public partial class hash_indexes : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_unique", 5), SqlTypeFacets("bit", true)]
        public bool? is_unique
        {
            get;
            set;
        }

        [SqlColumn("data_space_id", 6), SqlTypeFacets("int", false)]
        public int data_space_id
        {
            get;
            set;
        }

        [SqlColumn("ignore_dup_key", 7), SqlTypeFacets("bit", true)]
        public bool? ignore_dup_key
        {
            get;
            set;
        }

        [SqlColumn("is_primary_key", 8), SqlTypeFacets("bit", true)]
        public bool? is_primary_key
        {
            get;
            set;
        }

        [SqlColumn("is_unique_constraint", 9), SqlTypeFacets("bit", true)]
        public bool? is_unique_constraint
        {
            get;
            set;
        }

        [SqlColumn("fill_factor", 10), SqlTypeFacets("tinyint", false)]
        public byte fill_factor
        {
            get;
            set;
        }

        [SqlColumn("is_padded", 11), SqlTypeFacets("bit", true)]
        public bool? is_padded
        {
            get;
            set;
        }

        [SqlColumn("is_disabled", 12), SqlTypeFacets("bit", true)]
        public bool? is_disabled
        {
            get;
            set;
        }

        [SqlColumn("is_hypothetical", 13), SqlTypeFacets("bit", true)]
        public bool? is_hypothetical
        {
            get;
            set;
        }

        [SqlColumn("allow_row_locks", 14), SqlTypeFacets("bit", true)]
        public bool? allow_row_locks
        {
            get;
            set;
        }

        [SqlColumn("allow_page_locks", 15), SqlTypeFacets("bit", true)]
        public bool? allow_page_locks
        {
            get;
            set;
        }

        [SqlColumn("has_filter", 16), SqlTypeFacets("bit", true)]
        public bool? has_filter
        {
            get;
            set;
        }

        [SqlColumn("filter_definition", 17), SqlTypeFacets("nvarchar", true, -1)]
        public string filter_definition
        {
            get;
            set;
        }

        [SqlColumn("bucket_count", 18), SqlTypeFacets("int", false)]
        public int bucket_count
        {
            get;
            set;
        }

        public hash_indexes()
        {
        }

        public hash_indexes(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            has_filter = (bool?)items[16];
            filter_definition = (string)items[17];
            bucket_count = (int)items[18];
        }

        public hash_indexes(int object_id, string name, int index_id, byte type, string type_desc, bool? is_unique, int data_space_id, bool? ignore_dup_key, bool? is_primary_key, bool? is_unique_constraint, byte fill_factor, bool? is_padded, bool? is_disabled, bool? is_hypothetical, bool? allow_row_locks, bool? allow_page_locks, bool? has_filter, string filter_definition, int bucket_count)
        {
            this.object_id = object_id;
            this.name = name;
            this.index_id = index_id;
            this.type = type;
            this.type_desc = type_desc;
            this.is_unique = is_unique;
            this.data_space_id = data_space_id;
            this.ignore_dup_key = ignore_dup_key;
            this.is_primary_key = is_primary_key;
            this.is_unique_constraint = is_unique_constraint;
            this.fill_factor = fill_factor;
            this.is_padded = is_padded;
            this.is_disabled = is_disabled;
            this.is_hypothetical = is_hypothetical;
            this.allow_row_locks = allow_row_locks;
            this.allow_page_locks = allow_page_locks;
            this.has_filter = has_filter;
            this.filter_definition = filter_definition;
            this.bucket_count = bucket_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, name, index_id, type, type_desc, is_unique, data_space_id, ignore_dup_key, is_primary_key, is_unique_constraint, fill_factor, is_padded, is_disabled, is_hypothetical, allow_row_locks, allow_page_locks, has_filter, filter_definition, bucket_count };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            name = (string)items[1];
            index_id = (int)items[2];
            type = (byte)items[3];
            type_desc = (string)items[4];
            is_unique = (bool?)items[5];
            data_space_id = (int)items[6];
            ignore_dup_key = (bool?)items[7];
            is_primary_key = (bool?)items[8];
            is_unique_constraint = (bool?)items[9];
            fill_factor = (byte)items[10];
            is_padded = (bool?)items[11];
            is_disabled = (bool?)items[12];
            is_hypothetical = (bool?)items[13];
            allow_row_locks = (bool?)items[14];
            allow_page_locks = (bool?)items[15];
            has_filter = (bool?)items[16];
            filter_definition = (string)items[17];
            bucket_count = (int)items[18];
        }
    }

    [SqlView("sys", "selective_xml_index_paths")]
    public partial class selective_xml_index_paths : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("path_id", 2), SqlTypeFacets("int", true)]
        public int? path_id
        {
            get;
            set;
        }

        [SqlColumn("path", 3), SqlTypeFacets("nvarchar", true, 8000)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("name", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("path_type", 5), SqlTypeFacets("tinyint", true)]
        public byte? path_type
        {
            get;
            set;
        }

        [SqlColumn("path_type_desc", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string path_type_desc
        {
            get;
            set;
        }

        [SqlColumn("xml_component_id", 7), SqlTypeFacets("int", true)]
        public int? xml_component_id
        {
            get;
            set;
        }

        [SqlColumn("xquery_type_description", 8), SqlTypeFacets("nvarchar", true, 8000)]
        public string xquery_type_description
        {
            get;
            set;
        }

        [SqlColumn("is_xquery_type_inferred", 9), SqlTypeFacets("bit", true)]
        public bool? is_xquery_type_inferred
        {
            get;
            set;
        }

        [SqlColumn("xquery_max_length", 10), SqlTypeFacets("int", true)]
        public int? xquery_max_length
        {
            get;
            set;
        }

        [SqlColumn("is_xquery_max_length_inferred", 11), SqlTypeFacets("bit", true)]
        public bool? is_xquery_max_length_inferred
        {
            get;
            set;
        }

        [SqlColumn("is_node", 12), SqlTypeFacets("bit", true)]
        public bool? is_node
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 13), SqlTypeFacets("tinyint", true)]
        public byte? system_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 14), SqlTypeFacets("tinyint", true)]
        public byte? user_type_id
        {
            get;
            set;
        }

        [SqlColumn("max_length", 15), SqlTypeFacets("smallint", true)]
        public short? max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 16), SqlTypeFacets("tinyint", true)]
        public byte? precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 17), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 18), SqlTypeFacets("sysname", true)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("is_singleton", 19), SqlTypeFacets("bit", true)]
        public bool? is_singleton
        {
            get;
            set;
        }

        public selective_xml_index_paths()
        {
        }

        public selective_xml_index_paths(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            path_id = (int?)items[2];
            path = (string)items[3];
            name = (string)items[4];
            path_type = (byte?)items[5];
            path_type_desc = (string)items[6];
            xml_component_id = (int?)items[7];
            xquery_type_description = (string)items[8];
            is_xquery_type_inferred = (bool?)items[9];
            xquery_max_length = (int?)items[10];
            is_xquery_max_length_inferred = (bool?)items[11];
            is_node = (bool?)items[12];
            system_type_id = (byte?)items[13];
            user_type_id = (byte?)items[14];
            max_length = (short?)items[15];
            precision = (byte?)items[16];
            scale = (byte?)items[17];
            collation_name = (string)items[18];
            is_singleton = (bool?)items[19];
        }

        public selective_xml_index_paths(int object_id, int index_id, int? path_id, string path, string name, byte? path_type, string path_type_desc, int? xml_component_id, string xquery_type_description, bool? is_xquery_type_inferred, int? xquery_max_length, bool? is_xquery_max_length_inferred, bool? is_node, byte? system_type_id, byte? user_type_id, short? max_length, byte? precision, byte? scale, string collation_name, bool? is_singleton)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.path_id = path_id;
            this.path = path;
            this.name = name;
            this.path_type = path_type;
            this.path_type_desc = path_type_desc;
            this.xml_component_id = xml_component_id;
            this.xquery_type_description = xquery_type_description;
            this.is_xquery_type_inferred = is_xquery_type_inferred;
            this.xquery_max_length = xquery_max_length;
            this.is_xquery_max_length_inferred = is_xquery_max_length_inferred;
            this.is_node = is_node;
            this.system_type_id = system_type_id;
            this.user_type_id = user_type_id;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.is_singleton = is_singleton;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, path_id, path, name, path_type, path_type_desc, xml_component_id, xquery_type_description, is_xquery_type_inferred, xquery_max_length, is_xquery_max_length_inferred, is_node, system_type_id, user_type_id, max_length, precision, scale, collation_name, is_singleton };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            path_id = (int?)items[2];
            path = (string)items[3];
            name = (string)items[4];
            path_type = (byte?)items[5];
            path_type_desc = (string)items[6];
            xml_component_id = (int?)items[7];
            xquery_type_description = (string)items[8];
            is_xquery_type_inferred = (bool?)items[9];
            xquery_max_length = (int?)items[10];
            is_xquery_max_length_inferred = (bool?)items[11];
            is_node = (bool?)items[12];
            system_type_id = (byte?)items[13];
            user_type_id = (byte?)items[14];
            max_length = (short?)items[15];
            precision = (byte?)items[16];
            scale = (byte?)items[17];
            collation_name = (string)items[18];
            is_singleton = (bool?)items[19];
        }
    }

    [SqlView("sys", "selective_xml_index_namespaces")]
    public partial class selective_xml_index_namespaces : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("is_default_uri", 2), SqlTypeFacets("bit", true)]
        public bool? is_default_uri
        {
            get;
            set;
        }

        [SqlColumn("uri", 3), SqlTypeFacets("nvarchar", true, 8000)]
        public string uri
        {
            get;
            set;
        }

        [SqlColumn("prefix", 4), SqlTypeFacets("sysname", true)]
        public string prefix
        {
            get;
            set;
        }

        public selective_xml_index_namespaces()
        {
        }

        public selective_xml_index_namespaces(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            is_default_uri = (bool?)items[2];
            uri = (string)items[3];
            prefix = (string)items[4];
        }

        public selective_xml_index_namespaces(int object_id, int index_id, bool? is_default_uri, string uri, string prefix)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.is_default_uri = is_default_uri;
            this.uri = uri;
            this.prefix = prefix;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, is_default_uri, uri, prefix };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            is_default_uri = (bool?)items[2];
            uri = (string)items[3];
            prefix = (string)items[4];
        }
    }

    [SqlView("sys", "column_store_row_groups")]
    public partial class column_store_row_groups : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 2), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 3), SqlTypeFacets("int", true)]
        public int? row_group_id
        {
            get;
            set;
        }

        [SqlColumn("delta_store_hobt_id", 4), SqlTypeFacets("bigint", true)]
        public long? delta_store_hobt_id
        {
            get;
            set;
        }

        [SqlColumn("state", 5), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_description", 6), SqlTypeFacets("nvarchar", false, 120)]
        public string state_description
        {
            get;
            set;
        }

        [SqlColumn("total_rows", 7), SqlTypeFacets("bigint", true)]
        public long? total_rows
        {
            get;
            set;
        }

        [SqlColumn("deleted_rows", 8), SqlTypeFacets("bigint", true)]
        public long? deleted_rows
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? size_in_bytes
        {
            get;
            set;
        }

        public column_store_row_groups()
        {
        }

        public column_store_row_groups(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }

        public column_store_row_groups(int? object_id, int? index_id, int? partition_number, int? row_group_id, long? delta_store_hobt_id, byte? state, string state_description, long? total_rows, long? deleted_rows, long? size_in_bytes)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.row_group_id = row_group_id;
            this.delta_store_hobt_id = delta_store_hobt_id;
            this.state = state;
            this.state_description = state_description;
            this.total_rows = total_rows;
            this.deleted_rows = deleted_rows;
            this.size_in_bytes = size_in_bytes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, partition_number, row_group_id, delta_store_hobt_id, state, state_description, total_rows, deleted_rows, size_in_bytes };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }
    }

    [SqlView("sys", "external_tables")]
    public partial class external_tables : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("principal_id", 2), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("schema_id", 3), SqlTypeFacets("int", false)]
        public int schema_id
        {
            get;
            set;
        }

        [SqlColumn("parent_object_id", 4), SqlTypeFacets("int", false)]
        public int parent_object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 7), SqlTypeFacets("datetime", false)]
        public DateTime create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 8), SqlTypeFacets("datetime", false)]
        public DateTime modify_date
        {
            get;
            set;
        }

        [SqlColumn("is_ms_shipped", 9), SqlTypeFacets("bit", false)]
        public bool is_ms_shipped
        {
            get;
            set;
        }

        [SqlColumn("is_published", 10), SqlTypeFacets("bit", false)]
        public bool is_published
        {
            get;
            set;
        }

        [SqlColumn("is_schema_published", 11), SqlTypeFacets("bit", false)]
        public bool is_schema_published
        {
            get;
            set;
        }

        [SqlColumn("max_column_id_used", 12), SqlTypeFacets("int", true)]
        public int? max_column_id_used
        {
            get;
            set;
        }

        [SqlColumn("uses_ansi_nulls", 13), SqlTypeFacets("bit", true)]
        public bool? uses_ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("data_source_id", 14), SqlTypeFacets("int", false)]
        public int data_source_id
        {
            get;
            set;
        }

        [SqlColumn("file_format_id", 15), SqlTypeFacets("int", true)]
        public int? file_format_id
        {
            get;
            set;
        }

        [SqlColumn("location", 16), SqlTypeFacets("nvarchar", true, 8000)]
        public string location
        {
            get;
            set;
        }

        [SqlColumn("reject_type", 17), SqlTypeFacets("nvarchar", true, 40)]
        public string reject_type
        {
            get;
            set;
        }

        [SqlColumn("reject_value", 18), SqlTypeFacets("float", true)]
        public double? reject_value
        {
            get;
            set;
        }

        [SqlColumn("reject_sample_value", 19), SqlTypeFacets("float", true)]
        public double? reject_sample_value
        {
            get;
            set;
        }

        public external_tables()
        {
        }

        public external_tables(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_column_id_used = (int?)items[12];
            uses_ansi_nulls = (bool?)items[13];
            data_source_id = (int)items[14];
            file_format_id = (int?)items[15];
            location = (string)items[16];
            reject_type = (string)items[17];
            reject_value = (double?)items[18];
            reject_sample_value = (double?)items[19];
        }

        public external_tables(string name, int object_id, int? principal_id, int schema_id, int parent_object_id, string type, string type_desc, DateTime create_date, DateTime modify_date, bool is_ms_shipped, bool is_published, bool is_schema_published, int? max_column_id_used, bool? uses_ansi_nulls, int data_source_id, int? file_format_id, string location, string reject_type, double? reject_value, double? reject_sample_value)
        {
            this.name = name;
            this.object_id = object_id;
            this.principal_id = principal_id;
            this.schema_id = schema_id;
            this.parent_object_id = parent_object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.is_ms_shipped = is_ms_shipped;
            this.is_published = is_published;
            this.is_schema_published = is_schema_published;
            this.max_column_id_used = max_column_id_used;
            this.uses_ansi_nulls = uses_ansi_nulls;
            this.data_source_id = data_source_id;
            this.file_format_id = file_format_id;
            this.location = location;
            this.reject_type = reject_type;
            this.reject_value = reject_value;
            this.reject_sample_value = reject_sample_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published, max_column_id_used, uses_ansi_nulls, data_source_id, file_format_id, location, reject_type, reject_value, reject_sample_value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_id = (int)items[1];
            principal_id = (int?)items[2];
            schema_id = (int)items[3];
            parent_object_id = (int)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
            create_date = (DateTime)items[7];
            modify_date = (DateTime)items[8];
            is_ms_shipped = (bool)items[9];
            is_published = (bool)items[10];
            is_schema_published = (bool)items[11];
            max_column_id_used = (int?)items[12];
            uses_ansi_nulls = (bool?)items[13];
            data_source_id = (int)items[14];
            file_format_id = (int?)items[15];
            location = (string)items[16];
            reject_type = (string)items[17];
            reject_value = (double?)items[18];
            reject_sample_value = (double?)items[19];
        }
    }

    [SqlView("sys", "dm_clr_loaded_assemblies")]
    public partial class dm_clr_loaded_assemblies : SqlViewProxy
    {
        [SqlColumn("assembly_id", 0), SqlTypeFacets("int", true)]
        public int? assembly_id
        {
            get;
            set;
        }

        [SqlColumn("appdomain_address", 1), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("load_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? load_time
        {
            get;
            set;
        }

        public dm_clr_loaded_assemblies()
        {
        }

        public dm_clr_loaded_assemblies(object[] items)
        {
            assembly_id = (int?)items[0];
            appdomain_address = (Byte[])items[1];
            load_time = (DateTime?)items[2];
        }

        public dm_clr_loaded_assemblies(int? assembly_id, Byte[] appdomain_address, DateTime? load_time)
        {
            this.assembly_id = assembly_id;
            this.appdomain_address = appdomain_address;
            this.load_time = load_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { assembly_id, appdomain_address, load_time };
        }

        public override void SetItemArray(object[] items)
        {
            assembly_id = (int?)items[0];
            appdomain_address = (Byte[])items[1];
            load_time = (DateTime?)items[2];
        }
    }

    [SqlView("sys", "dm_db_xtp_transactions")]
    public partial class dm_db_xtp_transactions : SqlViewProxy
    {
        [SqlColumn("xtp_transaction_id", 0), SqlTypeFacets("bigint", false)]
        public long xtp_transaction_id
        {
            get;
            set;
        }

        [SqlColumn("transaction_id", 1), SqlTypeFacets("bigint", false)]
        public long transaction_id
        {
            get;
            set;
        }

        [SqlColumn("session_id", 2), SqlTypeFacets("smallint", false)]
        public short session_id
        {
            get;
            set;
        }

        [SqlColumn("begin_tsn", 3), SqlTypeFacets("bigint", false)]
        public long begin_tsn
        {
            get;
            set;
        }

        [SqlColumn("end_tsn", 4), SqlTypeFacets("bigint", false)]
        public long end_tsn
        {
            get;
            set;
        }

        [SqlColumn("state", 5), SqlTypeFacets("int", false)]
        public int state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 6), SqlTypeFacets("nvarchar", false, 32)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("result", 7), SqlTypeFacets("int", false)]
        public int result
        {
            get;
            set;
        }

        [SqlColumn("result_desc", 8), SqlTypeFacets("nvarchar", false, 48)]
        public string result_desc
        {
            get;
            set;
        }

        [SqlColumn("last_error", 9), SqlTypeFacets("int", false)]
        public int last_error
        {
            get;
            set;
        }

        [SqlColumn("is_speculative", 10), SqlTypeFacets("bit", false)]
        public bool is_speculative
        {
            get;
            set;
        }

        [SqlColumn("is_prepared", 11), SqlTypeFacets("bit", false)]
        public bool is_prepared
        {
            get;
            set;
        }

        [SqlColumn("is_delayed_durability", 12), SqlTypeFacets("bit", false)]
        public bool is_delayed_durability
        {
            get;
            set;
        }

        [SqlColumn("memory_address", 13), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("database_address", 14), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] database_address
        {
            get;
            set;
        }

        [SqlColumn("thread_id", 15), SqlTypeFacets("int", false)]
        public int thread_id
        {
            get;
            set;
        }

        [SqlColumn("read_set_row_count", 16), SqlTypeFacets("int", false)]
        public int read_set_row_count
        {
            get;
            set;
        }

        [SqlColumn("write_set_row_count", 17), SqlTypeFacets("int", false)]
        public int write_set_row_count
        {
            get;
            set;
        }

        [SqlColumn("scan_set_count", 18), SqlTypeFacets("int", false)]
        public int scan_set_count
        {
            get;
            set;
        }

        [SqlColumn("savepoint_garbage_count", 19), SqlTypeFacets("int", false)]
        public int savepoint_garbage_count
        {
            get;
            set;
        }

        [SqlColumn("log_bytes_required", 20), SqlTypeFacets("bigint", false)]
        public long log_bytes_required
        {
            get;
            set;
        }

        [SqlColumn("count_of_allocations", 21), SqlTypeFacets("int", false)]
        public int count_of_allocations
        {
            get;
            set;
        }

        [SqlColumn("allocated_bytes", 22), SqlTypeFacets("int", false)]
        public int allocated_bytes
        {
            get;
            set;
        }

        [SqlColumn("reserved_bytes", 23), SqlTypeFacets("int", false)]
        public int reserved_bytes
        {
            get;
            set;
        }

        [SqlColumn("commit_dependency_count", 24), SqlTypeFacets("int", false)]
        public int commit_dependency_count
        {
            get;
            set;
        }

        [SqlColumn("commit_dependency_total_attempt_count", 25), SqlTypeFacets("int", false)]
        public int commit_dependency_total_attempt_count
        {
            get;
            set;
        }

        [SqlColumn("scan_area", 26), SqlTypeFacets("int", false)]
        public int scan_area
        {
            get;
            set;
        }

        [SqlColumn("scan_area_desc", 27), SqlTypeFacets("nvarchar", false, 32)]
        public string scan_area_desc
        {
            get;
            set;
        }

        [SqlColumn("scan_location", 28), SqlTypeFacets("int", false)]
        public int scan_location
        {
            get;
            set;
        }

        [SqlColumn("dependent_1_address", 29), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_1_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_2_address", 30), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_2_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_3_address", 31), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_3_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_4_address", 32), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_4_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_5_address", 33), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_5_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_6_address", 34), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_6_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_7_address", 35), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_7_address
        {
            get;
            set;
        }

        [SqlColumn("dependent_8_address", 36), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dependent_8_address
        {
            get;
            set;
        }

        public dm_db_xtp_transactions()
        {
        }

        public dm_db_xtp_transactions(object[] items)
        {
            xtp_transaction_id = (long)items[0];
            transaction_id = (long)items[1];
            session_id = (short)items[2];
            begin_tsn = (long)items[3];
            end_tsn = (long)items[4];
            state = (int)items[5];
            state_desc = (string)items[6];
            result = (int)items[7];
            result_desc = (string)items[8];
            last_error = (int)items[9];
            is_speculative = (bool)items[10];
            is_prepared = (bool)items[11];
            is_delayed_durability = (bool)items[12];
            memory_address = (Byte[])items[13];
            database_address = (Byte[])items[14];
            thread_id = (int)items[15];
            read_set_row_count = (int)items[16];
            write_set_row_count = (int)items[17];
            scan_set_count = (int)items[18];
            savepoint_garbage_count = (int)items[19];
            log_bytes_required = (long)items[20];
            count_of_allocations = (int)items[21];
            allocated_bytes = (int)items[22];
            reserved_bytes = (int)items[23];
            commit_dependency_count = (int)items[24];
            commit_dependency_total_attempt_count = (int)items[25];
            scan_area = (int)items[26];
            scan_area_desc = (string)items[27];
            scan_location = (int)items[28];
            dependent_1_address = (Byte[])items[29];
            dependent_2_address = (Byte[])items[30];
            dependent_3_address = (Byte[])items[31];
            dependent_4_address = (Byte[])items[32];
            dependent_5_address = (Byte[])items[33];
            dependent_6_address = (Byte[])items[34];
            dependent_7_address = (Byte[])items[35];
            dependent_8_address = (Byte[])items[36];
        }

        public dm_db_xtp_transactions(long xtp_transaction_id, long transaction_id, short session_id, long begin_tsn, long end_tsn, int state, string state_desc, int result, string result_desc, int last_error, bool is_speculative, bool is_prepared, bool is_delayed_durability, Byte[] memory_address, Byte[] database_address, int thread_id, int read_set_row_count, int write_set_row_count, int scan_set_count, int savepoint_garbage_count, long log_bytes_required, int count_of_allocations, int allocated_bytes, int reserved_bytes, int commit_dependency_count, int commit_dependency_total_attempt_count, int scan_area, string scan_area_desc, int scan_location, Byte[] dependent_1_address, Byte[] dependent_2_address, Byte[] dependent_3_address, Byte[] dependent_4_address, Byte[] dependent_5_address, Byte[] dependent_6_address, Byte[] dependent_7_address, Byte[] dependent_8_address)
        {
            this.xtp_transaction_id = xtp_transaction_id;
            this.transaction_id = transaction_id;
            this.session_id = session_id;
            this.begin_tsn = begin_tsn;
            this.end_tsn = end_tsn;
            this.state = state;
            this.state_desc = state_desc;
            this.result = result;
            this.result_desc = result_desc;
            this.last_error = last_error;
            this.is_speculative = is_speculative;
            this.is_prepared = is_prepared;
            this.is_delayed_durability = is_delayed_durability;
            this.memory_address = memory_address;
            this.database_address = database_address;
            this.thread_id = thread_id;
            this.read_set_row_count = read_set_row_count;
            this.write_set_row_count = write_set_row_count;
            this.scan_set_count = scan_set_count;
            this.savepoint_garbage_count = savepoint_garbage_count;
            this.log_bytes_required = log_bytes_required;
            this.count_of_allocations = count_of_allocations;
            this.allocated_bytes = allocated_bytes;
            this.reserved_bytes = reserved_bytes;
            this.commit_dependency_count = commit_dependency_count;
            this.commit_dependency_total_attempt_count = commit_dependency_total_attempt_count;
            this.scan_area = scan_area;
            this.scan_area_desc = scan_area_desc;
            this.scan_location = scan_location;
            this.dependent_1_address = dependent_1_address;
            this.dependent_2_address = dependent_2_address;
            this.dependent_3_address = dependent_3_address;
            this.dependent_4_address = dependent_4_address;
            this.dependent_5_address = dependent_5_address;
            this.dependent_6_address = dependent_6_address;
            this.dependent_7_address = dependent_7_address;
            this.dependent_8_address = dependent_8_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xtp_transaction_id, transaction_id, session_id, begin_tsn, end_tsn, state, state_desc, result, result_desc, last_error, is_speculative, is_prepared, is_delayed_durability, memory_address, database_address, thread_id, read_set_row_count, write_set_row_count, scan_set_count, savepoint_garbage_count, log_bytes_required, count_of_allocations, allocated_bytes, reserved_bytes, commit_dependency_count, commit_dependency_total_attempt_count, scan_area, scan_area_desc, scan_location, dependent_1_address, dependent_2_address, dependent_3_address, dependent_4_address, dependent_5_address, dependent_6_address, dependent_7_address, dependent_8_address };
        }

        public override void SetItemArray(object[] items)
        {
            xtp_transaction_id = (long)items[0];
            transaction_id = (long)items[1];
            session_id = (short)items[2];
            begin_tsn = (long)items[3];
            end_tsn = (long)items[4];
            state = (int)items[5];
            state_desc = (string)items[6];
            result = (int)items[7];
            result_desc = (string)items[8];
            last_error = (int)items[9];
            is_speculative = (bool)items[10];
            is_prepared = (bool)items[11];
            is_delayed_durability = (bool)items[12];
            memory_address = (Byte[])items[13];
            database_address = (Byte[])items[14];
            thread_id = (int)items[15];
            read_set_row_count = (int)items[16];
            write_set_row_count = (int)items[17];
            scan_set_count = (int)items[18];
            savepoint_garbage_count = (int)items[19];
            log_bytes_required = (long)items[20];
            count_of_allocations = (int)items[21];
            allocated_bytes = (int)items[22];
            reserved_bytes = (int)items[23];
            commit_dependency_count = (int)items[24];
            commit_dependency_total_attempt_count = (int)items[25];
            scan_area = (int)items[26];
            scan_area_desc = (string)items[27];
            scan_location = (int)items[28];
            dependent_1_address = (Byte[])items[29];
            dependent_2_address = (Byte[])items[30];
            dependent_3_address = (Byte[])items[31];
            dependent_4_address = (Byte[])items[32];
            dependent_5_address = (Byte[])items[33];
            dependent_6_address = (Byte[])items[34];
            dependent_7_address = (Byte[])items[35];
            dependent_8_address = (Byte[])items[36];
        }
    }

    [SqlView("sys", "dm_xe_object_columns")]
    public partial class dm_xe_object_columns : SqlViewProxy
    {
        [SqlColumn("capabilities", 8), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 9), SqlTypeFacets("nvarchar", true, 512)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("description", 10), SqlTypeFacets("nvarchar", true, 6144)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 1), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("object_name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 3), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        [SqlColumn("type_name", 4), SqlTypeFacets("nvarchar", false, 512)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("type_package_guid", 5), SqlTypeFacets("uniqueidentifier", false)]
        public Guid type_package_guid
        {
            get;
            set;
        }

        [SqlColumn("column_type", 6), SqlTypeFacets("nvarchar", false, 120)]
        public string column_type
        {
            get;
            set;
        }

        [SqlColumn("column_value", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string column_value
        {
            get;
            set;
        }

        public dm_xe_object_columns()
        {
        }

        public dm_xe_object_columns(object[] items)
        {
            capabilities = (int?)items[0];
            capabilities_desc = (string)items[1];
            description = (string)items[2];
            name = (string)items[3];
            column_id = (int)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
            type_name = (string)items[7];
            type_package_guid = (Guid)items[8];
            column_type = (string)items[9];
            column_value = (string)items[10];
        }

        public dm_xe_object_columns(int? capabilities, string capabilities_desc, string description, string name, int column_id, string object_name, Guid object_package_guid, string type_name, Guid type_package_guid, string column_type, string column_value)
        {
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.description = description;
            this.name = name;
            this.column_id = column_id;
            this.object_name = object_name;
            this.object_package_guid = object_package_guid;
            this.type_name = type_name;
            this.type_package_guid = type_package_guid;
            this.column_type = column_type;
            this.column_value = column_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { capabilities, capabilities_desc, description, name, column_id, object_name, object_package_guid, type_name, type_package_guid, column_type, column_value };
        }

        public override void SetItemArray(object[] items)
        {
            capabilities = (int?)items[0];
            capabilities_desc = (string)items[1];
            description = (string)items[2];
            name = (string)items[3];
            column_id = (int)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
            type_name = (string)items[7];
            type_package_guid = (Guid)items[8];
            column_type = (string)items[9];
            column_value = (string)items[10];
        }
    }

    [SqlView("sys", "dm_xe_objects")]
    public partial class dm_xe_objects : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_type", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string object_type
        {
            get;
            set;
        }

        [SqlColumn("package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid package_guid
        {
            get;
            set;
        }

        [SqlColumn("description", 3), SqlTypeFacets("nvarchar", false, 6144)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("capabilities", 4), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 5), SqlTypeFacets("nvarchar", true, 512)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("type_name", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("type_package_guid", 7), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? type_package_guid
        {
            get;
            set;
        }

        [SqlColumn("type_size", 8), SqlTypeFacets("int", true)]
        public int? type_size
        {
            get;
            set;
        }

        public dm_xe_objects()
        {
        }

        public dm_xe_objects(object[] items)
        {
            name = (string)items[0];
            object_type = (string)items[1];
            package_guid = (Guid)items[2];
            description = (string)items[3];
            capabilities = (int?)items[4];
            capabilities_desc = (string)items[5];
            type_name = (string)items[6];
            type_package_guid = (Guid?)items[7];
            type_size = (int?)items[8];
        }

        public dm_xe_objects(string name, string object_type, Guid package_guid, string description, int? capabilities, string capabilities_desc, string type_name, Guid? type_package_guid, int? type_size)
        {
            this.name = name;
            this.object_type = object_type;
            this.package_guid = package_guid;
            this.description = description;
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.type_name = type_name;
            this.type_package_guid = type_package_guid;
            this.type_size = type_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_type, package_guid, description, capabilities, capabilities_desc, type_name, type_package_guid, type_size };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_type = (string)items[1];
            package_guid = (Guid)items[2];
            description = (string)items[3];
            capabilities = (int?)items[4];
            capabilities_desc = (string)items[5];
            type_name = (string)items[6];
            type_package_guid = (Guid?)items[7];
            type_size = (int?)items[8];
        }
    }

    [SqlView("sys", "dm_os_process_memory")]
    public partial class dm_os_process_memory : SqlViewProxy
    {
        [SqlColumn("physical_memory_in_use_kb", 0), SqlTypeFacets("bigint", false)]
        public long physical_memory_in_use_kb
        {
            get;
            set;
        }

        [SqlColumn("large_page_allocations_kb", 1), SqlTypeFacets("bigint", false)]
        public long large_page_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("locked_page_allocations_kb", 2), SqlTypeFacets("bigint", false)]
        public long locked_page_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("total_virtual_address_space_kb", 3), SqlTypeFacets("bigint", false)]
        public long total_virtual_address_space_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_address_space_reserved_kb", 4), SqlTypeFacets("bigint", false)]
        public long virtual_address_space_reserved_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_address_space_committed_kb", 5), SqlTypeFacets("bigint", false)]
        public long virtual_address_space_committed_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_address_space_available_kb", 6), SqlTypeFacets("bigint", false)]
        public long virtual_address_space_available_kb
        {
            get;
            set;
        }

        [SqlColumn("page_fault_count", 7), SqlTypeFacets("bigint", false)]
        public long page_fault_count
        {
            get;
            set;
        }

        [SqlColumn("memory_utilization_percentage", 8), SqlTypeFacets("int", false)]
        public int memory_utilization_percentage
        {
            get;
            set;
        }

        [SqlColumn("available_commit_limit_kb", 9), SqlTypeFacets("bigint", false)]
        public long available_commit_limit_kb
        {
            get;
            set;
        }

        [SqlColumn("process_physical_memory_low", 10), SqlTypeFacets("bit", false)]
        public bool process_physical_memory_low
        {
            get;
            set;
        }

        [SqlColumn("process_virtual_memory_low", 11), SqlTypeFacets("bit", false)]
        public bool process_virtual_memory_low
        {
            get;
            set;
        }

        public dm_os_process_memory()
        {
        }

        public dm_os_process_memory(object[] items)
        {
            physical_memory_in_use_kb = (long)items[0];
            large_page_allocations_kb = (long)items[1];
            locked_page_allocations_kb = (long)items[2];
            total_virtual_address_space_kb = (long)items[3];
            virtual_address_space_reserved_kb = (long)items[4];
            virtual_address_space_committed_kb = (long)items[5];
            virtual_address_space_available_kb = (long)items[6];
            page_fault_count = (long)items[7];
            memory_utilization_percentage = (int)items[8];
            available_commit_limit_kb = (long)items[9];
            process_physical_memory_low = (bool)items[10];
            process_virtual_memory_low = (bool)items[11];
        }

        public dm_os_process_memory(long physical_memory_in_use_kb, long large_page_allocations_kb, long locked_page_allocations_kb, long total_virtual_address_space_kb, long virtual_address_space_reserved_kb, long virtual_address_space_committed_kb, long virtual_address_space_available_kb, long page_fault_count, int memory_utilization_percentage, long available_commit_limit_kb, bool process_physical_memory_low, bool process_virtual_memory_low)
        {
            this.physical_memory_in_use_kb = physical_memory_in_use_kb;
            this.large_page_allocations_kb = large_page_allocations_kb;
            this.locked_page_allocations_kb = locked_page_allocations_kb;
            this.total_virtual_address_space_kb = total_virtual_address_space_kb;
            this.virtual_address_space_reserved_kb = virtual_address_space_reserved_kb;
            this.virtual_address_space_committed_kb = virtual_address_space_committed_kb;
            this.virtual_address_space_available_kb = virtual_address_space_available_kb;
            this.page_fault_count = page_fault_count;
            this.memory_utilization_percentage = memory_utilization_percentage;
            this.available_commit_limit_kb = available_commit_limit_kb;
            this.process_physical_memory_low = process_physical_memory_low;
            this.process_virtual_memory_low = process_virtual_memory_low;
        }

        public override object[] GetItemArray()
        {
            return new object[] { physical_memory_in_use_kb, large_page_allocations_kb, locked_page_allocations_kb, total_virtual_address_space_kb, virtual_address_space_reserved_kb, virtual_address_space_committed_kb, virtual_address_space_available_kb, page_fault_count, memory_utilization_percentage, available_commit_limit_kb, process_physical_memory_low, process_virtual_memory_low };
        }

        public override void SetItemArray(object[] items)
        {
            physical_memory_in_use_kb = (long)items[0];
            large_page_allocations_kb = (long)items[1];
            locked_page_allocations_kb = (long)items[2];
            total_virtual_address_space_kb = (long)items[3];
            virtual_address_space_reserved_kb = (long)items[4];
            virtual_address_space_committed_kb = (long)items[5];
            virtual_address_space_available_kb = (long)items[6];
            page_fault_count = (long)items[7];
            memory_utilization_percentage = (int)items[8];
            available_commit_limit_kb = (long)items[9];
            process_physical_memory_low = (bool)items[10];
            process_virtual_memory_low = (bool)items[11];
        }
    }

    [SqlView("sys", "dm_xtp_gc_queue_stats")]
    public partial class dm_xtp_gc_queue_stats : SqlViewProxy
    {
        [SqlColumn("queue_id", 0), SqlTypeFacets("int", false)]
        public int queue_id
        {
            get;
            set;
        }

        [SqlColumn("total_enqueues", 1), SqlTypeFacets("bigint", false)]
        public long total_enqueues
        {
            get;
            set;
        }

        [SqlColumn("total_dequeues", 2), SqlTypeFacets("bigint", false)]
        public long total_dequeues
        {
            get;
            set;
        }

        [SqlColumn("current_queue_depth", 3), SqlTypeFacets("bigint", false)]
        public long current_queue_depth
        {
            get;
            set;
        }

        [SqlColumn("maximum_queue_depth", 4), SqlTypeFacets("bigint", false)]
        public long maximum_queue_depth
        {
            get;
            set;
        }

        [SqlColumn("last_service_ticks", 5), SqlTypeFacets("bigint", false)]
        public long last_service_ticks
        {
            get;
            set;
        }

        public dm_xtp_gc_queue_stats()
        {
        }

        public dm_xtp_gc_queue_stats(object[] items)
        {
            queue_id = (int)items[0];
            total_enqueues = (long)items[1];
            total_dequeues = (long)items[2];
            current_queue_depth = (long)items[3];
            maximum_queue_depth = (long)items[4];
            last_service_ticks = (long)items[5];
        }

        public dm_xtp_gc_queue_stats(int queue_id, long total_enqueues, long total_dequeues, long current_queue_depth, long maximum_queue_depth, long last_service_ticks)
        {
            this.queue_id = queue_id;
            this.total_enqueues = total_enqueues;
            this.total_dequeues = total_dequeues;
            this.current_queue_depth = current_queue_depth;
            this.maximum_queue_depth = maximum_queue_depth;
            this.last_service_ticks = last_service_ticks;
        }

        public override object[] GetItemArray()
        {
            return new object[] { queue_id, total_enqueues, total_dequeues, current_queue_depth, maximum_queue_depth, last_service_ticks };
        }

        public override void SetItemArray(object[] items)
        {
            queue_id = (int)items[0];
            total_enqueues = (long)items[1];
            total_dequeues = (long)items[2];
            current_queue_depth = (long)items[3];
            maximum_queue_depth = (long)items[4];
            last_service_ticks = (long)items[5];
        }
    }

    [SqlView("sys", "dm_os_cluster_nodes")]
    public partial class dm_os_cluster_nodes : SqlViewProxy
    {
        [SqlColumn("NodeName", 0), SqlTypeFacets("nvarchar", true, 256)]
        public string NodeName
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("status_description", 2), SqlTypeFacets("varchar", false, 7)]
        public string status_description
        {
            get;
            set;
        }

        [SqlColumn("is_current_owner", 3), SqlTypeFacets("bit", true)]
        public bool? is_current_owner
        {
            get;
            set;
        }

        public dm_os_cluster_nodes()
        {
        }

        public dm_os_cluster_nodes(object[] items)
        {
            NodeName = (string)items[0];
            status = (int?)items[1];
            status_description = (string)items[2];
            is_current_owner = (bool?)items[3];
        }

        public dm_os_cluster_nodes(string NodeName, int? status, string status_description, bool? is_current_owner)
        {
            this.NodeName = NodeName;
            this.status = status;
            this.status_description = status_description;
            this.is_current_owner = is_current_owner;
        }

        public override object[] GetItemArray()
        {
            return new object[] { NodeName, status, status_description, is_current_owner };
        }

        public override void SetItemArray(object[] items)
        {
            NodeName = (string)items[0];
            status = (int?)items[1];
            status_description = (string)items[2];
            is_current_owner = (bool?)items[3];
        }
    }

    [SqlView("sys", "dm_os_windows_info")]
    public partial class dm_os_windows_info : SqlViewProxy
    {
        [SqlColumn("windows_release", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string windows_release
        {
            get;
            set;
        }

        [SqlColumn("windows_service_pack_level", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string windows_service_pack_level
        {
            get;
            set;
        }

        [SqlColumn("windows_sku", 2), SqlTypeFacets("int", true)]
        public int? windows_sku
        {
            get;
            set;
        }

        [SqlColumn("os_language_version", 3), SqlTypeFacets("int", false)]
        public int os_language_version
        {
            get;
            set;
        }

        public dm_os_windows_info()
        {
        }

        public dm_os_windows_info(object[] items)
        {
            windows_release = (string)items[0];
            windows_service_pack_level = (string)items[1];
            windows_sku = (int?)items[2];
            os_language_version = (int)items[3];
        }

        public dm_os_windows_info(string windows_release, string windows_service_pack_level, int? windows_sku, int os_language_version)
        {
            this.windows_release = windows_release;
            this.windows_service_pack_level = windows_service_pack_level;
            this.windows_sku = windows_sku;
            this.os_language_version = os_language_version;
        }

        public override object[] GetItemArray()
        {
            return new object[] { windows_release, windows_service_pack_level, windows_sku, os_language_version };
        }

        public override void SetItemArray(object[] items)
        {
            windows_release = (string)items[0];
            windows_service_pack_level = (string)items[1];
            windows_sku = (int?)items[2];
            os_language_version = (int)items[3];
        }
    }

    [SqlView("sys", "dm_tran_version_store")]
    public partial class dm_tran_version_store : SqlViewProxy
    {
        [SqlColumn("transaction_sequence_num", 0), SqlTypeFacets("bigint", true)]
        public long? transaction_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("version_sequence_num", 1), SqlTypeFacets("bigint", true)]
        public long? version_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("database_id", 2), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("rowset_id", 3), SqlTypeFacets("bigint", true)]
        public long? rowset_id
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("tinyint", true)]
        public byte? status
        {
            get;
            set;
        }

        [SqlColumn("min_length_in_bytes", 5), SqlTypeFacets("smallint", true)]
        public short? min_length_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("record_length_first_part_in_bytes", 6), SqlTypeFacets("smallint", true)]
        public short? record_length_first_part_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("record_image_first_part", 7), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] record_image_first_part
        {
            get;
            set;
        }

        [SqlColumn("record_length_second_part_in_bytes", 8), SqlTypeFacets("smallint", true)]
        public short? record_length_second_part_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("record_image_second_part", 9), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] record_image_second_part
        {
            get;
            set;
        }

        public dm_tran_version_store()
        {
        }

        public dm_tran_version_store(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
            version_sequence_num = (long?)items[1];
            database_id = (short?)items[2];
            rowset_id = (long?)items[3];
            status = (byte?)items[4];
            min_length_in_bytes = (short?)items[5];
            record_length_first_part_in_bytes = (short?)items[6];
            record_image_first_part = (Byte[])items[7];
            record_length_second_part_in_bytes = (short?)items[8];
            record_image_second_part = (Byte[])items[9];
        }

        public dm_tran_version_store(long? transaction_sequence_num, long? version_sequence_num, short? database_id, long? rowset_id, byte? status, short? min_length_in_bytes, short? record_length_first_part_in_bytes, Byte[] record_image_first_part, short? record_length_second_part_in_bytes, Byte[] record_image_second_part)
        {
            this.transaction_sequence_num = transaction_sequence_num;
            this.version_sequence_num = version_sequence_num;
            this.database_id = database_id;
            this.rowset_id = rowset_id;
            this.status = status;
            this.min_length_in_bytes = min_length_in_bytes;
            this.record_length_first_part_in_bytes = record_length_first_part_in_bytes;
            this.record_image_first_part = record_image_first_part;
            this.record_length_second_part_in_bytes = record_length_second_part_in_bytes;
            this.record_image_second_part = record_image_second_part;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_sequence_num, version_sequence_num, database_id, rowset_id, status, min_length_in_bytes, record_length_first_part_in_bytes, record_image_first_part, record_length_second_part_in_bytes, record_image_second_part };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
            version_sequence_num = (long?)items[1];
            database_id = (short?)items[2];
            rowset_id = (long?)items[3];
            status = (byte?)items[4];
            min_length_in_bytes = (short?)items[5];
            record_length_first_part_in_bytes = (short?)items[6];
            record_image_first_part = (Byte[])items[7];
            record_length_second_part_in_bytes = (short?)items[8];
            record_image_second_part = (Byte[])items[9];
        }
    }

    [SqlView("sys", "dm_os_memory_nodes")]
    public partial class dm_os_memory_nodes : SqlViewProxy
    {
        [SqlColumn("memory_node_id", 0), SqlTypeFacets("smallint", false)]
        public short memory_node_id
        {
            get;
            set;
        }

        [SqlColumn("virtual_address_space_reserved_kb", 1), SqlTypeFacets("bigint", false)]
        public long virtual_address_space_reserved_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_address_space_committed_kb", 2), SqlTypeFacets("bigint", false)]
        public long virtual_address_space_committed_kb
        {
            get;
            set;
        }

        [SqlColumn("locked_page_allocations_kb", 3), SqlTypeFacets("bigint", false)]
        public long locked_page_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("pages_kb", 4), SqlTypeFacets("bigint", false)]
        public long pages_kb
        {
            get;
            set;
        }

        [SqlColumn("shared_memory_reserved_kb", 5), SqlTypeFacets("bigint", false)]
        public long shared_memory_reserved_kb
        {
            get;
            set;
        }

        [SqlColumn("shared_memory_committed_kb", 6), SqlTypeFacets("bigint", false)]
        public long shared_memory_committed_kb
        {
            get;
            set;
        }

        [SqlColumn("cpu_affinity_mask", 7), SqlTypeFacets("bigint", false)]
        public long cpu_affinity_mask
        {
            get;
            set;
        }

        [SqlColumn("online_scheduler_mask", 8), SqlTypeFacets("bigint", false)]
        public long online_scheduler_mask
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 9), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        [SqlColumn("foreign_committed_kb", 10), SqlTypeFacets("bigint", false)]
        public long foreign_committed_kb
        {
            get;
            set;
        }

        public dm_os_memory_nodes()
        {
        }

        public dm_os_memory_nodes(object[] items)
        {
            memory_node_id = (short)items[0];
            virtual_address_space_reserved_kb = (long)items[1];
            virtual_address_space_committed_kb = (long)items[2];
            locked_page_allocations_kb = (long)items[3];
            pages_kb = (long)items[4];
            shared_memory_reserved_kb = (long)items[5];
            shared_memory_committed_kb = (long)items[6];
            cpu_affinity_mask = (long)items[7];
            online_scheduler_mask = (long)items[8];
            processor_group = (short)items[9];
            foreign_committed_kb = (long)items[10];
        }

        public dm_os_memory_nodes(short memory_node_id, long virtual_address_space_reserved_kb, long virtual_address_space_committed_kb, long locked_page_allocations_kb, long pages_kb, long shared_memory_reserved_kb, long shared_memory_committed_kb, long cpu_affinity_mask, long online_scheduler_mask, short processor_group, long foreign_committed_kb)
        {
            this.memory_node_id = memory_node_id;
            this.virtual_address_space_reserved_kb = virtual_address_space_reserved_kb;
            this.virtual_address_space_committed_kb = virtual_address_space_committed_kb;
            this.locked_page_allocations_kb = locked_page_allocations_kb;
            this.pages_kb = pages_kb;
            this.shared_memory_reserved_kb = shared_memory_reserved_kb;
            this.shared_memory_committed_kb = shared_memory_committed_kb;
            this.cpu_affinity_mask = cpu_affinity_mask;
            this.online_scheduler_mask = online_scheduler_mask;
            this.processor_group = processor_group;
            this.foreign_committed_kb = foreign_committed_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_node_id, virtual_address_space_reserved_kb, virtual_address_space_committed_kb, locked_page_allocations_kb, pages_kb, shared_memory_reserved_kb, shared_memory_committed_kb, cpu_affinity_mask, online_scheduler_mask, processor_group, foreign_committed_kb };
        }

        public override void SetItemArray(object[] items)
        {
            memory_node_id = (short)items[0];
            virtual_address_space_reserved_kb = (long)items[1];
            virtual_address_space_committed_kb = (long)items[2];
            locked_page_allocations_kb = (long)items[3];
            pages_kb = (long)items[4];
            shared_memory_reserved_kb = (long)items[5];
            shared_memory_committed_kb = (long)items[6];
            cpu_affinity_mask = (long)items[7];
            online_scheduler_mask = (long)items[8];
            processor_group = (short)items[9];
            foreign_committed_kb = (long)items[10];
        }
    }

    [SqlView("sys", "spatial_reference_systems")]
    public partial class spatial_reference_systems : SqlViewProxy
    {
        [SqlColumn("spatial_reference_id", 0), SqlTypeFacets("int", true)]
        public int? spatial_reference_id
        {
            get;
            set;
        }

        [SqlColumn("authority_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string authority_name
        {
            get;
            set;
        }

        [SqlColumn("authorized_spatial_reference_id", 2), SqlTypeFacets("int", true)]
        public int? authorized_spatial_reference_id
        {
            get;
            set;
        }

        [SqlColumn("well_known_text", 3), SqlTypeFacets("nvarchar", true, 8000)]
        public string well_known_text
        {
            get;
            set;
        }

        [SqlColumn("unit_of_measure", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string unit_of_measure
        {
            get;
            set;
        }

        [SqlColumn("unit_conversion_factor", 5), SqlTypeFacets("float", true)]
        public double? unit_conversion_factor
        {
            get;
            set;
        }

        public spatial_reference_systems()
        {
        }

        public spatial_reference_systems(object[] items)
        {
            spatial_reference_id = (int?)items[0];
            authority_name = (string)items[1];
            authorized_spatial_reference_id = (int?)items[2];
            well_known_text = (string)items[3];
            unit_of_measure = (string)items[4];
            unit_conversion_factor = (double?)items[5];
        }

        public spatial_reference_systems(int? spatial_reference_id, string authority_name, int? authorized_spatial_reference_id, string well_known_text, string unit_of_measure, double? unit_conversion_factor)
        {
            this.spatial_reference_id = spatial_reference_id;
            this.authority_name = authority_name;
            this.authorized_spatial_reference_id = authorized_spatial_reference_id;
            this.well_known_text = well_known_text;
            this.unit_of_measure = unit_of_measure;
            this.unit_conversion_factor = unit_conversion_factor;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spatial_reference_id, authority_name, authorized_spatial_reference_id, well_known_text, unit_of_measure, unit_conversion_factor };
        }

        public override void SetItemArray(object[] items)
        {
            spatial_reference_id = (int?)items[0];
            authority_name = (string)items[1];
            authorized_spatial_reference_id = (int?)items[2];
            well_known_text = (string)items[3];
            unit_of_measure = (string)items[4];
            unit_conversion_factor = (double?)items[5];
        }
    }

    [SqlView("sys", "fulltext_semantic_languages")]
    public partial class fulltext_semantic_languages : SqlViewProxy
    {
        [SqlColumn("lcid", 0), SqlTypeFacets("int", false)]
        public int lcid
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        public fulltext_semantic_languages()
        {
        }

        public fulltext_semantic_languages(object[] items)
        {
            lcid = (int)items[0];
            name = (string)items[1];
        }

        public fulltext_semantic_languages(int lcid, string name)
        {
            this.lcid = lcid;
            this.name = name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { lcid, name };
        }

        public override void SetItemArray(object[] items)
        {
            lcid = (int)items[0];
            name = (string)items[1];
        }
    }

    [SqlView("sys", "dm_logpool_stats")]
    public partial class dm_logpool_stats : SqlViewProxy
    {
        [SqlColumn("hash_hit_total_search_length", 0), SqlTypeFacets("bigint", false)]
        public long hash_hit_total_search_length
        {
            get;
            set;
        }

        [SqlColumn("hash_miss_total_search_length", 1), SqlTypeFacets("bigint", false)]
        public long hash_miss_total_search_length
        {
            get;
            set;
        }

        [SqlColumn("hash_hits", 2), SqlTypeFacets("bigint", false)]
        public long hash_hits
        {
            get;
            set;
        }

        [SqlColumn("hash_misses", 3), SqlTypeFacets("bigint", false)]
        public long hash_misses
        {
            get;
            set;
        }

        [SqlColumn("hash_bucket_count", 4), SqlTypeFacets("int", false)]
        public int hash_bucket_count
        {
            get;
            set;
        }

        [SqlColumn("mem_status_stamp", 5), SqlTypeFacets("bigint", false)]
        public long mem_status_stamp
        {
            get;
            set;
        }

        [SqlColumn("mem_status", 6), SqlTypeFacets("int", false)]
        public int mem_status
        {
            get;
            set;
        }

        [SqlColumn("logpoolmgr_count", 7), SqlTypeFacets("int", false)]
        public int logpoolmgr_count
        {
            get;
            set;
        }

        [SqlColumn("total_pages", 8), SqlTypeFacets("bigint", false)]
        public long total_pages
        {
            get;
            set;
        }

        [SqlColumn("private_pages", 9), SqlTypeFacets("bigint", false)]
        public long private_pages
        {
            get;
            set;
        }

        public dm_logpool_stats()
        {
        }

        public dm_logpool_stats(object[] items)
        {
            hash_hit_total_search_length = (long)items[0];
            hash_miss_total_search_length = (long)items[1];
            hash_hits = (long)items[2];
            hash_misses = (long)items[3];
            hash_bucket_count = (int)items[4];
            mem_status_stamp = (long)items[5];
            mem_status = (int)items[6];
            logpoolmgr_count = (int)items[7];
            total_pages = (long)items[8];
            private_pages = (long)items[9];
        }

        public dm_logpool_stats(long hash_hit_total_search_length, long hash_miss_total_search_length, long hash_hits, long hash_misses, int hash_bucket_count, long mem_status_stamp, int mem_status, int logpoolmgr_count, long total_pages, long private_pages)
        {
            this.hash_hit_total_search_length = hash_hit_total_search_length;
            this.hash_miss_total_search_length = hash_miss_total_search_length;
            this.hash_hits = hash_hits;
            this.hash_misses = hash_misses;
            this.hash_bucket_count = hash_bucket_count;
            this.mem_status_stamp = mem_status_stamp;
            this.mem_status = mem_status;
            this.logpoolmgr_count = logpoolmgr_count;
            this.total_pages = total_pages;
            this.private_pages = private_pages;
        }

        public override object[] GetItemArray()
        {
            return new object[] { hash_hit_total_search_length, hash_miss_total_search_length, hash_hits, hash_misses, hash_bucket_count, mem_status_stamp, mem_status, logpoolmgr_count, total_pages, private_pages };
        }

        public override void SetItemArray(object[] items)
        {
            hash_hit_total_search_length = (long)items[0];
            hash_miss_total_search_length = (long)items[1];
            hash_hits = (long)items[2];
            hash_misses = (long)items[3];
            hash_bucket_count = (int)items[4];
            mem_status_stamp = (long)items[5];
            mem_status = (int)items[6];
            logpoolmgr_count = (int)items[7];
            total_pages = (long)items[8];
            private_pages = (long)items[9];
        }
    }

    [SqlView("sys", "dm_xe_packages")]
    public partial class dm_xe_packages : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("guid", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid guid
        {
            get;
            set;
        }

        [SqlColumn("description", 2), SqlTypeFacets("nvarchar", false, 6144)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("capabilities", 3), SqlTypeFacets("int", true)]
        public int? capabilities
        {
            get;
            set;
        }

        [SqlColumn("capabilities_desc", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string capabilities_desc
        {
            get;
            set;
        }

        [SqlColumn("module_guid", 5), SqlTypeFacets("nvarchar", false, 120)]
        public string module_guid
        {
            get;
            set;
        }

        [SqlColumn("module_address", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] module_address
        {
            get;
            set;
        }

        public dm_xe_packages()
        {
        }

        public dm_xe_packages(object[] items)
        {
            name = (string)items[0];
            guid = (Guid)items[1];
            description = (string)items[2];
            capabilities = (int?)items[3];
            capabilities_desc = (string)items[4];
            module_guid = (string)items[5];
            module_address = (Byte[])items[6];
        }

        public dm_xe_packages(string name, Guid guid, string description, int? capabilities, string capabilities_desc, string module_guid, Byte[] module_address)
        {
            this.name = name;
            this.guid = guid;
            this.description = description;
            this.capabilities = capabilities;
            this.capabilities_desc = capabilities_desc;
            this.module_guid = module_guid;
            this.module_address = module_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, guid, description, capabilities, capabilities_desc, module_guid, module_address };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            guid = (Guid)items[1];
            description = (string)items[2];
            capabilities = (int?)items[3];
            capabilities_desc = (string)items[4];
            module_guid = (string)items[5];
            module_address = (Byte[])items[6];
        }
    }

    [SqlView("sys", "login_token")]
    public partial class login_token : SqlViewProxy
    {
        [SqlColumn("principal_id", 0), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 1), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("usage", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string usage
        {
            get;
            set;
        }

        public login_token()
        {
        }

        public login_token(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }

        public login_token(int? principal_id, Byte[] sid, string name, string type, string usage)
        {
            this.principal_id = principal_id;
            this.sid = sid;
            this.name = name;
            this.type = type;
            this.usage = usage;
        }

        public override object[] GetItemArray()
        {
            return new object[] { principal_id, sid, name, type, usage };
        }

        public override void SetItemArray(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }
    }

    [SqlView("sys", "dm_db_fts_index_physical_stats")]
    public partial class dm_db_fts_index_physical_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("fulltext_index_page_count", 1), SqlTypeFacets("bigint", true)]
        public long? fulltext_index_page_count
        {
            get;
            set;
        }

        [SqlColumn("keyphrase_index_page_count", 2), SqlTypeFacets("bigint", true)]
        public long? keyphrase_index_page_count
        {
            get;
            set;
        }

        [SqlColumn("similarity_index_page_count", 3), SqlTypeFacets("bigint", true)]
        public long? similarity_index_page_count
        {
            get;
            set;
        }

        public dm_db_fts_index_physical_stats()
        {
        }

        public dm_db_fts_index_physical_stats(object[] items)
        {
            object_id = (int)items[0];
            fulltext_index_page_count = (long?)items[1];
            keyphrase_index_page_count = (long?)items[2];
            similarity_index_page_count = (long?)items[3];
        }

        public dm_db_fts_index_physical_stats(int object_id, long? fulltext_index_page_count, long? keyphrase_index_page_count, long? similarity_index_page_count)
        {
            this.object_id = object_id;
            this.fulltext_index_page_count = fulltext_index_page_count;
            this.keyphrase_index_page_count = keyphrase_index_page_count;
            this.similarity_index_page_count = similarity_index_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, fulltext_index_page_count, keyphrase_index_page_count, similarity_index_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            fulltext_index_page_count = (long?)items[1];
            keyphrase_index_page_count = (long?)items[2];
            similarity_index_page_count = (long?)items[3];
        }
    }

    [SqlView("sys", "fulltext_document_types")]
    public partial class fulltext_document_types : SqlViewProxy
    {
        [SqlColumn("document_type", 0), SqlTypeFacets("nvarchar", false, 256)]
        public string document_type
        {
            get;
            set;
        }

        [SqlColumn("class_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid class_id
        {
            get;
            set;
        }

        [SqlColumn("path", 2), SqlTypeFacets("nvarchar", true, 520)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("version", 3), SqlTypeFacets("nvarchar", false, 256)]
        public string version
        {
            get;
            set;
        }

        [SqlColumn("manufacturer", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string manufacturer
        {
            get;
            set;
        }

        public fulltext_document_types()
        {
        }

        public fulltext_document_types(object[] items)
        {
            document_type = (string)items[0];
            class_id = (Guid)items[1];
            path = (string)items[2];
            version = (string)items[3];
            manufacturer = (string)items[4];
        }

        public fulltext_document_types(string document_type, Guid class_id, string path, string version, string manufacturer)
        {
            this.document_type = document_type;
            this.class_id = class_id;
            this.path = path;
            this.version = version;
            this.manufacturer = manufacturer;
        }

        public override object[] GetItemArray()
        {
            return new object[] { document_type, class_id, path, version, manufacturer };
        }

        public override void SetItemArray(object[] items)
        {
            document_type = (string)items[0];
            class_id = (Guid)items[1];
            path = (string)items[2];
            version = (string)items[3];
            manufacturer = (string)items[4];
        }
    }

    [SqlView("sys", "dm_os_tasks")]
    public partial class dm_os_tasks : SqlViewProxy
    {
        [SqlColumn("task_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("task_state", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string task_state
        {
            get;
            set;
        }

        [SqlColumn("context_switches_count", 2), SqlTypeFacets("int", true)]
        public int? context_switches_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_count", 3), SqlTypeFacets("int", true)]
        public int? pending_io_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_byte_count", 4), SqlTypeFacets("bigint", true)]
        public long? pending_io_byte_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_byte_average", 5), SqlTypeFacets("int", true)]
        public int? pending_io_byte_average
        {
            get;
            set;
        }

        [SqlColumn("scheduler_id", 6), SqlTypeFacets("int", false)]
        public int scheduler_id
        {
            get;
            set;
        }

        [SqlColumn("session_id", 7), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("exec_context_id", 8), SqlTypeFacets("int", true)]
        public int? exec_context_id
        {
            get;
            set;
        }

        [SqlColumn("request_id", 9), SqlTypeFacets("int", true)]
        public int? request_id
        {
            get;
            set;
        }

        [SqlColumn("worker_address", 10), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] worker_address
        {
            get;
            set;
        }

        [SqlColumn("host_address", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] host_address
        {
            get;
            set;
        }

        [SqlColumn("parent_task_address", 12), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] parent_task_address
        {
            get;
            set;
        }

        public dm_os_tasks()
        {
        }

        public dm_os_tasks(object[] items)
        {
            task_address = (Byte[])items[0];
            task_state = (string)items[1];
            context_switches_count = (int?)items[2];
            pending_io_count = (int?)items[3];
            pending_io_byte_count = (long?)items[4];
            pending_io_byte_average = (int?)items[5];
            scheduler_id = (int)items[6];
            session_id = (short?)items[7];
            exec_context_id = (int?)items[8];
            request_id = (int?)items[9];
            worker_address = (Byte[])items[10];
            host_address = (Byte[])items[11];
            parent_task_address = (Byte[])items[12];
        }

        public dm_os_tasks(Byte[] task_address, string task_state, int? context_switches_count, int? pending_io_count, long? pending_io_byte_count, int? pending_io_byte_average, int scheduler_id, short? session_id, int? exec_context_id, int? request_id, Byte[] worker_address, Byte[] host_address, Byte[] parent_task_address)
        {
            this.task_address = task_address;
            this.task_state = task_state;
            this.context_switches_count = context_switches_count;
            this.pending_io_count = pending_io_count;
            this.pending_io_byte_count = pending_io_byte_count;
            this.pending_io_byte_average = pending_io_byte_average;
            this.scheduler_id = scheduler_id;
            this.session_id = session_id;
            this.exec_context_id = exec_context_id;
            this.request_id = request_id;
            this.worker_address = worker_address;
            this.host_address = host_address;
            this.parent_task_address = parent_task_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { task_address, task_state, context_switches_count, pending_io_count, pending_io_byte_count, pending_io_byte_average, scheduler_id, session_id, exec_context_id, request_id, worker_address, host_address, parent_task_address };
        }

        public override void SetItemArray(object[] items)
        {
            task_address = (Byte[])items[0];
            task_state = (string)items[1];
            context_switches_count = (int?)items[2];
            pending_io_count = (int?)items[3];
            pending_io_byte_count = (long?)items[4];
            pending_io_byte_average = (int?)items[5];
            scheduler_id = (int)items[6];
            session_id = (short?)items[7];
            exec_context_id = (int?)items[8];
            request_id = (int?)items[9];
            worker_address = (Byte[])items[10];
            host_address = (Byte[])items[11];
            parent_task_address = (Byte[])items[12];
        }
    }

    [SqlView("sys", "availability_group_listener_ip_addresses")]
    public partial class availability_group_listener_ip_addresses : SqlViewProxy
    {
        [SqlColumn("listener_id", 0), SqlTypeFacets("nvarchar", true, 72)]
        public string listener_id
        {
            get;
            set;
        }

        [SqlColumn("ip_address", 1), SqlTypeFacets("nvarchar", true, 96)]
        public string ip_address
        {
            get;
            set;
        }

        [SqlColumn("ip_subnet_mask", 2), SqlTypeFacets("nvarchar", true, 30)]
        public string ip_subnet_mask
        {
            get;
            set;
        }

        [SqlColumn("is_dhcp", 3), SqlTypeFacets("bit", false)]
        public bool is_dhcp
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_ip", 4), SqlTypeFacets("nvarchar", true, 96)]
        public string network_subnet_ip
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_prefix_length", 5), SqlTypeFacets("int", true)]
        public int? network_subnet_prefix_length
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_ipv4_mask", 6), SqlTypeFacets("nvarchar", true, 96)]
        public string network_subnet_ipv4_mask
        {
            get;
            set;
        }

        [SqlColumn("state", 7), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        public availability_group_listener_ip_addresses()
        {
        }

        public availability_group_listener_ip_addresses(object[] items)
        {
            listener_id = (string)items[0];
            ip_address = (string)items[1];
            ip_subnet_mask = (string)items[2];
            is_dhcp = (bool)items[3];
            network_subnet_ip = (string)items[4];
            network_subnet_prefix_length = (int?)items[5];
            network_subnet_ipv4_mask = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
        }

        public availability_group_listener_ip_addresses(string listener_id, string ip_address, string ip_subnet_mask, bool is_dhcp, string network_subnet_ip, int? network_subnet_prefix_length, string network_subnet_ipv4_mask, byte? state, string state_desc)
        {
            this.listener_id = listener_id;
            this.ip_address = ip_address;
            this.ip_subnet_mask = ip_subnet_mask;
            this.is_dhcp = is_dhcp;
            this.network_subnet_ip = network_subnet_ip;
            this.network_subnet_prefix_length = network_subnet_prefix_length;
            this.network_subnet_ipv4_mask = network_subnet_ipv4_mask;
            this.state = state;
            this.state_desc = state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { listener_id, ip_address, ip_subnet_mask, is_dhcp, network_subnet_ip, network_subnet_prefix_length, network_subnet_ipv4_mask, state, state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            listener_id = (string)items[0];
            ip_address = (string)items[1];
            ip_subnet_mask = (string)items[2];
            is_dhcp = (bool)items[3];
            network_subnet_ip = (string)items[4];
            network_subnet_prefix_length = (int?)items[5];
            network_subnet_ipv4_mask = (string)items[6];
            state = (byte?)items[7];
            state_desc = (string)items[8];
        }
    }

    [SqlView("sys", "dm_io_cluster_shared_drives")]
    public partial class dm_io_cluster_shared_drives : SqlViewProxy
    {
        [SqlColumn("DriveName", 0), SqlTypeFacets("nchar", true, 2)]
        public string DriveName
        {
            get;
            set;
        }

        public dm_io_cluster_shared_drives()
        {
        }

        public dm_io_cluster_shared_drives(object[] items)
        {
            DriveName = (string)items[0];
        }

        public dm_io_cluster_shared_drives(string DriveName)
        {
            this.DriveName = DriveName;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DriveName };
        }

        public override void SetItemArray(object[] items)
        {
            DriveName = (string)items[0];
        }
    }

    [SqlView("sys", "dm_server_audit_status")]
    public partial class dm_server_audit_status : SqlViewProxy
    {
        [SqlColumn("audit_id", 0), SqlTypeFacets("int", false)]
        public int audit_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("smallint", false)]
        public short status
        {
            get;
            set;
        }

        [SqlColumn("status_desc", 3), SqlTypeFacets("nvarchar", false, 512)]
        public string status_desc
        {
            get;
            set;
        }

        [SqlColumn("status_time", 4), SqlTypeFacets("datetime2", false, 7)]
        public DateTime status_time
        {
            get;
            set;
        }

        [SqlColumn("event_session_address", 5), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("audit_file_path", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string audit_file_path
        {
            get;
            set;
        }

        [SqlColumn("audit_file_size", 7), SqlTypeFacets("bigint", true)]
        public long? audit_file_size
        {
            get;
            set;
        }

        public dm_server_audit_status()
        {
        }

        public dm_server_audit_status(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            status = (short)items[2];
            status_desc = (string)items[3];
            status_time = (DateTime)items[4];
            event_session_address = (Byte[])items[5];
            audit_file_path = (string)items[6];
            audit_file_size = (long?)items[7];
        }

        public dm_server_audit_status(int audit_id, string name, short status, string status_desc, DateTime status_time, Byte[] event_session_address, string audit_file_path, long? audit_file_size)
        {
            this.audit_id = audit_id;
            this.name = name;
            this.status = status;
            this.status_desc = status_desc;
            this.status_time = status_time;
            this.event_session_address = event_session_address;
            this.audit_file_path = audit_file_path;
            this.audit_file_size = audit_file_size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { audit_id, name, status, status_desc, status_time, event_session_address, audit_file_path, audit_file_size };
        }

        public override void SetItemArray(object[] items)
        {
            audit_id = (int)items[0];
            name = (string)items[1];
            status = (short)items[2];
            status_desc = (string)items[3];
            status_time = (DateTime)items[4];
            event_session_address = (Byte[])items[5];
            audit_file_path = (string)items[6];
            audit_file_size = (long?)items[7];
        }
    }

    [SqlView("sys", "dm_db_script_level")]
    public partial class dm_db_script_level : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("script_id", 1), SqlTypeFacets("int", false)]
        public int script_id
        {
            get;
            set;
        }

        [SqlColumn("script_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string script_name
        {
            get;
            set;
        }

        [SqlColumn("version", 3), SqlTypeFacets("int", false)]
        public int version
        {
            get;
            set;
        }

        [SqlColumn("script_level", 4), SqlTypeFacets("int", false)]
        public int script_level
        {
            get;
            set;
        }

        [SqlColumn("downgrade_start_level", 5), SqlTypeFacets("int", false)]
        public int downgrade_start_level
        {
            get;
            set;
        }

        [SqlColumn("downgrade_target_level", 6), SqlTypeFacets("int", false)]
        public int downgrade_target_level
        {
            get;
            set;
        }

        [SqlColumn("upgrade_start_level", 7), SqlTypeFacets("int", true)]
        public int? upgrade_start_level
        {
            get;
            set;
        }

        [SqlColumn("upgrade_target_level", 8), SqlTypeFacets("int", true)]
        public int? upgrade_target_level
        {
            get;
            set;
        }

        public dm_db_script_level()
        {
        }

        public dm_db_script_level(object[] items)
        {
            database_id = (int)items[0];
            script_id = (int)items[1];
            script_name = (string)items[2];
            version = (int)items[3];
            script_level = (int)items[4];
            downgrade_start_level = (int)items[5];
            downgrade_target_level = (int)items[6];
            upgrade_start_level = (int?)items[7];
            upgrade_target_level = (int?)items[8];
        }

        public dm_db_script_level(int database_id, int script_id, string script_name, int version, int script_level, int downgrade_start_level, int downgrade_target_level, int? upgrade_start_level, int? upgrade_target_level)
        {
            this.database_id = database_id;
            this.script_id = script_id;
            this.script_name = script_name;
            this.version = version;
            this.script_level = script_level;
            this.downgrade_start_level = downgrade_start_level;
            this.downgrade_target_level = downgrade_target_level;
            this.upgrade_start_level = upgrade_start_level;
            this.upgrade_target_level = upgrade_target_level;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, script_id, script_name, version, script_level, downgrade_start_level, downgrade_target_level, upgrade_start_level, upgrade_target_level };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            script_id = (int)items[1];
            script_name = (string)items[2];
            version = (int)items[3];
            script_level = (int)items[4];
            downgrade_start_level = (int)items[5];
            downgrade_target_level = (int)items[6];
            upgrade_start_level = (int?)items[7];
            upgrade_target_level = (int?)items[8];
        }
    }

    [SqlView("sys", "dm_xe_session_event_actions")]
    public partial class dm_xe_session_event_actions : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("action_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string action_name
        {
            get;
            set;
        }

        [SqlColumn("action_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid action_package_guid
        {
            get;
            set;
        }

        [SqlColumn("event_name", 3), SqlTypeFacets("nvarchar", false, 512)]
        public string event_name
        {
            get;
            set;
        }

        [SqlColumn("event_package_guid", 4), SqlTypeFacets("uniqueidentifier", false)]
        public Guid event_package_guid
        {
            get;
            set;
        }

        public dm_xe_session_event_actions()
        {
        }

        public dm_xe_session_event_actions(object[] items)
        {
            event_session_address = (Byte[])items[0];
            action_name = (string)items[1];
            action_package_guid = (Guid)items[2];
            event_name = (string)items[3];
            event_package_guid = (Guid)items[4];
        }

        public dm_xe_session_event_actions(Byte[] event_session_address, string action_name, Guid action_package_guid, string event_name, Guid event_package_guid)
        {
            this.event_session_address = event_session_address;
            this.action_name = action_name;
            this.action_package_guid = action_package_guid;
            this.event_name = event_name;
            this.event_package_guid = event_package_guid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, action_name, action_package_guid, event_name, event_package_guid };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            action_name = (string)items[1];
            action_package_guid = (Guid)items[2];
            event_name = (string)items[3];
            event_package_guid = (Guid)items[4];
        }
    }

    [SqlView("sys", "dm_os_workers")]
    public partial class dm_os_workers : SqlViewProxy
    {
        [SqlColumn("worker_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] worker_address
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("is_preemptive", 2), SqlTypeFacets("bit", true)]
        public bool? is_preemptive
        {
            get;
            set;
        }

        [SqlColumn("is_fiber", 3), SqlTypeFacets("bit", true)]
        public bool? is_fiber
        {
            get;
            set;
        }

        [SqlColumn("is_sick", 4), SqlTypeFacets("bit", true)]
        public bool? is_sick
        {
            get;
            set;
        }

        [SqlColumn("is_in_cc_exception", 5), SqlTypeFacets("bit", true)]
        public bool? is_in_cc_exception
        {
            get;
            set;
        }

        [SqlColumn("is_fatal_exception", 6), SqlTypeFacets("bit", true)]
        public bool? is_fatal_exception
        {
            get;
            set;
        }

        [SqlColumn("is_inside_catch", 7), SqlTypeFacets("bit", true)]
        public bool? is_inside_catch
        {
            get;
            set;
        }

        [SqlColumn("is_in_polling_io_completion_routine", 8), SqlTypeFacets("bit", true)]
        public bool? is_in_polling_io_completion_routine
        {
            get;
            set;
        }

        [SqlColumn("context_switch_count", 9), SqlTypeFacets("int", false)]
        public int context_switch_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_count", 10), SqlTypeFacets("int", false)]
        public int pending_io_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_byte_count", 11), SqlTypeFacets("bigint", false)]
        public long pending_io_byte_count
        {
            get;
            set;
        }

        [SqlColumn("pending_io_byte_average", 12), SqlTypeFacets("int", false)]
        public int pending_io_byte_average
        {
            get;
            set;
        }

        [SqlColumn("wait_started_ms_ticks", 13), SqlTypeFacets("bigint", false)]
        public long wait_started_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("wait_resumed_ms_ticks", 14), SqlTypeFacets("bigint", false)]
        public long wait_resumed_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("task_bound_ms_ticks", 15), SqlTypeFacets("bigint", false)]
        public long task_bound_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("worker_created_ms_ticks", 16), SqlTypeFacets("bigint", false)]
        public long worker_created_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("exception_num", 17), SqlTypeFacets("int", false)]
        public int exception_num
        {
            get;
            set;
        }

        [SqlColumn("exception_severity", 18), SqlTypeFacets("int", false)]
        public int exception_severity
        {
            get;
            set;
        }

        [SqlColumn("exception_address", 19), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] exception_address
        {
            get;
            set;
        }

        [SqlColumn("affinity", 20), SqlTypeFacets("bigint", false)]
        public long affinity
        {
            get;
            set;
        }

        [SqlColumn("state", 21), SqlTypeFacets("nvarchar", true, 120)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("start_quantum", 22), SqlTypeFacets("bigint", false)]
        public long start_quantum
        {
            get;
            set;
        }

        [SqlColumn("end_quantum", 23), SqlTypeFacets("bigint", false)]
        public long end_quantum
        {
            get;
            set;
        }

        [SqlColumn("last_wait_type", 24), SqlTypeFacets("nvarchar", true, 120)]
        public string last_wait_type
        {
            get;
            set;
        }

        [SqlColumn("return_code", 25), SqlTypeFacets("int", false)]
        public int return_code
        {
            get;
            set;
        }

        [SqlColumn("quantum_used", 26), SqlTypeFacets("bigint", false)]
        public long quantum_used
        {
            get;
            set;
        }

        [SqlColumn("max_quantum", 27), SqlTypeFacets("bigint", false)]
        public long max_quantum
        {
            get;
            set;
        }

        [SqlColumn("boost_count", 28), SqlTypeFacets("int", false)]
        public int boost_count
        {
            get;
            set;
        }

        [SqlColumn("tasks_processed_count", 29), SqlTypeFacets("int", false)]
        public int tasks_processed_count
        {
            get;
            set;
        }

        [SqlColumn("fiber_address", 30), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] fiber_address
        {
            get;
            set;
        }

        [SqlColumn("task_address", 31), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 32), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("thread_address", 33), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] thread_address
        {
            get;
            set;
        }

        [SqlColumn("signal_worker_address", 34), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] signal_worker_address
        {
            get;
            set;
        }

        [SqlColumn("scheduler_address", 35), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] scheduler_address
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 36), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        public dm_os_workers()
        {
        }

        public dm_os_workers(object[] items)
        {
            worker_address = (Byte[])items[0];
            status = (int)items[1];
            is_preemptive = (bool?)items[2];
            is_fiber = (bool?)items[3];
            is_sick = (bool?)items[4];
            is_in_cc_exception = (bool?)items[5];
            is_fatal_exception = (bool?)items[6];
            is_inside_catch = (bool?)items[7];
            is_in_polling_io_completion_routine = (bool?)items[8];
            context_switch_count = (int)items[9];
            pending_io_count = (int)items[10];
            pending_io_byte_count = (long)items[11];
            pending_io_byte_average = (int)items[12];
            wait_started_ms_ticks = (long)items[13];
            wait_resumed_ms_ticks = (long)items[14];
            task_bound_ms_ticks = (long)items[15];
            worker_created_ms_ticks = (long)items[16];
            exception_num = (int)items[17];
            exception_severity = (int)items[18];
            exception_address = (Byte[])items[19];
            affinity = (long)items[20];
            state = (string)items[21];
            start_quantum = (long)items[22];
            end_quantum = (long)items[23];
            last_wait_type = (string)items[24];
            return_code = (int)items[25];
            quantum_used = (long)items[26];
            max_quantum = (long)items[27];
            boost_count = (int)items[28];
            tasks_processed_count = (int)items[29];
            fiber_address = (Byte[])items[30];
            task_address = (Byte[])items[31];
            memory_object_address = (Byte[])items[32];
            thread_address = (Byte[])items[33];
            signal_worker_address = (Byte[])items[34];
            scheduler_address = (Byte[])items[35];
            processor_group = (short)items[36];
        }

        public dm_os_workers(Byte[] worker_address, int status, bool? is_preemptive, bool? is_fiber, bool? is_sick, bool? is_in_cc_exception, bool? is_fatal_exception, bool? is_inside_catch, bool? is_in_polling_io_completion_routine, int context_switch_count, int pending_io_count, long pending_io_byte_count, int pending_io_byte_average, long wait_started_ms_ticks, long wait_resumed_ms_ticks, long task_bound_ms_ticks, long worker_created_ms_ticks, int exception_num, int exception_severity, Byte[] exception_address, long affinity, string state, long start_quantum, long end_quantum, string last_wait_type, int return_code, long quantum_used, long max_quantum, int boost_count, int tasks_processed_count, Byte[] fiber_address, Byte[] task_address, Byte[] memory_object_address, Byte[] thread_address, Byte[] signal_worker_address, Byte[] scheduler_address, short processor_group)
        {
            this.worker_address = worker_address;
            this.status = status;
            this.is_preemptive = is_preemptive;
            this.is_fiber = is_fiber;
            this.is_sick = is_sick;
            this.is_in_cc_exception = is_in_cc_exception;
            this.is_fatal_exception = is_fatal_exception;
            this.is_inside_catch = is_inside_catch;
            this.is_in_polling_io_completion_routine = is_in_polling_io_completion_routine;
            this.context_switch_count = context_switch_count;
            this.pending_io_count = pending_io_count;
            this.pending_io_byte_count = pending_io_byte_count;
            this.pending_io_byte_average = pending_io_byte_average;
            this.wait_started_ms_ticks = wait_started_ms_ticks;
            this.wait_resumed_ms_ticks = wait_resumed_ms_ticks;
            this.task_bound_ms_ticks = task_bound_ms_ticks;
            this.worker_created_ms_ticks = worker_created_ms_ticks;
            this.exception_num = exception_num;
            this.exception_severity = exception_severity;
            this.exception_address = exception_address;
            this.affinity = affinity;
            this.state = state;
            this.start_quantum = start_quantum;
            this.end_quantum = end_quantum;
            this.last_wait_type = last_wait_type;
            this.return_code = return_code;
            this.quantum_used = quantum_used;
            this.max_quantum = max_quantum;
            this.boost_count = boost_count;
            this.tasks_processed_count = tasks_processed_count;
            this.fiber_address = fiber_address;
            this.task_address = task_address;
            this.memory_object_address = memory_object_address;
            this.thread_address = thread_address;
            this.signal_worker_address = signal_worker_address;
            this.scheduler_address = scheduler_address;
            this.processor_group = processor_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { worker_address, status, is_preemptive, is_fiber, is_sick, is_in_cc_exception, is_fatal_exception, is_inside_catch, is_in_polling_io_completion_routine, context_switch_count, pending_io_count, pending_io_byte_count, pending_io_byte_average, wait_started_ms_ticks, wait_resumed_ms_ticks, task_bound_ms_ticks, worker_created_ms_ticks, exception_num, exception_severity, exception_address, affinity, state, start_quantum, end_quantum, last_wait_type, return_code, quantum_used, max_quantum, boost_count, tasks_processed_count, fiber_address, task_address, memory_object_address, thread_address, signal_worker_address, scheduler_address, processor_group };
        }

        public override void SetItemArray(object[] items)
        {
            worker_address = (Byte[])items[0];
            status = (int)items[1];
            is_preemptive = (bool?)items[2];
            is_fiber = (bool?)items[3];
            is_sick = (bool?)items[4];
            is_in_cc_exception = (bool?)items[5];
            is_fatal_exception = (bool?)items[6];
            is_inside_catch = (bool?)items[7];
            is_in_polling_io_completion_routine = (bool?)items[8];
            context_switch_count = (int)items[9];
            pending_io_count = (int)items[10];
            pending_io_byte_count = (long)items[11];
            pending_io_byte_average = (int)items[12];
            wait_started_ms_ticks = (long)items[13];
            wait_resumed_ms_ticks = (long)items[14];
            task_bound_ms_ticks = (long)items[15];
            worker_created_ms_ticks = (long)items[16];
            exception_num = (int)items[17];
            exception_severity = (int)items[18];
            exception_address = (Byte[])items[19];
            affinity = (long)items[20];
            state = (string)items[21];
            start_quantum = (long)items[22];
            end_quantum = (long)items[23];
            last_wait_type = (string)items[24];
            return_code = (int)items[25];
            quantum_used = (long)items[26];
            max_quantum = (long)items[27];
            boost_count = (int)items[28];
            tasks_processed_count = (int)items[29];
            fiber_address = (Byte[])items[30];
            task_address = (Byte[])items[31];
            memory_object_address = (Byte[])items[32];
            thread_address = (Byte[])items[33];
            signal_worker_address = (Byte[])items[34];
            scheduler_address = (Byte[])items[35];
            processor_group = (short)items[36];
        }
    }

    [SqlView("sys", "dm_os_performance_counters")]
    public partial class dm_os_performance_counters : SqlViewProxy
    {
        [SqlColumn("object_name", 0), SqlTypeFacets("nchar", false, 256)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("counter_name", 1), SqlTypeFacets("nchar", false, 256)]
        public string counter_name
        {
            get;
            set;
        }

        [SqlColumn("instance_name", 2), SqlTypeFacets("nchar", true, 256)]
        public string instance_name
        {
            get;
            set;
        }

        [SqlColumn("cntr_value", 3), SqlTypeFacets("bigint", false)]
        public long cntr_value
        {
            get;
            set;
        }

        [SqlColumn("cntr_type", 4), SqlTypeFacets("int", false)]
        public int cntr_type
        {
            get;
            set;
        }

        public dm_os_performance_counters()
        {
        }

        public dm_os_performance_counters(object[] items)
        {
            object_name = (string)items[0];
            counter_name = (string)items[1];
            instance_name = (string)items[2];
            cntr_value = (long)items[3];
            cntr_type = (int)items[4];
        }

        public dm_os_performance_counters(string object_name, string counter_name, string instance_name, long cntr_value, int cntr_type)
        {
            this.object_name = object_name;
            this.counter_name = counter_name;
            this.instance_name = instance_name;
            this.cntr_value = cntr_value;
            this.cntr_type = cntr_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_name, counter_name, instance_name, cntr_value, cntr_type };
        }

        public override void SetItemArray(object[] items)
        {
            object_name = (string)items[0];
            counter_name = (string)items[1];
            instance_name = (string)items[2];
            cntr_value = (long)items[3];
            cntr_type = (int)items[4];
        }
    }

    [SqlView("sys", "trace_subclass_values")]
    public partial class trace_subclass_values : SqlViewProxy
    {
        [SqlColumn("subclass_value", 3), SqlTypeFacets("smallint", true)]
        public short? subclass_value
        {
            get;
            set;
        }

        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("trace_column_id", 1), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        [SqlColumn("subclass_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string subclass_name
        {
            get;
            set;
        }

        public trace_subclass_values()
        {
        }

        public trace_subclass_values(object[] items)
        {
            subclass_value = (short?)items[0];
            trace_event_id = (short)items[1];
            trace_column_id = (short)items[2];
            subclass_name = (string)items[3];
        }

        public trace_subclass_values(short? subclass_value, short trace_event_id, short trace_column_id, string subclass_name)
        {
            this.subclass_value = subclass_value;
            this.trace_event_id = trace_event_id;
            this.trace_column_id = trace_column_id;
            this.subclass_name = subclass_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { subclass_value, trace_event_id, trace_column_id, subclass_name };
        }

        public override void SetItemArray(object[] items)
        {
            subclass_value = (short?)items[0];
            trace_event_id = (short)items[1];
            trace_column_id = (short)items[2];
            subclass_name = (string)items[3];
        }
    }

    [SqlView("sys", "dm_fts_population_ranges")]
    public partial class dm_fts_population_ranges : SqlViewProxy
    {
        [SqlColumn("memory_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("parent_memory_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] parent_memory_address
        {
            get;
            set;
        }

        [SqlColumn("is_retry", 2), SqlTypeFacets("bit", false)]
        public bool is_retry
        {
            get;
            set;
        }

        [SqlColumn("session_id", 3), SqlTypeFacets("smallint", false)]
        public short session_id
        {
            get;
            set;
        }

        [SqlColumn("processed_row_count", 4), SqlTypeFacets("int", false)]
        public int processed_row_count
        {
            get;
            set;
        }

        [SqlColumn("error_count", 5), SqlTypeFacets("int", false)]
        public int error_count
        {
            get;
            set;
        }

        public dm_fts_population_ranges()
        {
        }

        public dm_fts_population_ranges(object[] items)
        {
            memory_address = (Byte[])items[0];
            parent_memory_address = (Byte[])items[1];
            is_retry = (bool)items[2];
            session_id = (short)items[3];
            processed_row_count = (int)items[4];
            error_count = (int)items[5];
        }

        public dm_fts_population_ranges(Byte[] memory_address, Byte[] parent_memory_address, bool is_retry, short session_id, int processed_row_count, int error_count)
        {
            this.memory_address = memory_address;
            this.parent_memory_address = parent_memory_address;
            this.is_retry = is_retry;
            this.session_id = session_id;
            this.processed_row_count = processed_row_count;
            this.error_count = error_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_address, parent_memory_address, is_retry, session_id, processed_row_count, error_count };
        }

        public override void SetItemArray(object[] items)
        {
            memory_address = (Byte[])items[0];
            parent_memory_address = (Byte[])items[1];
            is_retry = (bool)items[2];
            session_id = (short)items[3];
            processed_row_count = (int)items[4];
            error_count = (int)items[5];
        }
    }

    [SqlView("sys", "dm_db_missing_index_group_stats")]
    public partial class dm_db_missing_index_group_stats : SqlViewProxy
    {
        [SqlColumn("group_handle", 0), SqlTypeFacets("int", false)]
        public int group_handle
        {
            get;
            set;
        }

        [SqlColumn("unique_compiles", 1), SqlTypeFacets("bigint", false)]
        public long unique_compiles
        {
            get;
            set;
        }

        [SqlColumn("user_seeks", 2), SqlTypeFacets("bigint", false)]
        public long user_seeks
        {
            get;
            set;
        }

        [SqlColumn("user_scans", 3), SqlTypeFacets("bigint", false)]
        public long user_scans
        {
            get;
            set;
        }

        [SqlColumn("last_user_seek", 4), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_seek
        {
            get;
            set;
        }

        [SqlColumn("last_user_scan", 5), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_scan
        {
            get;
            set;
        }

        [SqlColumn("avg_total_user_cost", 6), SqlTypeFacets("float", true)]
        public double? avg_total_user_cost
        {
            get;
            set;
        }

        [SqlColumn("avg_user_impact", 7), SqlTypeFacets("float", true)]
        public double? avg_user_impact
        {
            get;
            set;
        }

        [SqlColumn("system_seeks", 8), SqlTypeFacets("bigint", false)]
        public long system_seeks
        {
            get;
            set;
        }

        [SqlColumn("system_scans", 9), SqlTypeFacets("bigint", false)]
        public long system_scans
        {
            get;
            set;
        }

        [SqlColumn("last_system_seek", 10), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_seek
        {
            get;
            set;
        }

        [SqlColumn("last_system_scan", 11), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_scan
        {
            get;
            set;
        }

        [SqlColumn("avg_total_system_cost", 12), SqlTypeFacets("float", true)]
        public double? avg_total_system_cost
        {
            get;
            set;
        }

        [SqlColumn("avg_system_impact", 13), SqlTypeFacets("float", true)]
        public double? avg_system_impact
        {
            get;
            set;
        }

        public dm_db_missing_index_group_stats()
        {
        }

        public dm_db_missing_index_group_stats(object[] items)
        {
            group_handle = (int)items[0];
            unique_compiles = (long)items[1];
            user_seeks = (long)items[2];
            user_scans = (long)items[3];
            last_user_seek = (DateTime?)items[4];
            last_user_scan = (DateTime?)items[5];
            avg_total_user_cost = (double?)items[6];
            avg_user_impact = (double?)items[7];
            system_seeks = (long)items[8];
            system_scans = (long)items[9];
            last_system_seek = (DateTime?)items[10];
            last_system_scan = (DateTime?)items[11];
            avg_total_system_cost = (double?)items[12];
            avg_system_impact = (double?)items[13];
        }

        public dm_db_missing_index_group_stats(int group_handle, long unique_compiles, long user_seeks, long user_scans, DateTime? last_user_seek, DateTime? last_user_scan, double? avg_total_user_cost, double? avg_user_impact, long system_seeks, long system_scans, DateTime? last_system_seek, DateTime? last_system_scan, double? avg_total_system_cost, double? avg_system_impact)
        {
            this.group_handle = group_handle;
            this.unique_compiles = unique_compiles;
            this.user_seeks = user_seeks;
            this.user_scans = user_scans;
            this.last_user_seek = last_user_seek;
            this.last_user_scan = last_user_scan;
            this.avg_total_user_cost = avg_total_user_cost;
            this.avg_user_impact = avg_user_impact;
            this.system_seeks = system_seeks;
            this.system_scans = system_scans;
            this.last_system_seek = last_system_seek;
            this.last_system_scan = last_system_scan;
            this.avg_total_system_cost = avg_total_system_cost;
            this.avg_system_impact = avg_system_impact;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_handle, unique_compiles, user_seeks, user_scans, last_user_seek, last_user_scan, avg_total_user_cost, avg_user_impact, system_seeks, system_scans, last_system_seek, last_system_scan, avg_total_system_cost, avg_system_impact };
        }

        public override void SetItemArray(object[] items)
        {
            group_handle = (int)items[0];
            unique_compiles = (long)items[1];
            user_seeks = (long)items[2];
            user_scans = (long)items[3];
            last_user_seek = (DateTime?)items[4];
            last_user_scan = (DateTime?)items[5];
            avg_total_user_cost = (double?)items[6];
            avg_user_impact = (double?)items[7];
            system_seeks = (long)items[8];
            system_scans = (long)items[9];
            last_system_seek = (DateTime?)items[10];
            last_system_scan = (DateTime?)items[11];
            avg_total_system_cost = (double?)items[12];
            avg_system_impact = (double?)items[13];
        }
    }

    [SqlView("sys", "dm_repl_traninfo")]
    public partial class dm_repl_traninfo : SqlViewProxy
    {
        [SqlColumn("fp2p_pub_exists", 0), SqlTypeFacets("tinyint", true)]
        public byte? fp2p_pub_exists
        {
            get;
            set;
        }

        [SqlColumn("db_ver", 1), SqlTypeFacets("int", true)]
        public int? db_ver
        {
            get;
            set;
        }

        [SqlColumn("comp_range_address", 2), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] comp_range_address
        {
            get;
            set;
        }

        [SqlColumn("textinfo_address", 3), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] textinfo_address
        {
            get;
            set;
        }

        [SqlColumn("fsinfo_address", 4), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] fsinfo_address
        {
            get;
            set;
        }

        [SqlColumn("begin_lsn", 5), SqlTypeFacets("nvarchar", true, 48)]
        public string begin_lsn
        {
            get;
            set;
        }

        [SqlColumn("commit_lsn", 6), SqlTypeFacets("nvarchar", true, 48)]
        public string commit_lsn
        {
            get;
            set;
        }

        [SqlColumn("dbid", 7), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("rows", 8), SqlTypeFacets("int", true)]
        public int? rows
        {
            get;
            set;
        }

        [SqlColumn("xdesid", 9), SqlTypeFacets("nvarchar", true, 48)]
        public string xdesid
        {
            get;
            set;
        }

        [SqlColumn("artcache_table_address", 10), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_table_address
        {
            get;
            set;
        }

        [SqlColumn("server", 11), SqlTypeFacets("nvarchar", true, 512)]
        public string server
        {
            get;
            set;
        }

        [SqlColumn("server_len_in_bytes", 12), SqlTypeFacets("int", true)]
        public int? server_len_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("database", 13), SqlTypeFacets("nvarchar", true, 512)]
        public string database
        {
            get;
            set;
        }

        [SqlColumn("db_len_in_bytes", 14), SqlTypeFacets("int", true)]
        public int? db_len_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("originator", 15), SqlTypeFacets("nvarchar", true, 512)]
        public string originator
        {
            get;
            set;
        }

        [SqlColumn("originator_len_in_bytes", 16), SqlTypeFacets("int", true)]
        public int? originator_len_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("orig_db", 17), SqlTypeFacets("nvarchar", true, 512)]
        public string orig_db
        {
            get;
            set;
        }

        [SqlColumn("orig_db_len_in_bytes", 18), SqlTypeFacets("int", true)]
        public int? orig_db_len_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("cmds_in_tran", 19), SqlTypeFacets("int", true)]
        public int? cmds_in_tran
        {
            get;
            set;
        }

        [SqlColumn("is_boundedupdate_singleton", 20), SqlTypeFacets("tinyint", true)]
        public byte? is_boundedupdate_singleton
        {
            get;
            set;
        }

        [SqlColumn("begin_update_lsn", 21), SqlTypeFacets("nvarchar", true, 48)]
        public string begin_update_lsn
        {
            get;
            set;
        }

        [SqlColumn("delete_lsn", 22), SqlTypeFacets("nvarchar", true, 48)]
        public string delete_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_end_lsn", 23), SqlTypeFacets("nvarchar", true, 48)]
        public string last_end_lsn
        {
            get;
            set;
        }

        [SqlColumn("fcomplete", 24), SqlTypeFacets("tinyint", true)]
        public byte? fcomplete
        {
            get;
            set;
        }

        [SqlColumn("fcompensated", 25), SqlTypeFacets("tinyint", true)]
        public byte? fcompensated
        {
            get;
            set;
        }

        [SqlColumn("fprocessingtext", 26), SqlTypeFacets("tinyint", true)]
        public byte? fprocessingtext
        {
            get;
            set;
        }

        [SqlColumn("max_cmds_in_tran", 27), SqlTypeFacets("int", true)]
        public int? max_cmds_in_tran
        {
            get;
            set;
        }

        [SqlColumn("begin_time", 28), SqlTypeFacets("datetime", true)]
        public DateTime? begin_time
        {
            get;
            set;
        }

        [SqlColumn("commit_time", 29), SqlTypeFacets("datetime", true)]
        public DateTime? commit_time
        {
            get;
            set;
        }

        [SqlColumn("session_id", 30), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("session_phase", 31), SqlTypeFacets("nvarchar", true, 400)]
        public string session_phase
        {
            get;
            set;
        }

        [SqlColumn("is_known_cdc_tran", 32), SqlTypeFacets("tinyint", true)]
        public byte? is_known_cdc_tran
        {
            get;
            set;
        }

        [SqlColumn("error_count", 33), SqlTypeFacets("int", true)]
        public int? error_count
        {
            get;
            set;
        }

        public dm_repl_traninfo()
        {
        }

        public dm_repl_traninfo(object[] items)
        {
            fp2p_pub_exists = (byte?)items[0];
            db_ver = (int?)items[1];
            comp_range_address = (Byte[])items[2];
            textinfo_address = (Byte[])items[3];
            fsinfo_address = (Byte[])items[4];
            begin_lsn = (string)items[5];
            commit_lsn = (string)items[6];
            dbid = (short?)items[7];
            rows = (int?)items[8];
            xdesid = (string)items[9];
            artcache_table_address = (Byte[])items[10];
            server = (string)items[11];
            server_len_in_bytes = (int?)items[12];
            database = (string)items[13];
            db_len_in_bytes = (int?)items[14];
            originator = (string)items[15];
            originator_len_in_bytes = (int?)items[16];
            orig_db = (string)items[17];
            orig_db_len_in_bytes = (int?)items[18];
            cmds_in_tran = (int?)items[19];
            is_boundedupdate_singleton = (byte?)items[20];
            begin_update_lsn = (string)items[21];
            delete_lsn = (string)items[22];
            last_end_lsn = (string)items[23];
            fcomplete = (byte?)items[24];
            fcompensated = (byte?)items[25];
            fprocessingtext = (byte?)items[26];
            max_cmds_in_tran = (int?)items[27];
            begin_time = (DateTime?)items[28];
            commit_time = (DateTime?)items[29];
            session_id = (int?)items[30];
            session_phase = (string)items[31];
            is_known_cdc_tran = (byte?)items[32];
            error_count = (int?)items[33];
        }

        public dm_repl_traninfo(byte? fp2p_pub_exists, int? db_ver, Byte[] comp_range_address, Byte[] textinfo_address, Byte[] fsinfo_address, string begin_lsn, string commit_lsn, short? dbid, int? rows, string xdesid, Byte[] artcache_table_address, string server, int? server_len_in_bytes, string database, int? db_len_in_bytes, string originator, int? originator_len_in_bytes, string orig_db, int? orig_db_len_in_bytes, int? cmds_in_tran, byte? is_boundedupdate_singleton, string begin_update_lsn, string delete_lsn, string last_end_lsn, byte? fcomplete, byte? fcompensated, byte? fprocessingtext, int? max_cmds_in_tran, DateTime? begin_time, DateTime? commit_time, int? session_id, string session_phase, byte? is_known_cdc_tran, int? error_count)
        {
            this.fp2p_pub_exists = fp2p_pub_exists;
            this.db_ver = db_ver;
            this.comp_range_address = comp_range_address;
            this.textinfo_address = textinfo_address;
            this.fsinfo_address = fsinfo_address;
            this.begin_lsn = begin_lsn;
            this.commit_lsn = commit_lsn;
            this.dbid = dbid;
            this.rows = rows;
            this.xdesid = xdesid;
            this.artcache_table_address = artcache_table_address;
            this.server = server;
            this.server_len_in_bytes = server_len_in_bytes;
            this.database = database;
            this.db_len_in_bytes = db_len_in_bytes;
            this.originator = originator;
            this.originator_len_in_bytes = originator_len_in_bytes;
            this.orig_db = orig_db;
            this.orig_db_len_in_bytes = orig_db_len_in_bytes;
            this.cmds_in_tran = cmds_in_tran;
            this.is_boundedupdate_singleton = is_boundedupdate_singleton;
            this.begin_update_lsn = begin_update_lsn;
            this.delete_lsn = delete_lsn;
            this.last_end_lsn = last_end_lsn;
            this.fcomplete = fcomplete;
            this.fcompensated = fcompensated;
            this.fprocessingtext = fprocessingtext;
            this.max_cmds_in_tran = max_cmds_in_tran;
            this.begin_time = begin_time;
            this.commit_time = commit_time;
            this.session_id = session_id;
            this.session_phase = session_phase;
            this.is_known_cdc_tran = is_known_cdc_tran;
            this.error_count = error_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { fp2p_pub_exists, db_ver, comp_range_address, textinfo_address, fsinfo_address, begin_lsn, commit_lsn, dbid, rows, xdesid, artcache_table_address, server, server_len_in_bytes, database, db_len_in_bytes, originator, originator_len_in_bytes, orig_db, orig_db_len_in_bytes, cmds_in_tran, is_boundedupdate_singleton, begin_update_lsn, delete_lsn, last_end_lsn, fcomplete, fcompensated, fprocessingtext, max_cmds_in_tran, begin_time, commit_time, session_id, session_phase, is_known_cdc_tran, error_count };
        }

        public override void SetItemArray(object[] items)
        {
            fp2p_pub_exists = (byte?)items[0];
            db_ver = (int?)items[1];
            comp_range_address = (Byte[])items[2];
            textinfo_address = (Byte[])items[3];
            fsinfo_address = (Byte[])items[4];
            begin_lsn = (string)items[5];
            commit_lsn = (string)items[6];
            dbid = (short?)items[7];
            rows = (int?)items[8];
            xdesid = (string)items[9];
            artcache_table_address = (Byte[])items[10];
            server = (string)items[11];
            server_len_in_bytes = (int?)items[12];
            database = (string)items[13];
            db_len_in_bytes = (int?)items[14];
            originator = (string)items[15];
            originator_len_in_bytes = (int?)items[16];
            orig_db = (string)items[17];
            orig_db_len_in_bytes = (int?)items[18];
            cmds_in_tran = (int?)items[19];
            is_boundedupdate_singleton = (byte?)items[20];
            begin_update_lsn = (string)items[21];
            delete_lsn = (string)items[22];
            last_end_lsn = (string)items[23];
            fcomplete = (byte?)items[24];
            fcompensated = (byte?)items[25];
            fprocessingtext = (byte?)items[26];
            max_cmds_in_tran = (int?)items[27];
            begin_time = (DateTime?)items[28];
            commit_time = (DateTime?)items[29];
            session_id = (int?)items[30];
            session_phase = (string)items[31];
            is_known_cdc_tran = (byte?)items[32];
            error_count = (int?)items[33];
        }
    }

    [SqlView("sys", "dm_exec_query_resource_semaphores")]
    public partial class dm_exec_query_resource_semaphores : SqlViewProxy
    {
        [SqlColumn("resource_semaphore_id", 0), SqlTypeFacets("smallint", true)]
        public short? resource_semaphore_id
        {
            get;
            set;
        }

        [SqlColumn("target_memory_kb", 1), SqlTypeFacets("bigint", true)]
        public long? target_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("max_target_memory_kb", 2), SqlTypeFacets("bigint", true)]
        public long? max_target_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("total_memory_kb", 3), SqlTypeFacets("bigint", true)]
        public long? total_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("available_memory_kb", 4), SqlTypeFacets("bigint", true)]
        public long? available_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("granted_memory_kb", 5), SqlTypeFacets("bigint", true)]
        public long? granted_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("used_memory_kb", 6), SqlTypeFacets("bigint", true)]
        public long? used_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("grantee_count", 7), SqlTypeFacets("int", true)]
        public int? grantee_count
        {
            get;
            set;
        }

        [SqlColumn("waiter_count", 8), SqlTypeFacets("int", true)]
        public int? waiter_count
        {
            get;
            set;
        }

        [SqlColumn("timeout_error_count", 9), SqlTypeFacets("bigint", true)]
        public long? timeout_error_count
        {
            get;
            set;
        }

        [SqlColumn("forced_grant_count", 10), SqlTypeFacets("bigint", true)]
        public long? forced_grant_count
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 11), SqlTypeFacets("int", true)]
        public int? pool_id
        {
            get;
            set;
        }

        public dm_exec_query_resource_semaphores()
        {
        }

        public dm_exec_query_resource_semaphores(object[] items)
        {
            resource_semaphore_id = (short?)items[0];
            target_memory_kb = (long?)items[1];
            max_target_memory_kb = (long?)items[2];
            total_memory_kb = (long?)items[3];
            available_memory_kb = (long?)items[4];
            granted_memory_kb = (long?)items[5];
            used_memory_kb = (long?)items[6];
            grantee_count = (int?)items[7];
            waiter_count = (int?)items[8];
            timeout_error_count = (long?)items[9];
            forced_grant_count = (long?)items[10];
            pool_id = (int?)items[11];
        }

        public dm_exec_query_resource_semaphores(short? resource_semaphore_id, long? target_memory_kb, long? max_target_memory_kb, long? total_memory_kb, long? available_memory_kb, long? granted_memory_kb, long? used_memory_kb, int? grantee_count, int? waiter_count, long? timeout_error_count, long? forced_grant_count, int? pool_id)
        {
            this.resource_semaphore_id = resource_semaphore_id;
            this.target_memory_kb = target_memory_kb;
            this.max_target_memory_kb = max_target_memory_kb;
            this.total_memory_kb = total_memory_kb;
            this.available_memory_kb = available_memory_kb;
            this.granted_memory_kb = granted_memory_kb;
            this.used_memory_kb = used_memory_kb;
            this.grantee_count = grantee_count;
            this.waiter_count = waiter_count;
            this.timeout_error_count = timeout_error_count;
            this.forced_grant_count = forced_grant_count;
            this.pool_id = pool_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { resource_semaphore_id, target_memory_kb, max_target_memory_kb, total_memory_kb, available_memory_kb, granted_memory_kb, used_memory_kb, grantee_count, waiter_count, timeout_error_count, forced_grant_count, pool_id };
        }

        public override void SetItemArray(object[] items)
        {
            resource_semaphore_id = (short?)items[0];
            target_memory_kb = (long?)items[1];
            max_target_memory_kb = (long?)items[2];
            total_memory_kb = (long?)items[3];
            available_memory_kb = (long?)items[4];
            granted_memory_kb = (long?)items[5];
            used_memory_kb = (long?)items[6];
            grantee_count = (int?)items[7];
            waiter_count = (int?)items[8];
            timeout_error_count = (long?)items[9];
            forced_grant_count = (long?)items[10];
            pool_id = (int?)items[11];
        }
    }

    [SqlView("sys", "dm_exec_query_transformation_stats")]
    public partial class dm_exec_query_transformation_stats : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("varchar", false, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("promise_total", 1), SqlTypeFacets("bigint", false)]
        public long promise_total
        {
            get;
            set;
        }

        [SqlColumn("promise_avg", 2), SqlTypeFacets("float", false)]
        public double promise_avg
        {
            get;
            set;
        }

        [SqlColumn("promised", 3), SqlTypeFacets("bigint", false)]
        public long promised
        {
            get;
            set;
        }

        [SqlColumn("built_substitute", 4), SqlTypeFacets("bigint", false)]
        public long built_substitute
        {
            get;
            set;
        }

        [SqlColumn("succeeded", 5), SqlTypeFacets("bigint", false)]
        public long succeeded
        {
            get;
            set;
        }

        public dm_exec_query_transformation_stats()
        {
        }

        public dm_exec_query_transformation_stats(object[] items)
        {
            name = (string)items[0];
            promise_total = (long)items[1];
            promise_avg = (double)items[2];
            promised = (long)items[3];
            built_substitute = (long)items[4];
            succeeded = (long)items[5];
        }

        public dm_exec_query_transformation_stats(string name, long promise_total, double promise_avg, long promised, long built_substitute, long succeeded)
        {
            this.name = name;
            this.promise_total = promise_total;
            this.promise_avg = promise_avg;
            this.promised = promised;
            this.built_substitute = built_substitute;
            this.succeeded = succeeded;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, promise_total, promise_avg, promised, built_substitute, succeeded };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            promise_total = (long)items[1];
            promise_avg = (double)items[2];
            promised = (long)items[3];
            built_substitute = (long)items[4];
            succeeded = (long)items[5];
        }
    }

    [SqlView("sys", "dm_hadr_database_replica_cluster_states")]
    public partial class dm_hadr_database_replica_cluster_states : SqlViewProxy
    {
        [SqlColumn("replica_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_database_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_database_id
        {
            get;
            set;
        }

        [SqlColumn("database_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("is_failover_ready", 3), SqlTypeFacets("bit", false)]
        public bool is_failover_ready
        {
            get;
            set;
        }

        [SqlColumn("is_pending_secondary_suspend", 4), SqlTypeFacets("bit", false)]
        public bool is_pending_secondary_suspend
        {
            get;
            set;
        }

        [SqlColumn("is_database_joined", 5), SqlTypeFacets("bit", false)]
        public bool is_database_joined
        {
            get;
            set;
        }

        [SqlColumn("recovery_lsn", 6), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? recovery_lsn
        {
            get;
            set;
        }

        [SqlColumn("truncation_lsn", 7), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? truncation_lsn
        {
            get;
            set;
        }

        public dm_hadr_database_replica_cluster_states()
        {
        }

        public dm_hadr_database_replica_cluster_states(object[] items)
        {
            replica_id = (Guid)items[0];
            group_database_id = (Guid)items[1];
            database_name = (string)items[2];
            is_failover_ready = (bool)items[3];
            is_pending_secondary_suspend = (bool)items[4];
            is_database_joined = (bool)items[5];
            recovery_lsn = (decimal?)items[6];
            truncation_lsn = (decimal?)items[7];
        }

        public dm_hadr_database_replica_cluster_states(Guid replica_id, Guid group_database_id, string database_name, bool is_failover_ready, bool is_pending_secondary_suspend, bool is_database_joined, decimal? recovery_lsn, decimal? truncation_lsn)
        {
            this.replica_id = replica_id;
            this.group_database_id = group_database_id;
            this.database_name = database_name;
            this.is_failover_ready = is_failover_ready;
            this.is_pending_secondary_suspend = is_pending_secondary_suspend;
            this.is_database_joined = is_database_joined;
            this.recovery_lsn = recovery_lsn;
            this.truncation_lsn = truncation_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { replica_id, group_database_id, database_name, is_failover_ready, is_pending_secondary_suspend, is_database_joined, recovery_lsn, truncation_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            replica_id = (Guid)items[0];
            group_database_id = (Guid)items[1];
            database_name = (string)items[2];
            is_failover_ready = (bool)items[3];
            is_pending_secondary_suspend = (bool)items[4];
            is_database_joined = (bool)items[5];
            recovery_lsn = (decimal?)items[6];
            truncation_lsn = (decimal?)items[7];
        }
    }

    [SqlView("sys", "dm_exec_procedure_stats")]
    public partial class dm_exec_procedure_stats : SqlViewProxy
    {
        [SqlColumn("max_elapsed_time", 28), SqlTypeFacets("bigint", false)]
        public long max_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", true, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 4), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 5), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("cached_time", 6), SqlTypeFacets("datetime", true)]
        public DateTime? cached_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 7), SqlTypeFacets("datetime", true)]
        public DateTime? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("execution_count", 8), SqlTypeFacets("bigint", false)]
        public long execution_count
        {
            get;
            set;
        }

        [SqlColumn("total_worker_time", 9), SqlTypeFacets("bigint", false)]
        public long total_worker_time
        {
            get;
            set;
        }

        [SqlColumn("last_worker_time", 10), SqlTypeFacets("bigint", false)]
        public long last_worker_time
        {
            get;
            set;
        }

        [SqlColumn("min_worker_time", 11), SqlTypeFacets("bigint", false)]
        public long min_worker_time
        {
            get;
            set;
        }

        [SqlColumn("max_worker_time", 12), SqlTypeFacets("bigint", false)]
        public long max_worker_time
        {
            get;
            set;
        }

        [SqlColumn("total_physical_reads", 13), SqlTypeFacets("bigint", false)]
        public long total_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_physical_reads", 14), SqlTypeFacets("bigint", false)]
        public long last_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_physical_reads", 15), SqlTypeFacets("bigint", false)]
        public long min_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_physical_reads", 16), SqlTypeFacets("bigint", false)]
        public long max_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_logical_writes", 17), SqlTypeFacets("bigint", false)]
        public long total_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("last_logical_writes", 18), SqlTypeFacets("bigint", false)]
        public long last_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("min_logical_writes", 19), SqlTypeFacets("bigint", false)]
        public long min_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("max_logical_writes", 20), SqlTypeFacets("bigint", false)]
        public long max_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("total_logical_reads", 21), SqlTypeFacets("bigint", false)]
        public long total_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_logical_reads", 22), SqlTypeFacets("bigint", false)]
        public long last_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_logical_reads", 23), SqlTypeFacets("bigint", false)]
        public long min_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_logical_reads", 24), SqlTypeFacets("bigint", false)]
        public long max_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_elapsed_time", 25), SqlTypeFacets("bigint", false)]
        public long total_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("last_elapsed_time", 26), SqlTypeFacets("bigint", false)]
        public long last_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("min_elapsed_time", 27), SqlTypeFacets("bigint", false)]
        public long min_elapsed_time
        {
            get;
            set;
        }

        public dm_exec_procedure_stats()
        {
        }

        public dm_exec_procedure_stats(object[] items)
        {
            max_elapsed_time = (long)items[0];
            database_id = (int)items[1];
            object_id = (int)items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            sql_handle = (Byte[])items[5];
            plan_handle = (Byte[])items[6];
            cached_time = (DateTime?)items[7];
            last_execution_time = (DateTime?)items[8];
            execution_count = (long)items[9];
            total_worker_time = (long)items[10];
            last_worker_time = (long)items[11];
            min_worker_time = (long)items[12];
            max_worker_time = (long)items[13];
            total_physical_reads = (long)items[14];
            last_physical_reads = (long)items[15];
            min_physical_reads = (long)items[16];
            max_physical_reads = (long)items[17];
            total_logical_writes = (long)items[18];
            last_logical_writes = (long)items[19];
            min_logical_writes = (long)items[20];
            max_logical_writes = (long)items[21];
            total_logical_reads = (long)items[22];
            last_logical_reads = (long)items[23];
            min_logical_reads = (long)items[24];
            max_logical_reads = (long)items[25];
            total_elapsed_time = (long)items[26];
            last_elapsed_time = (long)items[27];
            min_elapsed_time = (long)items[28];
        }

        public dm_exec_procedure_stats(long max_elapsed_time, int database_id, int object_id, string type, string type_desc, Byte[] sql_handle, Byte[] plan_handle, DateTime? cached_time, DateTime? last_execution_time, long execution_count, long total_worker_time, long last_worker_time, long min_worker_time, long max_worker_time, long total_physical_reads, long last_physical_reads, long min_physical_reads, long max_physical_reads, long total_logical_writes, long last_logical_writes, long min_logical_writes, long max_logical_writes, long total_logical_reads, long last_logical_reads, long min_logical_reads, long max_logical_reads, long total_elapsed_time, long last_elapsed_time, long min_elapsed_time)
        {
            this.max_elapsed_time = max_elapsed_time;
            this.database_id = database_id;
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.sql_handle = sql_handle;
            this.plan_handle = plan_handle;
            this.cached_time = cached_time;
            this.last_execution_time = last_execution_time;
            this.execution_count = execution_count;
            this.total_worker_time = total_worker_time;
            this.last_worker_time = last_worker_time;
            this.min_worker_time = min_worker_time;
            this.max_worker_time = max_worker_time;
            this.total_physical_reads = total_physical_reads;
            this.last_physical_reads = last_physical_reads;
            this.min_physical_reads = min_physical_reads;
            this.max_physical_reads = max_physical_reads;
            this.total_logical_writes = total_logical_writes;
            this.last_logical_writes = last_logical_writes;
            this.min_logical_writes = min_logical_writes;
            this.max_logical_writes = max_logical_writes;
            this.total_logical_reads = total_logical_reads;
            this.last_logical_reads = last_logical_reads;
            this.min_logical_reads = min_logical_reads;
            this.max_logical_reads = max_logical_reads;
            this.total_elapsed_time = total_elapsed_time;
            this.last_elapsed_time = last_elapsed_time;
            this.min_elapsed_time = min_elapsed_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { max_elapsed_time, database_id, object_id, type, type_desc, sql_handle, plan_handle, cached_time, last_execution_time, execution_count, total_worker_time, last_worker_time, min_worker_time, max_worker_time, total_physical_reads, last_physical_reads, min_physical_reads, max_physical_reads, total_logical_writes, last_logical_writes, min_logical_writes, max_logical_writes, total_logical_reads, last_logical_reads, min_logical_reads, max_logical_reads, total_elapsed_time, last_elapsed_time, min_elapsed_time };
        }

        public override void SetItemArray(object[] items)
        {
            max_elapsed_time = (long)items[0];
            database_id = (int)items[1];
            object_id = (int)items[2];
            type = (string)items[3];
            type_desc = (string)items[4];
            sql_handle = (Byte[])items[5];
            plan_handle = (Byte[])items[6];
            cached_time = (DateTime?)items[7];
            last_execution_time = (DateTime?)items[8];
            execution_count = (long)items[9];
            total_worker_time = (long)items[10];
            last_worker_time = (long)items[11];
            min_worker_time = (long)items[12];
            max_worker_time = (long)items[13];
            total_physical_reads = (long)items[14];
            last_physical_reads = (long)items[15];
            min_physical_reads = (long)items[16];
            max_physical_reads = (long)items[17];
            total_logical_writes = (long)items[18];
            last_logical_writes = (long)items[19];
            min_logical_writes = (long)items[20];
            max_logical_writes = (long)items[21];
            total_logical_reads = (long)items[22];
            last_logical_reads = (long)items[23];
            min_logical_reads = (long)items[24];
            max_logical_reads = (long)items[25];
            total_elapsed_time = (long)items[26];
            last_elapsed_time = (long)items[27];
            min_elapsed_time = (long)items[28];
        }
    }

    [SqlView("sys", "dm_tran_locks")]
    public partial class dm_tran_locks : SqlViewProxy
    {
        [SqlColumn("resource_type", 0), SqlTypeFacets("nvarchar", false, 120)]
        public string resource_type
        {
            get;
            set;
        }

        [SqlColumn("resource_subtype", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string resource_subtype
        {
            get;
            set;
        }

        [SqlColumn("resource_database_id", 2), SqlTypeFacets("int", false)]
        public int resource_database_id
        {
            get;
            set;
        }

        [SqlColumn("resource_description", 3), SqlTypeFacets("nvarchar", false, 512)]
        public string resource_description
        {
            get;
            set;
        }

        [SqlColumn("resource_associated_entity_id", 4), SqlTypeFacets("bigint", true)]
        public long? resource_associated_entity_id
        {
            get;
            set;
        }

        [SqlColumn("resource_lock_partition", 5), SqlTypeFacets("int", true)]
        public int? resource_lock_partition
        {
            get;
            set;
        }

        [SqlColumn("request_mode", 6), SqlTypeFacets("nvarchar", false, 120)]
        public string request_mode
        {
            get;
            set;
        }

        [SqlColumn("request_type", 7), SqlTypeFacets("nvarchar", false, 120)]
        public string request_type
        {
            get;
            set;
        }

        [SqlColumn("request_status", 8), SqlTypeFacets("nvarchar", false, 120)]
        public string request_status
        {
            get;
            set;
        }

        [SqlColumn("request_reference_count", 9), SqlTypeFacets("smallint", false)]
        public short request_reference_count
        {
            get;
            set;
        }

        [SqlColumn("request_lifetime", 10), SqlTypeFacets("int", false)]
        public int request_lifetime
        {
            get;
            set;
        }

        [SqlColumn("request_session_id", 11), SqlTypeFacets("int", false)]
        public int request_session_id
        {
            get;
            set;
        }

        [SqlColumn("request_exec_context_id", 12), SqlTypeFacets("int", false)]
        public int request_exec_context_id
        {
            get;
            set;
        }

        [SqlColumn("request_request_id", 13), SqlTypeFacets("int", false)]
        public int request_request_id
        {
            get;
            set;
        }

        [SqlColumn("request_owner_type", 14), SqlTypeFacets("nvarchar", false, 120)]
        public string request_owner_type
        {
            get;
            set;
        }

        [SqlColumn("request_owner_id", 15), SqlTypeFacets("bigint", true)]
        public long? request_owner_id
        {
            get;
            set;
        }

        [SqlColumn("request_owner_guid", 16), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? request_owner_guid
        {
            get;
            set;
        }

        [SqlColumn("request_owner_lockspace_id", 17), SqlTypeFacets("nvarchar", false, 64)]
        public string request_owner_lockspace_id
        {
            get;
            set;
        }

        [SqlColumn("lock_owner_address", 18), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] lock_owner_address
        {
            get;
            set;
        }

        public dm_tran_locks()
        {
        }

        public dm_tran_locks(object[] items)
        {
            resource_type = (string)items[0];
            resource_subtype = (string)items[1];
            resource_database_id = (int)items[2];
            resource_description = (string)items[3];
            resource_associated_entity_id = (long?)items[4];
            resource_lock_partition = (int?)items[5];
            request_mode = (string)items[6];
            request_type = (string)items[7];
            request_status = (string)items[8];
            request_reference_count = (short)items[9];
            request_lifetime = (int)items[10];
            request_session_id = (int)items[11];
            request_exec_context_id = (int)items[12];
            request_request_id = (int)items[13];
            request_owner_type = (string)items[14];
            request_owner_id = (long?)items[15];
            request_owner_guid = (Guid?)items[16];
            request_owner_lockspace_id = (string)items[17];
            lock_owner_address = (Byte[])items[18];
        }

        public dm_tran_locks(string resource_type, string resource_subtype, int resource_database_id, string resource_description, long? resource_associated_entity_id, int? resource_lock_partition, string request_mode, string request_type, string request_status, short request_reference_count, int request_lifetime, int request_session_id, int request_exec_context_id, int request_request_id, string request_owner_type, long? request_owner_id, Guid? request_owner_guid, string request_owner_lockspace_id, Byte[] lock_owner_address)
        {
            this.resource_type = resource_type;
            this.resource_subtype = resource_subtype;
            this.resource_database_id = resource_database_id;
            this.resource_description = resource_description;
            this.resource_associated_entity_id = resource_associated_entity_id;
            this.resource_lock_partition = resource_lock_partition;
            this.request_mode = request_mode;
            this.request_type = request_type;
            this.request_status = request_status;
            this.request_reference_count = request_reference_count;
            this.request_lifetime = request_lifetime;
            this.request_session_id = request_session_id;
            this.request_exec_context_id = request_exec_context_id;
            this.request_request_id = request_request_id;
            this.request_owner_type = request_owner_type;
            this.request_owner_id = request_owner_id;
            this.request_owner_guid = request_owner_guid;
            this.request_owner_lockspace_id = request_owner_lockspace_id;
            this.lock_owner_address = lock_owner_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { resource_type, resource_subtype, resource_database_id, resource_description, resource_associated_entity_id, resource_lock_partition, request_mode, request_type, request_status, request_reference_count, request_lifetime, request_session_id, request_exec_context_id, request_request_id, request_owner_type, request_owner_id, request_owner_guid, request_owner_lockspace_id, lock_owner_address };
        }

        public override void SetItemArray(object[] items)
        {
            resource_type = (string)items[0];
            resource_subtype = (string)items[1];
            resource_database_id = (int)items[2];
            resource_description = (string)items[3];
            resource_associated_entity_id = (long?)items[4];
            resource_lock_partition = (int?)items[5];
            request_mode = (string)items[6];
            request_type = (string)items[7];
            request_status = (string)items[8];
            request_reference_count = (short)items[9];
            request_lifetime = (int)items[10];
            request_session_id = (int)items[11];
            request_exec_context_id = (int)items[12];
            request_request_id = (int)items[13];
            request_owner_type = (string)items[14];
            request_owner_id = (long?)items[15];
            request_owner_guid = (Guid?)items[16];
            request_owner_lockspace_id = (string)items[17];
            lock_owner_address = (Byte[])items[18];
        }
    }

    [SqlView("sys", "dm_os_sys_info")]
    public partial class dm_os_sys_info : SqlViewProxy
    {
        [SqlColumn("cpu_ticks", 0), SqlTypeFacets("bigint", false)]
        public long cpu_ticks
        {
            get;
            set;
        }

        [SqlColumn("ms_ticks", 1), SqlTypeFacets("bigint", false)]
        public long ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("cpu_count", 2), SqlTypeFacets("int", false)]
        public int cpu_count
        {
            get;
            set;
        }

        [SqlColumn("hyperthread_ratio", 3), SqlTypeFacets("int", false)]
        public int hyperthread_ratio
        {
            get;
            set;
        }

        [SqlColumn("physical_memory_kb", 4), SqlTypeFacets("bigint", false)]
        public long physical_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_memory_kb", 5), SqlTypeFacets("bigint", false)]
        public long virtual_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("committed_kb", 6), SqlTypeFacets("bigint", false)]
        public long committed_kb
        {
            get;
            set;
        }

        [SqlColumn("committed_target_kb", 7), SqlTypeFacets("bigint", false)]
        public long committed_target_kb
        {
            get;
            set;
        }

        [SqlColumn("visible_target_kb", 8), SqlTypeFacets("bigint", false)]
        public long visible_target_kb
        {
            get;
            set;
        }

        [SqlColumn("stack_size_in_bytes", 9), SqlTypeFacets("int", false)]
        public int stack_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("os_quantum", 10), SqlTypeFacets("bigint", false)]
        public long os_quantum
        {
            get;
            set;
        }

        [SqlColumn("os_error_mode", 11), SqlTypeFacets("int", false)]
        public int os_error_mode
        {
            get;
            set;
        }

        [SqlColumn("os_priority_class", 12), SqlTypeFacets("int", true)]
        public int? os_priority_class
        {
            get;
            set;
        }

        [SqlColumn("max_workers_count", 13), SqlTypeFacets("int", false)]
        public int max_workers_count
        {
            get;
            set;
        }

        [SqlColumn("scheduler_count", 14), SqlTypeFacets("int", false)]
        public int scheduler_count
        {
            get;
            set;
        }

        [SqlColumn("scheduler_total_count", 15), SqlTypeFacets("int", false)]
        public int scheduler_total_count
        {
            get;
            set;
        }

        [SqlColumn("deadlock_monitor_serial_number", 16), SqlTypeFacets("int", false)]
        public int deadlock_monitor_serial_number
        {
            get;
            set;
        }

        [SqlColumn("sqlserver_start_time_ms_ticks", 17), SqlTypeFacets("bigint", false)]
        public long sqlserver_start_time_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("sqlserver_start_time", 18), SqlTypeFacets("datetime", false)]
        public DateTime sqlserver_start_time
        {
            get;
            set;
        }

        [SqlColumn("affinity_type", 19), SqlTypeFacets("int", false)]
        public int affinity_type
        {
            get;
            set;
        }

        [SqlColumn("affinity_type_desc", 20), SqlTypeFacets("nvarchar", false, 120)]
        public string affinity_type_desc
        {
            get;
            set;
        }

        [SqlColumn("process_kernel_time_ms", 21), SqlTypeFacets("bigint", false)]
        public long process_kernel_time_ms
        {
            get;
            set;
        }

        [SqlColumn("process_user_time_ms", 22), SqlTypeFacets("bigint", false)]
        public long process_user_time_ms
        {
            get;
            set;
        }

        [SqlColumn("time_source", 23), SqlTypeFacets("int", false)]
        public int time_source
        {
            get;
            set;
        }

        [SqlColumn("time_source_desc", 24), SqlTypeFacets("nvarchar", false, 120)]
        public string time_source_desc
        {
            get;
            set;
        }

        [SqlColumn("virtual_machine_type", 25), SqlTypeFacets("int", false)]
        public int virtual_machine_type
        {
            get;
            set;
        }

        [SqlColumn("virtual_machine_type_desc", 26), SqlTypeFacets("nvarchar", false, 120)]
        public string virtual_machine_type_desc
        {
            get;
            set;
        }

        public dm_os_sys_info()
        {
        }

        public dm_os_sys_info(object[] items)
        {
            cpu_ticks = (long)items[0];
            ms_ticks = (long)items[1];
            cpu_count = (int)items[2];
            hyperthread_ratio = (int)items[3];
            physical_memory_kb = (long)items[4];
            virtual_memory_kb = (long)items[5];
            committed_kb = (long)items[6];
            committed_target_kb = (long)items[7];
            visible_target_kb = (long)items[8];
            stack_size_in_bytes = (int)items[9];
            os_quantum = (long)items[10];
            os_error_mode = (int)items[11];
            os_priority_class = (int?)items[12];
            max_workers_count = (int)items[13];
            scheduler_count = (int)items[14];
            scheduler_total_count = (int)items[15];
            deadlock_monitor_serial_number = (int)items[16];
            sqlserver_start_time_ms_ticks = (long)items[17];
            sqlserver_start_time = (DateTime)items[18];
            affinity_type = (int)items[19];
            affinity_type_desc = (string)items[20];
            process_kernel_time_ms = (long)items[21];
            process_user_time_ms = (long)items[22];
            time_source = (int)items[23];
            time_source_desc = (string)items[24];
            virtual_machine_type = (int)items[25];
            virtual_machine_type_desc = (string)items[26];
        }

        public dm_os_sys_info(long cpu_ticks, long ms_ticks, int cpu_count, int hyperthread_ratio, long physical_memory_kb, long virtual_memory_kb, long committed_kb, long committed_target_kb, long visible_target_kb, int stack_size_in_bytes, long os_quantum, int os_error_mode, int? os_priority_class, int max_workers_count, int scheduler_count, int scheduler_total_count, int deadlock_monitor_serial_number, long sqlserver_start_time_ms_ticks, DateTime sqlserver_start_time, int affinity_type, string affinity_type_desc, long process_kernel_time_ms, long process_user_time_ms, int time_source, string time_source_desc, int virtual_machine_type, string virtual_machine_type_desc)
        {
            this.cpu_ticks = cpu_ticks;
            this.ms_ticks = ms_ticks;
            this.cpu_count = cpu_count;
            this.hyperthread_ratio = hyperthread_ratio;
            this.physical_memory_kb = physical_memory_kb;
            this.virtual_memory_kb = virtual_memory_kb;
            this.committed_kb = committed_kb;
            this.committed_target_kb = committed_target_kb;
            this.visible_target_kb = visible_target_kb;
            this.stack_size_in_bytes = stack_size_in_bytes;
            this.os_quantum = os_quantum;
            this.os_error_mode = os_error_mode;
            this.os_priority_class = os_priority_class;
            this.max_workers_count = max_workers_count;
            this.scheduler_count = scheduler_count;
            this.scheduler_total_count = scheduler_total_count;
            this.deadlock_monitor_serial_number = deadlock_monitor_serial_number;
            this.sqlserver_start_time_ms_ticks = sqlserver_start_time_ms_ticks;
            this.sqlserver_start_time = sqlserver_start_time;
            this.affinity_type = affinity_type;
            this.affinity_type_desc = affinity_type_desc;
            this.process_kernel_time_ms = process_kernel_time_ms;
            this.process_user_time_ms = process_user_time_ms;
            this.time_source = time_source;
            this.time_source_desc = time_source_desc;
            this.virtual_machine_type = virtual_machine_type;
            this.virtual_machine_type_desc = virtual_machine_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cpu_ticks, ms_ticks, cpu_count, hyperthread_ratio, physical_memory_kb, virtual_memory_kb, committed_kb, committed_target_kb, visible_target_kb, stack_size_in_bytes, os_quantum, os_error_mode, os_priority_class, max_workers_count, scheduler_count, scheduler_total_count, deadlock_monitor_serial_number, sqlserver_start_time_ms_ticks, sqlserver_start_time, affinity_type, affinity_type_desc, process_kernel_time_ms, process_user_time_ms, time_source, time_source_desc, virtual_machine_type, virtual_machine_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            cpu_ticks = (long)items[0];
            ms_ticks = (long)items[1];
            cpu_count = (int)items[2];
            hyperthread_ratio = (int)items[3];
            physical_memory_kb = (long)items[4];
            virtual_memory_kb = (long)items[5];
            committed_kb = (long)items[6];
            committed_target_kb = (long)items[7];
            visible_target_kb = (long)items[8];
            stack_size_in_bytes = (int)items[9];
            os_quantum = (long)items[10];
            os_error_mode = (int)items[11];
            os_priority_class = (int?)items[12];
            max_workers_count = (int)items[13];
            scheduler_count = (int)items[14];
            scheduler_total_count = (int)items[15];
            deadlock_monitor_serial_number = (int)items[16];
            sqlserver_start_time_ms_ticks = (long)items[17];
            sqlserver_start_time = (DateTime)items[18];
            affinity_type = (int)items[19];
            affinity_type_desc = (string)items[20];
            process_kernel_time_ms = (long)items[21];
            process_user_time_ms = (long)items[22];
            time_source = (int)items[23];
            time_source_desc = (string)items[24];
            virtual_machine_type = (int)items[25];
            virtual_machine_type_desc = (string)items[26];
        }
    }

    [SqlView("sys", "dm_resource_governor_resource_pool_affinity")]
    public partial class dm_resource_governor_resource_pool_affinity : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 1), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        [SqlColumn("scheduler_mask", 2), SqlTypeFacets("bigint", false)]
        public long scheduler_mask
        {
            get;
            set;
        }

        public dm_resource_governor_resource_pool_affinity()
        {
        }

        public dm_resource_governor_resource_pool_affinity(object[] items)
        {
            pool_id = (int)items[0];
            processor_group = (short)items[1];
            scheduler_mask = (long)items[2];
        }

        public dm_resource_governor_resource_pool_affinity(int pool_id, short processor_group, long scheduler_mask)
        {
            this.pool_id = pool_id;
            this.processor_group = processor_group;
            this.scheduler_mask = scheduler_mask;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, processor_group, scheduler_mask };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            processor_group = (short)items[1];
            scheduler_mask = (long)items[2];
        }
    }

    [SqlView("sys", "dm_fts_memory_pools")]
    public partial class dm_fts_memory_pools : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("buffer_size", 1), SqlTypeFacets("int", false)]
        public int buffer_size
        {
            get;
            set;
        }

        [SqlColumn("min_buffer_limit", 2), SqlTypeFacets("int", false)]
        public int min_buffer_limit
        {
            get;
            set;
        }

        [SqlColumn("max_buffer_limit", 3), SqlTypeFacets("int", false)]
        public int max_buffer_limit
        {
            get;
            set;
        }

        [SqlColumn("buffer_count", 4), SqlTypeFacets("int", false)]
        public int buffer_count
        {
            get;
            set;
        }

        public dm_fts_memory_pools()
        {
        }

        public dm_fts_memory_pools(object[] items)
        {
            pool_id = (int)items[0];
            buffer_size = (int)items[1];
            min_buffer_limit = (int)items[2];
            max_buffer_limit = (int)items[3];
            buffer_count = (int)items[4];
        }

        public dm_fts_memory_pools(int pool_id, int buffer_size, int min_buffer_limit, int max_buffer_limit, int buffer_count)
        {
            this.pool_id = pool_id;
            this.buffer_size = buffer_size;
            this.min_buffer_limit = min_buffer_limit;
            this.max_buffer_limit = max_buffer_limit;
            this.buffer_count = buffer_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, buffer_size, min_buffer_limit, max_buffer_limit, buffer_count };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            buffer_size = (int)items[1];
            min_buffer_limit = (int)items[2];
            max_buffer_limit = (int)items[3];
            buffer_count = (int)items[4];
        }
    }

    [SqlView("sys", "dm_hadr_database_replica_states")]
    public partial class dm_hadr_database_replica_states : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("group_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("replica_id", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_database_id", 3), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_database_id
        {
            get;
            set;
        }

        [SqlColumn("is_local", 4), SqlTypeFacets("bit", true)]
        public bool? is_local
        {
            get;
            set;
        }

        [SqlColumn("is_primary_replica", 5), SqlTypeFacets("bit", true)]
        public bool? is_primary_replica
        {
            get;
            set;
        }

        [SqlColumn("synchronization_state", 6), SqlTypeFacets("tinyint", true)]
        public byte? synchronization_state
        {
            get;
            set;
        }

        [SqlColumn("synchronization_state_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string synchronization_state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_commit_participant", 8), SqlTypeFacets("bit", true)]
        public bool? is_commit_participant
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health", 9), SqlTypeFacets("tinyint", true)]
        public byte? synchronization_health
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string synchronization_health_desc
        {
            get;
            set;
        }

        [SqlColumn("database_state", 11), SqlTypeFacets("tinyint", true)]
        public byte? database_state
        {
            get;
            set;
        }

        [SqlColumn("database_state_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string database_state_desc
        {
            get;
            set;
        }

        [SqlColumn("is_suspended", 13), SqlTypeFacets("bit", true)]
        public bool? is_suspended
        {
            get;
            set;
        }

        [SqlColumn("suspend_reason", 14), SqlTypeFacets("tinyint", true)]
        public byte? suspend_reason
        {
            get;
            set;
        }

        [SqlColumn("suspend_reason_desc", 15), SqlTypeFacets("nvarchar", true, 120)]
        public string suspend_reason_desc
        {
            get;
            set;
        }

        [SqlColumn("recovery_lsn", 16), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? recovery_lsn
        {
            get;
            set;
        }

        [SqlColumn("truncation_lsn", 17), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? truncation_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_sent_lsn", 18), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_sent_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_sent_time", 19), SqlTypeFacets("datetime", true)]
        public DateTime? last_sent_time
        {
            get;
            set;
        }

        [SqlColumn("last_received_lsn", 20), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_received_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_received_time", 21), SqlTypeFacets("datetime", true)]
        public DateTime? last_received_time
        {
            get;
            set;
        }

        [SqlColumn("last_hardened_lsn", 22), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_hardened_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_hardened_time", 23), SqlTypeFacets("datetime", true)]
        public DateTime? last_hardened_time
        {
            get;
            set;
        }

        [SqlColumn("last_redone_lsn", 24), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_redone_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_redone_time", 25), SqlTypeFacets("datetime", true)]
        public DateTime? last_redone_time
        {
            get;
            set;
        }

        [SqlColumn("log_send_queue_size", 26), SqlTypeFacets("bigint", true)]
        public long? log_send_queue_size
        {
            get;
            set;
        }

        [SqlColumn("log_send_rate", 27), SqlTypeFacets("bigint", true)]
        public long? log_send_rate
        {
            get;
            set;
        }

        [SqlColumn("redo_queue_size", 28), SqlTypeFacets("bigint", true)]
        public long? redo_queue_size
        {
            get;
            set;
        }

        [SqlColumn("redo_rate", 29), SqlTypeFacets("bigint", true)]
        public long? redo_rate
        {
            get;
            set;
        }

        [SqlColumn("filestream_send_rate", 30), SqlTypeFacets("bigint", true)]
        public long? filestream_send_rate
        {
            get;
            set;
        }

        [SqlColumn("end_of_log_lsn", 31), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? end_of_log_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_lsn", 32), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_commit_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_time", 33), SqlTypeFacets("datetime", true)]
        public DateTime? last_commit_time
        {
            get;
            set;
        }

        [SqlColumn("low_water_mark_for_ghosts", 34), SqlTypeFacets("bigint", true)]
        public long? low_water_mark_for_ghosts
        {
            get;
            set;
        }

        public dm_hadr_database_replica_states()
        {
        }

        public dm_hadr_database_replica_states(object[] items)
        {
            database_id = (int)items[0];
            group_id = (Guid)items[1];
            replica_id = (Guid)items[2];
            group_database_id = (Guid)items[3];
            is_local = (bool?)items[4];
            is_primary_replica = (bool?)items[5];
            synchronization_state = (byte?)items[6];
            synchronization_state_desc = (string)items[7];
            is_commit_participant = (bool?)items[8];
            synchronization_health = (byte?)items[9];
            synchronization_health_desc = (string)items[10];
            database_state = (byte?)items[11];
            database_state_desc = (string)items[12];
            is_suspended = (bool?)items[13];
            suspend_reason = (byte?)items[14];
            suspend_reason_desc = (string)items[15];
            recovery_lsn = (decimal?)items[16];
            truncation_lsn = (decimal?)items[17];
            last_sent_lsn = (decimal?)items[18];
            last_sent_time = (DateTime?)items[19];
            last_received_lsn = (decimal?)items[20];
            last_received_time = (DateTime?)items[21];
            last_hardened_lsn = (decimal?)items[22];
            last_hardened_time = (DateTime?)items[23];
            last_redone_lsn = (decimal?)items[24];
            last_redone_time = (DateTime?)items[25];
            log_send_queue_size = (long?)items[26];
            log_send_rate = (long?)items[27];
            redo_queue_size = (long?)items[28];
            redo_rate = (long?)items[29];
            filestream_send_rate = (long?)items[30];
            end_of_log_lsn = (decimal?)items[31];
            last_commit_lsn = (decimal?)items[32];
            last_commit_time = (DateTime?)items[33];
            low_water_mark_for_ghosts = (long?)items[34];
        }

        public dm_hadr_database_replica_states(int database_id, Guid group_id, Guid replica_id, Guid group_database_id, bool? is_local, bool? is_primary_replica, byte? synchronization_state, string synchronization_state_desc, bool? is_commit_participant, byte? synchronization_health, string synchronization_health_desc, byte? database_state, string database_state_desc, bool? is_suspended, byte? suspend_reason, string suspend_reason_desc, decimal? recovery_lsn, decimal? truncation_lsn, decimal? last_sent_lsn, DateTime? last_sent_time, decimal? last_received_lsn, DateTime? last_received_time, decimal? last_hardened_lsn, DateTime? last_hardened_time, decimal? last_redone_lsn, DateTime? last_redone_time, long? log_send_queue_size, long? log_send_rate, long? redo_queue_size, long? redo_rate, long? filestream_send_rate, decimal? end_of_log_lsn, decimal? last_commit_lsn, DateTime? last_commit_time, long? low_water_mark_for_ghosts)
        {
            this.database_id = database_id;
            this.group_id = group_id;
            this.replica_id = replica_id;
            this.group_database_id = group_database_id;
            this.is_local = is_local;
            this.is_primary_replica = is_primary_replica;
            this.synchronization_state = synchronization_state;
            this.synchronization_state_desc = synchronization_state_desc;
            this.is_commit_participant = is_commit_participant;
            this.synchronization_health = synchronization_health;
            this.synchronization_health_desc = synchronization_health_desc;
            this.database_state = database_state;
            this.database_state_desc = database_state_desc;
            this.is_suspended = is_suspended;
            this.suspend_reason = suspend_reason;
            this.suspend_reason_desc = suspend_reason_desc;
            this.recovery_lsn = recovery_lsn;
            this.truncation_lsn = truncation_lsn;
            this.last_sent_lsn = last_sent_lsn;
            this.last_sent_time = last_sent_time;
            this.last_received_lsn = last_received_lsn;
            this.last_received_time = last_received_time;
            this.last_hardened_lsn = last_hardened_lsn;
            this.last_hardened_time = last_hardened_time;
            this.last_redone_lsn = last_redone_lsn;
            this.last_redone_time = last_redone_time;
            this.log_send_queue_size = log_send_queue_size;
            this.log_send_rate = log_send_rate;
            this.redo_queue_size = redo_queue_size;
            this.redo_rate = redo_rate;
            this.filestream_send_rate = filestream_send_rate;
            this.end_of_log_lsn = end_of_log_lsn;
            this.last_commit_lsn = last_commit_lsn;
            this.last_commit_time = last_commit_time;
            this.low_water_mark_for_ghosts = low_water_mark_for_ghosts;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, group_id, replica_id, group_database_id, is_local, is_primary_replica, synchronization_state, synchronization_state_desc, is_commit_participant, synchronization_health, synchronization_health_desc, database_state, database_state_desc, is_suspended, suspend_reason, suspend_reason_desc, recovery_lsn, truncation_lsn, last_sent_lsn, last_sent_time, last_received_lsn, last_received_time, last_hardened_lsn, last_hardened_time, last_redone_lsn, last_redone_time, log_send_queue_size, log_send_rate, redo_queue_size, redo_rate, filestream_send_rate, end_of_log_lsn, last_commit_lsn, last_commit_time, low_water_mark_for_ghosts };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            group_id = (Guid)items[1];
            replica_id = (Guid)items[2];
            group_database_id = (Guid)items[3];
            is_local = (bool?)items[4];
            is_primary_replica = (bool?)items[5];
            synchronization_state = (byte?)items[6];
            synchronization_state_desc = (string)items[7];
            is_commit_participant = (bool?)items[8];
            synchronization_health = (byte?)items[9];
            synchronization_health_desc = (string)items[10];
            database_state = (byte?)items[11];
            database_state_desc = (string)items[12];
            is_suspended = (bool?)items[13];
            suspend_reason = (byte?)items[14];
            suspend_reason_desc = (string)items[15];
            recovery_lsn = (decimal?)items[16];
            truncation_lsn = (decimal?)items[17];
            last_sent_lsn = (decimal?)items[18];
            last_sent_time = (DateTime?)items[19];
            last_received_lsn = (decimal?)items[20];
            last_received_time = (DateTime?)items[21];
            last_hardened_lsn = (decimal?)items[22];
            last_hardened_time = (DateTime?)items[23];
            last_redone_lsn = (decimal?)items[24];
            last_redone_time = (DateTime?)items[25];
            log_send_queue_size = (long?)items[26];
            log_send_rate = (long?)items[27];
            redo_queue_size = (long?)items[28];
            redo_rate = (long?)items[29];
            filestream_send_rate = (long?)items[30];
            end_of_log_lsn = (decimal?)items[31];
            last_commit_lsn = (decimal?)items[32];
            last_commit_time = (DateTime?)items[33];
            low_water_mark_for_ghosts = (long?)items[34];
        }
    }

    [SqlView("sys", "dm_resource_governor_workload_groups")]
    public partial class dm_resource_governor_workload_groups : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("int", false)]
        public int group_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 2), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("statistics_start_time", 3), SqlTypeFacets("datetime", false)]
        public DateTime statistics_start_time
        {
            get;
            set;
        }

        [SqlColumn("total_request_count", 4), SqlTypeFacets("bigint", false)]
        public long total_request_count
        {
            get;
            set;
        }

        [SqlColumn("total_queued_request_count", 5), SqlTypeFacets("bigint", false)]
        public long total_queued_request_count
        {
            get;
            set;
        }

        [SqlColumn("active_request_count", 6), SqlTypeFacets("int", false)]
        public int active_request_count
        {
            get;
            set;
        }

        [SqlColumn("queued_request_count", 7), SqlTypeFacets("int", false)]
        public int queued_request_count
        {
            get;
            set;
        }

        [SqlColumn("total_cpu_limit_violation_count", 8), SqlTypeFacets("bigint", false)]
        public long total_cpu_limit_violation_count
        {
            get;
            set;
        }

        [SqlColumn("total_cpu_usage_ms", 9), SqlTypeFacets("bigint", false)]
        public long total_cpu_usage_ms
        {
            get;
            set;
        }

        [SqlColumn("max_request_cpu_time_ms", 10), SqlTypeFacets("bigint", false)]
        public long max_request_cpu_time_ms
        {
            get;
            set;
        }

        [SqlColumn("blocked_task_count", 11), SqlTypeFacets("int", false)]
        public int blocked_task_count
        {
            get;
            set;
        }

        [SqlColumn("total_lock_wait_count", 12), SqlTypeFacets("bigint", false)]
        public long total_lock_wait_count
        {
            get;
            set;
        }

        [SqlColumn("total_lock_wait_time_ms", 13), SqlTypeFacets("bigint", false)]
        public long total_lock_wait_time_ms
        {
            get;
            set;
        }

        [SqlColumn("total_query_optimization_count", 14), SqlTypeFacets("bigint", false)]
        public long total_query_optimization_count
        {
            get;
            set;
        }

        [SqlColumn("total_suboptimal_plan_generation_count", 15), SqlTypeFacets("bigint", false)]
        public long total_suboptimal_plan_generation_count
        {
            get;
            set;
        }

        [SqlColumn("total_reduced_memgrant_count", 16), SqlTypeFacets("bigint", false)]
        public long total_reduced_memgrant_count
        {
            get;
            set;
        }

        [SqlColumn("max_request_grant_memory_kb", 17), SqlTypeFacets("bigint", false)]
        public long max_request_grant_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("active_parallel_thread_count", 18), SqlTypeFacets("bigint", false)]
        public long active_parallel_thread_count
        {
            get;
            set;
        }

        [SqlColumn("importance", 19), SqlTypeFacets("nvarchar", false, 512)]
        public string importance
        {
            get;
            set;
        }

        [SqlColumn("request_max_memory_grant_percent", 20), SqlTypeFacets("int", false)]
        public int request_max_memory_grant_percent
        {
            get;
            set;
        }

        [SqlColumn("request_max_cpu_time_sec", 21), SqlTypeFacets("int", false)]
        public int request_max_cpu_time_sec
        {
            get;
            set;
        }

        [SqlColumn("request_memory_grant_timeout_sec", 22), SqlTypeFacets("int", false)]
        public int request_memory_grant_timeout_sec
        {
            get;
            set;
        }

        [SqlColumn("group_max_requests", 23), SqlTypeFacets("int", false)]
        public int group_max_requests
        {
            get;
            set;
        }

        [SqlColumn("max_dop", 24), SqlTypeFacets("int", false)]
        public int max_dop
        {
            get;
            set;
        }

        [SqlColumn("effective_max_dop", 25), SqlTypeFacets("int", false)]
        public int effective_max_dop
        {
            get;
            set;
        }

        public dm_resource_governor_workload_groups()
        {
        }

        public dm_resource_governor_workload_groups(object[] items)
        {
            group_id = (int)items[0];
            name = (string)items[1];
            pool_id = (int)items[2];
            statistics_start_time = (DateTime)items[3];
            total_request_count = (long)items[4];
            total_queued_request_count = (long)items[5];
            active_request_count = (int)items[6];
            queued_request_count = (int)items[7];
            total_cpu_limit_violation_count = (long)items[8];
            total_cpu_usage_ms = (long)items[9];
            max_request_cpu_time_ms = (long)items[10];
            blocked_task_count = (int)items[11];
            total_lock_wait_count = (long)items[12];
            total_lock_wait_time_ms = (long)items[13];
            total_query_optimization_count = (long)items[14];
            total_suboptimal_plan_generation_count = (long)items[15];
            total_reduced_memgrant_count = (long)items[16];
            max_request_grant_memory_kb = (long)items[17];
            active_parallel_thread_count = (long)items[18];
            importance = (string)items[19];
            request_max_memory_grant_percent = (int)items[20];
            request_max_cpu_time_sec = (int)items[21];
            request_memory_grant_timeout_sec = (int)items[22];
            group_max_requests = (int)items[23];
            max_dop = (int)items[24];
            effective_max_dop = (int)items[25];
        }

        public dm_resource_governor_workload_groups(int group_id, string name, int pool_id, DateTime statistics_start_time, long total_request_count, long total_queued_request_count, int active_request_count, int queued_request_count, long total_cpu_limit_violation_count, long total_cpu_usage_ms, long max_request_cpu_time_ms, int blocked_task_count, long total_lock_wait_count, long total_lock_wait_time_ms, long total_query_optimization_count, long total_suboptimal_plan_generation_count, long total_reduced_memgrant_count, long max_request_grant_memory_kb, long active_parallel_thread_count, string importance, int request_max_memory_grant_percent, int request_max_cpu_time_sec, int request_memory_grant_timeout_sec, int group_max_requests, int max_dop, int effective_max_dop)
        {
            this.group_id = group_id;
            this.name = name;
            this.pool_id = pool_id;
            this.statistics_start_time = statistics_start_time;
            this.total_request_count = total_request_count;
            this.total_queued_request_count = total_queued_request_count;
            this.active_request_count = active_request_count;
            this.queued_request_count = queued_request_count;
            this.total_cpu_limit_violation_count = total_cpu_limit_violation_count;
            this.total_cpu_usage_ms = total_cpu_usage_ms;
            this.max_request_cpu_time_ms = max_request_cpu_time_ms;
            this.blocked_task_count = blocked_task_count;
            this.total_lock_wait_count = total_lock_wait_count;
            this.total_lock_wait_time_ms = total_lock_wait_time_ms;
            this.total_query_optimization_count = total_query_optimization_count;
            this.total_suboptimal_plan_generation_count = total_suboptimal_plan_generation_count;
            this.total_reduced_memgrant_count = total_reduced_memgrant_count;
            this.max_request_grant_memory_kb = max_request_grant_memory_kb;
            this.active_parallel_thread_count = active_parallel_thread_count;
            this.importance = importance;
            this.request_max_memory_grant_percent = request_max_memory_grant_percent;
            this.request_max_cpu_time_sec = request_max_cpu_time_sec;
            this.request_memory_grant_timeout_sec = request_memory_grant_timeout_sec;
            this.group_max_requests = group_max_requests;
            this.max_dop = max_dop;
            this.effective_max_dop = effective_max_dop;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, name, pool_id, statistics_start_time, total_request_count, total_queued_request_count, active_request_count, queued_request_count, total_cpu_limit_violation_count, total_cpu_usage_ms, max_request_cpu_time_ms, blocked_task_count, total_lock_wait_count, total_lock_wait_time_ms, total_query_optimization_count, total_suboptimal_plan_generation_count, total_reduced_memgrant_count, max_request_grant_memory_kb, active_parallel_thread_count, importance, request_max_memory_grant_percent, request_max_cpu_time_sec, request_memory_grant_timeout_sec, group_max_requests, max_dop, effective_max_dop };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (int)items[0];
            name = (string)items[1];
            pool_id = (int)items[2];
            statistics_start_time = (DateTime)items[3];
            total_request_count = (long)items[4];
            total_queued_request_count = (long)items[5];
            active_request_count = (int)items[6];
            queued_request_count = (int)items[7];
            total_cpu_limit_violation_count = (long)items[8];
            total_cpu_usage_ms = (long)items[9];
            max_request_cpu_time_ms = (long)items[10];
            blocked_task_count = (int)items[11];
            total_lock_wait_count = (long)items[12];
            total_lock_wait_time_ms = (long)items[13];
            total_query_optimization_count = (long)items[14];
            total_suboptimal_plan_generation_count = (long)items[15];
            total_reduced_memgrant_count = (long)items[16];
            max_request_grant_memory_kb = (long)items[17];
            active_parallel_thread_count = (long)items[18];
            importance = (string)items[19];
            request_max_memory_grant_percent = (int)items[20];
            request_max_cpu_time_sec = (int)items[21];
            request_memory_grant_timeout_sec = (int)items[22];
            group_max_requests = (int)items[23];
            max_dop = (int)items[24];
            effective_max_dop = (int)items[25];
        }
    }

    [SqlView("sys", "dm_db_xtp_merge_requests")]
    public partial class dm_db_xtp_merge_requests : SqlViewProxy
    {
        [SqlColumn("request_state", 0), SqlTypeFacets("smallint", false)]
        public short request_state
        {
            get;
            set;
        }

        [SqlColumn("request_state_desc", 1), SqlTypeFacets("nvarchar", false, 40)]
        public string request_state_desc
        {
            get;
            set;
        }

        [SqlColumn("destination_file_id", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid destination_file_id
        {
            get;
            set;
        }

        [SqlColumn("lower_bound_tsn", 3), SqlTypeFacets("bigint", false)]
        public long lower_bound_tsn
        {
            get;
            set;
        }

        [SqlColumn("upper_bound_tsn", 4), SqlTypeFacets("bigint", false)]
        public long upper_bound_tsn
        {
            get;
            set;
        }

        [SqlColumn("collection_tsn", 5), SqlTypeFacets("bigint", false)]
        public long collection_tsn
        {
            get;
            set;
        }

        [SqlColumn("checkpoint_tsn", 6), SqlTypeFacets("bigint", false)]
        public long checkpoint_tsn
        {
            get;
            set;
        }

        [SqlColumn("source0_file_id", 7), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source0_file_id
        {
            get;
            set;
        }

        [SqlColumn("source1_file_id", 8), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source1_file_id
        {
            get;
            set;
        }

        [SqlColumn("source2_file_id", 9), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source2_file_id
        {
            get;
            set;
        }

        [SqlColumn("source3_file_id", 10), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source3_file_id
        {
            get;
            set;
        }

        [SqlColumn("source4_file_id", 11), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source4_file_id
        {
            get;
            set;
        }

        [SqlColumn("source5_file_id", 12), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source5_file_id
        {
            get;
            set;
        }

        [SqlColumn("source6_file_id", 13), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source6_file_id
        {
            get;
            set;
        }

        [SqlColumn("source7_file_id", 14), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source7_file_id
        {
            get;
            set;
        }

        [SqlColumn("source8_file_id", 15), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source8_file_id
        {
            get;
            set;
        }

        [SqlColumn("source9_file_id", 16), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source9_file_id
        {
            get;
            set;
        }

        [SqlColumn("source10_file_id", 17), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source10_file_id
        {
            get;
            set;
        }

        [SqlColumn("source11_file_id", 18), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source11_file_id
        {
            get;
            set;
        }

        [SqlColumn("source12_file_id", 19), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source12_file_id
        {
            get;
            set;
        }

        [SqlColumn("source13_file_id", 20), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source13_file_id
        {
            get;
            set;
        }

        [SqlColumn("source14_file_id", 21), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source14_file_id
        {
            get;
            set;
        }

        [SqlColumn("source15_file_id", 22), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? source15_file_id
        {
            get;
            set;
        }

        public dm_db_xtp_merge_requests()
        {
        }

        public dm_db_xtp_merge_requests(object[] items)
        {
            request_state = (short)items[0];
            request_state_desc = (string)items[1];
            destination_file_id = (Guid)items[2];
            lower_bound_tsn = (long)items[3];
            upper_bound_tsn = (long)items[4];
            collection_tsn = (long)items[5];
            checkpoint_tsn = (long)items[6];
            source0_file_id = (Guid?)items[7];
            source1_file_id = (Guid?)items[8];
            source2_file_id = (Guid?)items[9];
            source3_file_id = (Guid?)items[10];
            source4_file_id = (Guid?)items[11];
            source5_file_id = (Guid?)items[12];
            source6_file_id = (Guid?)items[13];
            source7_file_id = (Guid?)items[14];
            source8_file_id = (Guid?)items[15];
            source9_file_id = (Guid?)items[16];
            source10_file_id = (Guid?)items[17];
            source11_file_id = (Guid?)items[18];
            source12_file_id = (Guid?)items[19];
            source13_file_id = (Guid?)items[20];
            source14_file_id = (Guid?)items[21];
            source15_file_id = (Guid?)items[22];
        }

        public dm_db_xtp_merge_requests(short request_state, string request_state_desc, Guid destination_file_id, long lower_bound_tsn, long upper_bound_tsn, long collection_tsn, long checkpoint_tsn, Guid? source0_file_id, Guid? source1_file_id, Guid? source2_file_id, Guid? source3_file_id, Guid? source4_file_id, Guid? source5_file_id, Guid? source6_file_id, Guid? source7_file_id, Guid? source8_file_id, Guid? source9_file_id, Guid? source10_file_id, Guid? source11_file_id, Guid? source12_file_id, Guid? source13_file_id, Guid? source14_file_id, Guid? source15_file_id)
        {
            this.request_state = request_state;
            this.request_state_desc = request_state_desc;
            this.destination_file_id = destination_file_id;
            this.lower_bound_tsn = lower_bound_tsn;
            this.upper_bound_tsn = upper_bound_tsn;
            this.collection_tsn = collection_tsn;
            this.checkpoint_tsn = checkpoint_tsn;
            this.source0_file_id = source0_file_id;
            this.source1_file_id = source1_file_id;
            this.source2_file_id = source2_file_id;
            this.source3_file_id = source3_file_id;
            this.source4_file_id = source4_file_id;
            this.source5_file_id = source5_file_id;
            this.source6_file_id = source6_file_id;
            this.source7_file_id = source7_file_id;
            this.source8_file_id = source8_file_id;
            this.source9_file_id = source9_file_id;
            this.source10_file_id = source10_file_id;
            this.source11_file_id = source11_file_id;
            this.source12_file_id = source12_file_id;
            this.source13_file_id = source13_file_id;
            this.source14_file_id = source14_file_id;
            this.source15_file_id = source15_file_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { request_state, request_state_desc, destination_file_id, lower_bound_tsn, upper_bound_tsn, collection_tsn, checkpoint_tsn, source0_file_id, source1_file_id, source2_file_id, source3_file_id, source4_file_id, source5_file_id, source6_file_id, source7_file_id, source8_file_id, source9_file_id, source10_file_id, source11_file_id, source12_file_id, source13_file_id, source14_file_id, source15_file_id };
        }

        public override void SetItemArray(object[] items)
        {
            request_state = (short)items[0];
            request_state_desc = (string)items[1];
            destination_file_id = (Guid)items[2];
            lower_bound_tsn = (long)items[3];
            upper_bound_tsn = (long)items[4];
            collection_tsn = (long)items[5];
            checkpoint_tsn = (long)items[6];
            source0_file_id = (Guid?)items[7];
            source1_file_id = (Guid?)items[8];
            source2_file_id = (Guid?)items[9];
            source3_file_id = (Guid?)items[10];
            source4_file_id = (Guid?)items[11];
            source5_file_id = (Guid?)items[12];
            source6_file_id = (Guid?)items[13];
            source7_file_id = (Guid?)items[14];
            source8_file_id = (Guid?)items[15];
            source9_file_id = (Guid?)items[16];
            source10_file_id = (Guid?)items[17];
            source11_file_id = (Guid?)items[18];
            source12_file_id = (Guid?)items[19];
            source13_file_id = (Guid?)items[20];
            source14_file_id = (Guid?)items[21];
            source15_file_id = (Guid?)items[22];
        }
    }

    [SqlView("sys", "dm_io_backup_tapes")]
    public partial class dm_io_backup_tapes : SqlViewProxy
    {
        [SqlColumn("physical_device_name", 0), SqlTypeFacets("nvarchar", false, 520)]
        public string physical_device_name
        {
            get;
            set;
        }

        [SqlColumn("logical_device_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string logical_device_name
        {
            get;
            set;
        }

        [SqlColumn("status", 2), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("status_desc", 3), SqlTypeFacets("nvarchar", false, 520)]
        public string status_desc
        {
            get;
            set;
        }

        [SqlColumn("mount_request_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? mount_request_time
        {
            get;
            set;
        }

        [SqlColumn("mount_expiration_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? mount_expiration_time
        {
            get;
            set;
        }

        [SqlColumn("database_name", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("spid", 7), SqlTypeFacets("int", true)]
        public int? spid
        {
            get;
            set;
        }

        [SqlColumn("command", 8), SqlTypeFacets("int", true)]
        public int? command
        {
            get;
            set;
        }

        [SqlColumn("command_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string command_desc
        {
            get;
            set;
        }

        [SqlColumn("media_family_id", 10), SqlTypeFacets("int", true)]
        public int? media_family_id
        {
            get;
            set;
        }

        [SqlColumn("media_set_name", 11), SqlTypeFacets("nvarchar", true, 256)]
        public string media_set_name
        {
            get;
            set;
        }

        [SqlColumn("media_set_guid", 12), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? media_set_guid
        {
            get;
            set;
        }

        [SqlColumn("media_sequence_number", 13), SqlTypeFacets("int", true)]
        public int? media_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("tape_operation", 14), SqlTypeFacets("int", true)]
        public int? tape_operation
        {
            get;
            set;
        }

        [SqlColumn("tape_operation_desc", 15), SqlTypeFacets("nvarchar", true, 120)]
        public string tape_operation_desc
        {
            get;
            set;
        }

        [SqlColumn("mount_request_type", 16), SqlTypeFacets("int", true)]
        public int? mount_request_type
        {
            get;
            set;
        }

        [SqlColumn("mount_request_type_desc", 17), SqlTypeFacets("nvarchar", true, 120)]
        public string mount_request_type_desc
        {
            get;
            set;
        }

        public dm_io_backup_tapes()
        {
        }

        public dm_io_backup_tapes(object[] items)
        {
            physical_device_name = (string)items[0];
            logical_device_name = (string)items[1];
            status = (int)items[2];
            status_desc = (string)items[3];
            mount_request_time = (DateTime?)items[4];
            mount_expiration_time = (DateTime?)items[5];
            database_name = (string)items[6];
            spid = (int?)items[7];
            command = (int?)items[8];
            command_desc = (string)items[9];
            media_family_id = (int?)items[10];
            media_set_name = (string)items[11];
            media_set_guid = (Guid?)items[12];
            media_sequence_number = (int?)items[13];
            tape_operation = (int?)items[14];
            tape_operation_desc = (string)items[15];
            mount_request_type = (int?)items[16];
            mount_request_type_desc = (string)items[17];
        }

        public dm_io_backup_tapes(string physical_device_name, string logical_device_name, int status, string status_desc, DateTime? mount_request_time, DateTime? mount_expiration_time, string database_name, int? spid, int? command, string command_desc, int? media_family_id, string media_set_name, Guid? media_set_guid, int? media_sequence_number, int? tape_operation, string tape_operation_desc, int? mount_request_type, string mount_request_type_desc)
        {
            this.physical_device_name = physical_device_name;
            this.logical_device_name = logical_device_name;
            this.status = status;
            this.status_desc = status_desc;
            this.mount_request_time = mount_request_time;
            this.mount_expiration_time = mount_expiration_time;
            this.database_name = database_name;
            this.spid = spid;
            this.command = command;
            this.command_desc = command_desc;
            this.media_family_id = media_family_id;
            this.media_set_name = media_set_name;
            this.media_set_guid = media_set_guid;
            this.media_sequence_number = media_sequence_number;
            this.tape_operation = tape_operation;
            this.tape_operation_desc = tape_operation_desc;
            this.mount_request_type = mount_request_type;
            this.mount_request_type_desc = mount_request_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { physical_device_name, logical_device_name, status, status_desc, mount_request_time, mount_expiration_time, database_name, spid, command, command_desc, media_family_id, media_set_name, media_set_guid, media_sequence_number, tape_operation, tape_operation_desc, mount_request_type, mount_request_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            physical_device_name = (string)items[0];
            logical_device_name = (string)items[1];
            status = (int)items[2];
            status_desc = (string)items[3];
            mount_request_time = (DateTime?)items[4];
            mount_expiration_time = (DateTime?)items[5];
            database_name = (string)items[6];
            spid = (int?)items[7];
            command = (int?)items[8];
            command_desc = (string)items[9];
            media_family_id = (int?)items[10];
            media_set_name = (string)items[11];
            media_set_guid = (Guid?)items[12];
            media_sequence_number = (int?)items[13];
            tape_operation = (int?)items[14];
            tape_operation_desc = (string)items[15];
            mount_request_type = (int?)items[16];
            mount_request_type_desc = (string)items[17];
        }
    }

    [SqlView("sys", "dm_os_latch_stats")]
    public partial class dm_os_latch_stats : SqlViewProxy
    {
        [SqlColumn("latch_class", 0), SqlTypeFacets("nvarchar", false, 120)]
        public string latch_class
        {
            get;
            set;
        }

        [SqlColumn("waiting_requests_count", 1), SqlTypeFacets("bigint", true)]
        public long? waiting_requests_count
        {
            get;
            set;
        }

        [SqlColumn("wait_time_ms", 2), SqlTypeFacets("bigint", true)]
        public long? wait_time_ms
        {
            get;
            set;
        }

        [SqlColumn("max_wait_time_ms", 3), SqlTypeFacets("bigint", true)]
        public long? max_wait_time_ms
        {
            get;
            set;
        }

        public dm_os_latch_stats()
        {
        }

        public dm_os_latch_stats(object[] items)
        {
            latch_class = (string)items[0];
            waiting_requests_count = (long?)items[1];
            wait_time_ms = (long?)items[2];
            max_wait_time_ms = (long?)items[3];
        }

        public dm_os_latch_stats(string latch_class, long? waiting_requests_count, long? wait_time_ms, long? max_wait_time_ms)
        {
            this.latch_class = latch_class;
            this.waiting_requests_count = waiting_requests_count;
            this.wait_time_ms = wait_time_ms;
            this.max_wait_time_ms = max_wait_time_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { latch_class, waiting_requests_count, wait_time_ms, max_wait_time_ms };
        }

        public override void SetItemArray(object[] items)
        {
            latch_class = (string)items[0];
            waiting_requests_count = (long?)items[1];
            wait_time_ms = (long?)items[2];
            max_wait_time_ms = (long?)items[3];
        }
    }

    [SqlView("sys", "fulltext_languages")]
    public partial class fulltext_languages : SqlViewProxy
    {
        [SqlColumn("lcid", 0), SqlTypeFacets("int", false)]
        public int lcid
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 256)]
        public string name
        {
            get;
            set;
        }

        public fulltext_languages()
        {
        }

        public fulltext_languages(object[] items)
        {
            lcid = (int)items[0];
            name = (string)items[1];
        }

        public fulltext_languages(int lcid, string name)
        {
            this.lcid = lcid;
            this.name = name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { lcid, name };
        }

        public override void SetItemArray(object[] items)
        {
            lcid = (int)items[0];
            name = (string)items[1];
        }
    }

    [SqlView("sys", "dm_os_memory_pools")]
    public partial class dm_os_memory_pools : SqlViewProxy
    {
        [SqlColumn("memory_pool_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_pool_address
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 1), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("name", 3), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("max_free_entries_count", 4), SqlTypeFacets("bigint", false)]
        public long max_free_entries_count
        {
            get;
            set;
        }

        [SqlColumn("free_entries_count", 5), SqlTypeFacets("bigint", false)]
        public long free_entries_count
        {
            get;
            set;
        }

        [SqlColumn("removed_in_all_rounds_count", 6), SqlTypeFacets("bigint", false)]
        public long removed_in_all_rounds_count
        {
            get;
            set;
        }

        public dm_os_memory_pools()
        {
        }

        public dm_os_memory_pools(object[] items)
        {
            memory_pool_address = (Byte[])items[0];
            pool_id = (int)items[1];
            type = (string)items[2];
            name = (string)items[3];
            max_free_entries_count = (long)items[4];
            free_entries_count = (long)items[5];
            removed_in_all_rounds_count = (long)items[6];
        }

        public dm_os_memory_pools(Byte[] memory_pool_address, int pool_id, string type, string name, long max_free_entries_count, long free_entries_count, long removed_in_all_rounds_count)
        {
            this.memory_pool_address = memory_pool_address;
            this.pool_id = pool_id;
            this.type = type;
            this.name = name;
            this.max_free_entries_count = max_free_entries_count;
            this.free_entries_count = free_entries_count;
            this.removed_in_all_rounds_count = removed_in_all_rounds_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_pool_address, pool_id, type, name, max_free_entries_count, free_entries_count, removed_in_all_rounds_count };
        }

        public override void SetItemArray(object[] items)
        {
            memory_pool_address = (Byte[])items[0];
            pool_id = (int)items[1];
            type = (string)items[2];
            name = (string)items[3];
            max_free_entries_count = (long)items[4];
            free_entries_count = (long)items[5];
            removed_in_all_rounds_count = (long)items[6];
        }
    }

    [SqlView("sys", "dm_exec_trigger_stats")]
    public partial class dm_exec_trigger_stats : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 4), SqlTypeFacets("varbinary", false, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 5), SqlTypeFacets("varbinary", false, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("cached_time", 6), SqlTypeFacets("datetime", true)]
        public DateTime? cached_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 7), SqlTypeFacets("datetime", true)]
        public DateTime? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("execution_count", 8), SqlTypeFacets("bigint", false)]
        public long execution_count
        {
            get;
            set;
        }

        [SqlColumn("total_worker_time", 9), SqlTypeFacets("bigint", false)]
        public long total_worker_time
        {
            get;
            set;
        }

        [SqlColumn("last_worker_time", 10), SqlTypeFacets("bigint", false)]
        public long last_worker_time
        {
            get;
            set;
        }

        [SqlColumn("min_worker_time", 11), SqlTypeFacets("bigint", false)]
        public long min_worker_time
        {
            get;
            set;
        }

        [SqlColumn("max_worker_time", 12), SqlTypeFacets("bigint", false)]
        public long max_worker_time
        {
            get;
            set;
        }

        [SqlColumn("total_physical_reads", 13), SqlTypeFacets("bigint", false)]
        public long total_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_physical_reads", 14), SqlTypeFacets("bigint", false)]
        public long last_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_physical_reads", 15), SqlTypeFacets("bigint", false)]
        public long min_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_physical_reads", 16), SqlTypeFacets("bigint", false)]
        public long max_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_logical_writes", 17), SqlTypeFacets("bigint", false)]
        public long total_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("last_logical_writes", 18), SqlTypeFacets("bigint", false)]
        public long last_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("min_logical_writes", 19), SqlTypeFacets("bigint", false)]
        public long min_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("max_logical_writes", 20), SqlTypeFacets("bigint", false)]
        public long max_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("total_logical_reads", 21), SqlTypeFacets("bigint", false)]
        public long total_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_logical_reads", 22), SqlTypeFacets("bigint", false)]
        public long last_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_logical_reads", 23), SqlTypeFacets("bigint", false)]
        public long min_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_logical_reads", 24), SqlTypeFacets("bigint", false)]
        public long max_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_elapsed_time", 25), SqlTypeFacets("bigint", false)]
        public long total_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("last_elapsed_time", 26), SqlTypeFacets("bigint", false)]
        public long last_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("min_elapsed_time", 27), SqlTypeFacets("bigint", false)]
        public long min_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("max_elapsed_time", 28), SqlTypeFacets("bigint", false)]
        public long max_elapsed_time
        {
            get;
            set;
        }

        public dm_exec_trigger_stats()
        {
        }

        public dm_exec_trigger_stats(object[] items)
        {
            database_id = (int)items[0];
            object_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            sql_handle = (Byte[])items[4];
            plan_handle = (Byte[])items[5];
            cached_time = (DateTime?)items[6];
            last_execution_time = (DateTime?)items[7];
            execution_count = (long)items[8];
            total_worker_time = (long)items[9];
            last_worker_time = (long)items[10];
            min_worker_time = (long)items[11];
            max_worker_time = (long)items[12];
            total_physical_reads = (long)items[13];
            last_physical_reads = (long)items[14];
            min_physical_reads = (long)items[15];
            max_physical_reads = (long)items[16];
            total_logical_writes = (long)items[17];
            last_logical_writes = (long)items[18];
            min_logical_writes = (long)items[19];
            max_logical_writes = (long)items[20];
            total_logical_reads = (long)items[21];
            last_logical_reads = (long)items[22];
            min_logical_reads = (long)items[23];
            max_logical_reads = (long)items[24];
            total_elapsed_time = (long)items[25];
            last_elapsed_time = (long)items[26];
            min_elapsed_time = (long)items[27];
            max_elapsed_time = (long)items[28];
        }

        public dm_exec_trigger_stats(int database_id, int object_id, string type, string type_desc, Byte[] sql_handle, Byte[] plan_handle, DateTime? cached_time, DateTime? last_execution_time, long execution_count, long total_worker_time, long last_worker_time, long min_worker_time, long max_worker_time, long total_physical_reads, long last_physical_reads, long min_physical_reads, long max_physical_reads, long total_logical_writes, long last_logical_writes, long min_logical_writes, long max_logical_writes, long total_logical_reads, long last_logical_reads, long min_logical_reads, long max_logical_reads, long total_elapsed_time, long last_elapsed_time, long min_elapsed_time, long max_elapsed_time)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.type = type;
            this.type_desc = type_desc;
            this.sql_handle = sql_handle;
            this.plan_handle = plan_handle;
            this.cached_time = cached_time;
            this.last_execution_time = last_execution_time;
            this.execution_count = execution_count;
            this.total_worker_time = total_worker_time;
            this.last_worker_time = last_worker_time;
            this.min_worker_time = min_worker_time;
            this.max_worker_time = max_worker_time;
            this.total_physical_reads = total_physical_reads;
            this.last_physical_reads = last_physical_reads;
            this.min_physical_reads = min_physical_reads;
            this.max_physical_reads = max_physical_reads;
            this.total_logical_writes = total_logical_writes;
            this.last_logical_writes = last_logical_writes;
            this.min_logical_writes = min_logical_writes;
            this.max_logical_writes = max_logical_writes;
            this.total_logical_reads = total_logical_reads;
            this.last_logical_reads = last_logical_reads;
            this.min_logical_reads = min_logical_reads;
            this.max_logical_reads = max_logical_reads;
            this.total_elapsed_time = total_elapsed_time;
            this.last_elapsed_time = last_elapsed_time;
            this.min_elapsed_time = min_elapsed_time;
            this.max_elapsed_time = max_elapsed_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, type, type_desc, sql_handle, plan_handle, cached_time, last_execution_time, execution_count, total_worker_time, last_worker_time, min_worker_time, max_worker_time, total_physical_reads, last_physical_reads, min_physical_reads, max_physical_reads, total_logical_writes, last_logical_writes, min_logical_writes, max_logical_writes, total_logical_reads, last_logical_reads, min_logical_reads, max_logical_reads, total_elapsed_time, last_elapsed_time, min_elapsed_time, max_elapsed_time };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            object_id = (int)items[1];
            type = (string)items[2];
            type_desc = (string)items[3];
            sql_handle = (Byte[])items[4];
            plan_handle = (Byte[])items[5];
            cached_time = (DateTime?)items[6];
            last_execution_time = (DateTime?)items[7];
            execution_count = (long)items[8];
            total_worker_time = (long)items[9];
            last_worker_time = (long)items[10];
            min_worker_time = (long)items[11];
            max_worker_time = (long)items[12];
            total_physical_reads = (long)items[13];
            last_physical_reads = (long)items[14];
            min_physical_reads = (long)items[15];
            max_physical_reads = (long)items[16];
            total_logical_writes = (long)items[17];
            last_logical_writes = (long)items[18];
            min_logical_writes = (long)items[19];
            max_logical_writes = (long)items[20];
            total_logical_reads = (long)items[21];
            last_logical_reads = (long)items[22];
            min_logical_reads = (long)items[23];
            max_logical_reads = (long)items[24];
            total_elapsed_time = (long)items[25];
            last_elapsed_time = (long)items[26];
            min_elapsed_time = (long)items[27];
            max_elapsed_time = (long)items[28];
        }
    }

    [SqlView("sys", "dm_db_xtp_gc_cycle_stats")]
    public partial class dm_db_xtp_gc_cycle_stats : SqlViewProxy
    {
        [SqlColumn("cycle_id", 0), SqlTypeFacets("bigint", false)]
        public long cycle_id
        {
            get;
            set;
        }

        [SqlColumn("ticks_at_cycle_start", 1), SqlTypeFacets("bigint", false)]
        public long ticks_at_cycle_start
        {
            get;
            set;
        }

        [SqlColumn("ticks_at_cycle_end", 2), SqlTypeFacets("bigint", false)]
        public long ticks_at_cycle_end
        {
            get;
            set;
        }

        [SqlColumn("base_generation", 3), SqlTypeFacets("bigint", false)]
        public long base_generation
        {
            get;
            set;
        }

        [SqlColumn("xacts_copied_to_local", 4), SqlTypeFacets("bigint", false)]
        public long xacts_copied_to_local
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_0", 5), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_0
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_1", 6), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_1
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_2", 7), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_2
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_3", 8), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_3
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_4", 9), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_4
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_5", 10), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_5
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_6", 11), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_6
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_7", 12), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_7
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_8", 13), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_8
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_9", 14), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_9
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_10", 15), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_10
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_11", 16), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_11
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_12", 17), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_12
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_13", 18), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_13
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_14", 19), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_14
        {
            get;
            set;
        }

        [SqlColumn("xacts_in_gen_15", 20), SqlTypeFacets("bigint", false)]
        public long xacts_in_gen_15
        {
            get;
            set;
        }

        public dm_db_xtp_gc_cycle_stats()
        {
        }

        public dm_db_xtp_gc_cycle_stats(object[] items)
        {
            cycle_id = (long)items[0];
            ticks_at_cycle_start = (long)items[1];
            ticks_at_cycle_end = (long)items[2];
            base_generation = (long)items[3];
            xacts_copied_to_local = (long)items[4];
            xacts_in_gen_0 = (long)items[5];
            xacts_in_gen_1 = (long)items[6];
            xacts_in_gen_2 = (long)items[7];
            xacts_in_gen_3 = (long)items[8];
            xacts_in_gen_4 = (long)items[9];
            xacts_in_gen_5 = (long)items[10];
            xacts_in_gen_6 = (long)items[11];
            xacts_in_gen_7 = (long)items[12];
            xacts_in_gen_8 = (long)items[13];
            xacts_in_gen_9 = (long)items[14];
            xacts_in_gen_10 = (long)items[15];
            xacts_in_gen_11 = (long)items[16];
            xacts_in_gen_12 = (long)items[17];
            xacts_in_gen_13 = (long)items[18];
            xacts_in_gen_14 = (long)items[19];
            xacts_in_gen_15 = (long)items[20];
        }

        public dm_db_xtp_gc_cycle_stats(long cycle_id, long ticks_at_cycle_start, long ticks_at_cycle_end, long base_generation, long xacts_copied_to_local, long xacts_in_gen_0, long xacts_in_gen_1, long xacts_in_gen_2, long xacts_in_gen_3, long xacts_in_gen_4, long xacts_in_gen_5, long xacts_in_gen_6, long xacts_in_gen_7, long xacts_in_gen_8, long xacts_in_gen_9, long xacts_in_gen_10, long xacts_in_gen_11, long xacts_in_gen_12, long xacts_in_gen_13, long xacts_in_gen_14, long xacts_in_gen_15)
        {
            this.cycle_id = cycle_id;
            this.ticks_at_cycle_start = ticks_at_cycle_start;
            this.ticks_at_cycle_end = ticks_at_cycle_end;
            this.base_generation = base_generation;
            this.xacts_copied_to_local = xacts_copied_to_local;
            this.xacts_in_gen_0 = xacts_in_gen_0;
            this.xacts_in_gen_1 = xacts_in_gen_1;
            this.xacts_in_gen_2 = xacts_in_gen_2;
            this.xacts_in_gen_3 = xacts_in_gen_3;
            this.xacts_in_gen_4 = xacts_in_gen_4;
            this.xacts_in_gen_5 = xacts_in_gen_5;
            this.xacts_in_gen_6 = xacts_in_gen_6;
            this.xacts_in_gen_7 = xacts_in_gen_7;
            this.xacts_in_gen_8 = xacts_in_gen_8;
            this.xacts_in_gen_9 = xacts_in_gen_9;
            this.xacts_in_gen_10 = xacts_in_gen_10;
            this.xacts_in_gen_11 = xacts_in_gen_11;
            this.xacts_in_gen_12 = xacts_in_gen_12;
            this.xacts_in_gen_13 = xacts_in_gen_13;
            this.xacts_in_gen_14 = xacts_in_gen_14;
            this.xacts_in_gen_15 = xacts_in_gen_15;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cycle_id, ticks_at_cycle_start, ticks_at_cycle_end, base_generation, xacts_copied_to_local, xacts_in_gen_0, xacts_in_gen_1, xacts_in_gen_2, xacts_in_gen_3, xacts_in_gen_4, xacts_in_gen_5, xacts_in_gen_6, xacts_in_gen_7, xacts_in_gen_8, xacts_in_gen_9, xacts_in_gen_10, xacts_in_gen_11, xacts_in_gen_12, xacts_in_gen_13, xacts_in_gen_14, xacts_in_gen_15 };
        }

        public override void SetItemArray(object[] items)
        {
            cycle_id = (long)items[0];
            ticks_at_cycle_start = (long)items[1];
            ticks_at_cycle_end = (long)items[2];
            base_generation = (long)items[3];
            xacts_copied_to_local = (long)items[4];
            xacts_in_gen_0 = (long)items[5];
            xacts_in_gen_1 = (long)items[6];
            xacts_in_gen_2 = (long)items[7];
            xacts_in_gen_3 = (long)items[8];
            xacts_in_gen_4 = (long)items[9];
            xacts_in_gen_5 = (long)items[10];
            xacts_in_gen_6 = (long)items[11];
            xacts_in_gen_7 = (long)items[12];
            xacts_in_gen_8 = (long)items[13];
            xacts_in_gen_9 = (long)items[14];
            xacts_in_gen_10 = (long)items[15];
            xacts_in_gen_11 = (long)items[16];
            xacts_in_gen_12 = (long)items[17];
            xacts_in_gen_13 = (long)items[18];
            xacts_in_gen_14 = (long)items[19];
            xacts_in_gen_15 = (long)items[20];
        }
    }

    [SqlView("sys", "dm_clr_appdomains")]
    public partial class dm_clr_appdomains : SqlViewProxy
    {
        [SqlColumn("appdomain_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("appdomain_id", 1), SqlTypeFacets("int", true)]
        public int? appdomain_id
        {
            get;
            set;
        }

        [SqlColumn("appdomain_name", 2), SqlTypeFacets("nvarchar", true, 772)]
        public string appdomain_name
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 3), SqlTypeFacets("datetime", true)]
        public DateTime? creation_time
        {
            get;
            set;
        }

        [SqlColumn("db_id", 4), SqlTypeFacets("int", true)]
        public int? db_id
        {
            get;
            set;
        }

        [SqlColumn("user_id", 5), SqlTypeFacets("int", true)]
        public int? user_id
        {
            get;
            set;
        }

        [SqlColumn("state", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("strong_refcount", 7), SqlTypeFacets("int", true)]
        public int? strong_refcount
        {
            get;
            set;
        }

        [SqlColumn("weak_refcount", 8), SqlTypeFacets("int", true)]
        public int? weak_refcount
        {
            get;
            set;
        }

        [SqlColumn("cost", 9), SqlTypeFacets("int", true)]
        public int? cost
        {
            get;
            set;
        }

        [SqlColumn("value", 10), SqlTypeFacets("int", true)]
        public int? value
        {
            get;
            set;
        }

        [SqlColumn("compatibility_level", 11), SqlTypeFacets("int", true)]
        public int? compatibility_level
        {
            get;
            set;
        }

        [SqlColumn("total_processor_time_ms", 12), SqlTypeFacets("bigint", true)]
        public long? total_processor_time_ms
        {
            get;
            set;
        }

        [SqlColumn("total_allocated_memory_kb", 13), SqlTypeFacets("bigint", true)]
        public long? total_allocated_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("survived_memory_kb", 14), SqlTypeFacets("bigint", true)]
        public long? survived_memory_kb
        {
            get;
            set;
        }

        public dm_clr_appdomains()
        {
        }

        public dm_clr_appdomains(object[] items)
        {
            appdomain_address = (Byte[])items[0];
            appdomain_id = (int?)items[1];
            appdomain_name = (string)items[2];
            creation_time = (DateTime?)items[3];
            db_id = (int?)items[4];
            user_id = (int?)items[5];
            state = (string)items[6];
            strong_refcount = (int?)items[7];
            weak_refcount = (int?)items[8];
            cost = (int?)items[9];
            value = (int?)items[10];
            compatibility_level = (int?)items[11];
            total_processor_time_ms = (long?)items[12];
            total_allocated_memory_kb = (long?)items[13];
            survived_memory_kb = (long?)items[14];
        }

        public dm_clr_appdomains(Byte[] appdomain_address, int? appdomain_id, string appdomain_name, DateTime? creation_time, int? db_id, int? user_id, string state, int? strong_refcount, int? weak_refcount, int? cost, int? value, int? compatibility_level, long? total_processor_time_ms, long? total_allocated_memory_kb, long? survived_memory_kb)
        {
            this.appdomain_address = appdomain_address;
            this.appdomain_id = appdomain_id;
            this.appdomain_name = appdomain_name;
            this.creation_time = creation_time;
            this.db_id = db_id;
            this.user_id = user_id;
            this.state = state;
            this.strong_refcount = strong_refcount;
            this.weak_refcount = weak_refcount;
            this.cost = cost;
            this.value = value;
            this.compatibility_level = compatibility_level;
            this.total_processor_time_ms = total_processor_time_ms;
            this.total_allocated_memory_kb = total_allocated_memory_kb;
            this.survived_memory_kb = survived_memory_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { appdomain_address, appdomain_id, appdomain_name, creation_time, db_id, user_id, state, strong_refcount, weak_refcount, cost, value, compatibility_level, total_processor_time_ms, total_allocated_memory_kb, survived_memory_kb };
        }

        public override void SetItemArray(object[] items)
        {
            appdomain_address = (Byte[])items[0];
            appdomain_id = (int?)items[1];
            appdomain_name = (string)items[2];
            creation_time = (DateTime?)items[3];
            db_id = (int?)items[4];
            user_id = (int?)items[5];
            state = (string)items[6];
            strong_refcount = (int?)items[7];
            weak_refcount = (int?)items[8];
            cost = (int?)items[9];
            value = (int?)items[10];
            compatibility_level = (int?)items[11];
            total_processor_time_ms = (long?)items[12];
            total_allocated_memory_kb = (long?)items[13];
            survived_memory_kb = (long?)items[14];
        }
    }

    [SqlView("sys", "trace_categories")]
    public partial class trace_categories : SqlViewProxy
    {
        [SqlColumn("category_id", 0), SqlTypeFacets("smallint", false)]
        public short category_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("tinyint", false)]
        public byte type
        {
            get;
            set;
        }

        public trace_categories()
        {
        }

        public trace_categories(object[] items)
        {
            category_id = (short)items[0];
            name = (string)items[1];
            type = (byte)items[2];
        }

        public trace_categories(short category_id, string name, byte type)
        {
            this.category_id = category_id;
            this.name = name;
            this.type = type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { category_id, name, type };
        }

        public override void SetItemArray(object[] items)
        {
            category_id = (short)items[0];
            name = (string)items[1];
            type = (byte)items[2];
        }
    }

    [SqlView("sys", "dm_tran_session_transactions")]
    public partial class dm_tran_session_transactions : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", false)]
        public int session_id
        {
            get;
            set;
        }

        [SqlColumn("transaction_id", 1), SqlTypeFacets("bigint", false)]
        public long transaction_id
        {
            get;
            set;
        }

        [SqlColumn("transaction_descriptor", 2), SqlTypeFacets("binary", false, 8)]
        public Byte[] transaction_descriptor
        {
            get;
            set;
        }

        [SqlColumn("enlist_count", 3), SqlTypeFacets("int", false)]
        public int enlist_count
        {
            get;
            set;
        }

        [SqlColumn("is_user_transaction", 4), SqlTypeFacets("bit", false)]
        public bool is_user_transaction
        {
            get;
            set;
        }

        [SqlColumn("is_local", 5), SqlTypeFacets("bit", false)]
        public bool is_local
        {
            get;
            set;
        }

        [SqlColumn("is_enlisted", 6), SqlTypeFacets("bit", false)]
        public bool is_enlisted
        {
            get;
            set;
        }

        [SqlColumn("is_bound", 7), SqlTypeFacets("bit", false)]
        public bool is_bound
        {
            get;
            set;
        }

        [SqlColumn("open_transaction_count", 8), SqlTypeFacets("int", false)]
        public int open_transaction_count
        {
            get;
            set;
        }

        public dm_tran_session_transactions()
        {
        }

        public dm_tran_session_transactions(object[] items)
        {
            session_id = (int)items[0];
            transaction_id = (long)items[1];
            transaction_descriptor = (Byte[])items[2];
            enlist_count = (int)items[3];
            is_user_transaction = (bool)items[4];
            is_local = (bool)items[5];
            is_enlisted = (bool)items[6];
            is_bound = (bool)items[7];
            open_transaction_count = (int)items[8];
        }

        public dm_tran_session_transactions(int session_id, long transaction_id, Byte[] transaction_descriptor, int enlist_count, bool is_user_transaction, bool is_local, bool is_enlisted, bool is_bound, int open_transaction_count)
        {
            this.session_id = session_id;
            this.transaction_id = transaction_id;
            this.transaction_descriptor = transaction_descriptor;
            this.enlist_count = enlist_count;
            this.is_user_transaction = is_user_transaction;
            this.is_local = is_local;
            this.is_enlisted = is_enlisted;
            this.is_bound = is_bound;
            this.open_transaction_count = open_transaction_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, transaction_id, transaction_descriptor, enlist_count, is_user_transaction, is_local, is_enlisted, is_bound, open_transaction_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int)items[0];
            transaction_id = (long)items[1];
            transaction_descriptor = (Byte[])items[2];
            enlist_count = (int)items[3];
            is_user_transaction = (bool)items[4];
            is_local = (bool)items[5];
            is_enlisted = (bool)items[6];
            is_bound = (bool)items[7];
            open_transaction_count = (int)items[8];
        }
    }

    [SqlView("sys", "dm_os_memory_cache_counters")]
    public partial class dm_os_memory_cache_counters : SqlViewProxy
    {
        [SqlColumn("cache_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("pages_kb", 3), SqlTypeFacets("bigint", false)]
        public long pages_kb
        {
            get;
            set;
        }

        [SqlColumn("pages_in_use_kb", 4), SqlTypeFacets("bigint", true)]
        public long? pages_in_use_kb
        {
            get;
            set;
        }

        [SqlColumn("entries_count", 5), SqlTypeFacets("bigint", false)]
        public long entries_count
        {
            get;
            set;
        }

        [SqlColumn("entries_in_use_count", 6), SqlTypeFacets("bigint", false)]
        public long entries_in_use_count
        {
            get;
            set;
        }

        public dm_os_memory_cache_counters()
        {
        }

        public dm_os_memory_cache_counters(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            pages_kb = (long)items[3];
            pages_in_use_kb = (long?)items[4];
            entries_count = (long)items[5];
            entries_in_use_count = (long)items[6];
        }

        public dm_os_memory_cache_counters(Byte[] cache_address, string name, string type, long pages_kb, long? pages_in_use_kb, long entries_count, long entries_in_use_count)
        {
            this.cache_address = cache_address;
            this.name = name;
            this.type = type;
            this.pages_kb = pages_kb;
            this.pages_in_use_kb = pages_in_use_kb;
            this.entries_count = entries_count;
            this.entries_in_use_count = entries_in_use_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cache_address, name, type, pages_kb, pages_in_use_kb, entries_count, entries_in_use_count };
        }

        public override void SetItemArray(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            pages_kb = (long)items[3];
            pages_in_use_kb = (long?)items[4];
            entries_count = (long)items[5];
            entries_in_use_count = (long)items[6];
        }
    }

    [SqlView("sys", "dm_broker_queue_monitors")]
    public partial class dm_broker_queue_monitors : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("queue_id", 1), SqlTypeFacets("int", true)]
        public int? queue_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("nvarchar", true, 64)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("last_empty_rowset_time", 3), SqlTypeFacets("datetime", true)]
        public DateTime? last_empty_rowset_time
        {
            get;
            set;
        }

        [SqlColumn("last_activated_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? last_activated_time
        {
            get;
            set;
        }

        [SqlColumn("tasks_waiting", 5), SqlTypeFacets("int", true)]
        public int? tasks_waiting
        {
            get;
            set;
        }

        public dm_broker_queue_monitors()
        {
        }

        public dm_broker_queue_monitors(object[] items)
        {
            database_id = (int?)items[0];
            queue_id = (int?)items[1];
            state = (string)items[2];
            last_empty_rowset_time = (DateTime?)items[3];
            last_activated_time = (DateTime?)items[4];
            tasks_waiting = (int?)items[5];
        }

        public dm_broker_queue_monitors(int? database_id, int? queue_id, string state, DateTime? last_empty_rowset_time, DateTime? last_activated_time, int? tasks_waiting)
        {
            this.database_id = database_id;
            this.queue_id = queue_id;
            this.state = state;
            this.last_empty_rowset_time = last_empty_rowset_time;
            this.last_activated_time = last_activated_time;
            this.tasks_waiting = tasks_waiting;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, queue_id, state, last_empty_rowset_time, last_activated_time, tasks_waiting };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            queue_id = (int?)items[1];
            state = (string)items[2];
            last_empty_rowset_time = (DateTime?)items[3];
            last_activated_time = (DateTime?)items[4];
            tasks_waiting = (int?)items[5];
        }
    }

    [SqlView("sys", "availability_group_listeners")]
    public partial class availability_group_listeners : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("listener_id", 1), SqlTypeFacets("nvarchar", true, 72)]
        public string listener_id
        {
            get;
            set;
        }

        [SqlColumn("dns_name", 2), SqlTypeFacets("nvarchar", true, 126)]
        public string dns_name
        {
            get;
            set;
        }

        [SqlColumn("port", 3), SqlTypeFacets("int", true)]
        public int? port
        {
            get;
            set;
        }

        [SqlColumn("is_conformant", 4), SqlTypeFacets("bit", false)]
        public bool is_conformant
        {
            get;
            set;
        }

        [SqlColumn("ip_configuration_string_from_cluster", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string ip_configuration_string_from_cluster
        {
            get;
            set;
        }

        public availability_group_listeners()
        {
        }

        public availability_group_listeners(object[] items)
        {
            group_id = (Guid)items[0];
            listener_id = (string)items[1];
            dns_name = (string)items[2];
            port = (int?)items[3];
            is_conformant = (bool)items[4];
            ip_configuration_string_from_cluster = (string)items[5];
        }

        public availability_group_listeners(Guid group_id, string listener_id, string dns_name, int? port, bool is_conformant, string ip_configuration_string_from_cluster)
        {
            this.group_id = group_id;
            this.listener_id = listener_id;
            this.dns_name = dns_name;
            this.port = port;
            this.is_conformant = is_conformant;
            this.ip_configuration_string_from_cluster = ip_configuration_string_from_cluster;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, listener_id, dns_name, port, is_conformant, ip_configuration_string_from_cluster };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (Guid)items[0];
            listener_id = (string)items[1];
            dns_name = (string)items[2];
            port = (int?)items[3];
            is_conformant = (bool)items[4];
            ip_configuration_string_from_cluster = (string)items[5];
        }
    }

    [SqlView("sys", "dm_broker_activated_tasks")]
    public partial class dm_broker_activated_tasks : SqlViewProxy
    {
        [SqlColumn("spid", 0), SqlTypeFacets("int", true)]
        public int? spid
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("queue_id", 2), SqlTypeFacets("int", true)]
        public int? queue_id
        {
            get;
            set;
        }

        [SqlColumn("procedure_name", 3), SqlTypeFacets("nvarchar", true, 650)]
        public string procedure_name
        {
            get;
            set;
        }

        [SqlColumn("execute_as", 4), SqlTypeFacets("int", true)]
        public int? execute_as
        {
            get;
            set;
        }

        public dm_broker_activated_tasks()
        {
        }

        public dm_broker_activated_tasks(object[] items)
        {
            spid = (int?)items[0];
            database_id = (short?)items[1];
            queue_id = (int?)items[2];
            procedure_name = (string)items[3];
            execute_as = (int?)items[4];
        }

        public dm_broker_activated_tasks(int? spid, short? database_id, int? queue_id, string procedure_name, int? execute_as)
        {
            this.spid = spid;
            this.database_id = database_id;
            this.queue_id = queue_id;
            this.procedure_name = procedure_name;
            this.execute_as = execute_as;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spid, database_id, queue_id, procedure_name, execute_as };
        }

        public override void SetItemArray(object[] items)
        {
            spid = (int?)items[0];
            database_id = (short?)items[1];
            queue_id = (int?)items[2];
            procedure_name = (string)items[3];
            execute_as = (int?)items[4];
        }
    }

    [SqlView("sys", "dm_db_file_space_usage")]
    public partial class dm_db_file_space_usage : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("smallint", true)]
        public short? file_id
        {
            get;
            set;
        }

        [SqlColumn("filegroup_id", 2), SqlTypeFacets("smallint", true)]
        public short? filegroup_id
        {
            get;
            set;
        }

        [SqlColumn("total_page_count", 3), SqlTypeFacets("bigint", true)]
        public long? total_page_count
        {
            get;
            set;
        }

        [SqlColumn("allocated_extent_page_count", 4), SqlTypeFacets("bigint", true)]
        public long? allocated_extent_page_count
        {
            get;
            set;
        }

        [SqlColumn("unallocated_extent_page_count", 5), SqlTypeFacets("bigint", true)]
        public long? unallocated_extent_page_count
        {
            get;
            set;
        }

        [SqlColumn("version_store_reserved_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? version_store_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("user_object_reserved_page_count", 7), SqlTypeFacets("bigint", true)]
        public long? user_object_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_object_reserved_page_count", 8), SqlTypeFacets("bigint", true)]
        public long? internal_object_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("mixed_extent_page_count", 9), SqlTypeFacets("bigint", true)]
        public long? mixed_extent_page_count
        {
            get;
            set;
        }

        public dm_db_file_space_usage()
        {
        }

        public dm_db_file_space_usage(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (short?)items[1];
            filegroup_id = (short?)items[2];
            total_page_count = (long?)items[3];
            allocated_extent_page_count = (long?)items[4];
            unallocated_extent_page_count = (long?)items[5];
            version_store_reserved_page_count = (long?)items[6];
            user_object_reserved_page_count = (long?)items[7];
            internal_object_reserved_page_count = (long?)items[8];
            mixed_extent_page_count = (long?)items[9];
        }

        public dm_db_file_space_usage(int? database_id, short? file_id, short? filegroup_id, long? total_page_count, long? allocated_extent_page_count, long? unallocated_extent_page_count, long? version_store_reserved_page_count, long? user_object_reserved_page_count, long? internal_object_reserved_page_count, long? mixed_extent_page_count)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.filegroup_id = filegroup_id;
            this.total_page_count = total_page_count;
            this.allocated_extent_page_count = allocated_extent_page_count;
            this.unallocated_extent_page_count = unallocated_extent_page_count;
            this.version_store_reserved_page_count = version_store_reserved_page_count;
            this.user_object_reserved_page_count = user_object_reserved_page_count;
            this.internal_object_reserved_page_count = internal_object_reserved_page_count;
            this.mixed_extent_page_count = mixed_extent_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, filegroup_id, total_page_count, allocated_extent_page_count, unallocated_extent_page_count, version_store_reserved_page_count, user_object_reserved_page_count, internal_object_reserved_page_count, mixed_extent_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (short?)items[1];
            filegroup_id = (short?)items[2];
            total_page_count = (long?)items[3];
            allocated_extent_page_count = (long?)items[4];
            unallocated_extent_page_count = (long?)items[5];
            version_store_reserved_page_count = (long?)items[6];
            user_object_reserved_page_count = (long?)items[7];
            internal_object_reserved_page_count = (long?)items[8];
            mixed_extent_page_count = (long?)items[9];
        }
    }

    [SqlView("sys", "dm_tran_active_transactions")]
    public partial class dm_tran_active_transactions : SqlViewProxy
    {
        [SqlColumn("transaction_id", 0), SqlTypeFacets("bigint", false)]
        public long transaction_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 64)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("transaction_begin_time", 2), SqlTypeFacets("datetime", false)]
        public DateTime transaction_begin_time
        {
            get;
            set;
        }

        [SqlColumn("transaction_type", 3), SqlTypeFacets("int", false)]
        public int transaction_type
        {
            get;
            set;
        }

        [SqlColumn("transaction_uow", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? transaction_uow
        {
            get;
            set;
        }

        [SqlColumn("transaction_state", 5), SqlTypeFacets("int", false)]
        public int transaction_state
        {
            get;
            set;
        }

        [SqlColumn("transaction_status", 6), SqlTypeFacets("int", false)]
        public int transaction_status
        {
            get;
            set;
        }

        [SqlColumn("transaction_status2", 7), SqlTypeFacets("int", false)]
        public int transaction_status2
        {
            get;
            set;
        }

        [SqlColumn("dtc_state", 8), SqlTypeFacets("int", false)]
        public int dtc_state
        {
            get;
            set;
        }

        [SqlColumn("dtc_status", 9), SqlTypeFacets("int", false)]
        public int dtc_status
        {
            get;
            set;
        }

        [SqlColumn("dtc_isolation_level", 10), SqlTypeFacets("int", false)]
        public int dtc_isolation_level
        {
            get;
            set;
        }

        [SqlColumn("filestream_transaction_id", 11), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] filestream_transaction_id
        {
            get;
            set;
        }

        public dm_tran_active_transactions()
        {
        }

        public dm_tran_active_transactions(object[] items)
        {
            transaction_id = (long)items[0];
            name = (string)items[1];
            transaction_begin_time = (DateTime)items[2];
            transaction_type = (int)items[3];
            transaction_uow = (Guid?)items[4];
            transaction_state = (int)items[5];
            transaction_status = (int)items[6];
            transaction_status2 = (int)items[7];
            dtc_state = (int)items[8];
            dtc_status = (int)items[9];
            dtc_isolation_level = (int)items[10];
            filestream_transaction_id = (Byte[])items[11];
        }

        public dm_tran_active_transactions(long transaction_id, string name, DateTime transaction_begin_time, int transaction_type, Guid? transaction_uow, int transaction_state, int transaction_status, int transaction_status2, int dtc_state, int dtc_status, int dtc_isolation_level, Byte[] filestream_transaction_id)
        {
            this.transaction_id = transaction_id;
            this.name = name;
            this.transaction_begin_time = transaction_begin_time;
            this.transaction_type = transaction_type;
            this.transaction_uow = transaction_uow;
            this.transaction_state = transaction_state;
            this.transaction_status = transaction_status;
            this.transaction_status2 = transaction_status2;
            this.dtc_state = dtc_state;
            this.dtc_status = dtc_status;
            this.dtc_isolation_level = dtc_isolation_level;
            this.filestream_transaction_id = filestream_transaction_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_id, name, transaction_begin_time, transaction_type, transaction_uow, transaction_state, transaction_status, transaction_status2, dtc_state, dtc_status, dtc_isolation_level, filestream_transaction_id };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_id = (long)items[0];
            name = (string)items[1];
            transaction_begin_time = (DateTime)items[2];
            transaction_type = (int)items[3];
            transaction_uow = (Guid?)items[4];
            transaction_state = (int)items[5];
            transaction_status = (int)items[6];
            transaction_status2 = (int)items[7];
            dtc_state = (int)items[8];
            dtc_status = (int)items[9];
            dtc_isolation_level = (int)items[10];
            filestream_transaction_id = (Byte[])items[11];
        }
    }

    [SqlView("sys", "dm_server_services")]
    public partial class dm_server_services : SqlViewProxy
    {
        [SqlColumn("servicename", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string servicename
        {
            get;
            set;
        }

        [SqlColumn("startup_type", 1), SqlTypeFacets("int", true)]
        public int? startup_type
        {
            get;
            set;
        }

        [SqlColumn("startup_type_desc", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string startup_type_desc
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("status_desc", 4), SqlTypeFacets("nvarchar", false, 512)]
        public string status_desc
        {
            get;
            set;
        }

        [SqlColumn("process_id", 5), SqlTypeFacets("int", true)]
        public int? process_id
        {
            get;
            set;
        }

        [SqlColumn("last_startup_time", 6), SqlTypeFacets("datetimeoffset", true)]
        public DateTimeOffset? last_startup_time
        {
            get;
            set;
        }

        [SqlColumn("service_account", 7), SqlTypeFacets("nvarchar", false, 512)]
        public string service_account
        {
            get;
            set;
        }

        [SqlColumn("filename", 8), SqlTypeFacets("nvarchar", false, 512)]
        public string filename
        {
            get;
            set;
        }

        [SqlColumn("is_clustered", 9), SqlTypeFacets("nvarchar", false, 2)]
        public string is_clustered
        {
            get;
            set;
        }

        [SqlColumn("cluster_nodename", 10), SqlTypeFacets("nvarchar", true, 512)]
        public string cluster_nodename
        {
            get;
            set;
        }

        public dm_server_services()
        {
        }

        public dm_server_services(object[] items)
        {
            servicename = (string)items[0];
            startup_type = (int?)items[1];
            startup_type_desc = (string)items[2];
            status = (int?)items[3];
            status_desc = (string)items[4];
            process_id = (int?)items[5];
            last_startup_time = (DateTimeOffset?)items[6];
            service_account = (string)items[7];
            filename = (string)items[8];
            is_clustered = (string)items[9];
            cluster_nodename = (string)items[10];
        }

        public dm_server_services(string servicename, int? startup_type, string startup_type_desc, int? status, string status_desc, int? process_id, DateTimeOffset? last_startup_time, string service_account, string filename, string is_clustered, string cluster_nodename)
        {
            this.servicename = servicename;
            this.startup_type = startup_type;
            this.startup_type_desc = startup_type_desc;
            this.status = status;
            this.status_desc = status_desc;
            this.process_id = process_id;
            this.last_startup_time = last_startup_time;
            this.service_account = service_account;
            this.filename = filename;
            this.is_clustered = is_clustered;
            this.cluster_nodename = cluster_nodename;
        }

        public override object[] GetItemArray()
        {
            return new object[] { servicename, startup_type, startup_type_desc, status, status_desc, process_id, last_startup_time, service_account, filename, is_clustered, cluster_nodename };
        }

        public override void SetItemArray(object[] items)
        {
            servicename = (string)items[0];
            startup_type = (int?)items[1];
            startup_type_desc = (string)items[2];
            status = (int?)items[3];
            status_desc = (string)items[4];
            process_id = (int?)items[5];
            last_startup_time = (DateTimeOffset?)items[6];
            service_account = (string)items[7];
            filename = (string)items[8];
            is_clustered = (string)items[9];
            cluster_nodename = (string)items[10];
        }
    }

    [SqlView("sys", "dm_tran_active_snapshot_database_transactions")]
    public partial class dm_tran_active_snapshot_database_transactions : SqlViewProxy
    {
        [SqlColumn("transaction_id", 0), SqlTypeFacets("bigint", true)]
        public long? transaction_id
        {
            get;
            set;
        }

        [SqlColumn("transaction_sequence_num", 1), SqlTypeFacets("bigint", true)]
        public long? transaction_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("commit_sequence_num", 2), SqlTypeFacets("bigint", true)]
        public long? commit_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("session_id", 3), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("is_snapshot", 4), SqlTypeFacets("bit", true)]
        public bool? is_snapshot
        {
            get;
            set;
        }

        [SqlColumn("first_snapshot_sequence_num", 5), SqlTypeFacets("bigint", true)]
        public long? first_snapshot_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("max_version_chain_traversed", 6), SqlTypeFacets("int", true)]
        public int? max_version_chain_traversed
        {
            get;
            set;
        }

        [SqlColumn("average_version_chain_traversed", 7), SqlTypeFacets("float", true)]
        public double? average_version_chain_traversed
        {
            get;
            set;
        }

        [SqlColumn("elapsed_time_seconds", 8), SqlTypeFacets("bigint", true)]
        public long? elapsed_time_seconds
        {
            get;
            set;
        }

        public dm_tran_active_snapshot_database_transactions()
        {
        }

        public dm_tran_active_snapshot_database_transactions(object[] items)
        {
            transaction_id = (long?)items[0];
            transaction_sequence_num = (long?)items[1];
            commit_sequence_num = (long?)items[2];
            session_id = (int?)items[3];
            is_snapshot = (bool?)items[4];
            first_snapshot_sequence_num = (long?)items[5];
            max_version_chain_traversed = (int?)items[6];
            average_version_chain_traversed = (double?)items[7];
            elapsed_time_seconds = (long?)items[8];
        }

        public dm_tran_active_snapshot_database_transactions(long? transaction_id, long? transaction_sequence_num, long? commit_sequence_num, int? session_id, bool? is_snapshot, long? first_snapshot_sequence_num, int? max_version_chain_traversed, double? average_version_chain_traversed, long? elapsed_time_seconds)
        {
            this.transaction_id = transaction_id;
            this.transaction_sequence_num = transaction_sequence_num;
            this.commit_sequence_num = commit_sequence_num;
            this.session_id = session_id;
            this.is_snapshot = is_snapshot;
            this.first_snapshot_sequence_num = first_snapshot_sequence_num;
            this.max_version_chain_traversed = max_version_chain_traversed;
            this.average_version_chain_traversed = average_version_chain_traversed;
            this.elapsed_time_seconds = elapsed_time_seconds;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_id, transaction_sequence_num, commit_sequence_num, session_id, is_snapshot, first_snapshot_sequence_num, max_version_chain_traversed, average_version_chain_traversed, elapsed_time_seconds };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_id = (long?)items[0];
            transaction_sequence_num = (long?)items[1];
            commit_sequence_num = (long?)items[2];
            session_id = (int?)items[3];
            is_snapshot = (bool?)items[4];
            first_snapshot_sequence_num = (long?)items[5];
            max_version_chain_traversed = (int?)items[6];
            average_version_chain_traversed = (double?)items[7];
            elapsed_time_seconds = (long?)items[8];
        }
    }

    [SqlView("sys", "dm_os_buffer_descriptors")]
    public partial class dm_os_buffer_descriptors : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", true)]
        public int? file_id
        {
            get;
            set;
        }

        [SqlColumn("page_id", 2), SqlTypeFacets("int", true)]
        public int? page_id
        {
            get;
            set;
        }

        [SqlColumn("page_level", 3), SqlTypeFacets("int", true)]
        public int? page_level
        {
            get;
            set;
        }

        [SqlColumn("allocation_unit_id", 4), SqlTypeFacets("bigint", true)]
        public long? allocation_unit_id
        {
            get;
            set;
        }

        [SqlColumn("page_type", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string page_type
        {
            get;
            set;
        }

        [SqlColumn("row_count", 6), SqlTypeFacets("int", true)]
        public int? row_count
        {
            get;
            set;
        }

        [SqlColumn("free_space_in_bytes", 7), SqlTypeFacets("int", true)]
        public int? free_space_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("is_modified", 8), SqlTypeFacets("bit", true)]
        public bool? is_modified
        {
            get;
            set;
        }

        [SqlColumn("numa_node", 9), SqlTypeFacets("int", true)]
        public int? numa_node
        {
            get;
            set;
        }

        [SqlColumn("read_microsec", 10), SqlTypeFacets("bigint", true)]
        public long? read_microsec
        {
            get;
            set;
        }

        [SqlColumn("is_in_bpool_extension", 11), SqlTypeFacets("bit", true)]
        public bool? is_in_bpool_extension
        {
            get;
            set;
        }

        public dm_os_buffer_descriptors()
        {
        }

        public dm_os_buffer_descriptors(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (int?)items[1];
            page_id = (int?)items[2];
            page_level = (int?)items[3];
            allocation_unit_id = (long?)items[4];
            page_type = (string)items[5];
            row_count = (int?)items[6];
            free_space_in_bytes = (int?)items[7];
            is_modified = (bool?)items[8];
            numa_node = (int?)items[9];
            read_microsec = (long?)items[10];
            is_in_bpool_extension = (bool?)items[11];
        }

        public dm_os_buffer_descriptors(int? database_id, int? file_id, int? page_id, int? page_level, long? allocation_unit_id, string page_type, int? row_count, int? free_space_in_bytes, bool? is_modified, int? numa_node, long? read_microsec, bool? is_in_bpool_extension)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.page_id = page_id;
            this.page_level = page_level;
            this.allocation_unit_id = allocation_unit_id;
            this.page_type = page_type;
            this.row_count = row_count;
            this.free_space_in_bytes = free_space_in_bytes;
            this.is_modified = is_modified;
            this.numa_node = numa_node;
            this.read_microsec = read_microsec;
            this.is_in_bpool_extension = is_in_bpool_extension;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, page_id, page_level, allocation_unit_id, page_type, row_count, free_space_in_bytes, is_modified, numa_node, read_microsec, is_in_bpool_extension };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            file_id = (int?)items[1];
            page_id = (int?)items[2];
            page_level = (int?)items[3];
            allocation_unit_id = (long?)items[4];
            page_type = (string)items[5];
            row_count = (int?)items[6];
            free_space_in_bytes = (int?)items[7];
            is_modified = (bool?)items[8];
            numa_node = (int?)items[9];
            read_microsec = (long?)items[10];
            is_in_bpool_extension = (bool?)items[11];
        }
    }

    [SqlView("sys", "dm_db_index_usage_stats")]
    public partial class dm_db_index_usage_stats : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("user_seeks", 3), SqlTypeFacets("bigint", false)]
        public long user_seeks
        {
            get;
            set;
        }

        [SqlColumn("user_scans", 4), SqlTypeFacets("bigint", false)]
        public long user_scans
        {
            get;
            set;
        }

        [SqlColumn("user_lookups", 5), SqlTypeFacets("bigint", false)]
        public long user_lookups
        {
            get;
            set;
        }

        [SqlColumn("user_updates", 6), SqlTypeFacets("bigint", false)]
        public long user_updates
        {
            get;
            set;
        }

        [SqlColumn("last_user_seek", 7), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_seek
        {
            get;
            set;
        }

        [SqlColumn("last_user_scan", 8), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_scan
        {
            get;
            set;
        }

        [SqlColumn("last_user_lookup", 9), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_lookup
        {
            get;
            set;
        }

        [SqlColumn("last_user_update", 10), SqlTypeFacets("datetime", true)]
        public DateTime? last_user_update
        {
            get;
            set;
        }

        [SqlColumn("system_seeks", 11), SqlTypeFacets("bigint", false)]
        public long system_seeks
        {
            get;
            set;
        }

        [SqlColumn("system_scans", 12), SqlTypeFacets("bigint", false)]
        public long system_scans
        {
            get;
            set;
        }

        [SqlColumn("system_lookups", 13), SqlTypeFacets("bigint", false)]
        public long system_lookups
        {
            get;
            set;
        }

        [SqlColumn("system_updates", 14), SqlTypeFacets("bigint", false)]
        public long system_updates
        {
            get;
            set;
        }

        [SqlColumn("last_system_seek", 15), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_seek
        {
            get;
            set;
        }

        [SqlColumn("last_system_scan", 16), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_scan
        {
            get;
            set;
        }

        [SqlColumn("last_system_lookup", 17), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_lookup
        {
            get;
            set;
        }

        [SqlColumn("last_system_update", 18), SqlTypeFacets("datetime", true)]
        public DateTime? last_system_update
        {
            get;
            set;
        }

        public dm_db_index_usage_stats()
        {
        }

        public dm_db_index_usage_stats(object[] items)
        {
            database_id = (short)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            user_seeks = (long)items[3];
            user_scans = (long)items[4];
            user_lookups = (long)items[5];
            user_updates = (long)items[6];
            last_user_seek = (DateTime?)items[7];
            last_user_scan = (DateTime?)items[8];
            last_user_lookup = (DateTime?)items[9];
            last_user_update = (DateTime?)items[10];
            system_seeks = (long)items[11];
            system_scans = (long)items[12];
            system_lookups = (long)items[13];
            system_updates = (long)items[14];
            last_system_seek = (DateTime?)items[15];
            last_system_scan = (DateTime?)items[16];
            last_system_lookup = (DateTime?)items[17];
            last_system_update = (DateTime?)items[18];
        }

        public dm_db_index_usage_stats(short database_id, int object_id, int index_id, long user_seeks, long user_scans, long user_lookups, long user_updates, DateTime? last_user_seek, DateTime? last_user_scan, DateTime? last_user_lookup, DateTime? last_user_update, long system_seeks, long system_scans, long system_lookups, long system_updates, DateTime? last_system_seek, DateTime? last_system_scan, DateTime? last_system_lookup, DateTime? last_system_update)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.user_seeks = user_seeks;
            this.user_scans = user_scans;
            this.user_lookups = user_lookups;
            this.user_updates = user_updates;
            this.last_user_seek = last_user_seek;
            this.last_user_scan = last_user_scan;
            this.last_user_lookup = last_user_lookup;
            this.last_user_update = last_user_update;
            this.system_seeks = system_seeks;
            this.system_scans = system_scans;
            this.system_lookups = system_lookups;
            this.system_updates = system_updates;
            this.last_system_seek = last_system_seek;
            this.last_system_scan = last_system_scan;
            this.last_system_lookup = last_system_lookup;
            this.last_system_update = last_system_update;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, index_id, user_seeks, user_scans, user_lookups, user_updates, last_user_seek, last_user_scan, last_user_lookup, last_user_update, system_seeks, system_scans, system_lookups, system_updates, last_system_seek, last_system_scan, last_system_lookup, last_system_update };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (short)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            user_seeks = (long)items[3];
            user_scans = (long)items[4];
            user_lookups = (long)items[5];
            user_updates = (long)items[6];
            last_user_seek = (DateTime?)items[7];
            last_user_scan = (DateTime?)items[8];
            last_user_lookup = (DateTime?)items[9];
            last_user_update = (DateTime?)items[10];
            system_seeks = (long)items[11];
            system_scans = (long)items[12];
            system_lookups = (long)items[13];
            system_updates = (long)items[14];
            last_system_seek = (DateTime?)items[15];
            last_system_scan = (DateTime?)items[16];
            last_system_lookup = (DateTime?)items[17];
            last_system_update = (DateTime?)items[18];
        }
    }

    [SqlView("sys", "dm_db_persisted_sku_features")]
    public partial class dm_db_persisted_sku_features : SqlViewProxy
    {
        [SqlColumn("feature_name", 0), SqlTypeFacets("nvarchar", true, 8000)]
        public string feature_name
        {
            get;
            set;
        }

        [SqlColumn("feature_id", 1), SqlTypeFacets("int", false)]
        public int feature_id
        {
            get;
            set;
        }

        public dm_db_persisted_sku_features()
        {
        }

        public dm_db_persisted_sku_features(object[] items)
        {
            feature_name = (string)items[0];
            feature_id = (int)items[1];
        }

        public dm_db_persisted_sku_features(string feature_name, int feature_id)
        {
            this.feature_name = feature_name;
            this.feature_id = feature_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { feature_name, feature_id };
        }

        public override void SetItemArray(object[] items)
        {
            feature_name = (string)items[0];
            feature_id = (int)items[1];
        }
    }

    [SqlView("sys", "dm_os_worker_local_storage")]
    public partial class dm_os_worker_local_storage : SqlViewProxy
    {
        [SqlColumn("worker_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] worker_address
        {
            get;
            set;
        }

        [SqlColumn("comp_exec_ctxt_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] comp_exec_ctxt_address
        {
            get;
            set;
        }

        [SqlColumn("ec_address", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] ec_address
        {
            get;
            set;
        }

        [SqlColumn("broker_address", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] broker_address
        {
            get;
            set;
        }

        [SqlColumn("task_proxy_address", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] task_proxy_address
        {
            get;
            set;
        }

        [SqlColumn("msqlxact_address", 5), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] msqlxact_address
        {
            get;
            set;
        }

        [SqlColumn("sql_prof_address", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] sql_prof_address
        {
            get;
            set;
        }

        [SqlColumn("stack_checker_address", 7), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] stack_checker_address
        {
            get;
            set;
        }

        [SqlColumn("host_task_address", 8), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] host_task_address
        {
            get;
            set;
        }

        [SqlColumn("sni_error_address", 9), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] sni_error_address
        {
            get;
            set;
        }

        [SqlColumn("queryscan_address", 10), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] queryscan_address
        {
            get;
            set;
        }

        [SqlColumn("diag_address", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] diag_address
        {
            get;
            set;
        }

        [SqlColumn("query_driver_address", 12), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] query_driver_address
        {
            get;
            set;
        }

        [SqlColumn("federatedxact_address", 13), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] federatedxact_address
        {
            get;
            set;
        }

        [SqlColumn("filestream_address", 14), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] filestream_address
        {
            get;
            set;
        }

        [SqlColumn("qe_cc_address", 15), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] qe_cc_address
        {
            get;
            set;
        }

        [SqlColumn("xtp_address", 16), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] xtp_address
        {
            get;
            set;
        }

        public dm_os_worker_local_storage()
        {
        }

        public dm_os_worker_local_storage(object[] items)
        {
            worker_address = (Byte[])items[0];
            comp_exec_ctxt_address = (Byte[])items[1];
            ec_address = (Byte[])items[2];
            broker_address = (Byte[])items[3];
            task_proxy_address = (Byte[])items[4];
            msqlxact_address = (Byte[])items[5];
            sql_prof_address = (Byte[])items[6];
            stack_checker_address = (Byte[])items[7];
            host_task_address = (Byte[])items[8];
            sni_error_address = (Byte[])items[9];
            queryscan_address = (Byte[])items[10];
            diag_address = (Byte[])items[11];
            query_driver_address = (Byte[])items[12];
            federatedxact_address = (Byte[])items[13];
            filestream_address = (Byte[])items[14];
            qe_cc_address = (Byte[])items[15];
            xtp_address = (Byte[])items[16];
        }

        public dm_os_worker_local_storage(Byte[] worker_address, Byte[] comp_exec_ctxt_address, Byte[] ec_address, Byte[] broker_address, Byte[] task_proxy_address, Byte[] msqlxact_address, Byte[] sql_prof_address, Byte[] stack_checker_address, Byte[] host_task_address, Byte[] sni_error_address, Byte[] queryscan_address, Byte[] diag_address, Byte[] query_driver_address, Byte[] federatedxact_address, Byte[] filestream_address, Byte[] qe_cc_address, Byte[] xtp_address)
        {
            this.worker_address = worker_address;
            this.comp_exec_ctxt_address = comp_exec_ctxt_address;
            this.ec_address = ec_address;
            this.broker_address = broker_address;
            this.task_proxy_address = task_proxy_address;
            this.msqlxact_address = msqlxact_address;
            this.sql_prof_address = sql_prof_address;
            this.stack_checker_address = stack_checker_address;
            this.host_task_address = host_task_address;
            this.sni_error_address = sni_error_address;
            this.queryscan_address = queryscan_address;
            this.diag_address = diag_address;
            this.query_driver_address = query_driver_address;
            this.federatedxact_address = federatedxact_address;
            this.filestream_address = filestream_address;
            this.qe_cc_address = qe_cc_address;
            this.xtp_address = xtp_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { worker_address, comp_exec_ctxt_address, ec_address, broker_address, task_proxy_address, msqlxact_address, sql_prof_address, stack_checker_address, host_task_address, sni_error_address, queryscan_address, diag_address, query_driver_address, federatedxact_address, filestream_address, qe_cc_address, xtp_address };
        }

        public override void SetItemArray(object[] items)
        {
            worker_address = (Byte[])items[0];
            comp_exec_ctxt_address = (Byte[])items[1];
            ec_address = (Byte[])items[2];
            broker_address = (Byte[])items[3];
            task_proxy_address = (Byte[])items[4];
            msqlxact_address = (Byte[])items[5];
            sql_prof_address = (Byte[])items[6];
            stack_checker_address = (Byte[])items[7];
            host_task_address = (Byte[])items[8];
            sni_error_address = (Byte[])items[9];
            queryscan_address = (Byte[])items[10];
            diag_address = (Byte[])items[11];
            query_driver_address = (Byte[])items[12];
            federatedxact_address = (Byte[])items[13];
            filestream_address = (Byte[])items[14];
            qe_cc_address = (Byte[])items[15];
            xtp_address = (Byte[])items[16];
        }
    }

    [SqlView("sys", "dm_db_xtp_hash_index_stats")]
    public partial class dm_db_xtp_hash_index_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("total_bucket_count", 2), SqlTypeFacets("bigint", false)]
        public long total_bucket_count
        {
            get;
            set;
        }

        [SqlColumn("empty_bucket_count", 3), SqlTypeFacets("bigint", true)]
        public long? empty_bucket_count
        {
            get;
            set;
        }

        [SqlColumn("avg_chain_length", 4), SqlTypeFacets("bigint", false)]
        public long avg_chain_length
        {
            get;
            set;
        }

        [SqlColumn("max_chain_length", 5), SqlTypeFacets("bigint", false)]
        public long max_chain_length
        {
            get;
            set;
        }

        public dm_db_xtp_hash_index_stats()
        {
        }

        public dm_db_xtp_hash_index_stats(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            total_bucket_count = (long)items[2];
            empty_bucket_count = (long?)items[3];
            avg_chain_length = (long)items[4];
            max_chain_length = (long)items[5];
        }

        public dm_db_xtp_hash_index_stats(int object_id, int index_id, long total_bucket_count, long? empty_bucket_count, long avg_chain_length, long max_chain_length)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.total_bucket_count = total_bucket_count;
            this.empty_bucket_count = empty_bucket_count;
            this.avg_chain_length = avg_chain_length;
            this.max_chain_length = max_chain_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, total_bucket_count, empty_bucket_count, avg_chain_length, max_chain_length };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            total_bucket_count = (long)items[2];
            empty_bucket_count = (long?)items[3];
            avg_chain_length = (long)items[4];
            max_chain_length = (long)items[5];
        }
    }

    [SqlView("sys", "dm_clr_tasks")]
    public partial class dm_clr_tasks : SqlViewProxy
    {
        [SqlColumn("task_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("sos_task_address", 1), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] sos_task_address
        {
            get;
            set;
        }

        [SqlColumn("appdomain_address", 2), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] appdomain_address
        {
            get;
            set;
        }

        [SqlColumn("state", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("abort_state", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string abort_state
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("affinity_count", 6), SqlTypeFacets("int", true)]
        public int? affinity_count
        {
            get;
            set;
        }

        [SqlColumn("forced_yield_count", 7), SqlTypeFacets("int", true)]
        public int? forced_yield_count
        {
            get;
            set;
        }

        public dm_clr_tasks()
        {
        }

        public dm_clr_tasks(object[] items)
        {
            task_address = (Byte[])items[0];
            sos_task_address = (Byte[])items[1];
            appdomain_address = (Byte[])items[2];
            state = (string)items[3];
            abort_state = (string)items[4];
            type = (string)items[5];
            affinity_count = (int?)items[6];
            forced_yield_count = (int?)items[7];
        }

        public dm_clr_tasks(Byte[] task_address, Byte[] sos_task_address, Byte[] appdomain_address, string state, string abort_state, string type, int? affinity_count, int? forced_yield_count)
        {
            this.task_address = task_address;
            this.sos_task_address = sos_task_address;
            this.appdomain_address = appdomain_address;
            this.state = state;
            this.abort_state = abort_state;
            this.type = type;
            this.affinity_count = affinity_count;
            this.forced_yield_count = forced_yield_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { task_address, sos_task_address, appdomain_address, state, abort_state, type, affinity_count, forced_yield_count };
        }

        public override void SetItemArray(object[] items)
        {
            task_address = (Byte[])items[0];
            sos_task_address = (Byte[])items[1];
            appdomain_address = (Byte[])items[2];
            state = (string)items[3];
            abort_state = (string)items[4];
            type = (string)items[5];
            affinity_count = (int?)items[6];
            forced_yield_count = (int?)items[7];
        }
    }

    [SqlView("sys", "fulltext_system_stopwords")]
    public partial class fulltext_system_stopwords : SqlViewProxy
    {
        [SqlColumn("stopword", 0), SqlTypeFacets("nvarchar", true, 128)]
        public string stopword
        {
            get;
            set;
        }

        [SqlColumn("language_id", 1), SqlTypeFacets("int", false)]
        public int language_id
        {
            get;
            set;
        }

        public fulltext_system_stopwords()
        {
        }

        public fulltext_system_stopwords(object[] items)
        {
            stopword = (string)items[0];
            language_id = (int)items[1];
        }

        public fulltext_system_stopwords(string stopword, int language_id)
        {
            this.stopword = stopword;
            this.language_id = language_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { stopword, language_id };
        }

        public override void SetItemArray(object[] items)
        {
            stopword = (string)items[0];
            language_id = (int)items[1];
        }
    }

    [SqlView("sys", "trace_columns")]
    public partial class trace_columns : SqlViewProxy
    {
        [SqlColumn("trace_column_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("max_size", 3), SqlTypeFacets("int", true)]
        public int? max_size
        {
            get;
            set;
        }

        [SqlColumn("is_filterable", 4), SqlTypeFacets("bit", false)]
        public bool is_filterable
        {
            get;
            set;
        }

        [SqlColumn("is_repeatable", 5), SqlTypeFacets("bit", false)]
        public bool is_repeatable
        {
            get;
            set;
        }

        [SqlColumn("is_repeated_base", 6), SqlTypeFacets("bit", false)]
        public bool is_repeated_base
        {
            get;
            set;
        }

        public trace_columns()
        {
        }

        public trace_columns(object[] items)
        {
            trace_column_id = (short)items[0];
            name = (string)items[1];
            type_name = (string)items[2];
            max_size = (int?)items[3];
            is_filterable = (bool)items[4];
            is_repeatable = (bool)items[5];
            is_repeated_base = (bool)items[6];
        }

        public trace_columns(short trace_column_id, string name, string type_name, int? max_size, bool is_filterable, bool is_repeatable, bool is_repeated_base)
        {
            this.trace_column_id = trace_column_id;
            this.name = name;
            this.type_name = type_name;
            this.max_size = max_size;
            this.is_filterable = is_filterable;
            this.is_repeatable = is_repeatable;
            this.is_repeated_base = is_repeated_base;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_column_id, name, type_name, max_size, is_filterable, is_repeatable, is_repeated_base };
        }

        public override void SetItemArray(object[] items)
        {
            trace_column_id = (short)items[0];
            name = (string)items[1];
            type_name = (string)items[2];
            max_size = (int?)items[3];
            is_filterable = (bool)items[4];
            is_repeatable = (bool)items[5];
            is_repeated_base = (bool)items[6];
        }
    }

    [SqlView("sys", "dm_fts_semantic_similarity_population")]
    public partial class dm_fts_semantic_similarity_population : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("catalog_id", 1), SqlTypeFacets("int", false)]
        public int catalog_id
        {
            get;
            set;
        }

        [SqlColumn("table_id", 2), SqlTypeFacets("int", false)]
        public int table_id
        {
            get;
            set;
        }

        [SqlColumn("document_count", 3), SqlTypeFacets("bigint", false)]
        public long document_count
        {
            get;
            set;
        }

        [SqlColumn("document_processed_count", 4), SqlTypeFacets("bigint", false)]
        public long document_processed_count
        {
            get;
            set;
        }

        [SqlColumn("completion_type", 5), SqlTypeFacets("int", false)]
        public int completion_type
        {
            get;
            set;
        }

        [SqlColumn("completion_type_description", 6), SqlTypeFacets("nvarchar", true, 128)]
        public string completion_type_description
        {
            get;
            set;
        }

        [SqlColumn("worker_count", 7), SqlTypeFacets("int", false)]
        public int worker_count
        {
            get;
            set;
        }

        [SqlColumn("status", 8), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("status_description", 9), SqlTypeFacets("nvarchar", true, 128)]
        public string status_description
        {
            get;
            set;
        }

        [SqlColumn("start_time", 10), SqlTypeFacets("datetime", false)]
        public DateTime start_time
        {
            get;
            set;
        }

        [SqlColumn("incremental_timestamp", 11), SqlTypeFacets("binary", false, 8)]
        public Byte[] incremental_timestamp
        {
            get;
            set;
        }

        public dm_fts_semantic_similarity_population()
        {
        }

        public dm_fts_semantic_similarity_population(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            document_count = (long)items[3];
            document_processed_count = (long)items[4];
            completion_type = (int)items[5];
            completion_type_description = (string)items[6];
            worker_count = (int)items[7];
            status = (int)items[8];
            status_description = (string)items[9];
            start_time = (DateTime)items[10];
            incremental_timestamp = (Byte[])items[11];
        }

        public dm_fts_semantic_similarity_population(int database_id, int catalog_id, int table_id, long document_count, long document_processed_count, int completion_type, string completion_type_description, int worker_count, int status, string status_description, DateTime start_time, Byte[] incremental_timestamp)
        {
            this.database_id = database_id;
            this.catalog_id = catalog_id;
            this.table_id = table_id;
            this.document_count = document_count;
            this.document_processed_count = document_processed_count;
            this.completion_type = completion_type;
            this.completion_type_description = completion_type_description;
            this.worker_count = worker_count;
            this.status = status;
            this.status_description = status_description;
            this.start_time = start_time;
            this.incremental_timestamp = incremental_timestamp;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, catalog_id, table_id, document_count, document_processed_count, completion_type, completion_type_description, worker_count, status, status_description, start_time, incremental_timestamp };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            document_count = (long)items[3];
            document_processed_count = (long)items[4];
            completion_type = (int)items[5];
            completion_type_description = (string)items[6];
            worker_count = (int)items[7];
            status = (int)items[8];
            status_description = (string)items[9];
            start_time = (DateTime)items[10];
            incremental_timestamp = (Byte[])items[11];
        }
    }

    [SqlView("sys", "dm_exec_query_stats")]
    public partial class dm_exec_query_stats : SqlViewProxy
    {
        [SqlColumn("min_logical_writes", 18), SqlTypeFacets("bigint", false)]
        public long min_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("max_logical_writes", 19), SqlTypeFacets("bigint", false)]
        public long max_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("total_logical_reads", 20), SqlTypeFacets("bigint", false)]
        public long total_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_logical_reads", 21), SqlTypeFacets("bigint", false)]
        public long last_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_logical_reads", 22), SqlTypeFacets("bigint", false)]
        public long min_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_logical_reads", 23), SqlTypeFacets("bigint", false)]
        public long max_logical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_clr_time", 24), SqlTypeFacets("bigint", false)]
        public long total_clr_time
        {
            get;
            set;
        }

        [SqlColumn("last_clr_time", 25), SqlTypeFacets("bigint", false)]
        public long last_clr_time
        {
            get;
            set;
        }

        [SqlColumn("min_clr_time", 26), SqlTypeFacets("bigint", false)]
        public long min_clr_time
        {
            get;
            set;
        }

        [SqlColumn("max_clr_time", 27), SqlTypeFacets("bigint", false)]
        public long max_clr_time
        {
            get;
            set;
        }

        [SqlColumn("total_elapsed_time", 28), SqlTypeFacets("bigint", false)]
        public long total_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("last_elapsed_time", 29), SqlTypeFacets("bigint", false)]
        public long last_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("min_elapsed_time", 30), SqlTypeFacets("bigint", false)]
        public long min_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("max_elapsed_time", 31), SqlTypeFacets("bigint", false)]
        public long max_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("query_hash", 32), SqlTypeFacets("binary", true, 8)]
        public Byte[] query_hash
        {
            get;
            set;
        }

        [SqlColumn("query_plan_hash", 33), SqlTypeFacets("binary", true, 8)]
        public Byte[] query_plan_hash
        {
            get;
            set;
        }

        [SqlColumn("total_rows", 34), SqlTypeFacets("bigint", true)]
        public long? total_rows
        {
            get;
            set;
        }

        [SqlColumn("last_rows", 35), SqlTypeFacets("bigint", true)]
        public long? last_rows
        {
            get;
            set;
        }

        [SqlColumn("min_rows", 36), SqlTypeFacets("bigint", true)]
        public long? min_rows
        {
            get;
            set;
        }

        [SqlColumn("max_rows", 37), SqlTypeFacets("bigint", true)]
        public long? max_rows
        {
            get;
            set;
        }

        [SqlColumn("statement_sql_handle", 38), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] statement_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_context_id", 39), SqlTypeFacets("bigint", true)]
        public long? statement_context_id
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 0), SqlTypeFacets("varbinary", false, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_start_offset", 1), SqlTypeFacets("int", false)]
        public int statement_start_offset
        {
            get;
            set;
        }

        [SqlColumn("statement_end_offset", 2), SqlTypeFacets("int", false)]
        public int statement_end_offset
        {
            get;
            set;
        }

        [SqlColumn("plan_generation_num", 3), SqlTypeFacets("bigint", true)]
        public long? plan_generation_num
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 4), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? creation_time
        {
            get;
            set;
        }

        [SqlColumn("last_execution_time", 6), SqlTypeFacets("datetime", true)]
        public DateTime? last_execution_time
        {
            get;
            set;
        }

        [SqlColumn("execution_count", 7), SqlTypeFacets("bigint", false)]
        public long execution_count
        {
            get;
            set;
        }

        [SqlColumn("total_worker_time", 8), SqlTypeFacets("bigint", false)]
        public long total_worker_time
        {
            get;
            set;
        }

        [SqlColumn("last_worker_time", 9), SqlTypeFacets("bigint", false)]
        public long last_worker_time
        {
            get;
            set;
        }

        [SqlColumn("min_worker_time", 10), SqlTypeFacets("bigint", false)]
        public long min_worker_time
        {
            get;
            set;
        }

        [SqlColumn("max_worker_time", 11), SqlTypeFacets("bigint", false)]
        public long max_worker_time
        {
            get;
            set;
        }

        [SqlColumn("total_physical_reads", 12), SqlTypeFacets("bigint", false)]
        public long total_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("last_physical_reads", 13), SqlTypeFacets("bigint", false)]
        public long last_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("min_physical_reads", 14), SqlTypeFacets("bigint", false)]
        public long min_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("max_physical_reads", 15), SqlTypeFacets("bigint", false)]
        public long max_physical_reads
        {
            get;
            set;
        }

        [SqlColumn("total_logical_writes", 16), SqlTypeFacets("bigint", false)]
        public long total_logical_writes
        {
            get;
            set;
        }

        [SqlColumn("last_logical_writes", 17), SqlTypeFacets("bigint", false)]
        public long last_logical_writes
        {
            get;
            set;
        }

        public dm_exec_query_stats()
        {
        }

        public dm_exec_query_stats(object[] items)
        {
            min_logical_writes = (long)items[0];
            max_logical_writes = (long)items[1];
            total_logical_reads = (long)items[2];
            last_logical_reads = (long)items[3];
            min_logical_reads = (long)items[4];
            max_logical_reads = (long)items[5];
            total_clr_time = (long)items[6];
            last_clr_time = (long)items[7];
            min_clr_time = (long)items[8];
            max_clr_time = (long)items[9];
            total_elapsed_time = (long)items[10];
            last_elapsed_time = (long)items[11];
            min_elapsed_time = (long)items[12];
            max_elapsed_time = (long)items[13];
            query_hash = (Byte[])items[14];
            query_plan_hash = (Byte[])items[15];
            total_rows = (long?)items[16];
            last_rows = (long?)items[17];
            min_rows = (long?)items[18];
            max_rows = (long?)items[19];
            statement_sql_handle = (Byte[])items[20];
            statement_context_id = (long?)items[21];
            sql_handle = (Byte[])items[22];
            statement_start_offset = (int)items[23];
            statement_end_offset = (int)items[24];
            plan_generation_num = (long?)items[25];
            plan_handle = (Byte[])items[26];
            creation_time = (DateTime?)items[27];
            last_execution_time = (DateTime?)items[28];
            execution_count = (long)items[29];
            total_worker_time = (long)items[30];
            last_worker_time = (long)items[31];
            min_worker_time = (long)items[32];
            max_worker_time = (long)items[33];
            total_physical_reads = (long)items[34];
            last_physical_reads = (long)items[35];
            min_physical_reads = (long)items[36];
            max_physical_reads = (long)items[37];
            total_logical_writes = (long)items[38];
            last_logical_writes = (long)items[39];
        }

        public dm_exec_query_stats(long min_logical_writes, long max_logical_writes, long total_logical_reads, long last_logical_reads, long min_logical_reads, long max_logical_reads, long total_clr_time, long last_clr_time, long min_clr_time, long max_clr_time, long total_elapsed_time, long last_elapsed_time, long min_elapsed_time, long max_elapsed_time, Byte[] query_hash, Byte[] query_plan_hash, long? total_rows, long? last_rows, long? min_rows, long? max_rows, Byte[] statement_sql_handle, long? statement_context_id, Byte[] sql_handle, int statement_start_offset, int statement_end_offset, long? plan_generation_num, Byte[] plan_handle, DateTime? creation_time, DateTime? last_execution_time, long execution_count, long total_worker_time, long last_worker_time, long min_worker_time, long max_worker_time, long total_physical_reads, long last_physical_reads, long min_physical_reads, long max_physical_reads, long total_logical_writes, long last_logical_writes)
        {
            this.min_logical_writes = min_logical_writes;
            this.max_logical_writes = max_logical_writes;
            this.total_logical_reads = total_logical_reads;
            this.last_logical_reads = last_logical_reads;
            this.min_logical_reads = min_logical_reads;
            this.max_logical_reads = max_logical_reads;
            this.total_clr_time = total_clr_time;
            this.last_clr_time = last_clr_time;
            this.min_clr_time = min_clr_time;
            this.max_clr_time = max_clr_time;
            this.total_elapsed_time = total_elapsed_time;
            this.last_elapsed_time = last_elapsed_time;
            this.min_elapsed_time = min_elapsed_time;
            this.max_elapsed_time = max_elapsed_time;
            this.query_hash = query_hash;
            this.query_plan_hash = query_plan_hash;
            this.total_rows = total_rows;
            this.last_rows = last_rows;
            this.min_rows = min_rows;
            this.max_rows = max_rows;
            this.statement_sql_handle = statement_sql_handle;
            this.statement_context_id = statement_context_id;
            this.sql_handle = sql_handle;
            this.statement_start_offset = statement_start_offset;
            this.statement_end_offset = statement_end_offset;
            this.plan_generation_num = plan_generation_num;
            this.plan_handle = plan_handle;
            this.creation_time = creation_time;
            this.last_execution_time = last_execution_time;
            this.execution_count = execution_count;
            this.total_worker_time = total_worker_time;
            this.last_worker_time = last_worker_time;
            this.min_worker_time = min_worker_time;
            this.max_worker_time = max_worker_time;
            this.total_physical_reads = total_physical_reads;
            this.last_physical_reads = last_physical_reads;
            this.min_physical_reads = min_physical_reads;
            this.max_physical_reads = max_physical_reads;
            this.total_logical_writes = total_logical_writes;
            this.last_logical_writes = last_logical_writes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { min_logical_writes, max_logical_writes, total_logical_reads, last_logical_reads, min_logical_reads, max_logical_reads, total_clr_time, last_clr_time, min_clr_time, max_clr_time, total_elapsed_time, last_elapsed_time, min_elapsed_time, max_elapsed_time, query_hash, query_plan_hash, total_rows, last_rows, min_rows, max_rows, statement_sql_handle, statement_context_id, sql_handle, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, creation_time, last_execution_time, execution_count, total_worker_time, last_worker_time, min_worker_time, max_worker_time, total_physical_reads, last_physical_reads, min_physical_reads, max_physical_reads, total_logical_writes, last_logical_writes };
        }

        public override void SetItemArray(object[] items)
        {
            min_logical_writes = (long)items[0];
            max_logical_writes = (long)items[1];
            total_logical_reads = (long)items[2];
            last_logical_reads = (long)items[3];
            min_logical_reads = (long)items[4];
            max_logical_reads = (long)items[5];
            total_clr_time = (long)items[6];
            last_clr_time = (long)items[7];
            min_clr_time = (long)items[8];
            max_clr_time = (long)items[9];
            total_elapsed_time = (long)items[10];
            last_elapsed_time = (long)items[11];
            min_elapsed_time = (long)items[12];
            max_elapsed_time = (long)items[13];
            query_hash = (Byte[])items[14];
            query_plan_hash = (Byte[])items[15];
            total_rows = (long?)items[16];
            last_rows = (long?)items[17];
            min_rows = (long?)items[18];
            max_rows = (long?)items[19];
            statement_sql_handle = (Byte[])items[20];
            statement_context_id = (long?)items[21];
            sql_handle = (Byte[])items[22];
            statement_start_offset = (int)items[23];
            statement_end_offset = (int)items[24];
            plan_generation_num = (long?)items[25];
            plan_handle = (Byte[])items[26];
            creation_time = (DateTime?)items[27];
            last_execution_time = (DateTime?)items[28];
            execution_count = (long)items[29];
            total_worker_time = (long)items[30];
            last_worker_time = (long)items[31];
            min_worker_time = (long)items[32];
            max_worker_time = (long)items[33];
            total_physical_reads = (long)items[34];
            last_physical_reads = (long)items[35];
            min_physical_reads = (long)items[36];
            max_physical_reads = (long)items[37];
            total_logical_writes = (long)items[38];
            last_logical_writes = (long)items[39];
        }
    }

    [SqlView("sys", "dm_resource_governor_configuration")]
    public partial class dm_resource_governor_configuration : SqlViewProxy
    {
        [SqlColumn("classifier_function_id", 0), SqlTypeFacets("int", false)]
        public int classifier_function_id
        {
            get;
            set;
        }

        [SqlColumn("is_reconfiguration_pending", 1), SqlTypeFacets("tinyint", false)]
        public byte is_reconfiguration_pending
        {
            get;
            set;
        }

        [SqlColumn("max_outstanding_io_per_volume", 2), SqlTypeFacets("int", false)]
        public int max_outstanding_io_per_volume
        {
            get;
            set;
        }

        public dm_resource_governor_configuration()
        {
        }

        public dm_resource_governor_configuration(object[] items)
        {
            classifier_function_id = (int)items[0];
            is_reconfiguration_pending = (byte)items[1];
            max_outstanding_io_per_volume = (int)items[2];
        }

        public dm_resource_governor_configuration(int classifier_function_id, byte is_reconfiguration_pending, int max_outstanding_io_per_volume)
        {
            this.classifier_function_id = classifier_function_id;
            this.is_reconfiguration_pending = is_reconfiguration_pending;
            this.max_outstanding_io_per_volume = max_outstanding_io_per_volume;
        }

        public override object[] GetItemArray()
        {
            return new object[] { classifier_function_id, is_reconfiguration_pending, max_outstanding_io_per_volume };
        }

        public override void SetItemArray(object[] items)
        {
            classifier_function_id = (int)items[0];
            is_reconfiguration_pending = (byte)items[1];
            max_outstanding_io_per_volume = (int)items[2];
        }
    }

    [SqlView("sys", "dm_cdc_errors")]
    public partial class dm_cdc_errors : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("phase_number", 1), SqlTypeFacets("int", true)]
        public int? phase_number
        {
            get;
            set;
        }

        [SqlColumn("entry_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? entry_time
        {
            get;
            set;
        }

        [SqlColumn("error_number", 3), SqlTypeFacets("int", true)]
        public int? error_number
        {
            get;
            set;
        }

        [SqlColumn("error_severity", 4), SqlTypeFacets("int", true)]
        public int? error_severity
        {
            get;
            set;
        }

        [SqlColumn("error_state", 5), SqlTypeFacets("int", true)]
        public int? error_state
        {
            get;
            set;
        }

        [SqlColumn("error_message", 6), SqlTypeFacets("nvarchar", true, 2050)]
        public string error_message
        {
            get;
            set;
        }

        [SqlColumn("start_lsn", 7), SqlTypeFacets("nvarchar", true, 48)]
        public string start_lsn
        {
            get;
            set;
        }

        [SqlColumn("begin_lsn", 8), SqlTypeFacets("nvarchar", true, 48)]
        public string begin_lsn
        {
            get;
            set;
        }

        [SqlColumn("sequence_value", 9), SqlTypeFacets("nvarchar", true, 48)]
        public string sequence_value
        {
            get;
            set;
        }

        public dm_cdc_errors()
        {
        }

        public dm_cdc_errors(object[] items)
        {
            session_id = (int?)items[0];
            phase_number = (int?)items[1];
            entry_time = (DateTime?)items[2];
            error_number = (int?)items[3];
            error_severity = (int?)items[4];
            error_state = (int?)items[5];
            error_message = (string)items[6];
            start_lsn = (string)items[7];
            begin_lsn = (string)items[8];
            sequence_value = (string)items[9];
        }

        public dm_cdc_errors(int? session_id, int? phase_number, DateTime? entry_time, int? error_number, int? error_severity, int? error_state, string error_message, string start_lsn, string begin_lsn, string sequence_value)
        {
            this.session_id = session_id;
            this.phase_number = phase_number;
            this.entry_time = entry_time;
            this.error_number = error_number;
            this.error_severity = error_severity;
            this.error_state = error_state;
            this.error_message = error_message;
            this.start_lsn = start_lsn;
            this.begin_lsn = begin_lsn;
            this.sequence_value = sequence_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, phase_number, entry_time, error_number, error_severity, error_state, error_message, start_lsn, begin_lsn, sequence_value };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int?)items[0];
            phase_number = (int?)items[1];
            entry_time = (DateTime?)items[2];
            error_number = (int?)items[3];
            error_severity = (int?)items[4];
            error_state = (int?)items[5];
            error_message = (string)items[6];
            start_lsn = (string)items[7];
            begin_lsn = (string)items[8];
            sequence_value = (string)items[9];
        }
    }

    [SqlView("sys", "availability_databases_cluster")]
    public partial class availability_databases_cluster : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("group_database_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_database_id
        {
            get;
            set;
        }

        [SqlColumn("database_name", 2), SqlTypeFacets("sysname", true)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("truncation_lsn", 3), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? truncation_lsn
        {
            get;
            set;
        }

        public availability_databases_cluster()
        {
        }

        public availability_databases_cluster(object[] items)
        {
            group_id = (Guid)items[0];
            group_database_id = (Guid)items[1];
            database_name = (string)items[2];
            truncation_lsn = (decimal?)items[3];
        }

        public availability_databases_cluster(Guid group_id, Guid group_database_id, string database_name, decimal? truncation_lsn)
        {
            this.group_id = group_id;
            this.group_database_id = group_database_id;
            this.database_name = database_name;
            this.truncation_lsn = truncation_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, group_database_id, database_name, truncation_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (Guid)items[0];
            group_database_id = (Guid)items[1];
            database_name = (string)items[2];
            truncation_lsn = (decimal?)items[3];
        }
    }

    [SqlView("sys", "dm_os_memory_cache_hash_tables")]
    public partial class dm_os_memory_cache_hash_tables : SqlViewProxy
    {
        [SqlColumn("cache_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("table_level", 3), SqlTypeFacets("int", false)]
        public int table_level
        {
            get;
            set;
        }

        [SqlColumn("buckets_count", 4), SqlTypeFacets("int", false)]
        public int buckets_count
        {
            get;
            set;
        }

        [SqlColumn("buckets_in_use_count", 5), SqlTypeFacets("int", false)]
        public int buckets_in_use_count
        {
            get;
            set;
        }

        [SqlColumn("buckets_min_length", 6), SqlTypeFacets("int", false)]
        public int buckets_min_length
        {
            get;
            set;
        }

        [SqlColumn("buckets_max_length", 7), SqlTypeFacets("int", false)]
        public int buckets_max_length
        {
            get;
            set;
        }

        [SqlColumn("buckets_avg_length", 8), SqlTypeFacets("int", false)]
        public int buckets_avg_length
        {
            get;
            set;
        }

        [SqlColumn("buckets_max_length_ever", 9), SqlTypeFacets("int", false)]
        public int buckets_max_length_ever
        {
            get;
            set;
        }

        [SqlColumn("hits_count", 10), SqlTypeFacets("bigint", false)]
        public long hits_count
        {
            get;
            set;
        }

        [SqlColumn("misses_count", 11), SqlTypeFacets("bigint", false)]
        public long misses_count
        {
            get;
            set;
        }

        [SqlColumn("buckets_avg_scan_hit_length", 12), SqlTypeFacets("int", false)]
        public int buckets_avg_scan_hit_length
        {
            get;
            set;
        }

        [SqlColumn("buckets_avg_scan_miss_length", 13), SqlTypeFacets("int", false)]
        public int buckets_avg_scan_miss_length
        {
            get;
            set;
        }

        public dm_os_memory_cache_hash_tables()
        {
        }

        public dm_os_memory_cache_hash_tables(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            table_level = (int)items[3];
            buckets_count = (int)items[4];
            buckets_in_use_count = (int)items[5];
            buckets_min_length = (int)items[6];
            buckets_max_length = (int)items[7];
            buckets_avg_length = (int)items[8];
            buckets_max_length_ever = (int)items[9];
            hits_count = (long)items[10];
            misses_count = (long)items[11];
            buckets_avg_scan_hit_length = (int)items[12];
            buckets_avg_scan_miss_length = (int)items[13];
        }

        public dm_os_memory_cache_hash_tables(Byte[] cache_address, string name, string type, int table_level, int buckets_count, int buckets_in_use_count, int buckets_min_length, int buckets_max_length, int buckets_avg_length, int buckets_max_length_ever, long hits_count, long misses_count, int buckets_avg_scan_hit_length, int buckets_avg_scan_miss_length)
        {
            this.cache_address = cache_address;
            this.name = name;
            this.type = type;
            this.table_level = table_level;
            this.buckets_count = buckets_count;
            this.buckets_in_use_count = buckets_in_use_count;
            this.buckets_min_length = buckets_min_length;
            this.buckets_max_length = buckets_max_length;
            this.buckets_avg_length = buckets_avg_length;
            this.buckets_max_length_ever = buckets_max_length_ever;
            this.hits_count = hits_count;
            this.misses_count = misses_count;
            this.buckets_avg_scan_hit_length = buckets_avg_scan_hit_length;
            this.buckets_avg_scan_miss_length = buckets_avg_scan_miss_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cache_address, name, type, table_level, buckets_count, buckets_in_use_count, buckets_min_length, buckets_max_length, buckets_avg_length, buckets_max_length_ever, hits_count, misses_count, buckets_avg_scan_hit_length, buckets_avg_scan_miss_length };
        }

        public override void SetItemArray(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            table_level = (int)items[3];
            buckets_count = (int)items[4];
            buckets_in_use_count = (int)items[5];
            buckets_min_length = (int)items[6];
            buckets_max_length = (int)items[7];
            buckets_avg_length = (int)items[8];
            buckets_max_length_ever = (int)items[9];
            hits_count = (long)items[10];
            misses_count = (long)items[11];
            buckets_avg_scan_hit_length = (int)items[12];
            buckets_avg_scan_miss_length = (int)items[13];
        }
    }

    [SqlView("sys", "dm_tran_transactions_snapshot")]
    public partial class dm_tran_transactions_snapshot : SqlViewProxy
    {
        [SqlColumn("transaction_sequence_num", 0), SqlTypeFacets("bigint", true)]
        public long? transaction_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("snapshot_id", 1), SqlTypeFacets("int", true)]
        public int? snapshot_id
        {
            get;
            set;
        }

        [SqlColumn("snapshot_sequence_num", 2), SqlTypeFacets("bigint", true)]
        public long? snapshot_sequence_num
        {
            get;
            set;
        }

        public dm_tran_transactions_snapshot()
        {
        }

        public dm_tran_transactions_snapshot(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
            snapshot_id = (int?)items[1];
            snapshot_sequence_num = (long?)items[2];
        }

        public dm_tran_transactions_snapshot(long? transaction_sequence_num, int? snapshot_id, long? snapshot_sequence_num)
        {
            this.transaction_sequence_num = transaction_sequence_num;
            this.snapshot_id = snapshot_id;
            this.snapshot_sequence_num = snapshot_sequence_num;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_sequence_num, snapshot_id, snapshot_sequence_num };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
            snapshot_id = (int?)items[1];
            snapshot_sequence_num = (long?)items[2];
        }
    }

    [SqlView("sys", "dm_cryptographic_provider_properties")]
    public partial class dm_cryptographic_provider_properties : SqlViewProxy
    {
        [SqlColumn("provider_id", 0), SqlTypeFacets("int", true)]
        public int? provider_id
        {
            get;
            set;
        }

        [SqlColumn("guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? guid
        {
            get;
            set;
        }

        [SqlColumn("provider_version", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string provider_version
        {
            get;
            set;
        }

        [SqlColumn("sqlcrypt_version", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string sqlcrypt_version
        {
            get;
            set;
        }

        [SqlColumn("friendly_name", 4), SqlTypeFacets("nvarchar", true, 2048)]
        public string friendly_name
        {
            get;
            set;
        }

        [SqlColumn("authentication_type", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string authentication_type
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_support", 6), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_support
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_persistance", 7), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_persistance
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_export", 8), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_export
        {
            get;
            set;
        }

        [SqlColumn("symmetric_key_import", 9), SqlTypeFacets("tinyint", true)]
        public byte? symmetric_key_import
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_support", 10), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_support
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_persistance", 11), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_persistance
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_export", 12), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_export
        {
            get;
            set;
        }

        [SqlColumn("asymmetric_key_import", 13), SqlTypeFacets("tinyint", true)]
        public byte? asymmetric_key_import
        {
            get;
            set;
        }

        public dm_cryptographic_provider_properties()
        {
        }

        public dm_cryptographic_provider_properties(object[] items)
        {
            provider_id = (int?)items[0];
            guid = (Guid?)items[1];
            provider_version = (string)items[2];
            sqlcrypt_version = (string)items[3];
            friendly_name = (string)items[4];
            authentication_type = (string)items[5];
            symmetric_key_support = (byte?)items[6];
            symmetric_key_persistance = (byte?)items[7];
            symmetric_key_export = (byte?)items[8];
            symmetric_key_import = (byte?)items[9];
            asymmetric_key_support = (byte?)items[10];
            asymmetric_key_persistance = (byte?)items[11];
            asymmetric_key_export = (byte?)items[12];
            asymmetric_key_import = (byte?)items[13];
        }

        public dm_cryptographic_provider_properties(int? provider_id, Guid? guid, string provider_version, string sqlcrypt_version, string friendly_name, string authentication_type, byte? symmetric_key_support, byte? symmetric_key_persistance, byte? symmetric_key_export, byte? symmetric_key_import, byte? asymmetric_key_support, byte? asymmetric_key_persistance, byte? asymmetric_key_export, byte? asymmetric_key_import)
        {
            this.provider_id = provider_id;
            this.guid = guid;
            this.provider_version = provider_version;
            this.sqlcrypt_version = sqlcrypt_version;
            this.friendly_name = friendly_name;
            this.authentication_type = authentication_type;
            this.symmetric_key_support = symmetric_key_support;
            this.symmetric_key_persistance = symmetric_key_persistance;
            this.symmetric_key_export = symmetric_key_export;
            this.symmetric_key_import = symmetric_key_import;
            this.asymmetric_key_support = asymmetric_key_support;
            this.asymmetric_key_persistance = asymmetric_key_persistance;
            this.asymmetric_key_export = asymmetric_key_export;
            this.asymmetric_key_import = asymmetric_key_import;
        }

        public override object[] GetItemArray()
        {
            return new object[] { provider_id, guid, provider_version, sqlcrypt_version, friendly_name, authentication_type, symmetric_key_support, symmetric_key_persistance, symmetric_key_export, symmetric_key_import, asymmetric_key_support, asymmetric_key_persistance, asymmetric_key_export, asymmetric_key_import };
        }

        public override void SetItemArray(object[] items)
        {
            provider_id = (int?)items[0];
            guid = (Guid?)items[1];
            provider_version = (string)items[2];
            sqlcrypt_version = (string)items[3];
            friendly_name = (string)items[4];
            authentication_type = (string)items[5];
            symmetric_key_support = (byte?)items[6];
            symmetric_key_persistance = (byte?)items[7];
            symmetric_key_export = (byte?)items[8];
            symmetric_key_import = (byte?)items[9];
            asymmetric_key_support = (byte?)items[10];
            asymmetric_key_persistance = (byte?)items[11];
            asymmetric_key_export = (byte?)items[12];
            asymmetric_key_import = (byte?)items[13];
        }
    }

    [SqlView("sys", "dm_os_virtual_address_dump")]
    public partial class dm_os_virtual_address_dump : SqlViewProxy
    {
        [SqlColumn("region_base_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_base_address
        {
            get;
            set;
        }

        [SqlColumn("region_allocation_base_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_allocation_base_address
        {
            get;
            set;
        }

        [SqlColumn("region_allocation_protection", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_allocation_protection
        {
            get;
            set;
        }

        [SqlColumn("region_size_in_bytes", 3), SqlTypeFacets("bigint", false)]
        public long region_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("region_state", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_state
        {
            get;
            set;
        }

        [SqlColumn("region_current_protection", 5), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_current_protection
        {
            get;
            set;
        }

        [SqlColumn("region_type", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] region_type
        {
            get;
            set;
        }

        public dm_os_virtual_address_dump()
        {
        }

        public dm_os_virtual_address_dump(object[] items)
        {
            region_base_address = (Byte[])items[0];
            region_allocation_base_address = (Byte[])items[1];
            region_allocation_protection = (Byte[])items[2];
            region_size_in_bytes = (long)items[3];
            region_state = (Byte[])items[4];
            region_current_protection = (Byte[])items[5];
            region_type = (Byte[])items[6];
        }

        public dm_os_virtual_address_dump(Byte[] region_base_address, Byte[] region_allocation_base_address, Byte[] region_allocation_protection, long region_size_in_bytes, Byte[] region_state, Byte[] region_current_protection, Byte[] region_type)
        {
            this.region_base_address = region_base_address;
            this.region_allocation_base_address = region_allocation_base_address;
            this.region_allocation_protection = region_allocation_protection;
            this.region_size_in_bytes = region_size_in_bytes;
            this.region_state = region_state;
            this.region_current_protection = region_current_protection;
            this.region_type = region_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { region_base_address, region_allocation_base_address, region_allocation_protection, region_size_in_bytes, region_state, region_current_protection, region_type };
        }

        public override void SetItemArray(object[] items)
        {
            region_base_address = (Byte[])items[0];
            region_allocation_base_address = (Byte[])items[1];
            region_allocation_protection = (Byte[])items[2];
            region_size_in_bytes = (long)items[3];
            region_state = (Byte[])items[4];
            region_current_protection = (Byte[])items[5];
            region_type = (Byte[])items[6];
        }
    }

    [SqlView("sys", "dm_os_memory_cache_entries")]
    public partial class dm_os_memory_cache_entries : SqlViewProxy
    {
        [SqlColumn("average_time_between_uses", 17), SqlTypeFacets("float", true)]
        public double? average_time_between_uses
        {
            get;
            set;
        }

        [SqlColumn("time_since_last_use", 18), SqlTypeFacets("float", true)]
        public double? time_since_last_use
        {
            get;
            set;
        }

        [SqlColumn("probability_of_reuse", 19), SqlTypeFacets("float", true)]
        public double? probability_of_reuse
        {
            get;
            set;
        }

        [SqlColumn("value", 20), SqlTypeFacets("float", true)]
        public double? value
        {
            get;
            set;
        }

        [SqlColumn("cache_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("entry_address", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] entry_address
        {
            get;
            set;
        }

        [SqlColumn("entry_data_address", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] entry_data_address
        {
            get;
            set;
        }

        [SqlColumn("in_use_count", 5), SqlTypeFacets("int", false)]
        public int in_use_count
        {
            get;
            set;
        }

        [SqlColumn("is_dirty", 6), SqlTypeFacets("bit", false)]
        public bool is_dirty
        {
            get;
            set;
        }

        [SqlColumn("disk_ios_count", 7), SqlTypeFacets("int", false)]
        public int disk_ios_count
        {
            get;
            set;
        }

        [SqlColumn("context_switches_count", 8), SqlTypeFacets("int", false)]
        public int context_switches_count
        {
            get;
            set;
        }

        [SqlColumn("original_cost", 9), SqlTypeFacets("int", false)]
        public int original_cost
        {
            get;
            set;
        }

        [SqlColumn("current_cost", 10), SqlTypeFacets("int", false)]
        public int current_cost
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 11), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("pages_kb", 12), SqlTypeFacets("bigint", false)]
        public long pages_kb
        {
            get;
            set;
        }

        [SqlColumn("entry_data", 13), SqlTypeFacets("nvarchar", true, 6144)]
        public string entry_data
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 14), SqlTypeFacets("int", true)]
        public int? pool_id
        {
            get;
            set;
        }

        [SqlColumn("time_to_generate", 15), SqlTypeFacets("float", true)]
        public double? time_to_generate
        {
            get;
            set;
        }

        [SqlColumn("use_count", 16), SqlTypeFacets("bigint", true)]
        public long? use_count
        {
            get;
            set;
        }

        public dm_os_memory_cache_entries()
        {
        }

        public dm_os_memory_cache_entries(object[] items)
        {
            average_time_between_uses = (double?)items[0];
            time_since_last_use = (double?)items[1];
            probability_of_reuse = (double?)items[2];
            value = (double?)items[3];
            cache_address = (Byte[])items[4];
            name = (string)items[5];
            type = (string)items[6];
            entry_address = (Byte[])items[7];
            entry_data_address = (Byte[])items[8];
            in_use_count = (int)items[9];
            is_dirty = (bool)items[10];
            disk_ios_count = (int)items[11];
            context_switches_count = (int)items[12];
            original_cost = (int)items[13];
            current_cost = (int)items[14];
            memory_object_address = (Byte[])items[15];
            pages_kb = (long)items[16];
            entry_data = (string)items[17];
            pool_id = (int?)items[18];
            time_to_generate = (double?)items[19];
            use_count = (long?)items[20];
        }

        public dm_os_memory_cache_entries(double? average_time_between_uses, double? time_since_last_use, double? probability_of_reuse, double? value, Byte[] cache_address, string name, string type, Byte[] entry_address, Byte[] entry_data_address, int in_use_count, bool is_dirty, int disk_ios_count, int context_switches_count, int original_cost, int current_cost, Byte[] memory_object_address, long pages_kb, string entry_data, int? pool_id, double? time_to_generate, long? use_count)
        {
            this.average_time_between_uses = average_time_between_uses;
            this.time_since_last_use = time_since_last_use;
            this.probability_of_reuse = probability_of_reuse;
            this.value = value;
            this.cache_address = cache_address;
            this.name = name;
            this.type = type;
            this.entry_address = entry_address;
            this.entry_data_address = entry_data_address;
            this.in_use_count = in_use_count;
            this.is_dirty = is_dirty;
            this.disk_ios_count = disk_ios_count;
            this.context_switches_count = context_switches_count;
            this.original_cost = original_cost;
            this.current_cost = current_cost;
            this.memory_object_address = memory_object_address;
            this.pages_kb = pages_kb;
            this.entry_data = entry_data;
            this.pool_id = pool_id;
            this.time_to_generate = time_to_generate;
            this.use_count = use_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { average_time_between_uses, time_since_last_use, probability_of_reuse, value, cache_address, name, type, entry_address, entry_data_address, in_use_count, is_dirty, disk_ios_count, context_switches_count, original_cost, current_cost, memory_object_address, pages_kb, entry_data, pool_id, time_to_generate, use_count };
        }

        public override void SetItemArray(object[] items)
        {
            average_time_between_uses = (double?)items[0];
            time_since_last_use = (double?)items[1];
            probability_of_reuse = (double?)items[2];
            value = (double?)items[3];
            cache_address = (Byte[])items[4];
            name = (string)items[5];
            type = (string)items[6];
            entry_address = (Byte[])items[7];
            entry_data_address = (Byte[])items[8];
            in_use_count = (int)items[9];
            is_dirty = (bool)items[10];
            disk_ios_count = (int)items[11];
            context_switches_count = (int)items[12];
            original_cost = (int)items[13];
            current_cost = (int)items[14];
            memory_object_address = (Byte[])items[15];
            pages_kb = (long)items[16];
            entry_data = (string)items[17];
            pool_id = (int?)items[18];
            time_to_generate = (double?)items[19];
            use_count = (long?)items[20];
        }
    }

    [SqlView("sys", "dm_tcp_listener_states")]
    public partial class dm_tcp_listener_states : SqlViewProxy
    {
        [SqlColumn("listener_id", 0), SqlTypeFacets("int", false)]
        public int listener_id
        {
            get;
            set;
        }

        [SqlColumn("ip_address", 1), SqlTypeFacets("nvarchar", false, 96)]
        public string ip_address
        {
            get;
            set;
        }

        [SqlColumn("is_ipv4", 2), SqlTypeFacets("bit", false)]
        public bool is_ipv4
        {
            get;
            set;
        }

        [SqlColumn("port", 3), SqlTypeFacets("int", false)]
        public int port
        {
            get;
            set;
        }

        [SqlColumn("type", 4), SqlTypeFacets("smallint", false)]
        public short type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 5), SqlTypeFacets("nvarchar", false, 40)]
        public string type_desc
        {
            get;
            set;
        }

        [SqlColumn("state", 6), SqlTypeFacets("smallint", false)]
        public short state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 7), SqlTypeFacets("nvarchar", false, 32)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("start_time", 8), SqlTypeFacets("datetime", false)]
        public DateTime start_time
        {
            get;
            set;
        }

        public dm_tcp_listener_states()
        {
        }

        public dm_tcp_listener_states(object[] items)
        {
            listener_id = (int)items[0];
            ip_address = (string)items[1];
            is_ipv4 = (bool)items[2];
            port = (int)items[3];
            type = (short)items[4];
            type_desc = (string)items[5];
            state = (short)items[6];
            state_desc = (string)items[7];
            start_time = (DateTime)items[8];
        }

        public dm_tcp_listener_states(int listener_id, string ip_address, bool is_ipv4, int port, short type, string type_desc, short state, string state_desc, DateTime start_time)
        {
            this.listener_id = listener_id;
            this.ip_address = ip_address;
            this.is_ipv4 = is_ipv4;
            this.port = port;
            this.type = type;
            this.type_desc = type_desc;
            this.state = state;
            this.state_desc = state_desc;
            this.start_time = start_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { listener_id, ip_address, is_ipv4, port, type, type_desc, state, state_desc, start_time };
        }

        public override void SetItemArray(object[] items)
        {
            listener_id = (int)items[0];
            ip_address = (string)items[1];
            is_ipv4 = (bool)items[2];
            port = (int)items[3];
            type = (short)items[4];
            type_desc = (string)items[5];
            state = (short)items[6];
            state_desc = (string)items[7];
            start_time = (DateTime)items[8];
        }
    }

    [SqlView("sys", "dm_os_nodes")]
    public partial class dm_os_nodes : SqlViewProxy
    {
        [SqlColumn("node_id", 0), SqlTypeFacets("smallint", false)]
        public short node_id
        {
            get;
            set;
        }

        [SqlColumn("node_state_desc", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string node_state_desc
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("memory_clerk_address", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_clerk_address
        {
            get;
            set;
        }

        [SqlColumn("io_completion_worker_address", 4), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] io_completion_worker_address
        {
            get;
            set;
        }

        [SqlColumn("memory_node_id", 5), SqlTypeFacets("smallint", false)]
        public short memory_node_id
        {
            get;
            set;
        }

        [SqlColumn("cpu_affinity_mask", 6), SqlTypeFacets("bigint", false)]
        public long cpu_affinity_mask
        {
            get;
            set;
        }

        [SqlColumn("online_scheduler_count", 7), SqlTypeFacets("smallint", false)]
        public short online_scheduler_count
        {
            get;
            set;
        }

        [SqlColumn("idle_scheduler_count", 8), SqlTypeFacets("smallint", false)]
        public short idle_scheduler_count
        {
            get;
            set;
        }

        [SqlColumn("active_worker_count", 9), SqlTypeFacets("int", false)]
        public int active_worker_count
        {
            get;
            set;
        }

        [SqlColumn("avg_load_balance", 10), SqlTypeFacets("int", false)]
        public int avg_load_balance
        {
            get;
            set;
        }

        [SqlColumn("timer_task_affinity_mask", 11), SqlTypeFacets("bigint", false)]
        public long timer_task_affinity_mask
        {
            get;
            set;
        }

        [SqlColumn("permanent_task_affinity_mask", 12), SqlTypeFacets("bigint", false)]
        public long permanent_task_affinity_mask
        {
            get;
            set;
        }

        [SqlColumn("resource_monitor_state", 13), SqlTypeFacets("bit", false)]
        public bool resource_monitor_state
        {
            get;
            set;
        }

        [SqlColumn("online_scheduler_mask", 14), SqlTypeFacets("bigint", false)]
        public long online_scheduler_mask
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 15), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        public dm_os_nodes()
        {
        }

        public dm_os_nodes(object[] items)
        {
            node_id = (short)items[0];
            node_state_desc = (string)items[1];
            memory_object_address = (Byte[])items[2];
            memory_clerk_address = (Byte[])items[3];
            io_completion_worker_address = (Byte[])items[4];
            memory_node_id = (short)items[5];
            cpu_affinity_mask = (long)items[6];
            online_scheduler_count = (short)items[7];
            idle_scheduler_count = (short)items[8];
            active_worker_count = (int)items[9];
            avg_load_balance = (int)items[10];
            timer_task_affinity_mask = (long)items[11];
            permanent_task_affinity_mask = (long)items[12];
            resource_monitor_state = (bool)items[13];
            online_scheduler_mask = (long)items[14];
            processor_group = (short)items[15];
        }

        public dm_os_nodes(short node_id, string node_state_desc, Byte[] memory_object_address, Byte[] memory_clerk_address, Byte[] io_completion_worker_address, short memory_node_id, long cpu_affinity_mask, short online_scheduler_count, short idle_scheduler_count, int active_worker_count, int avg_load_balance, long timer_task_affinity_mask, long permanent_task_affinity_mask, bool resource_monitor_state, long online_scheduler_mask, short processor_group)
        {
            this.node_id = node_id;
            this.node_state_desc = node_state_desc;
            this.memory_object_address = memory_object_address;
            this.memory_clerk_address = memory_clerk_address;
            this.io_completion_worker_address = io_completion_worker_address;
            this.memory_node_id = memory_node_id;
            this.cpu_affinity_mask = cpu_affinity_mask;
            this.online_scheduler_count = online_scheduler_count;
            this.idle_scheduler_count = idle_scheduler_count;
            this.active_worker_count = active_worker_count;
            this.avg_load_balance = avg_load_balance;
            this.timer_task_affinity_mask = timer_task_affinity_mask;
            this.permanent_task_affinity_mask = permanent_task_affinity_mask;
            this.resource_monitor_state = resource_monitor_state;
            this.online_scheduler_mask = online_scheduler_mask;
            this.processor_group = processor_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { node_id, node_state_desc, memory_object_address, memory_clerk_address, io_completion_worker_address, memory_node_id, cpu_affinity_mask, online_scheduler_count, idle_scheduler_count, active_worker_count, avg_load_balance, timer_task_affinity_mask, permanent_task_affinity_mask, resource_monitor_state, online_scheduler_mask, processor_group };
        }

        public override void SetItemArray(object[] items)
        {
            node_id = (short)items[0];
            node_state_desc = (string)items[1];
            memory_object_address = (Byte[])items[2];
            memory_clerk_address = (Byte[])items[3];
            io_completion_worker_address = (Byte[])items[4];
            memory_node_id = (short)items[5];
            cpu_affinity_mask = (long)items[6];
            online_scheduler_count = (short)items[7];
            idle_scheduler_count = (short)items[8];
            active_worker_count = (int)items[9];
            avg_load_balance = (int)items[10];
            timer_task_affinity_mask = (long)items[11];
            permanent_task_affinity_mask = (long)items[12];
            resource_monitor_state = (bool)items[13];
            online_scheduler_mask = (long)items[14];
            processor_group = (short)items[15];
        }
    }

    [SqlView("sys", "dm_hadr_cluster_networks")]
    public partial class dm_hadr_cluster_networks : SqlViewProxy
    {
        [SqlColumn("member_name", 0), SqlTypeFacets("nvarchar", false, 256)]
        public string member_name
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_ip", 1), SqlTypeFacets("nvarchar", false, 128)]
        public string network_subnet_ip
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_ipv4_mask", 2), SqlTypeFacets("nvarchar", true, 90)]
        public string network_subnet_ipv4_mask
        {
            get;
            set;
        }

        [SqlColumn("network_subnet_prefix_length", 3), SqlTypeFacets("int", true)]
        public int? network_subnet_prefix_length
        {
            get;
            set;
        }

        [SqlColumn("is_public", 4), SqlTypeFacets("bit", false)]
        public bool is_public
        {
            get;
            set;
        }

        [SqlColumn("is_ipv4", 5), SqlTypeFacets("bit", false)]
        public bool is_ipv4
        {
            get;
            set;
        }

        public dm_hadr_cluster_networks()
        {
        }

        public dm_hadr_cluster_networks(object[] items)
        {
            member_name = (string)items[0];
            network_subnet_ip = (string)items[1];
            network_subnet_ipv4_mask = (string)items[2];
            network_subnet_prefix_length = (int?)items[3];
            is_public = (bool)items[4];
            is_ipv4 = (bool)items[5];
        }

        public dm_hadr_cluster_networks(string member_name, string network_subnet_ip, string network_subnet_ipv4_mask, int? network_subnet_prefix_length, bool is_public, bool is_ipv4)
        {
            this.member_name = member_name;
            this.network_subnet_ip = network_subnet_ip;
            this.network_subnet_ipv4_mask = network_subnet_ipv4_mask;
            this.network_subnet_prefix_length = network_subnet_prefix_length;
            this.is_public = is_public;
            this.is_ipv4 = is_ipv4;
        }

        public override object[] GetItemArray()
        {
            return new object[] { member_name, network_subnet_ip, network_subnet_ipv4_mask, network_subnet_prefix_length, is_public, is_ipv4 };
        }

        public override void SetItemArray(object[] items)
        {
            member_name = (string)items[0];
            network_subnet_ip = (string)items[1];
            network_subnet_ipv4_mask = (string)items[2];
            network_subnet_prefix_length = (int?)items[3];
            is_public = (bool)items[4];
            is_ipv4 = (bool)items[5];
        }
    }

    [SqlView("sys", "dm_xtp_system_memory_consumers")]
    public partial class dm_xtp_system_memory_consumers : SqlViewProxy
    {
        [SqlColumn("memory_consumer_id", 0), SqlTypeFacets("bigint", false)]
        public long memory_consumer_id
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_type", 1), SqlTypeFacets("int", false)]
        public int memory_consumer_type
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_type_desc", 2), SqlTypeFacets("nvarchar", false, 32)]
        public string memory_consumer_type_desc
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_desc", 3), SqlTypeFacets("nvarchar", true, 128)]
        public string memory_consumer_desc
        {
            get;
            set;
        }

        [SqlColumn("lookaside_id", 4), SqlTypeFacets("bigint", true)]
        public long? lookaside_id
        {
            get;
            set;
        }

        [SqlColumn("pagepool_id", 5), SqlTypeFacets("bigint", true)]
        public long? pagepool_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_bytes", 6), SqlTypeFacets("bigint", false)]
        public long allocated_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_bytes", 7), SqlTypeFacets("bigint", false)]
        public long used_bytes
        {
            get;
            set;
        }

        [SqlColumn("allocation_count", 8), SqlTypeFacets("int", false)]
        public int allocation_count
        {
            get;
            set;
        }

        [SqlColumn("partition_count", 9), SqlTypeFacets("int", false)]
        public int partition_count
        {
            get;
            set;
        }

        [SqlColumn("sizeclass_count", 10), SqlTypeFacets("int", false)]
        public int sizeclass_count
        {
            get;
            set;
        }

        [SqlColumn("min_sizeclass", 11), SqlTypeFacets("int", false)]
        public int min_sizeclass
        {
            get;
            set;
        }

        [SqlColumn("max_sizeclass", 12), SqlTypeFacets("int", false)]
        public int max_sizeclass
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_address", 13), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_consumer_address
        {
            get;
            set;
        }

        public dm_xtp_system_memory_consumers()
        {
        }

        public dm_xtp_system_memory_consumers(object[] items)
        {
            memory_consumer_id = (long)items[0];
            memory_consumer_type = (int)items[1];
            memory_consumer_type_desc = (string)items[2];
            memory_consumer_desc = (string)items[3];
            lookaside_id = (long?)items[4];
            pagepool_id = (long?)items[5];
            allocated_bytes = (long)items[6];
            used_bytes = (long)items[7];
            allocation_count = (int)items[8];
            partition_count = (int)items[9];
            sizeclass_count = (int)items[10];
            min_sizeclass = (int)items[11];
            max_sizeclass = (int)items[12];
            memory_consumer_address = (Byte[])items[13];
        }

        public dm_xtp_system_memory_consumers(long memory_consumer_id, int memory_consumer_type, string memory_consumer_type_desc, string memory_consumer_desc, long? lookaside_id, long? pagepool_id, long allocated_bytes, long used_bytes, int allocation_count, int partition_count, int sizeclass_count, int min_sizeclass, int max_sizeclass, Byte[] memory_consumer_address)
        {
            this.memory_consumer_id = memory_consumer_id;
            this.memory_consumer_type = memory_consumer_type;
            this.memory_consumer_type_desc = memory_consumer_type_desc;
            this.memory_consumer_desc = memory_consumer_desc;
            this.lookaside_id = lookaside_id;
            this.pagepool_id = pagepool_id;
            this.allocated_bytes = allocated_bytes;
            this.used_bytes = used_bytes;
            this.allocation_count = allocation_count;
            this.partition_count = partition_count;
            this.sizeclass_count = sizeclass_count;
            this.min_sizeclass = min_sizeclass;
            this.max_sizeclass = max_sizeclass;
            this.memory_consumer_address = memory_consumer_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_consumer_id, memory_consumer_type, memory_consumer_type_desc, memory_consumer_desc, lookaside_id, pagepool_id, allocated_bytes, used_bytes, allocation_count, partition_count, sizeclass_count, min_sizeclass, max_sizeclass, memory_consumer_address };
        }

        public override void SetItemArray(object[] items)
        {
            memory_consumer_id = (long)items[0];
            memory_consumer_type = (int)items[1];
            memory_consumer_type_desc = (string)items[2];
            memory_consumer_desc = (string)items[3];
            lookaside_id = (long?)items[4];
            pagepool_id = (long?)items[5];
            allocated_bytes = (long)items[6];
            used_bytes = (long)items[7];
            allocation_count = (int)items[8];
            partition_count = (int)items[9];
            sizeclass_count = (int)items[10];
            min_sizeclass = (int)items[11];
            max_sizeclass = (int)items[12];
            memory_consumer_address = (Byte[])items[13];
        }
    }

    [SqlView("sys", "dm_io_pending_io_requests")]
    public partial class dm_io_pending_io_requests : SqlViewProxy
    {
        [SqlColumn("io_completion_request_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] io_completion_request_address
        {
            get;
            set;
        }

        [SqlColumn("io_type", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string io_type
        {
            get;
            set;
        }

        [SqlColumn("io_pending_ms_ticks", 2), SqlTypeFacets("bigint", false)]
        public long io_pending_ms_ticks
        {
            get;
            set;
        }

        [SqlColumn("io_pending", 3), SqlTypeFacets("int", false)]
        public int io_pending
        {
            get;
            set;
        }

        [SqlColumn("io_completion_routine_address", 4), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] io_completion_routine_address
        {
            get;
            set;
        }

        [SqlColumn("io_user_data_address", 5), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] io_user_data_address
        {
            get;
            set;
        }

        [SqlColumn("scheduler_address", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] scheduler_address
        {
            get;
            set;
        }

        [SqlColumn("io_handle", 7), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] io_handle
        {
            get;
            set;
        }

        [SqlColumn("io_offset", 8), SqlTypeFacets("bigint", false)]
        public long io_offset
        {
            get;
            set;
        }

        [SqlColumn("io_handle_path", 9), SqlTypeFacets("nvarchar", true, 512)]
        public string io_handle_path
        {
            get;
            set;
        }

        public dm_io_pending_io_requests()
        {
        }

        public dm_io_pending_io_requests(object[] items)
        {
            io_completion_request_address = (Byte[])items[0];
            io_type = (string)items[1];
            io_pending_ms_ticks = (long)items[2];
            io_pending = (int)items[3];
            io_completion_routine_address = (Byte[])items[4];
            io_user_data_address = (Byte[])items[5];
            scheduler_address = (Byte[])items[6];
            io_handle = (Byte[])items[7];
            io_offset = (long)items[8];
            io_handle_path = (string)items[9];
        }

        public dm_io_pending_io_requests(Byte[] io_completion_request_address, string io_type, long io_pending_ms_ticks, int io_pending, Byte[] io_completion_routine_address, Byte[] io_user_data_address, Byte[] scheduler_address, Byte[] io_handle, long io_offset, string io_handle_path)
        {
            this.io_completion_request_address = io_completion_request_address;
            this.io_type = io_type;
            this.io_pending_ms_ticks = io_pending_ms_ticks;
            this.io_pending = io_pending;
            this.io_completion_routine_address = io_completion_routine_address;
            this.io_user_data_address = io_user_data_address;
            this.scheduler_address = scheduler_address;
            this.io_handle = io_handle;
            this.io_offset = io_offset;
            this.io_handle_path = io_handle_path;
        }

        public override object[] GetItemArray()
        {
            return new object[] { io_completion_request_address, io_type, io_pending_ms_ticks, io_pending, io_completion_routine_address, io_user_data_address, scheduler_address, io_handle, io_offset, io_handle_path };
        }

        public override void SetItemArray(object[] items)
        {
            io_completion_request_address = (Byte[])items[0];
            io_type = (string)items[1];
            io_pending_ms_ticks = (long)items[2];
            io_pending = (int)items[3];
            io_completion_routine_address = (Byte[])items[4];
            io_user_data_address = (Byte[])items[5];
            scheduler_address = (Byte[])items[6];
            io_handle = (Byte[])items[7];
            io_offset = (long)items[8];
            io_handle_path = (string)items[9];
        }
    }

    [SqlView("sys", "trace_events")]
    public partial class trace_events : SqlViewProxy
    {
        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("category_id", 1), SqlTypeFacets("smallint", false)]
        public short category_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        public trace_events()
        {
        }

        public trace_events(object[] items)
        {
            trace_event_id = (short)items[0];
            category_id = (short)items[1];
            name = (string)items[2];
        }

        public trace_events(short trace_event_id, short category_id, string name)
        {
            this.trace_event_id = trace_event_id;
            this.category_id = category_id;
            this.name = name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_event_id, category_id, name };
        }

        public override void SetItemArray(object[] items)
        {
            trace_event_id = (short)items[0];
            category_id = (short)items[1];
            name = (string)items[2];
        }
    }

    [SqlView("sys", "dm_os_sys_memory")]
    public partial class dm_os_sys_memory : SqlViewProxy
    {
        [SqlColumn("total_physical_memory_kb", 0), SqlTypeFacets("bigint", false)]
        public long total_physical_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("available_physical_memory_kb", 1), SqlTypeFacets("bigint", false)]
        public long available_physical_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("total_page_file_kb", 2), SqlTypeFacets("bigint", false)]
        public long total_page_file_kb
        {
            get;
            set;
        }

        [SqlColumn("available_page_file_kb", 3), SqlTypeFacets("bigint", false)]
        public long available_page_file_kb
        {
            get;
            set;
        }

        [SqlColumn("system_cache_kb", 4), SqlTypeFacets("bigint", false)]
        public long system_cache_kb
        {
            get;
            set;
        }

        [SqlColumn("kernel_paged_pool_kb", 5), SqlTypeFacets("bigint", false)]
        public long kernel_paged_pool_kb
        {
            get;
            set;
        }

        [SqlColumn("kernel_nonpaged_pool_kb", 6), SqlTypeFacets("bigint", false)]
        public long kernel_nonpaged_pool_kb
        {
            get;
            set;
        }

        [SqlColumn("system_high_memory_signal_state", 7), SqlTypeFacets("bit", false)]
        public bool system_high_memory_signal_state
        {
            get;
            set;
        }

        [SqlColumn("system_low_memory_signal_state", 8), SqlTypeFacets("bit", false)]
        public bool system_low_memory_signal_state
        {
            get;
            set;
        }

        [SqlColumn("system_memory_state_desc", 9), SqlTypeFacets("nvarchar", false, 512)]
        public string system_memory_state_desc
        {
            get;
            set;
        }

        public dm_os_sys_memory()
        {
        }

        public dm_os_sys_memory(object[] items)
        {
            total_physical_memory_kb = (long)items[0];
            available_physical_memory_kb = (long)items[1];
            total_page_file_kb = (long)items[2];
            available_page_file_kb = (long)items[3];
            system_cache_kb = (long)items[4];
            kernel_paged_pool_kb = (long)items[5];
            kernel_nonpaged_pool_kb = (long)items[6];
            system_high_memory_signal_state = (bool)items[7];
            system_low_memory_signal_state = (bool)items[8];
            system_memory_state_desc = (string)items[9];
        }

        public dm_os_sys_memory(long total_physical_memory_kb, long available_physical_memory_kb, long total_page_file_kb, long available_page_file_kb, long system_cache_kb, long kernel_paged_pool_kb, long kernel_nonpaged_pool_kb, bool system_high_memory_signal_state, bool system_low_memory_signal_state, string system_memory_state_desc)
        {
            this.total_physical_memory_kb = total_physical_memory_kb;
            this.available_physical_memory_kb = available_physical_memory_kb;
            this.total_page_file_kb = total_page_file_kb;
            this.available_page_file_kb = available_page_file_kb;
            this.system_cache_kb = system_cache_kb;
            this.kernel_paged_pool_kb = kernel_paged_pool_kb;
            this.kernel_nonpaged_pool_kb = kernel_nonpaged_pool_kb;
            this.system_high_memory_signal_state = system_high_memory_signal_state;
            this.system_low_memory_signal_state = system_low_memory_signal_state;
            this.system_memory_state_desc = system_memory_state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { total_physical_memory_kb, available_physical_memory_kb, total_page_file_kb, available_page_file_kb, system_cache_kb, kernel_paged_pool_kb, kernel_nonpaged_pool_kb, system_high_memory_signal_state, system_low_memory_signal_state, system_memory_state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            total_physical_memory_kb = (long)items[0];
            available_physical_memory_kb = (long)items[1];
            total_page_file_kb = (long)items[2];
            available_page_file_kb = (long)items[3];
            system_cache_kb = (long)items[4];
            kernel_paged_pool_kb = (long)items[5];
            kernel_nonpaged_pool_kb = (long)items[6];
            system_high_memory_signal_state = (bool)items[7];
            system_low_memory_signal_state = (bool)items[8];
            system_memory_state_desc = (string)items[9];
        }
    }

    [SqlView("sys", "trace_event_bindings")]
    public partial class trace_event_bindings : SqlViewProxy
    {
        [SqlColumn("trace_event_id", 0), SqlTypeFacets("smallint", false)]
        public short trace_event_id
        {
            get;
            set;
        }

        [SqlColumn("trace_column_id", 1), SqlTypeFacets("smallint", false)]
        public short trace_column_id
        {
            get;
            set;
        }

        public trace_event_bindings()
        {
        }

        public trace_event_bindings(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
        }

        public trace_event_bindings(short trace_event_id, short trace_column_id)
        {
            this.trace_event_id = trace_event_id;
            this.trace_column_id = trace_column_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { trace_event_id, trace_column_id };
        }

        public override void SetItemArray(object[] items)
        {
            trace_event_id = (short)items[0];
            trace_column_id = (short)items[1];
        }
    }

    [SqlView("sys", "dm_db_partition_stats")]
    public partial class dm_db_partition_stats : SqlViewProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", true)]
        public long? partition_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("in_row_data_page_count", 4), SqlTypeFacets("bigint", true)]
        public long? in_row_data_page_count
        {
            get;
            set;
        }

        [SqlColumn("in_row_used_page_count", 5), SqlTypeFacets("bigint", true)]
        public long? in_row_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("in_row_reserved_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? in_row_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("lob_used_page_count", 7), SqlTypeFacets("bigint", true)]
        public long? lob_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("lob_reserved_page_count", 8), SqlTypeFacets("bigint", true)]
        public long? lob_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_used_page_count", 9), SqlTypeFacets("bigint", true)]
        public long? row_overflow_used_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_reserved_page_count", 10), SqlTypeFacets("bigint", true)]
        public long? row_overflow_reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("used_page_count", 11), SqlTypeFacets("bigint", true)]
        public long? used_page_count
        {
            get;
            set;
        }

        [SqlColumn("reserved_page_count", 12), SqlTypeFacets("bigint", true)]
        public long? reserved_page_count
        {
            get;
            set;
        }

        [SqlColumn("row_count", 13), SqlTypeFacets("bigint", true)]
        public long? row_count
        {
            get;
            set;
        }

        public dm_db_partition_stats()
        {
        }

        public dm_db_partition_stats(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            in_row_data_page_count = (long?)items[4];
            in_row_used_page_count = (long?)items[5];
            in_row_reserved_page_count = (long?)items[6];
            lob_used_page_count = (long?)items[7];
            lob_reserved_page_count = (long?)items[8];
            row_overflow_used_page_count = (long?)items[9];
            row_overflow_reserved_page_count = (long?)items[10];
            used_page_count = (long?)items[11];
            reserved_page_count = (long?)items[12];
            row_count = (long?)items[13];
        }

        public dm_db_partition_stats(long? partition_id, int object_id, int index_id, int partition_number, long? in_row_data_page_count, long? in_row_used_page_count, long? in_row_reserved_page_count, long? lob_used_page_count, long? lob_reserved_page_count, long? row_overflow_used_page_count, long? row_overflow_reserved_page_count, long? used_page_count, long? reserved_page_count, long? row_count)
        {
            this.partition_id = partition_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.in_row_data_page_count = in_row_data_page_count;
            this.in_row_used_page_count = in_row_used_page_count;
            this.in_row_reserved_page_count = in_row_reserved_page_count;
            this.lob_used_page_count = lob_used_page_count;
            this.lob_reserved_page_count = lob_reserved_page_count;
            this.row_overflow_used_page_count = row_overflow_used_page_count;
            this.row_overflow_reserved_page_count = row_overflow_reserved_page_count;
            this.used_page_count = used_page_count;
            this.reserved_page_count = reserved_page_count;
            this.row_count = row_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, object_id, index_id, partition_number, in_row_data_page_count, in_row_used_page_count, in_row_reserved_page_count, lob_used_page_count, lob_reserved_page_count, row_overflow_used_page_count, row_overflow_reserved_page_count, used_page_count, reserved_page_count, row_count };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long?)items[0];
            object_id = (int)items[1];
            index_id = (int)items[2];
            partition_number = (int)items[3];
            in_row_data_page_count = (long?)items[4];
            in_row_used_page_count = (long?)items[5];
            in_row_reserved_page_count = (long?)items[6];
            lob_used_page_count = (long?)items[7];
            lob_reserved_page_count = (long?)items[8];
            row_overflow_used_page_count = (long?)items[9];
            row_overflow_reserved_page_count = (long?)items[10];
            used_page_count = (long?)items[11];
            reserved_page_count = (long?)items[12];
            row_count = (long?)items[13];
        }
    }

    [SqlView("sys", "dm_db_xtp_checkpoint_files")]
    public partial class dm_db_xtp_checkpoint_files : SqlViewProxy
    {
        [SqlColumn("container_id", 0), SqlTypeFacets("int", false)]
        public int container_id
        {
            get;
            set;
        }

        [SqlColumn("container_guid", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? container_guid
        {
            get;
            set;
        }

        [SqlColumn("checkpoint_file_id", 2), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? checkpoint_file_id
        {
            get;
            set;
        }

        [SqlColumn("relative_file_path", 3), SqlTypeFacets("nvarchar", false, 520)]
        public string relative_file_path
        {
            get;
            set;
        }

        [SqlColumn("file_type", 4), SqlTypeFacets("smallint", true)]
        public short? file_type
        {
            get;
            set;
        }

        [SqlColumn("file_type_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string file_type_desc
        {
            get;
            set;
        }

        [SqlColumn("internal_storage_slot", 6), SqlTypeFacets("int", true)]
        public int? internal_storage_slot
        {
            get;
            set;
        }

        [SqlColumn("checkpoint_pair_file_id", 7), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? checkpoint_pair_file_id
        {
            get;
            set;
        }

        [SqlColumn("file_size_in_bytes", 8), SqlTypeFacets("bigint", true)]
        public long? file_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("file_size_used_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? file_size_used_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("inserted_row_count", 10), SqlTypeFacets("bigint", true)]
        public long? inserted_row_count
        {
            get;
            set;
        }

        [SqlColumn("deleted_row_count", 11), SqlTypeFacets("bigint", true)]
        public long? deleted_row_count
        {
            get;
            set;
        }

        [SqlColumn("drop_table_deleted_row_count", 12), SqlTypeFacets("bigint", true)]
        public long? drop_table_deleted_row_count
        {
            get;
            set;
        }

        [SqlColumn("state", 13), SqlTypeFacets("smallint", true)]
        public short? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("lower_bound_tsn", 15), SqlTypeFacets("bigint", true)]
        public long? lower_bound_tsn
        {
            get;
            set;
        }

        [SqlColumn("upper_bound_tsn", 16), SqlTypeFacets("bigint", true)]
        public long? upper_bound_tsn
        {
            get;
            set;
        }

        [SqlColumn("last_backup_page_count", 17), SqlTypeFacets("int", true)]
        public int? last_backup_page_count
        {
            get;
            set;
        }

        [SqlColumn("delta_watermark_tsn", 18), SqlTypeFacets("bigint", true)]
        public long? delta_watermark_tsn
        {
            get;
            set;
        }

        [SqlColumn("last_checkpoint_recovery_lsn", 19), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? last_checkpoint_recovery_lsn
        {
            get;
            set;
        }

        [SqlColumn("tombstone_operation_lsn", 20), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? tombstone_operation_lsn
        {
            get;
            set;
        }

        [SqlColumn("logical_deletion_log_block_id", 21), SqlTypeFacets("bigint", true)]
        public long? logical_deletion_log_block_id
        {
            get;
            set;
        }

        public dm_db_xtp_checkpoint_files()
        {
        }

        public dm_db_xtp_checkpoint_files(object[] items)
        {
            container_id = (int)items[0];
            container_guid = (Guid?)items[1];
            checkpoint_file_id = (Guid?)items[2];
            relative_file_path = (string)items[3];
            file_type = (short?)items[4];
            file_type_desc = (string)items[5];
            internal_storage_slot = (int?)items[6];
            checkpoint_pair_file_id = (Guid?)items[7];
            file_size_in_bytes = (long?)items[8];
            file_size_used_in_bytes = (long?)items[9];
            inserted_row_count = (long?)items[10];
            deleted_row_count = (long?)items[11];
            drop_table_deleted_row_count = (long?)items[12];
            state = (short?)items[13];
            state_desc = (string)items[14];
            lower_bound_tsn = (long?)items[15];
            upper_bound_tsn = (long?)items[16];
            last_backup_page_count = (int?)items[17];
            delta_watermark_tsn = (long?)items[18];
            last_checkpoint_recovery_lsn = (decimal?)items[19];
            tombstone_operation_lsn = (decimal?)items[20];
            logical_deletion_log_block_id = (long?)items[21];
        }

        public dm_db_xtp_checkpoint_files(int container_id, Guid? container_guid, Guid? checkpoint_file_id, string relative_file_path, short? file_type, string file_type_desc, int? internal_storage_slot, Guid? checkpoint_pair_file_id, long? file_size_in_bytes, long? file_size_used_in_bytes, long? inserted_row_count, long? deleted_row_count, long? drop_table_deleted_row_count, short? state, string state_desc, long? lower_bound_tsn, long? upper_bound_tsn, int? last_backup_page_count, long? delta_watermark_tsn, decimal? last_checkpoint_recovery_lsn, decimal? tombstone_operation_lsn, long? logical_deletion_log_block_id)
        {
            this.container_id = container_id;
            this.container_guid = container_guid;
            this.checkpoint_file_id = checkpoint_file_id;
            this.relative_file_path = relative_file_path;
            this.file_type = file_type;
            this.file_type_desc = file_type_desc;
            this.internal_storage_slot = internal_storage_slot;
            this.checkpoint_pair_file_id = checkpoint_pair_file_id;
            this.file_size_in_bytes = file_size_in_bytes;
            this.file_size_used_in_bytes = file_size_used_in_bytes;
            this.inserted_row_count = inserted_row_count;
            this.deleted_row_count = deleted_row_count;
            this.drop_table_deleted_row_count = drop_table_deleted_row_count;
            this.state = state;
            this.state_desc = state_desc;
            this.lower_bound_tsn = lower_bound_tsn;
            this.upper_bound_tsn = upper_bound_tsn;
            this.last_backup_page_count = last_backup_page_count;
            this.delta_watermark_tsn = delta_watermark_tsn;
            this.last_checkpoint_recovery_lsn = last_checkpoint_recovery_lsn;
            this.tombstone_operation_lsn = tombstone_operation_lsn;
            this.logical_deletion_log_block_id = logical_deletion_log_block_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { container_id, container_guid, checkpoint_file_id, relative_file_path, file_type, file_type_desc, internal_storage_slot, checkpoint_pair_file_id, file_size_in_bytes, file_size_used_in_bytes, inserted_row_count, deleted_row_count, drop_table_deleted_row_count, state, state_desc, lower_bound_tsn, upper_bound_tsn, last_backup_page_count, delta_watermark_tsn, last_checkpoint_recovery_lsn, tombstone_operation_lsn, logical_deletion_log_block_id };
        }

        public override void SetItemArray(object[] items)
        {
            container_id = (int)items[0];
            container_guid = (Guid?)items[1];
            checkpoint_file_id = (Guid?)items[2];
            relative_file_path = (string)items[3];
            file_type = (short?)items[4];
            file_type_desc = (string)items[5];
            internal_storage_slot = (int?)items[6];
            checkpoint_pair_file_id = (Guid?)items[7];
            file_size_in_bytes = (long?)items[8];
            file_size_used_in_bytes = (long?)items[9];
            inserted_row_count = (long?)items[10];
            deleted_row_count = (long?)items[11];
            drop_table_deleted_row_count = (long?)items[12];
            state = (short?)items[13];
            state_desc = (string)items[14];
            lower_bound_tsn = (long?)items[15];
            upper_bound_tsn = (long?)items[16];
            last_backup_page_count = (int?)items[17];
            delta_watermark_tsn = (long?)items[18];
            last_checkpoint_recovery_lsn = (decimal?)items[19];
            tombstone_operation_lsn = (decimal?)items[20];
            logical_deletion_log_block_id = (long?)items[21];
        }
    }

    [SqlView("sys", "dm_db_mirroring_connections")]
    public partial class dm_db_mirroring_connections : SqlViewProxy
    {
        [SqlColumn("connection_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? connection_id
        {
            get;
            set;
        }

        [SqlColumn("transport_stream_id", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? transport_stream_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("smallint", true)]
        public short? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("connect_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? connect_time
        {
            get;
            set;
        }

        [SqlColumn("login_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? login_time
        {
            get;
            set;
        }

        [SqlColumn("authentication_method", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string authentication_method
        {
            get;
            set;
        }

        [SqlColumn("principal_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string principal_name
        {
            get;
            set;
        }

        [SqlColumn("remote_user_name", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string remote_user_name
        {
            get;
            set;
        }

        [SqlColumn("last_activity_time", 9), SqlTypeFacets("datetime", true)]
        public DateTime? last_activity_time
        {
            get;
            set;
        }

        [SqlColumn("is_accept", 10), SqlTypeFacets("bit", true)]
        public bool? is_accept
        {
            get;
            set;
        }

        [SqlColumn("login_state", 11), SqlTypeFacets("smallint", true)]
        public short? login_state
        {
            get;
            set;
        }

        [SqlColumn("login_state_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string login_state_desc
        {
            get;
            set;
        }

        [SqlColumn("peer_certificate_id", 13), SqlTypeFacets("int", true)]
        public int? peer_certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 14), SqlTypeFacets("smallint", true)]
        public short? encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 15), SqlTypeFacets("nvarchar", true, 120)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("receives_posted", 16), SqlTypeFacets("smallint", true)]
        public short? receives_posted
        {
            get;
            set;
        }

        [SqlColumn("is_receive_flow_controlled", 17), SqlTypeFacets("bit", true)]
        public bool? is_receive_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("sends_posted", 18), SqlTypeFacets("smallint", true)]
        public short? sends_posted
        {
            get;
            set;
        }

        [SqlColumn("is_send_flow_controlled", 19), SqlTypeFacets("bit", true)]
        public bool? is_send_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_sent", 20), SqlTypeFacets("bigint", true)]
        public long? total_bytes_sent
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_received", 21), SqlTypeFacets("bigint", true)]
        public long? total_bytes_received
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_sent", 22), SqlTypeFacets("bigint", true)]
        public long? total_fragments_sent
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_received", 23), SqlTypeFacets("bigint", true)]
        public long? total_fragments_received
        {
            get;
            set;
        }

        [SqlColumn("total_sends", 24), SqlTypeFacets("bigint", true)]
        public long? total_sends
        {
            get;
            set;
        }

        [SqlColumn("total_receives", 25), SqlTypeFacets("bigint", true)]
        public long? total_receives
        {
            get;
            set;
        }

        [SqlColumn("peer_arbitration_id", 26), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? peer_arbitration_id
        {
            get;
            set;
        }

        public dm_db_mirroring_connections()
        {
        }

        public dm_db_mirroring_connections(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }

        public dm_db_mirroring_connections(Guid? connection_id, Guid? transport_stream_id, short? state, string state_desc, DateTime? connect_time, DateTime? login_time, string authentication_method, string principal_name, string remote_user_name, DateTime? last_activity_time, bool? is_accept, short? login_state, string login_state_desc, int? peer_certificate_id, short? encryption_algorithm, string encryption_algorithm_desc, short? receives_posted, bool? is_receive_flow_controlled, short? sends_posted, bool? is_send_flow_controlled, long? total_bytes_sent, long? total_bytes_received, long? total_fragments_sent, long? total_fragments_received, long? total_sends, long? total_receives, Guid? peer_arbitration_id)
        {
            this.connection_id = connection_id;
            this.transport_stream_id = transport_stream_id;
            this.state = state;
            this.state_desc = state_desc;
            this.connect_time = connect_time;
            this.login_time = login_time;
            this.authentication_method = authentication_method;
            this.principal_name = principal_name;
            this.remote_user_name = remote_user_name;
            this.last_activity_time = last_activity_time;
            this.is_accept = is_accept;
            this.login_state = login_state;
            this.login_state_desc = login_state_desc;
            this.peer_certificate_id = peer_certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
            this.receives_posted = receives_posted;
            this.is_receive_flow_controlled = is_receive_flow_controlled;
            this.sends_posted = sends_posted;
            this.is_send_flow_controlled = is_send_flow_controlled;
            this.total_bytes_sent = total_bytes_sent;
            this.total_bytes_received = total_bytes_received;
            this.total_fragments_sent = total_fragments_sent;
            this.total_fragments_received = total_fragments_received;
            this.total_sends = total_sends;
            this.total_receives = total_receives;
            this.peer_arbitration_id = peer_arbitration_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { connection_id, transport_stream_id, state, state_desc, connect_time, login_time, authentication_method, principal_name, remote_user_name, last_activity_time, is_accept, login_state, login_state_desc, peer_certificate_id, encryption_algorithm, encryption_algorithm_desc, receives_posted, is_receive_flow_controlled, sends_posted, is_send_flow_controlled, total_bytes_sent, total_bytes_received, total_fragments_sent, total_fragments_received, total_sends, total_receives, peer_arbitration_id };
        }

        public override void SetItemArray(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }
    }

    [SqlView("sys", "dm_repl_schemas")]
    public partial class dm_repl_schemas : SqlViewProxy
    {
        [SqlColumn("se_offset", 40), SqlTypeFacets("int", true)]
        public int? se_offset
        {
            get;
            set;
        }

        [SqlColumn("se_bitpos", 41), SqlTypeFacets("tinyint", true)]
        public byte? se_bitpos
        {
            get;
            set;
        }

        [SqlColumn("se_fNullable", 42), SqlTypeFacets("tinyint", true)]
        public byte? se_fNullable
        {
            get;
            set;
        }

        [SqlColumn("se_fAnsiTrim", 43), SqlTypeFacets("tinyint", true)]
        public byte? se_fAnsiTrim
        {
            get;
            set;
        }

        [SqlColumn("se_computed", 44), SqlTypeFacets("tinyint", true)]
        public byte? se_computed
        {
            get;
            set;
        }

        [SqlColumn("se_nullBitInLeafRows", 45), SqlTypeFacets("smallint", true)]
        public short? se_nullBitInLeafRows
        {
            get;
            set;
        }

        [SqlColumn("artcache_schema_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_schema_address
        {
            get;
            set;
        }

        [SqlColumn("tabid", 1), SqlTypeFacets("int", true)]
        public int? tabid
        {
            get;
            set;
        }

        [SqlColumn("indexid", 2), SqlTypeFacets("smallint", true)]
        public short? indexid
        {
            get;
            set;
        }

        [SqlColumn("idSch", 3), SqlTypeFacets("int", true)]
        public int? idSch
        {
            get;
            set;
        }

        [SqlColumn("tabschema", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string tabschema
        {
            get;
            set;
        }

        [SqlColumn("ccTabschema", 5), SqlTypeFacets("smallint", true)]
        public short? ccTabschema
        {
            get;
            set;
        }

        [SqlColumn("tabname", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string tabname
        {
            get;
            set;
        }

        [SqlColumn("ccTabname", 7), SqlTypeFacets("smallint", true)]
        public short? ccTabname
        {
            get;
            set;
        }

        [SqlColumn("rowsetid_delete", 8), SqlTypeFacets("bigint", true)]
        public long? rowsetid_delete
        {
            get;
            set;
        }

        [SqlColumn("rowsetid_insert", 9), SqlTypeFacets("bigint", true)]
        public long? rowsetid_insert
        {
            get;
            set;
        }

        [SqlColumn("num_pk_cols", 10), SqlTypeFacets("int", true)]
        public int? num_pk_cols
        {
            get;
            set;
        }

        [SqlColumn("pcitee", 11), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] pcitee
        {
            get;
            set;
        }

        [SqlColumn("re_numtextcols", 12), SqlTypeFacets("int", true)]
        public int? re_numtextcols
        {
            get;
            set;
        }

        [SqlColumn("re_schema_lsn_begin", 13), SqlTypeFacets("nvarchar", true, 48)]
        public string re_schema_lsn_begin
        {
            get;
            set;
        }

        [SqlColumn("re_schema_lsn_end", 14), SqlTypeFacets("nvarchar", true, 48)]
        public string re_schema_lsn_end
        {
            get;
            set;
        }

        [SqlColumn("re_numcols", 15), SqlTypeFacets("int", true)]
        public int? re_numcols
        {
            get;
            set;
        }

        [SqlColumn("re_colid", 16), SqlTypeFacets("int", true)]
        public int? re_colid
        {
            get;
            set;
        }

        [SqlColumn("re_awcName", 17), SqlTypeFacets("nvarchar", true, 512)]
        public string re_awcName
        {
            get;
            set;
        }

        [SqlColumn("re_ccName", 18), SqlTypeFacets("smallint", true)]
        public short? re_ccName
        {
            get;
            set;
        }

        [SqlColumn("re_colattr", 19), SqlTypeFacets("smallint", true)]
        public short? re_colattr
        {
            get;
            set;
        }

        [SqlColumn("re_maxlen", 20), SqlTypeFacets("smallint", true)]
        public short? re_maxlen
        {
            get;
            set;
        }

        [SqlColumn("re_prec", 21), SqlTypeFacets("tinyint", true)]
        public byte? re_prec
        {
            get;
            set;
        }

        [SqlColumn("re_scale", 22), SqlTypeFacets("tinyint", true)]
        public byte? re_scale
        {
            get;
            set;
        }

        [SqlColumn("re_collatid", 23), SqlTypeFacets("int", true)]
        public int? re_collatid
        {
            get;
            set;
        }

        [SqlColumn("re_xvtype", 24), SqlTypeFacets("tinyint", true)]
        public byte? re_xvtype
        {
            get;
            set;
        }

        [SqlColumn("re_offset", 25), SqlTypeFacets("int", true)]
        public int? re_offset
        {
            get;
            set;
        }

        [SqlColumn("re_bitpos", 26), SqlTypeFacets("tinyint", true)]
        public byte? re_bitpos
        {
            get;
            set;
        }

        [SqlColumn("re_fNullable", 27), SqlTypeFacets("tinyint", true)]
        public byte? re_fNullable
        {
            get;
            set;
        }

        [SqlColumn("re_fAnsiTrim", 28), SqlTypeFacets("tinyint", true)]
        public byte? re_fAnsiTrim
        {
            get;
            set;
        }

        [SqlColumn("re_computed", 29), SqlTypeFacets("int", true)]
        public int? re_computed
        {
            get;
            set;
        }

        [SqlColumn("se_rowsetid", 30), SqlTypeFacets("bigint", true)]
        public long? se_rowsetid
        {
            get;
            set;
        }

        [SqlColumn("se_schema_lsn_begin", 31), SqlTypeFacets("nvarchar", true, 48)]
        public string se_schema_lsn_begin
        {
            get;
            set;
        }

        [SqlColumn("se_schema_lsn_end", 32), SqlTypeFacets("nvarchar", true, 48)]
        public string se_schema_lsn_end
        {
            get;
            set;
        }

        [SqlColumn("se_numcols", 33), SqlTypeFacets("int", true)]
        public int? se_numcols
        {
            get;
            set;
        }

        [SqlColumn("se_colid", 34), SqlTypeFacets("int", true)]
        public int? se_colid
        {
            get;
            set;
        }

        [SqlColumn("se_maxlen", 35), SqlTypeFacets("smallint", true)]
        public short? se_maxlen
        {
            get;
            set;
        }

        [SqlColumn("se_prec", 36), SqlTypeFacets("tinyint", true)]
        public byte? se_prec
        {
            get;
            set;
        }

        [SqlColumn("se_scale", 37), SqlTypeFacets("tinyint", true)]
        public byte? se_scale
        {
            get;
            set;
        }

        [SqlColumn("se_collatid", 38), SqlTypeFacets("int", true)]
        public int? se_collatid
        {
            get;
            set;
        }

        [SqlColumn("se_xvtype", 39), SqlTypeFacets("tinyint", true)]
        public byte? se_xvtype
        {
            get;
            set;
        }

        public dm_repl_schemas()
        {
        }

        public dm_repl_schemas(object[] items)
        {
            se_offset = (int?)items[0];
            se_bitpos = (byte?)items[1];
            se_fNullable = (byte?)items[2];
            se_fAnsiTrim = (byte?)items[3];
            se_computed = (byte?)items[4];
            se_nullBitInLeafRows = (short?)items[5];
            artcache_schema_address = (Byte[])items[6];
            tabid = (int?)items[7];
            indexid = (short?)items[8];
            idSch = (int?)items[9];
            tabschema = (string)items[10];
            ccTabschema = (short?)items[11];
            tabname = (string)items[12];
            ccTabname = (short?)items[13];
            rowsetid_delete = (long?)items[14];
            rowsetid_insert = (long?)items[15];
            num_pk_cols = (int?)items[16];
            pcitee = (Byte[])items[17];
            re_numtextcols = (int?)items[18];
            re_schema_lsn_begin = (string)items[19];
            re_schema_lsn_end = (string)items[20];
            re_numcols = (int?)items[21];
            re_colid = (int?)items[22];
            re_awcName = (string)items[23];
            re_ccName = (short?)items[24];
            re_colattr = (short?)items[25];
            re_maxlen = (short?)items[26];
            re_prec = (byte?)items[27];
            re_scale = (byte?)items[28];
            re_collatid = (int?)items[29];
            re_xvtype = (byte?)items[30];
            re_offset = (int?)items[31];
            re_bitpos = (byte?)items[32];
            re_fNullable = (byte?)items[33];
            re_fAnsiTrim = (byte?)items[34];
            re_computed = (int?)items[35];
            se_rowsetid = (long?)items[36];
            se_schema_lsn_begin = (string)items[37];
            se_schema_lsn_end = (string)items[38];
            se_numcols = (int?)items[39];
            se_colid = (int?)items[40];
            se_maxlen = (short?)items[41];
            se_prec = (byte?)items[42];
            se_scale = (byte?)items[43];
            se_collatid = (int?)items[44];
            se_xvtype = (byte?)items[45];
        }

        public dm_repl_schemas(int? se_offset, byte? se_bitpos, byte? se_fNullable, byte? se_fAnsiTrim, byte? se_computed, short? se_nullBitInLeafRows, Byte[] artcache_schema_address, int? tabid, short? indexid, int? idSch, string tabschema, short? ccTabschema, string tabname, short? ccTabname, long? rowsetid_delete, long? rowsetid_insert, int? num_pk_cols, Byte[] pcitee, int? re_numtextcols, string re_schema_lsn_begin, string re_schema_lsn_end, int? re_numcols, int? re_colid, string re_awcName, short? re_ccName, short? re_colattr, short? re_maxlen, byte? re_prec, byte? re_scale, int? re_collatid, byte? re_xvtype, int? re_offset, byte? re_bitpos, byte? re_fNullable, byte? re_fAnsiTrim, int? re_computed, long? se_rowsetid, string se_schema_lsn_begin, string se_schema_lsn_end, int? se_numcols, int? se_colid, short? se_maxlen, byte? se_prec, byte? se_scale, int? se_collatid, byte? se_xvtype)
        {
            this.se_offset = se_offset;
            this.se_bitpos = se_bitpos;
            this.se_fNullable = se_fNullable;
            this.se_fAnsiTrim = se_fAnsiTrim;
            this.se_computed = se_computed;
            this.se_nullBitInLeafRows = se_nullBitInLeafRows;
            this.artcache_schema_address = artcache_schema_address;
            this.tabid = tabid;
            this.indexid = indexid;
            this.idSch = idSch;
            this.tabschema = tabschema;
            this.ccTabschema = ccTabschema;
            this.tabname = tabname;
            this.ccTabname = ccTabname;
            this.rowsetid_delete = rowsetid_delete;
            this.rowsetid_insert = rowsetid_insert;
            this.num_pk_cols = num_pk_cols;
            this.pcitee = pcitee;
            this.re_numtextcols = re_numtextcols;
            this.re_schema_lsn_begin = re_schema_lsn_begin;
            this.re_schema_lsn_end = re_schema_lsn_end;
            this.re_numcols = re_numcols;
            this.re_colid = re_colid;
            this.re_awcName = re_awcName;
            this.re_ccName = re_ccName;
            this.re_colattr = re_colattr;
            this.re_maxlen = re_maxlen;
            this.re_prec = re_prec;
            this.re_scale = re_scale;
            this.re_collatid = re_collatid;
            this.re_xvtype = re_xvtype;
            this.re_offset = re_offset;
            this.re_bitpos = re_bitpos;
            this.re_fNullable = re_fNullable;
            this.re_fAnsiTrim = re_fAnsiTrim;
            this.re_computed = re_computed;
            this.se_rowsetid = se_rowsetid;
            this.se_schema_lsn_begin = se_schema_lsn_begin;
            this.se_schema_lsn_end = se_schema_lsn_end;
            this.se_numcols = se_numcols;
            this.se_colid = se_colid;
            this.se_maxlen = se_maxlen;
            this.se_prec = se_prec;
            this.se_scale = se_scale;
            this.se_collatid = se_collatid;
            this.se_xvtype = se_xvtype;
        }

        public override object[] GetItemArray()
        {
            return new object[] { se_offset, se_bitpos, se_fNullable, se_fAnsiTrim, se_computed, se_nullBitInLeafRows, artcache_schema_address, tabid, indexid, idSch, tabschema, ccTabschema, tabname, ccTabname, rowsetid_delete, rowsetid_insert, num_pk_cols, pcitee, re_numtextcols, re_schema_lsn_begin, re_schema_lsn_end, re_numcols, re_colid, re_awcName, re_ccName, re_colattr, re_maxlen, re_prec, re_scale, re_collatid, re_xvtype, re_offset, re_bitpos, re_fNullable, re_fAnsiTrim, re_computed, se_rowsetid, se_schema_lsn_begin, se_schema_lsn_end, se_numcols, se_colid, se_maxlen, se_prec, se_scale, se_collatid, se_xvtype };
        }

        public override void SetItemArray(object[] items)
        {
            se_offset = (int?)items[0];
            se_bitpos = (byte?)items[1];
            se_fNullable = (byte?)items[2];
            se_fAnsiTrim = (byte?)items[3];
            se_computed = (byte?)items[4];
            se_nullBitInLeafRows = (short?)items[5];
            artcache_schema_address = (Byte[])items[6];
            tabid = (int?)items[7];
            indexid = (short?)items[8];
            idSch = (int?)items[9];
            tabschema = (string)items[10];
            ccTabschema = (short?)items[11];
            tabname = (string)items[12];
            ccTabname = (short?)items[13];
            rowsetid_delete = (long?)items[14];
            rowsetid_insert = (long?)items[15];
            num_pk_cols = (int?)items[16];
            pcitee = (Byte[])items[17];
            re_numtextcols = (int?)items[18];
            re_schema_lsn_begin = (string)items[19];
            re_schema_lsn_end = (string)items[20];
            re_numcols = (int?)items[21];
            re_colid = (int?)items[22];
            re_awcName = (string)items[23];
            re_ccName = (short?)items[24];
            re_colattr = (short?)items[25];
            re_maxlen = (short?)items[26];
            re_prec = (byte?)items[27];
            re_scale = (byte?)items[28];
            re_collatid = (int?)items[29];
            re_xvtype = (byte?)items[30];
            re_offset = (int?)items[31];
            re_bitpos = (byte?)items[32];
            re_fNullable = (byte?)items[33];
            re_fAnsiTrim = (byte?)items[34];
            re_computed = (int?)items[35];
            se_rowsetid = (long?)items[36];
            se_schema_lsn_begin = (string)items[37];
            se_schema_lsn_end = (string)items[38];
            se_numcols = (int?)items[39];
            se_colid = (int?)items[40];
            se_maxlen = (short?)items[41];
            se_prec = (byte?)items[42];
            se_scale = (byte?)items[43];
            se_collatid = (int?)items[44];
            se_xvtype = (byte?)items[45];
        }
    }

    [SqlView("sys", "dm_os_memory_cache_clock_hands")]
    public partial class dm_os_memory_cache_clock_hands : SqlViewProxy
    {
        [SqlColumn("cache_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("clock_hand", 3), SqlTypeFacets("nvarchar", false, 120)]
        public string clock_hand
        {
            get;
            set;
        }

        [SqlColumn("clock_status", 4), SqlTypeFacets("nvarchar", false, 120)]
        public string clock_status
        {
            get;
            set;
        }

        [SqlColumn("rounds_count", 5), SqlTypeFacets("bigint", false)]
        public long rounds_count
        {
            get;
            set;
        }

        [SqlColumn("removed_all_rounds_count", 6), SqlTypeFacets("bigint", false)]
        public long removed_all_rounds_count
        {
            get;
            set;
        }

        [SqlColumn("updated_last_round_count", 7), SqlTypeFacets("bigint", false)]
        public long updated_last_round_count
        {
            get;
            set;
        }

        [SqlColumn("removed_last_round_count", 8), SqlTypeFacets("bigint", false)]
        public long removed_last_round_count
        {
            get;
            set;
        }

        [SqlColumn("last_tick_time", 9), SqlTypeFacets("bigint", false)]
        public long last_tick_time
        {
            get;
            set;
        }

        [SqlColumn("round_start_time", 10), SqlTypeFacets("bigint", false)]
        public long round_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_round_start_time", 11), SqlTypeFacets("bigint", false)]
        public long last_round_start_time
        {
            get;
            set;
        }

        public dm_os_memory_cache_clock_hands()
        {
        }

        public dm_os_memory_cache_clock_hands(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            clock_hand = (string)items[3];
            clock_status = (string)items[4];
            rounds_count = (long)items[5];
            removed_all_rounds_count = (long)items[6];
            updated_last_round_count = (long)items[7];
            removed_last_round_count = (long)items[8];
            last_tick_time = (long)items[9];
            round_start_time = (long)items[10];
            last_round_start_time = (long)items[11];
        }

        public dm_os_memory_cache_clock_hands(Byte[] cache_address, string name, string type, string clock_hand, string clock_status, long rounds_count, long removed_all_rounds_count, long updated_last_round_count, long removed_last_round_count, long last_tick_time, long round_start_time, long last_round_start_time)
        {
            this.cache_address = cache_address;
            this.name = name;
            this.type = type;
            this.clock_hand = clock_hand;
            this.clock_status = clock_status;
            this.rounds_count = rounds_count;
            this.removed_all_rounds_count = removed_all_rounds_count;
            this.updated_last_round_count = updated_last_round_count;
            this.removed_last_round_count = removed_last_round_count;
            this.last_tick_time = last_tick_time;
            this.round_start_time = round_start_time;
            this.last_round_start_time = last_round_start_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cache_address, name, type, clock_hand, clock_status, rounds_count, removed_all_rounds_count, updated_last_round_count, removed_last_round_count, last_tick_time, round_start_time, last_round_start_time };
        }

        public override void SetItemArray(object[] items)
        {
            cache_address = (Byte[])items[0];
            name = (string)items[1];
            type = (string)items[2];
            clock_hand = (string)items[3];
            clock_status = (string)items[4];
            rounds_count = (long)items[5];
            removed_all_rounds_count = (long)items[6];
            updated_last_round_count = (long)items[7];
            removed_last_round_count = (long)items[8];
            last_tick_time = (long)items[9];
            round_start_time = (long)items[10];
            last_round_start_time = (long)items[11];
        }
    }

    [SqlView("sys", "dm_cdc_log_scan_sessions")]
    public partial class dm_cdc_log_scan_sessions : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("start_time", 1), SqlTypeFacets("datetime", true)]
        public DateTime? start_time
        {
            get;
            set;
        }

        [SqlColumn("end_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? end_time
        {
            get;
            set;
        }

        [SqlColumn("duration", 3), SqlTypeFacets("int", true)]
        public int? duration
        {
            get;
            set;
        }

        [SqlColumn("scan_phase", 4), SqlTypeFacets("nvarchar", true, 400)]
        public string scan_phase
        {
            get;
            set;
        }

        [SqlColumn("error_count", 5), SqlTypeFacets("int", true)]
        public int? error_count
        {
            get;
            set;
        }

        [SqlColumn("start_lsn", 6), SqlTypeFacets("nvarchar", true, 48)]
        public string start_lsn
        {
            get;
            set;
        }

        [SqlColumn("current_lsn", 7), SqlTypeFacets("nvarchar", true, 48)]
        public string current_lsn
        {
            get;
            set;
        }

        [SqlColumn("end_lsn", 8), SqlTypeFacets("nvarchar", true, 48)]
        public string end_lsn
        {
            get;
            set;
        }

        [SqlColumn("tran_count", 9), SqlTypeFacets("bigint", true)]
        public long? tran_count
        {
            get;
            set;
        }

        [SqlColumn("last_commit_lsn", 10), SqlTypeFacets("nvarchar", true, 48)]
        public string last_commit_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_time", 11), SqlTypeFacets("datetime", true)]
        public DateTime? last_commit_time
        {
            get;
            set;
        }

        [SqlColumn("log_record_count", 12), SqlTypeFacets("bigint", true)]
        public long? log_record_count
        {
            get;
            set;
        }

        [SqlColumn("schema_change_count", 13), SqlTypeFacets("int", true)]
        public int? schema_change_count
        {
            get;
            set;
        }

        [SqlColumn("command_count", 14), SqlTypeFacets("bigint", true)]
        public long? command_count
        {
            get;
            set;
        }

        [SqlColumn("first_begin_cdc_lsn", 15), SqlTypeFacets("nvarchar", true, 48)]
        public string first_begin_cdc_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_cdc_lsn", 16), SqlTypeFacets("nvarchar", true, 48)]
        public string last_commit_cdc_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_cdc_time", 17), SqlTypeFacets("datetime", true)]
        public DateTime? last_commit_cdc_time
        {
            get;
            set;
        }

        [SqlColumn("latency", 18), SqlTypeFacets("int", true)]
        public int? latency
        {
            get;
            set;
        }

        [SqlColumn("empty_scan_count", 19), SqlTypeFacets("int", true)]
        public int? empty_scan_count
        {
            get;
            set;
        }

        [SqlColumn("failed_sessions_count", 20), SqlTypeFacets("int", true)]
        public int? failed_sessions_count
        {
            get;
            set;
        }

        public dm_cdc_log_scan_sessions()
        {
        }

        public dm_cdc_log_scan_sessions(object[] items)
        {
            session_id = (int?)items[0];
            start_time = (DateTime?)items[1];
            end_time = (DateTime?)items[2];
            duration = (int?)items[3];
            scan_phase = (string)items[4];
            error_count = (int?)items[5];
            start_lsn = (string)items[6];
            current_lsn = (string)items[7];
            end_lsn = (string)items[8];
            tran_count = (long?)items[9];
            last_commit_lsn = (string)items[10];
            last_commit_time = (DateTime?)items[11];
            log_record_count = (long?)items[12];
            schema_change_count = (int?)items[13];
            command_count = (long?)items[14];
            first_begin_cdc_lsn = (string)items[15];
            last_commit_cdc_lsn = (string)items[16];
            last_commit_cdc_time = (DateTime?)items[17];
            latency = (int?)items[18];
            empty_scan_count = (int?)items[19];
            failed_sessions_count = (int?)items[20];
        }

        public dm_cdc_log_scan_sessions(int? session_id, DateTime? start_time, DateTime? end_time, int? duration, string scan_phase, int? error_count, string start_lsn, string current_lsn, string end_lsn, long? tran_count, string last_commit_lsn, DateTime? last_commit_time, long? log_record_count, int? schema_change_count, long? command_count, string first_begin_cdc_lsn, string last_commit_cdc_lsn, DateTime? last_commit_cdc_time, int? latency, int? empty_scan_count, int? failed_sessions_count)
        {
            this.session_id = session_id;
            this.start_time = start_time;
            this.end_time = end_time;
            this.duration = duration;
            this.scan_phase = scan_phase;
            this.error_count = error_count;
            this.start_lsn = start_lsn;
            this.current_lsn = current_lsn;
            this.end_lsn = end_lsn;
            this.tran_count = tran_count;
            this.last_commit_lsn = last_commit_lsn;
            this.last_commit_time = last_commit_time;
            this.log_record_count = log_record_count;
            this.schema_change_count = schema_change_count;
            this.command_count = command_count;
            this.first_begin_cdc_lsn = first_begin_cdc_lsn;
            this.last_commit_cdc_lsn = last_commit_cdc_lsn;
            this.last_commit_cdc_time = last_commit_cdc_time;
            this.latency = latency;
            this.empty_scan_count = empty_scan_count;
            this.failed_sessions_count = failed_sessions_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, start_time, end_time, duration, scan_phase, error_count, start_lsn, current_lsn, end_lsn, tran_count, last_commit_lsn, last_commit_time, log_record_count, schema_change_count, command_count, first_begin_cdc_lsn, last_commit_cdc_lsn, last_commit_cdc_time, latency, empty_scan_count, failed_sessions_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int?)items[0];
            start_time = (DateTime?)items[1];
            end_time = (DateTime?)items[2];
            duration = (int?)items[3];
            scan_phase = (string)items[4];
            error_count = (int?)items[5];
            start_lsn = (string)items[6];
            current_lsn = (string)items[7];
            end_lsn = (string)items[8];
            tran_count = (long?)items[9];
            last_commit_lsn = (string)items[10];
            last_commit_time = (DateTime?)items[11];
            log_record_count = (long?)items[12];
            schema_change_count = (int?)items[13];
            command_count = (long?)items[14];
            first_begin_cdc_lsn = (string)items[15];
            last_commit_cdc_lsn = (string)items[16];
            last_commit_cdc_time = (DateTime?)items[17];
            latency = (int?)items[18];
            empty_scan_count = (int?)items[19];
            failed_sessions_count = (int?)items[20];
        }
    }

    [SqlView("sys", "dm_filestream_file_io_requests")]
    public partial class dm_filestream_file_io_requests : SqlViewProxy
    {
        [SqlColumn("request_context_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] request_context_address
        {
            get;
            set;
        }

        [SqlColumn("current_spid", 1), SqlTypeFacets("smallint", false)]
        public short current_spid
        {
            get;
            set;
        }

        [SqlColumn("request_type", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string request_type
        {
            get;
            set;
        }

        [SqlColumn("request_state", 3), SqlTypeFacets("nvarchar", false, 120)]
        public string request_state
        {
            get;
            set;
        }

        [SqlColumn("request_id", 4), SqlTypeFacets("int", false)]
        public int request_id
        {
            get;
            set;
        }

        [SqlColumn("irp_id", 5), SqlTypeFacets("int", false)]
        public int irp_id
        {
            get;
            set;
        }

        [SqlColumn("handle_id", 6), SqlTypeFacets("int", false)]
        public int handle_id
        {
            get;
            set;
        }

        [SqlColumn("client_thread_id", 7), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] client_thread_id
        {
            get;
            set;
        }

        [SqlColumn("client_process_id", 8), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] client_process_id
        {
            get;
            set;
        }

        [SqlColumn("handle_context_address", 9), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] handle_context_address
        {
            get;
            set;
        }

        [SqlColumn("filestream_transaction_id", 10), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] filestream_transaction_id
        {
            get;
            set;
        }

        public dm_filestream_file_io_requests()
        {
        }

        public dm_filestream_file_io_requests(object[] items)
        {
            request_context_address = (Byte[])items[0];
            current_spid = (short)items[1];
            request_type = (string)items[2];
            request_state = (string)items[3];
            request_id = (int)items[4];
            irp_id = (int)items[5];
            handle_id = (int)items[6];
            client_thread_id = (Byte[])items[7];
            client_process_id = (Byte[])items[8];
            handle_context_address = (Byte[])items[9];
            filestream_transaction_id = (Byte[])items[10];
        }

        public dm_filestream_file_io_requests(Byte[] request_context_address, short current_spid, string request_type, string request_state, int request_id, int irp_id, int handle_id, Byte[] client_thread_id, Byte[] client_process_id, Byte[] handle_context_address, Byte[] filestream_transaction_id)
        {
            this.request_context_address = request_context_address;
            this.current_spid = current_spid;
            this.request_type = request_type;
            this.request_state = request_state;
            this.request_id = request_id;
            this.irp_id = irp_id;
            this.handle_id = handle_id;
            this.client_thread_id = client_thread_id;
            this.client_process_id = client_process_id;
            this.handle_context_address = handle_context_address;
            this.filestream_transaction_id = filestream_transaction_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { request_context_address, current_spid, request_type, request_state, request_id, irp_id, handle_id, client_thread_id, client_process_id, handle_context_address, filestream_transaction_id };
        }

        public override void SetItemArray(object[] items)
        {
            request_context_address = (Byte[])items[0];
            current_spid = (short)items[1];
            request_type = (string)items[2];
            request_state = (string)items[3];
            request_id = (int)items[4];
            irp_id = (int)items[5];
            handle_id = (int)items[6];
            client_thread_id = (Byte[])items[7];
            client_process_id = (Byte[])items[8];
            handle_context_address = (Byte[])items[9];
            filestream_transaction_id = (Byte[])items[10];
        }
    }

    [SqlView("sys", "dm_tran_database_transactions")]
    public partial class dm_tran_database_transactions : SqlViewProxy
    {
        [SqlColumn("transaction_id", 0), SqlTypeFacets("bigint", false)]
        public long transaction_id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_begin_time", 2), SqlTypeFacets("datetime", true)]
        public DateTime? database_transaction_begin_time
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_type", 3), SqlTypeFacets("int", false)]
        public int database_transaction_type
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_state", 4), SqlTypeFacets("int", false)]
        public int database_transaction_state
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_status", 5), SqlTypeFacets("int", false)]
        public int database_transaction_status
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_status2", 6), SqlTypeFacets("int", false)]
        public int database_transaction_status2
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_log_record_count", 7), SqlTypeFacets("bigint", false)]
        public long database_transaction_log_record_count
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_replicate_record_count", 8), SqlTypeFacets("int", false)]
        public int database_transaction_replicate_record_count
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_log_bytes_used", 9), SqlTypeFacets("bigint", false)]
        public long database_transaction_log_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_log_bytes_reserved", 10), SqlTypeFacets("bigint", false)]
        public long database_transaction_log_bytes_reserved
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_log_bytes_used_system", 11), SqlTypeFacets("int", false)]
        public int database_transaction_log_bytes_used_system
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_log_bytes_reserved_system", 12), SqlTypeFacets("int", false)]
        public int database_transaction_log_bytes_reserved_system
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_begin_lsn", 13), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_begin_lsn
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_last_lsn", 14), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_last_lsn
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_most_recent_savepoint_lsn", 15), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_most_recent_savepoint_lsn
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_commit_lsn", 16), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_commit_lsn
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_last_rollback_lsn", 17), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_last_rollback_lsn
        {
            get;
            set;
        }

        [SqlColumn("database_transaction_next_undo_lsn", 18), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? database_transaction_next_undo_lsn
        {
            get;
            set;
        }

        public dm_tran_database_transactions()
        {
        }

        public dm_tran_database_transactions(object[] items)
        {
            transaction_id = (long)items[0];
            database_id = (int)items[1];
            database_transaction_begin_time = (DateTime?)items[2];
            database_transaction_type = (int)items[3];
            database_transaction_state = (int)items[4];
            database_transaction_status = (int)items[5];
            database_transaction_status2 = (int)items[6];
            database_transaction_log_record_count = (long)items[7];
            database_transaction_replicate_record_count = (int)items[8];
            database_transaction_log_bytes_used = (long)items[9];
            database_transaction_log_bytes_reserved = (long)items[10];
            database_transaction_log_bytes_used_system = (int)items[11];
            database_transaction_log_bytes_reserved_system = (int)items[12];
            database_transaction_begin_lsn = (decimal?)items[13];
            database_transaction_last_lsn = (decimal?)items[14];
            database_transaction_most_recent_savepoint_lsn = (decimal?)items[15];
            database_transaction_commit_lsn = (decimal?)items[16];
            database_transaction_last_rollback_lsn = (decimal?)items[17];
            database_transaction_next_undo_lsn = (decimal?)items[18];
        }

        public dm_tran_database_transactions(long transaction_id, int database_id, DateTime? database_transaction_begin_time, int database_transaction_type, int database_transaction_state, int database_transaction_status, int database_transaction_status2, long database_transaction_log_record_count, int database_transaction_replicate_record_count, long database_transaction_log_bytes_used, long database_transaction_log_bytes_reserved, int database_transaction_log_bytes_used_system, int database_transaction_log_bytes_reserved_system, decimal? database_transaction_begin_lsn, decimal? database_transaction_last_lsn, decimal? database_transaction_most_recent_savepoint_lsn, decimal? database_transaction_commit_lsn, decimal? database_transaction_last_rollback_lsn, decimal? database_transaction_next_undo_lsn)
        {
            this.transaction_id = transaction_id;
            this.database_id = database_id;
            this.database_transaction_begin_time = database_transaction_begin_time;
            this.database_transaction_type = database_transaction_type;
            this.database_transaction_state = database_transaction_state;
            this.database_transaction_status = database_transaction_status;
            this.database_transaction_status2 = database_transaction_status2;
            this.database_transaction_log_record_count = database_transaction_log_record_count;
            this.database_transaction_replicate_record_count = database_transaction_replicate_record_count;
            this.database_transaction_log_bytes_used = database_transaction_log_bytes_used;
            this.database_transaction_log_bytes_reserved = database_transaction_log_bytes_reserved;
            this.database_transaction_log_bytes_used_system = database_transaction_log_bytes_used_system;
            this.database_transaction_log_bytes_reserved_system = database_transaction_log_bytes_reserved_system;
            this.database_transaction_begin_lsn = database_transaction_begin_lsn;
            this.database_transaction_last_lsn = database_transaction_last_lsn;
            this.database_transaction_most_recent_savepoint_lsn = database_transaction_most_recent_savepoint_lsn;
            this.database_transaction_commit_lsn = database_transaction_commit_lsn;
            this.database_transaction_last_rollback_lsn = database_transaction_last_rollback_lsn;
            this.database_transaction_next_undo_lsn = database_transaction_next_undo_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_id, database_id, database_transaction_begin_time, database_transaction_type, database_transaction_state, database_transaction_status, database_transaction_status2, database_transaction_log_record_count, database_transaction_replicate_record_count, database_transaction_log_bytes_used, database_transaction_log_bytes_reserved, database_transaction_log_bytes_used_system, database_transaction_log_bytes_reserved_system, database_transaction_begin_lsn, database_transaction_last_lsn, database_transaction_most_recent_savepoint_lsn, database_transaction_commit_lsn, database_transaction_last_rollback_lsn, database_transaction_next_undo_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_id = (long)items[0];
            database_id = (int)items[1];
            database_transaction_begin_time = (DateTime?)items[2];
            database_transaction_type = (int)items[3];
            database_transaction_state = (int)items[4];
            database_transaction_status = (int)items[5];
            database_transaction_status2 = (int)items[6];
            database_transaction_log_record_count = (long)items[7];
            database_transaction_replicate_record_count = (int)items[8];
            database_transaction_log_bytes_used = (long)items[9];
            database_transaction_log_bytes_reserved = (long)items[10];
            database_transaction_log_bytes_used_system = (int)items[11];
            database_transaction_log_bytes_reserved_system = (int)items[12];
            database_transaction_begin_lsn = (decimal?)items[13];
            database_transaction_last_lsn = (decimal?)items[14];
            database_transaction_most_recent_savepoint_lsn = (decimal?)items[15];
            database_transaction_commit_lsn = (decimal?)items[16];
            database_transaction_last_rollback_lsn = (decimal?)items[17];
            database_transaction_next_undo_lsn = (decimal?)items[18];
        }
    }

    [SqlView("sys", "dm_fts_active_catalogs")]
    public partial class dm_fts_active_catalogs : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("catalog_id", 1), SqlTypeFacets("int", false)]
        public int catalog_id
        {
            get;
            set;
        }

        [SqlColumn("memory_address", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("name", 3), SqlTypeFacets("nvarchar", false, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("is_paused", 4), SqlTypeFacets("bit", false)]
        public bool is_paused
        {
            get;
            set;
        }

        [SqlColumn("status", 5), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("status_description", 6), SqlTypeFacets("nvarchar", true, 128)]
        public string status_description
        {
            get;
            set;
        }

        [SqlColumn("previous_status", 7), SqlTypeFacets("int", false)]
        public int previous_status
        {
            get;
            set;
        }

        [SqlColumn("previous_status_description", 8), SqlTypeFacets("nvarchar", true, 128)]
        public string previous_status_description
        {
            get;
            set;
        }

        [SqlColumn("worker_count", 9), SqlTypeFacets("int", false)]
        public int worker_count
        {
            get;
            set;
        }

        [SqlColumn("active_fts_index_count", 10), SqlTypeFacets("int", false)]
        public int active_fts_index_count
        {
            get;
            set;
        }

        [SqlColumn("auto_population_count", 11), SqlTypeFacets("int", false)]
        public int auto_population_count
        {
            get;
            set;
        }

        [SqlColumn("manual_population_count", 12), SqlTypeFacets("int", false)]
        public int manual_population_count
        {
            get;
            set;
        }

        [SqlColumn("full_incremental_population_count", 13), SqlTypeFacets("int", false)]
        public int full_incremental_population_count
        {
            get;
            set;
        }

        [SqlColumn("row_count_in_thousands", 14), SqlTypeFacets("int", false)]
        public int row_count_in_thousands
        {
            get;
            set;
        }

        [SqlColumn("is_importing", 15), SqlTypeFacets("bit", false)]
        public bool is_importing
        {
            get;
            set;
        }

        public dm_fts_active_catalogs()
        {
        }

        public dm_fts_active_catalogs(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            memory_address = (Byte[])items[2];
            name = (string)items[3];
            is_paused = (bool)items[4];
            status = (int)items[5];
            status_description = (string)items[6];
            previous_status = (int)items[7];
            previous_status_description = (string)items[8];
            worker_count = (int)items[9];
            active_fts_index_count = (int)items[10];
            auto_population_count = (int)items[11];
            manual_population_count = (int)items[12];
            full_incremental_population_count = (int)items[13];
            row_count_in_thousands = (int)items[14];
            is_importing = (bool)items[15];
        }

        public dm_fts_active_catalogs(int database_id, int catalog_id, Byte[] memory_address, string name, bool is_paused, int status, string status_description, int previous_status, string previous_status_description, int worker_count, int active_fts_index_count, int auto_population_count, int manual_population_count, int full_incremental_population_count, int row_count_in_thousands, bool is_importing)
        {
            this.database_id = database_id;
            this.catalog_id = catalog_id;
            this.memory_address = memory_address;
            this.name = name;
            this.is_paused = is_paused;
            this.status = status;
            this.status_description = status_description;
            this.previous_status = previous_status;
            this.previous_status_description = previous_status_description;
            this.worker_count = worker_count;
            this.active_fts_index_count = active_fts_index_count;
            this.auto_population_count = auto_population_count;
            this.manual_population_count = manual_population_count;
            this.full_incremental_population_count = full_incremental_population_count;
            this.row_count_in_thousands = row_count_in_thousands;
            this.is_importing = is_importing;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, catalog_id, memory_address, name, is_paused, status, status_description, previous_status, previous_status_description, worker_count, active_fts_index_count, auto_population_count, manual_population_count, full_incremental_population_count, row_count_in_thousands, is_importing };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            memory_address = (Byte[])items[2];
            name = (string)items[3];
            is_paused = (bool)items[4];
            status = (int)items[5];
            status_description = (string)items[6];
            previous_status = (int)items[7];
            previous_status_description = (string)items[8];
            worker_count = (int)items[9];
            active_fts_index_count = (int)items[10];
            auto_population_count = (int)items[11];
            manual_population_count = (int)items[12];
            full_incremental_population_count = (int)items[13];
            row_count_in_thousands = (int)items[14];
            is_importing = (bool)items[15];
        }
    }

    [SqlView("sys", "dm_hadr_availability_replica_cluster_nodes")]
    public partial class dm_hadr_availability_replica_cluster_nodes : SqlViewProxy
    {
        [SqlColumn("group_name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string group_name
        {
            get;
            set;
        }

        [SqlColumn("replica_server_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string replica_server_name
        {
            get;
            set;
        }

        [SqlColumn("node_name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string node_name
        {
            get;
            set;
        }

        public dm_hadr_availability_replica_cluster_nodes()
        {
        }

        public dm_hadr_availability_replica_cluster_nodes(object[] items)
        {
            group_name = (string)items[0];
            replica_server_name = (string)items[1];
            node_name = (string)items[2];
        }

        public dm_hadr_availability_replica_cluster_nodes(string group_name, string replica_server_name, string node_name)
        {
            this.group_name = group_name;
            this.replica_server_name = replica_server_name;
            this.node_name = node_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_name, replica_server_name, node_name };
        }

        public override void SetItemArray(object[] items)
        {
            group_name = (string)items[0];
            replica_server_name = (string)items[1];
            node_name = (string)items[2];
        }
    }

    [SqlView("sys", "dm_xtp_transaction_recent_rows")]
    public partial class dm_xtp_transaction_recent_rows : SqlViewProxy
    {
        [SqlColumn("xtp_transaction_id", 0), SqlTypeFacets("bigint", false)]
        public long xtp_transaction_id
        {
            get;
            set;
        }

        [SqlColumn("row_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] row_address
        {
            get;
            set;
        }

        [SqlColumn("table_address", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] table_address
        {
            get;
            set;
        }

        [SqlColumn("before_begin", 3), SqlTypeFacets("bigint", false)]
        public long before_begin
        {
            get;
            set;
        }

        [SqlColumn("before_end", 4), SqlTypeFacets("bigint", false)]
        public long before_end
        {
            get;
            set;
        }

        [SqlColumn("before_links", 5), SqlTypeFacets("int", false)]
        public int before_links
        {
            get;
            set;
        }

        [SqlColumn("before_time", 6), SqlTypeFacets("bigint", false)]
        public long before_time
        {
            get;
            set;
        }

        [SqlColumn("after_begin", 7), SqlTypeFacets("bigint", false)]
        public long after_begin
        {
            get;
            set;
        }

        [SqlColumn("after_end", 8), SqlTypeFacets("bigint", false)]
        public long after_end
        {
            get;
            set;
        }

        [SqlColumn("after_links", 9), SqlTypeFacets("int", false)]
        public int after_links
        {
            get;
            set;
        }

        [SqlColumn("after_time", 10), SqlTypeFacets("bigint", false)]
        public long after_time
        {
            get;
            set;
        }

        [SqlColumn("outcome", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] outcome
        {
            get;
            set;
        }

        public dm_xtp_transaction_recent_rows()
        {
        }

        public dm_xtp_transaction_recent_rows(object[] items)
        {
            xtp_transaction_id = (long)items[0];
            row_address = (Byte[])items[1];
            table_address = (Byte[])items[2];
            before_begin = (long)items[3];
            before_end = (long)items[4];
            before_links = (int)items[5];
            before_time = (long)items[6];
            after_begin = (long)items[7];
            after_end = (long)items[8];
            after_links = (int)items[9];
            after_time = (long)items[10];
            outcome = (Byte[])items[11];
        }

        public dm_xtp_transaction_recent_rows(long xtp_transaction_id, Byte[] row_address, Byte[] table_address, long before_begin, long before_end, int before_links, long before_time, long after_begin, long after_end, int after_links, long after_time, Byte[] outcome)
        {
            this.xtp_transaction_id = xtp_transaction_id;
            this.row_address = row_address;
            this.table_address = table_address;
            this.before_begin = before_begin;
            this.before_end = before_end;
            this.before_links = before_links;
            this.before_time = before_time;
            this.after_begin = after_begin;
            this.after_end = after_end;
            this.after_links = after_links;
            this.after_time = after_time;
            this.outcome = outcome;
        }

        public override object[] GetItemArray()
        {
            return new object[] { xtp_transaction_id, row_address, table_address, before_begin, before_end, before_links, before_time, after_begin, after_end, after_links, after_time, outcome };
        }

        public override void SetItemArray(object[] items)
        {
            xtp_transaction_id = (long)items[0];
            row_address = (Byte[])items[1];
            table_address = (Byte[])items[2];
            before_begin = (long)items[3];
            before_end = (long)items[4];
            before_links = (int)items[5];
            before_time = (long)items[6];
            after_begin = (long)items[7];
            after_end = (long)items[8];
            after_links = (int)items[9];
            after_time = (long)items[10];
            outcome = (Byte[])items[11];
        }
    }

    [SqlView("sys", "dm_filestream_file_io_handles")]
    public partial class dm_filestream_file_io_handles : SqlViewProxy
    {
        [SqlColumn("handle_context_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] handle_context_address
        {
            get;
            set;
        }

        [SqlColumn("creation_request_id", 1), SqlTypeFacets("int", false)]
        public int creation_request_id
        {
            get;
            set;
        }

        [SqlColumn("creation_irp_id", 2), SqlTypeFacets("int", false)]
        public int creation_irp_id
        {
            get;
            set;
        }

        [SqlColumn("handle_id", 3), SqlTypeFacets("int", false)]
        public int handle_id
        {
            get;
            set;
        }

        [SqlColumn("creation_client_thread_id", 4), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] creation_client_thread_id
        {
            get;
            set;
        }

        [SqlColumn("creation_client_process_id", 5), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] creation_client_process_id
        {
            get;
            set;
        }

        [SqlColumn("filestream_transaction_id", 6), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] filestream_transaction_id
        {
            get;
            set;
        }

        [SqlColumn("access_type", 7), SqlTypeFacets("nvarchar", false, 120)]
        public string access_type
        {
            get;
            set;
        }

        [SqlColumn("logical_path", 8), SqlTypeFacets("nvarchar", true, 512)]
        public string logical_path
        {
            get;
            set;
        }

        [SqlColumn("physical_path", 9), SqlTypeFacets("nvarchar", true, 512)]
        public string physical_path
        {
            get;
            set;
        }

        public dm_filestream_file_io_handles()
        {
        }

        public dm_filestream_file_io_handles(object[] items)
        {
            handle_context_address = (Byte[])items[0];
            creation_request_id = (int)items[1];
            creation_irp_id = (int)items[2];
            handle_id = (int)items[3];
            creation_client_thread_id = (Byte[])items[4];
            creation_client_process_id = (Byte[])items[5];
            filestream_transaction_id = (Byte[])items[6];
            access_type = (string)items[7];
            logical_path = (string)items[8];
            physical_path = (string)items[9];
        }

        public dm_filestream_file_io_handles(Byte[] handle_context_address, int creation_request_id, int creation_irp_id, int handle_id, Byte[] creation_client_thread_id, Byte[] creation_client_process_id, Byte[] filestream_transaction_id, string access_type, string logical_path, string physical_path)
        {
            this.handle_context_address = handle_context_address;
            this.creation_request_id = creation_request_id;
            this.creation_irp_id = creation_irp_id;
            this.handle_id = handle_id;
            this.creation_client_thread_id = creation_client_thread_id;
            this.creation_client_process_id = creation_client_process_id;
            this.filestream_transaction_id = filestream_transaction_id;
            this.access_type = access_type;
            this.logical_path = logical_path;
            this.physical_path = physical_path;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle_context_address, creation_request_id, creation_irp_id, handle_id, creation_client_thread_id, creation_client_process_id, filestream_transaction_id, access_type, logical_path, physical_path };
        }

        public override void SetItemArray(object[] items)
        {
            handle_context_address = (Byte[])items[0];
            creation_request_id = (int)items[1];
            creation_irp_id = (int)items[2];
            handle_id = (int)items[3];
            creation_client_thread_id = (Byte[])items[4];
            creation_client_process_id = (Byte[])items[5];
            filestream_transaction_id = (Byte[])items[6];
            access_type = (string)items[7];
            logical_path = (string)items[8];
            physical_path = (string)items[9];
        }
    }

    [SqlView("sys", "dm_os_memory_broker_clerks")]
    public partial class dm_os_memory_broker_clerks : SqlViewProxy
    {
        [SqlColumn("clerk_name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string clerk_name
        {
            get;
            set;
        }

        [SqlColumn("total_kb", 1), SqlTypeFacets("bigint", false)]
        public long total_kb
        {
            get;
            set;
        }

        [SqlColumn("simulated_kb", 2), SqlTypeFacets("bigint", false)]
        public long simulated_kb
        {
            get;
            set;
        }

        [SqlColumn("simulation_benefit", 3), SqlTypeFacets("float", false)]
        public double simulation_benefit
        {
            get;
            set;
        }

        [SqlColumn("internal_benefit", 4), SqlTypeFacets("float", false)]
        public double internal_benefit
        {
            get;
            set;
        }

        [SqlColumn("external_benefit", 5), SqlTypeFacets("float", false)]
        public double external_benefit
        {
            get;
            set;
        }

        [SqlColumn("value_of_memory", 6), SqlTypeFacets("float", false)]
        public double value_of_memory
        {
            get;
            set;
        }

        [SqlColumn("periodic_freed_kb", 7), SqlTypeFacets("bigint", false)]
        public long periodic_freed_kb
        {
            get;
            set;
        }

        [SqlColumn("internal_freed_kb", 8), SqlTypeFacets("bigint", false)]
        public long internal_freed_kb
        {
            get;
            set;
        }

        public dm_os_memory_broker_clerks()
        {
        }

        public dm_os_memory_broker_clerks(object[] items)
        {
            clerk_name = (string)items[0];
            total_kb = (long)items[1];
            simulated_kb = (long)items[2];
            simulation_benefit = (double)items[3];
            internal_benefit = (double)items[4];
            external_benefit = (double)items[5];
            value_of_memory = (double)items[6];
            periodic_freed_kb = (long)items[7];
            internal_freed_kb = (long)items[8];
        }

        public dm_os_memory_broker_clerks(string clerk_name, long total_kb, long simulated_kb, double simulation_benefit, double internal_benefit, double external_benefit, double value_of_memory, long periodic_freed_kb, long internal_freed_kb)
        {
            this.clerk_name = clerk_name;
            this.total_kb = total_kb;
            this.simulated_kb = simulated_kb;
            this.simulation_benefit = simulation_benefit;
            this.internal_benefit = internal_benefit;
            this.external_benefit = external_benefit;
            this.value_of_memory = value_of_memory;
            this.periodic_freed_kb = periodic_freed_kb;
            this.internal_freed_kb = internal_freed_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { clerk_name, total_kb, simulated_kb, simulation_benefit, internal_benefit, external_benefit, value_of_memory, periodic_freed_kb, internal_freed_kb };
        }

        public override void SetItemArray(object[] items)
        {
            clerk_name = (string)items[0];
            total_kb = (long)items[1];
            simulated_kb = (long)items[2];
            simulation_benefit = (double)items[3];
            internal_benefit = (double)items[4];
            external_benefit = (double)items[5];
            value_of_memory = (double)items[6];
            periodic_freed_kb = (long)items[7];
            internal_freed_kb = (long)items[8];
        }
    }

    [SqlView("sys", "event_notification_event_types")]
    public partial class event_notification_event_types : SqlViewProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_name", 1), SqlTypeFacets("nvarchar", true, 128)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("parent_type", 2), SqlTypeFacets("int", true)]
        public int? parent_type
        {
            get;
            set;
        }

        public event_notification_event_types()
        {
        }

        public event_notification_event_types(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }

        public event_notification_event_types(int type, string type_name, int? parent_type)
        {
            this.type = type;
            this.type_name = type_name;
            this.parent_type = parent_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, type_name, parent_type };
        }

        public override void SetItemArray(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }
    }

    [SqlView("sys", "dm_exec_background_job_queue_stats")]
    public partial class dm_exec_background_job_queue_stats : SqlViewProxy
    {
        [SqlColumn("queue_max_len", 0), SqlTypeFacets("int", false)]
        public int queue_max_len
        {
            get;
            set;
        }

        [SqlColumn("enqueued_count", 1), SqlTypeFacets("int", false)]
        public int enqueued_count
        {
            get;
            set;
        }

        [SqlColumn("started_count", 2), SqlTypeFacets("int", false)]
        public int started_count
        {
            get;
            set;
        }

        [SqlColumn("ended_count", 3), SqlTypeFacets("int", false)]
        public int ended_count
        {
            get;
            set;
        }

        [SqlColumn("failed_lock_count", 4), SqlTypeFacets("int", false)]
        public int failed_lock_count
        {
            get;
            set;
        }

        [SqlColumn("failed_other_count", 5), SqlTypeFacets("int", false)]
        public int failed_other_count
        {
            get;
            set;
        }

        [SqlColumn("failed_giveup_count", 6), SqlTypeFacets("int", false)]
        public int failed_giveup_count
        {
            get;
            set;
        }

        [SqlColumn("enqueue_failed_full_count", 7), SqlTypeFacets("int", false)]
        public int enqueue_failed_full_count
        {
            get;
            set;
        }

        [SqlColumn("enqueue_failed_duplicate_count", 8), SqlTypeFacets("int", false)]
        public int enqueue_failed_duplicate_count
        {
            get;
            set;
        }

        [SqlColumn("elapsed_avg_ms", 9), SqlTypeFacets("int", false)]
        public int elapsed_avg_ms
        {
            get;
            set;
        }

        [SqlColumn("elapsed_max_ms", 10), SqlTypeFacets("int", false)]
        public int elapsed_max_ms
        {
            get;
            set;
        }

        public dm_exec_background_job_queue_stats()
        {
        }

        public dm_exec_background_job_queue_stats(object[] items)
        {
            queue_max_len = (int)items[0];
            enqueued_count = (int)items[1];
            started_count = (int)items[2];
            ended_count = (int)items[3];
            failed_lock_count = (int)items[4];
            failed_other_count = (int)items[5];
            failed_giveup_count = (int)items[6];
            enqueue_failed_full_count = (int)items[7];
            enqueue_failed_duplicate_count = (int)items[8];
            elapsed_avg_ms = (int)items[9];
            elapsed_max_ms = (int)items[10];
        }

        public dm_exec_background_job_queue_stats(int queue_max_len, int enqueued_count, int started_count, int ended_count, int failed_lock_count, int failed_other_count, int failed_giveup_count, int enqueue_failed_full_count, int enqueue_failed_duplicate_count, int elapsed_avg_ms, int elapsed_max_ms)
        {
            this.queue_max_len = queue_max_len;
            this.enqueued_count = enqueued_count;
            this.started_count = started_count;
            this.ended_count = ended_count;
            this.failed_lock_count = failed_lock_count;
            this.failed_other_count = failed_other_count;
            this.failed_giveup_count = failed_giveup_count;
            this.enqueue_failed_full_count = enqueue_failed_full_count;
            this.enqueue_failed_duplicate_count = enqueue_failed_duplicate_count;
            this.elapsed_avg_ms = elapsed_avg_ms;
            this.elapsed_max_ms = elapsed_max_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { queue_max_len, enqueued_count, started_count, ended_count, failed_lock_count, failed_other_count, failed_giveup_count, enqueue_failed_full_count, enqueue_failed_duplicate_count, elapsed_avg_ms, elapsed_max_ms };
        }

        public override void SetItemArray(object[] items)
        {
            queue_max_len = (int)items[0];
            enqueued_count = (int)items[1];
            started_count = (int)items[2];
            ended_count = (int)items[3];
            failed_lock_count = (int)items[4];
            failed_other_count = (int)items[5];
            failed_giveup_count = (int)items[6];
            enqueue_failed_full_count = (int)items[7];
            enqueue_failed_duplicate_count = (int)items[8];
            elapsed_avg_ms = (int)items[9];
            elapsed_max_ms = (int)items[10];
        }
    }

    [SqlView("sys", "system_components_surface_area_configuration")]
    public partial class system_components_surface_area_configuration : SqlViewProxy
    {
        [SqlColumn("component_name", 0), SqlTypeFacets("sysname", true)]
        public string component_name
        {
            get;
            set;
        }

        [SqlColumn("database_name", 1), SqlTypeFacets("sysname", true)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("schema_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string schema_name
        {
            get;
            set;
        }

        [SqlColumn("object_name", 3), SqlTypeFacets("nvarchar", false, 256)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("state", 4), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("char", false, 2)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("type_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string type_desc
        {
            get;
            set;
        }

        public system_components_surface_area_configuration()
        {
        }

        public system_components_surface_area_configuration(object[] items)
        {
            component_name = (string)items[0];
            database_name = (string)items[1];
            schema_name = (string)items[2];
            object_name = (string)items[3];
            state = (byte?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
        }

        public system_components_surface_area_configuration(string component_name, string database_name, string schema_name, string object_name, byte? state, string type, string type_desc)
        {
            this.component_name = component_name;
            this.database_name = database_name;
            this.schema_name = schema_name;
            this.object_name = object_name;
            this.state = state;
            this.type = type;
            this.type_desc = type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { component_name, database_name, schema_name, object_name, state, type, type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            component_name = (string)items[0];
            database_name = (string)items[1];
            schema_name = (string)items[2];
            object_name = (string)items[3];
            state = (byte?)items[4];
            type = (string)items[5];
            type_desc = (string)items[6];
        }
    }

    [SqlView("sys", "dm_xtp_threads")]
    public partial class dm_xtp_threads : SqlViewProxy
    {
        [SqlColumn("thread_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] thread_address
        {
            get;
            set;
        }

        [SqlColumn("thread_type", 1), SqlTypeFacets("int", false)]
        public int thread_type
        {
            get;
            set;
        }

        [SqlColumn("thread_type_desc", 2), SqlTypeFacets("nvarchar", false, 64)]
        public string thread_type_desc
        {
            get;
            set;
        }

        [SqlColumn("retired_row_count", 3), SqlTypeFacets("int", false)]
        public int retired_row_count
        {
            get;
            set;
        }

        [SqlColumn("retired_transaction_count", 4), SqlTypeFacets("int", false)]
        public int retired_transaction_count
        {
            get;
            set;
        }

        public dm_xtp_threads()
        {
        }

        public dm_xtp_threads(object[] items)
        {
            thread_address = (Byte[])items[0];
            thread_type = (int)items[1];
            thread_type_desc = (string)items[2];
            retired_row_count = (int)items[3];
            retired_transaction_count = (int)items[4];
        }

        public dm_xtp_threads(Byte[] thread_address, int thread_type, string thread_type_desc, int retired_row_count, int retired_transaction_count)
        {
            this.thread_address = thread_address;
            this.thread_type = thread_type;
            this.thread_type_desc = thread_type_desc;
            this.retired_row_count = retired_row_count;
            this.retired_transaction_count = retired_transaction_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { thread_address, thread_type, thread_type_desc, retired_row_count, retired_transaction_count };
        }

        public override void SetItemArray(object[] items)
        {
            thread_address = (Byte[])items[0];
            thread_type = (int)items[1];
            thread_type_desc = (string)items[2];
            retired_row_count = (int)items[3];
            retired_transaction_count = (int)items[4];
        }
    }

    [SqlView("sys", "dm_server_memory_dumps")]
    public partial class dm_server_memory_dumps : SqlViewProxy
    {
        [SqlColumn("filename", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string filename
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 1), SqlTypeFacets("datetimeoffset", false)]
        public DateTimeOffset creation_time
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 2), SqlTypeFacets("bigint", true)]
        public long? size_in_bytes
        {
            get;
            set;
        }

        public dm_server_memory_dumps()
        {
        }

        public dm_server_memory_dumps(object[] items)
        {
            filename = (string)items[0];
            creation_time = (DateTimeOffset)items[1];
            size_in_bytes = (long?)items[2];
        }

        public dm_server_memory_dumps(string filename, DateTimeOffset creation_time, long? size_in_bytes)
        {
            this.filename = filename;
            this.creation_time = creation_time;
            this.size_in_bytes = size_in_bytes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { filename, creation_time, size_in_bytes };
        }

        public override void SetItemArray(object[] items)
        {
            filename = (string)items[0];
            creation_time = (DateTimeOffset)items[1];
            size_in_bytes = (long?)items[2];
        }
    }

    [SqlView("sys", "dm_exec_connections")]
    public partial class dm_exec_connections : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", true)]
        public int? session_id
        {
            get;
            set;
        }

        [SqlColumn("most_recent_session_id", 1), SqlTypeFacets("int", true)]
        public int? most_recent_session_id
        {
            get;
            set;
        }

        [SqlColumn("connect_time", 2), SqlTypeFacets("datetime", false)]
        public DateTime connect_time
        {
            get;
            set;
        }

        [SqlColumn("net_transport", 3), SqlTypeFacets("nvarchar", false, 80)]
        public string net_transport
        {
            get;
            set;
        }

        [SqlColumn("protocol_type", 4), SqlTypeFacets("nvarchar", true, 80)]
        public string protocol_type
        {
            get;
            set;
        }

        [SqlColumn("protocol_version", 5), SqlTypeFacets("int", true)]
        public int? protocol_version
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 6), SqlTypeFacets("int", true)]
        public int? endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("encrypt_option", 7), SqlTypeFacets("nvarchar", false, 80)]
        public string encrypt_option
        {
            get;
            set;
        }

        [SqlColumn("auth_scheme", 8), SqlTypeFacets("nvarchar", false, 80)]
        public string auth_scheme
        {
            get;
            set;
        }

        [SqlColumn("node_affinity", 9), SqlTypeFacets("smallint", false)]
        public short node_affinity
        {
            get;
            set;
        }

        [SqlColumn("num_reads", 10), SqlTypeFacets("int", true)]
        public int? num_reads
        {
            get;
            set;
        }

        [SqlColumn("num_writes", 11), SqlTypeFacets("int", true)]
        public int? num_writes
        {
            get;
            set;
        }

        [SqlColumn("last_read", 12), SqlTypeFacets("datetime", true)]
        public DateTime? last_read
        {
            get;
            set;
        }

        [SqlColumn("last_write", 13), SqlTypeFacets("datetime", true)]
        public DateTime? last_write
        {
            get;
            set;
        }

        [SqlColumn("net_packet_size", 14), SqlTypeFacets("int", true)]
        public int? net_packet_size
        {
            get;
            set;
        }

        [SqlColumn("client_net_address", 15), SqlTypeFacets("varchar", true, 48)]
        public string client_net_address
        {
            get;
            set;
        }

        [SqlColumn("client_tcp_port", 16), SqlTypeFacets("int", true)]
        public int? client_tcp_port
        {
            get;
            set;
        }

        [SqlColumn("local_net_address", 17), SqlTypeFacets("varchar", true, 48)]
        public string local_net_address
        {
            get;
            set;
        }

        [SqlColumn("local_tcp_port", 18), SqlTypeFacets("int", true)]
        public int? local_tcp_port
        {
            get;
            set;
        }

        [SqlColumn("connection_id", 19), SqlTypeFacets("uniqueidentifier", false)]
        public Guid connection_id
        {
            get;
            set;
        }

        [SqlColumn("parent_connection_id", 20), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? parent_connection_id
        {
            get;
            set;
        }

        [SqlColumn("most_recent_sql_handle", 21), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] most_recent_sql_handle
        {
            get;
            set;
        }

        public dm_exec_connections()
        {
        }

        public dm_exec_connections(object[] items)
        {
            session_id = (int?)items[0];
            most_recent_session_id = (int?)items[1];
            connect_time = (DateTime)items[2];
            net_transport = (string)items[3];
            protocol_type = (string)items[4];
            protocol_version = (int?)items[5];
            endpoint_id = (int?)items[6];
            encrypt_option = (string)items[7];
            auth_scheme = (string)items[8];
            node_affinity = (short)items[9];
            num_reads = (int?)items[10];
            num_writes = (int?)items[11];
            last_read = (DateTime?)items[12];
            last_write = (DateTime?)items[13];
            net_packet_size = (int?)items[14];
            client_net_address = (string)items[15];
            client_tcp_port = (int?)items[16];
            local_net_address = (string)items[17];
            local_tcp_port = (int?)items[18];
            connection_id = (Guid)items[19];
            parent_connection_id = (Guid?)items[20];
            most_recent_sql_handle = (Byte[])items[21];
        }

        public dm_exec_connections(int? session_id, int? most_recent_session_id, DateTime connect_time, string net_transport, string protocol_type, int? protocol_version, int? endpoint_id, string encrypt_option, string auth_scheme, short node_affinity, int? num_reads, int? num_writes, DateTime? last_read, DateTime? last_write, int? net_packet_size, string client_net_address, int? client_tcp_port, string local_net_address, int? local_tcp_port, Guid connection_id, Guid? parent_connection_id, Byte[] most_recent_sql_handle)
        {
            this.session_id = session_id;
            this.most_recent_session_id = most_recent_session_id;
            this.connect_time = connect_time;
            this.net_transport = net_transport;
            this.protocol_type = protocol_type;
            this.protocol_version = protocol_version;
            this.endpoint_id = endpoint_id;
            this.encrypt_option = encrypt_option;
            this.auth_scheme = auth_scheme;
            this.node_affinity = node_affinity;
            this.num_reads = num_reads;
            this.num_writes = num_writes;
            this.last_read = last_read;
            this.last_write = last_write;
            this.net_packet_size = net_packet_size;
            this.client_net_address = client_net_address;
            this.client_tcp_port = client_tcp_port;
            this.local_net_address = local_net_address;
            this.local_tcp_port = local_tcp_port;
            this.connection_id = connection_id;
            this.parent_connection_id = parent_connection_id;
            this.most_recent_sql_handle = most_recent_sql_handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, most_recent_session_id, connect_time, net_transport, protocol_type, protocol_version, endpoint_id, encrypt_option, auth_scheme, node_affinity, num_reads, num_writes, last_read, last_write, net_packet_size, client_net_address, client_tcp_port, local_net_address, local_tcp_port, connection_id, parent_connection_id, most_recent_sql_handle };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int?)items[0];
            most_recent_session_id = (int?)items[1];
            connect_time = (DateTime)items[2];
            net_transport = (string)items[3];
            protocol_type = (string)items[4];
            protocol_version = (int?)items[5];
            endpoint_id = (int?)items[6];
            encrypt_option = (string)items[7];
            auth_scheme = (string)items[8];
            node_affinity = (short)items[9];
            num_reads = (int?)items[10];
            num_writes = (int?)items[11];
            last_read = (DateTime?)items[12];
            last_write = (DateTime?)items[13];
            net_packet_size = (int?)items[14];
            client_net_address = (string)items[15];
            client_tcp_port = (int?)items[16];
            local_net_address = (string)items[17];
            local_tcp_port = (int?)items[18];
            connection_id = (Guid)items[19];
            parent_connection_id = (Guid?)items[20];
            most_recent_sql_handle = (Byte[])items[21];
        }
    }

    [SqlView("sys", "dm_os_child_instances")]
    public partial class dm_os_child_instances : SqlViewProxy
    {
        [SqlColumn("owning_principal_name", 0), SqlTypeFacets("nvarchar", true, 512)]
        public string owning_principal_name
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_sid", 1), SqlTypeFacets("nvarchar", true, 512)]
        public string owning_principal_sid
        {
            get;
            set;
        }

        [SqlColumn("owning_principal_sid_binary", 2), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] owning_principal_sid_binary
        {
            get;
            set;
        }

        [SqlColumn("instance_name", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string instance_name
        {
            get;
            set;
        }

        [SqlColumn("instance_pipe_name", 4), SqlTypeFacets("nvarchar", true, 520)]
        public string instance_pipe_name
        {
            get;
            set;
        }

        [SqlColumn("OS_process_id", 5), SqlTypeFacets("int", true)]
        public int? OS_process_id
        {
            get;
            set;
        }

        [SqlColumn("OS_process_creation_date", 6), SqlTypeFacets("datetime", true)]
        public DateTime? OS_process_creation_date
        {
            get;
            set;
        }

        [SqlColumn("heart_beat", 7), SqlTypeFacets("nvarchar", true, 10)]
        public string heart_beat
        {
            get;
            set;
        }

        public dm_os_child_instances()
        {
        }

        public dm_os_child_instances(object[] items)
        {
            owning_principal_name = (string)items[0];
            owning_principal_sid = (string)items[1];
            owning_principal_sid_binary = (Byte[])items[2];
            instance_name = (string)items[3];
            instance_pipe_name = (string)items[4];
            OS_process_id = (int?)items[5];
            OS_process_creation_date = (DateTime?)items[6];
            heart_beat = (string)items[7];
        }

        public dm_os_child_instances(string owning_principal_name, string owning_principal_sid, Byte[] owning_principal_sid_binary, string instance_name, string instance_pipe_name, int? OS_process_id, DateTime? OS_process_creation_date, string heart_beat)
        {
            this.owning_principal_name = owning_principal_name;
            this.owning_principal_sid = owning_principal_sid;
            this.owning_principal_sid_binary = owning_principal_sid_binary;
            this.instance_name = instance_name;
            this.instance_pipe_name = instance_pipe_name;
            this.OS_process_id = OS_process_id;
            this.OS_process_creation_date = OS_process_creation_date;
            this.heart_beat = heart_beat;
        }

        public override object[] GetItemArray()
        {
            return new object[] { owning_principal_name, owning_principal_sid, owning_principal_sid_binary, instance_name, instance_pipe_name, OS_process_id, OS_process_creation_date, heart_beat };
        }

        public override void SetItemArray(object[] items)
        {
            owning_principal_name = (string)items[0];
            owning_principal_sid = (string)items[1];
            owning_principal_sid_binary = (Byte[])items[2];
            instance_name = (string)items[3];
            instance_pipe_name = (string)items[4];
            OS_process_id = (int?)items[5];
            OS_process_creation_date = (DateTime?)items[6];
            heart_beat = (string)items[7];
        }
    }

    [SqlView("sys", "dm_os_cluster_properties")]
    public partial class dm_os_cluster_properties : SqlViewProxy
    {
        [SqlColumn("VerboseLogging", 0), SqlTypeFacets("bigint", true)]
        public long? VerboseLogging
        {
            get;
            set;
        }

        [SqlColumn("SqlDumperDumpFlags", 1), SqlTypeFacets("bigint", true)]
        public long? SqlDumperDumpFlags
        {
            get;
            set;
        }

        [SqlColumn("SqlDumperDumpPath", 2), SqlTypeFacets("nvarchar", false, 520)]
        public string SqlDumperDumpPath
        {
            get;
            set;
        }

        [SqlColumn("SqlDumperDumpTimeOut", 3), SqlTypeFacets("bigint", true)]
        public long? SqlDumperDumpTimeOut
        {
            get;
            set;
        }

        [SqlColumn("FailureConditionLevel", 4), SqlTypeFacets("bigint", true)]
        public long? FailureConditionLevel
        {
            get;
            set;
        }

        [SqlColumn("HealthCheckTimeout", 5), SqlTypeFacets("bigint", true)]
        public long? HealthCheckTimeout
        {
            get;
            set;
        }

        public dm_os_cluster_properties()
        {
        }

        public dm_os_cluster_properties(object[] items)
        {
            VerboseLogging = (long?)items[0];
            SqlDumperDumpFlags = (long?)items[1];
            SqlDumperDumpPath = (string)items[2];
            SqlDumperDumpTimeOut = (long?)items[3];
            FailureConditionLevel = (long?)items[4];
            HealthCheckTimeout = (long?)items[5];
        }

        public dm_os_cluster_properties(long? VerboseLogging, long? SqlDumperDumpFlags, string SqlDumperDumpPath, long? SqlDumperDumpTimeOut, long? FailureConditionLevel, long? HealthCheckTimeout)
        {
            this.VerboseLogging = VerboseLogging;
            this.SqlDumperDumpFlags = SqlDumperDumpFlags;
            this.SqlDumperDumpPath = SqlDumperDumpPath;
            this.SqlDumperDumpTimeOut = SqlDumperDumpTimeOut;
            this.FailureConditionLevel = FailureConditionLevel;
            this.HealthCheckTimeout = HealthCheckTimeout;
        }

        public override object[] GetItemArray()
        {
            return new object[] { VerboseLogging, SqlDumperDumpFlags, SqlDumperDumpPath, SqlDumperDumpTimeOut, FailureConditionLevel, HealthCheckTimeout };
        }

        public override void SetItemArray(object[] items)
        {
            VerboseLogging = (long?)items[0];
            SqlDumperDumpFlags = (long?)items[1];
            SqlDumperDumpPath = (string)items[2];
            SqlDumperDumpTimeOut = (long?)items[3];
            FailureConditionLevel = (long?)items[4];
            HealthCheckTimeout = (long?)items[5];
        }
    }

    [SqlView("sys", "dm_tran_current_transaction")]
    public partial class dm_tran_current_transaction : SqlViewProxy
    {
        [SqlColumn("transaction_id", 0), SqlTypeFacets("bigint", true)]
        public long? transaction_id
        {
            get;
            set;
        }

        [SqlColumn("transaction_sequence_num", 1), SqlTypeFacets("bigint", true)]
        public long? transaction_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("transaction_is_snapshot", 2), SqlTypeFacets("bit", true)]
        public bool? transaction_is_snapshot
        {
            get;
            set;
        }

        [SqlColumn("first_snapshot_sequence_num", 3), SqlTypeFacets("bigint", true)]
        public long? first_snapshot_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("last_transaction_sequence_num", 4), SqlTypeFacets("bigint", true)]
        public long? last_transaction_sequence_num
        {
            get;
            set;
        }

        [SqlColumn("first_useful_sequence_num", 5), SqlTypeFacets("bigint", true)]
        public long? first_useful_sequence_num
        {
            get;
            set;
        }

        public dm_tran_current_transaction()
        {
        }

        public dm_tran_current_transaction(object[] items)
        {
            transaction_id = (long?)items[0];
            transaction_sequence_num = (long?)items[1];
            transaction_is_snapshot = (bool?)items[2];
            first_snapshot_sequence_num = (long?)items[3];
            last_transaction_sequence_num = (long?)items[4];
            first_useful_sequence_num = (long?)items[5];
        }

        public dm_tran_current_transaction(long? transaction_id, long? transaction_sequence_num, bool? transaction_is_snapshot, long? first_snapshot_sequence_num, long? last_transaction_sequence_num, long? first_useful_sequence_num)
        {
            this.transaction_id = transaction_id;
            this.transaction_sequence_num = transaction_sequence_num;
            this.transaction_is_snapshot = transaction_is_snapshot;
            this.first_snapshot_sequence_num = first_snapshot_sequence_num;
            this.last_transaction_sequence_num = last_transaction_sequence_num;
            this.first_useful_sequence_num = first_useful_sequence_num;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_id, transaction_sequence_num, transaction_is_snapshot, first_snapshot_sequence_num, last_transaction_sequence_num, first_useful_sequence_num };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_id = (long?)items[0];
            transaction_sequence_num = (long?)items[1];
            transaction_is_snapshot = (bool?)items[2];
            first_snapshot_sequence_num = (long?)items[3];
            last_transaction_sequence_num = (long?)items[4];
            first_useful_sequence_num = (long?)items[5];
        }
    }

    [SqlView("sys", "securable_classes")]
    public partial class securable_classes : SqlViewProxy
    {
        [SqlColumn("class_desc", 0), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("class", 1), SqlTypeFacets("int", true)]
        public int? @class
        {
            get;
            set;
        }

        public securable_classes()
        {
        }

        public securable_classes(object[] items)
        {
            class_desc = (string)items[0];
            @class = (int?)items[1];
        }

        public securable_classes(string class_desc, int? @class)
        {
            this.class_desc = class_desc;
            this.@class = @class;
        }

        public override object[] GetItemArray()
        {
            return new object[] { class_desc, @class };
        }

        public override void SetItemArray(object[] items)
        {
            class_desc = (string)items[0];
            @class = (int?)items[1];
        }
    }

    [SqlView("sys", "dm_fts_index_population")]
    public partial class dm_fts_index_population : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("catalog_id", 1), SqlTypeFacets("int", false)]
        public int catalog_id
        {
            get;
            set;
        }

        [SqlColumn("table_id", 2), SqlTypeFacets("int", false)]
        public int table_id
        {
            get;
            set;
        }

        [SqlColumn("memory_address", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("population_type", 4), SqlTypeFacets("int", false)]
        public int population_type
        {
            get;
            set;
        }

        [SqlColumn("population_type_description", 5), SqlTypeFacets("nvarchar", true, 128)]
        public string population_type_description
        {
            get;
            set;
        }

        [SqlColumn("is_clustered_index_scan", 6), SqlTypeFacets("bit", false)]
        public bool is_clustered_index_scan
        {
            get;
            set;
        }

        [SqlColumn("range_count", 7), SqlTypeFacets("int", false)]
        public int range_count
        {
            get;
            set;
        }

        [SqlColumn("completed_range_count", 8), SqlTypeFacets("int", false)]
        public int completed_range_count
        {
            get;
            set;
        }

        [SqlColumn("outstanding_batch_count", 9), SqlTypeFacets("int", false)]
        public int outstanding_batch_count
        {
            get;
            set;
        }

        [SqlColumn("status", 10), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("status_description", 11), SqlTypeFacets("nvarchar", true, 128)]
        public string status_description
        {
            get;
            set;
        }

        [SqlColumn("completion_type", 12), SqlTypeFacets("int", false)]
        public int completion_type
        {
            get;
            set;
        }

        [SqlColumn("completion_type_description", 13), SqlTypeFacets("nvarchar", true, 128)]
        public string completion_type_description
        {
            get;
            set;
        }

        [SqlColumn("worker_count", 14), SqlTypeFacets("int", false)]
        public int worker_count
        {
            get;
            set;
        }

        [SqlColumn("queued_population_type", 15), SqlTypeFacets("int", false)]
        public int queued_population_type
        {
            get;
            set;
        }

        [SqlColumn("queued_population_type_description", 16), SqlTypeFacets("nvarchar", true, 128)]
        public string queued_population_type_description
        {
            get;
            set;
        }

        [SqlColumn("start_time", 17), SqlTypeFacets("datetime", false)]
        public DateTime start_time
        {
            get;
            set;
        }

        [SqlColumn("incremental_timestamp", 18), SqlTypeFacets("binary", false, 8)]
        public Byte[] incremental_timestamp
        {
            get;
            set;
        }

        public dm_fts_index_population()
        {
        }

        public dm_fts_index_population(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            memory_address = (Byte[])items[3];
            population_type = (int)items[4];
            population_type_description = (string)items[5];
            is_clustered_index_scan = (bool)items[6];
            range_count = (int)items[7];
            completed_range_count = (int)items[8];
            outstanding_batch_count = (int)items[9];
            status = (int)items[10];
            status_description = (string)items[11];
            completion_type = (int)items[12];
            completion_type_description = (string)items[13];
            worker_count = (int)items[14];
            queued_population_type = (int)items[15];
            queued_population_type_description = (string)items[16];
            start_time = (DateTime)items[17];
            incremental_timestamp = (Byte[])items[18];
        }

        public dm_fts_index_population(int database_id, int catalog_id, int table_id, Byte[] memory_address, int population_type, string population_type_description, bool is_clustered_index_scan, int range_count, int completed_range_count, int outstanding_batch_count, int status, string status_description, int completion_type, string completion_type_description, int worker_count, int queued_population_type, string queued_population_type_description, DateTime start_time, Byte[] incremental_timestamp)
        {
            this.database_id = database_id;
            this.catalog_id = catalog_id;
            this.table_id = table_id;
            this.memory_address = memory_address;
            this.population_type = population_type;
            this.population_type_description = population_type_description;
            this.is_clustered_index_scan = is_clustered_index_scan;
            this.range_count = range_count;
            this.completed_range_count = completed_range_count;
            this.outstanding_batch_count = outstanding_batch_count;
            this.status = status;
            this.status_description = status_description;
            this.completion_type = completion_type;
            this.completion_type_description = completion_type_description;
            this.worker_count = worker_count;
            this.queued_population_type = queued_population_type;
            this.queued_population_type_description = queued_population_type_description;
            this.start_time = start_time;
            this.incremental_timestamp = incremental_timestamp;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, catalog_id, table_id, memory_address, population_type, population_type_description, is_clustered_index_scan, range_count, completed_range_count, outstanding_batch_count, status, status_description, completion_type, completion_type_description, worker_count, queued_population_type, queued_population_type_description, start_time, incremental_timestamp };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            memory_address = (Byte[])items[3];
            population_type = (int)items[4];
            population_type_description = (string)items[5];
            is_clustered_index_scan = (bool)items[6];
            range_count = (int)items[7];
            completed_range_count = (int)items[8];
            outstanding_batch_count = (int)items[9];
            status = (int)items[10];
            status_description = (string)items[11];
            completion_type = (int)items[12];
            completion_type_description = (string)items[13];
            worker_count = (int)items[14];
            queued_population_type = (int)items[15];
            queued_population_type_description = (string)items[16];
            start_time = (DateTime)items[17];
            incremental_timestamp = (Byte[])items[18];
        }
    }

    [SqlView("sys", "dm_fts_memory_buffers")]
    public partial class dm_fts_memory_buffers : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("memory_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", false, 8000)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("is_free", 3), SqlTypeFacets("bit", false)]
        public bool is_free
        {
            get;
            set;
        }

        [SqlColumn("row_count", 4), SqlTypeFacets("int", false)]
        public int row_count
        {
            get;
            set;
        }

        [SqlColumn("bytes_used", 5), SqlTypeFacets("int", false)]
        public int bytes_used
        {
            get;
            set;
        }

        [SqlColumn("percent_used", 6), SqlTypeFacets("int", false)]
        public int percent_used
        {
            get;
            set;
        }

        public dm_fts_memory_buffers()
        {
        }

        public dm_fts_memory_buffers(object[] items)
        {
            pool_id = (int)items[0];
            memory_address = (Byte[])items[1];
            name = (string)items[2];
            is_free = (bool)items[3];
            row_count = (int)items[4];
            bytes_used = (int)items[5];
            percent_used = (int)items[6];
        }

        public dm_fts_memory_buffers(int pool_id, Byte[] memory_address, string name, bool is_free, int row_count, int bytes_used, int percent_used)
        {
            this.pool_id = pool_id;
            this.memory_address = memory_address;
            this.name = name;
            this.is_free = is_free;
            this.row_count = row_count;
            this.bytes_used = bytes_used;
            this.percent_used = percent_used;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, memory_address, name, is_free, row_count, bytes_used, percent_used };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            memory_address = (Byte[])items[1];
            name = (string)items[2];
            is_free = (bool)items[3];
            row_count = (int)items[4];
            bytes_used = (int)items[5];
            percent_used = (int)items[6];
        }
    }

    [SqlView("sys", "dm_xe_session_events")]
    public partial class dm_xe_session_events : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("event_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string event_name
        {
            get;
            set;
        }

        [SqlColumn("event_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid event_package_guid
        {
            get;
            set;
        }

        [SqlColumn("event_predicate", 3), SqlTypeFacets("nvarchar", true, 6144)]
        public string event_predicate
        {
            get;
            set;
        }

        public dm_xe_session_events()
        {
        }

        public dm_xe_session_events(object[] items)
        {
            event_session_address = (Byte[])items[0];
            event_name = (string)items[1];
            event_package_guid = (Guid)items[2];
            event_predicate = (string)items[3];
        }

        public dm_xe_session_events(Byte[] event_session_address, string event_name, Guid event_package_guid, string event_predicate)
        {
            this.event_session_address = event_session_address;
            this.event_name = event_name;
            this.event_package_guid = event_package_guid;
            this.event_predicate = event_predicate;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, event_name, event_package_guid, event_predicate };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            event_name = (string)items[1];
            event_package_guid = (Guid)items[2];
            event_predicate = (string)items[3];
        }
    }

    [SqlView("sys", "dm_repl_articles")]
    public partial class dm_repl_articles : SqlViewProxy
    {
        [SqlColumn("artcache_db_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_db_address
        {
            get;
            set;
        }

        [SqlColumn("artcache_table_address", 1), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_table_address
        {
            get;
            set;
        }

        [SqlColumn("artcache_schema_address", 2), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_schema_address
        {
            get;
            set;
        }

        [SqlColumn("artcache_article_address", 3), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] artcache_article_address
        {
            get;
            set;
        }

        [SqlColumn("artid", 4), SqlTypeFacets("int", true)]
        public int? artid
        {
            get;
            set;
        }

        [SqlColumn("artfilter", 5), SqlTypeFacets("int", true)]
        public int? artfilter
        {
            get;
            set;
        }

        [SqlColumn("artobjid", 6), SqlTypeFacets("int", true)]
        public int? artobjid
        {
            get;
            set;
        }

        [SqlColumn("artpubid", 7), SqlTypeFacets("int", true)]
        public int? artpubid
        {
            get;
            set;
        }

        [SqlColumn("artstatus", 8), SqlTypeFacets("tinyint", true)]
        public byte? artstatus
        {
            get;
            set;
        }

        [SqlColumn("arttype", 9), SqlTypeFacets("tinyint", true)]
        public byte? arttype
        {
            get;
            set;
        }

        [SqlColumn("wszArtdesttable", 10), SqlTypeFacets("nvarchar", true, 512)]
        public string wszArtdesttable
        {
            get;
            set;
        }

        [SqlColumn("wszArtdesttableowner", 11), SqlTypeFacets("nvarchar", true, 512)]
        public string wszArtdesttableowner
        {
            get;
            set;
        }

        [SqlColumn("wszArtinscmd", 12), SqlTypeFacets("nvarchar", true, 516)]
        public string wszArtinscmd
        {
            get;
            set;
        }

        [SqlColumn("cmdTypeIns", 13), SqlTypeFacets("int", true)]
        public int? cmdTypeIns
        {
            get;
            set;
        }

        [SqlColumn("wszArtdelcmd", 14), SqlTypeFacets("nvarchar", true, 516)]
        public string wszArtdelcmd
        {
            get;
            set;
        }

        [SqlColumn("cmdTypeDel", 15), SqlTypeFacets("int", true)]
        public int? cmdTypeDel
        {
            get;
            set;
        }

        [SqlColumn("wszArtupdcmd", 16), SqlTypeFacets("nvarchar", true, 516)]
        public string wszArtupdcmd
        {
            get;
            set;
        }

        [SqlColumn("cmdTypeUpd", 17), SqlTypeFacets("int", true)]
        public int? cmdTypeUpd
        {
            get;
            set;
        }

        [SqlColumn("wszArtpartialupdcmd", 18), SqlTypeFacets("nvarchar", true, 516)]
        public string wszArtpartialupdcmd
        {
            get;
            set;
        }

        [SqlColumn("cmdTypePartialUpd", 19), SqlTypeFacets("int", true)]
        public int? cmdTypePartialUpd
        {
            get;
            set;
        }

        [SqlColumn("numcol", 20), SqlTypeFacets("int", true)]
        public int? numcol
        {
            get;
            set;
        }

        [SqlColumn("artcmdtype", 21), SqlTypeFacets("tinyint", true)]
        public byte? artcmdtype
        {
            get;
            set;
        }

        [SqlColumn("artgeninscmd", 22), SqlTypeFacets("nvarchar", true, 8000)]
        public string artgeninscmd
        {
            get;
            set;
        }

        [SqlColumn("artgendelcmd", 23), SqlTypeFacets("nvarchar", true, 8000)]
        public string artgendelcmd
        {
            get;
            set;
        }

        [SqlColumn("artgenupdcmd", 24), SqlTypeFacets("nvarchar", true, 8000)]
        public string artgenupdcmd
        {
            get;
            set;
        }

        [SqlColumn("artpartialupdcmd", 25), SqlTypeFacets("nvarchar", true, 8000)]
        public string artpartialupdcmd
        {
            get;
            set;
        }

        [SqlColumn("artupdtxtcmd", 26), SqlTypeFacets("nvarchar", true, 8000)]
        public string artupdtxtcmd
        {
            get;
            set;
        }

        [SqlColumn("artgenins2cmd", 27), SqlTypeFacets("nvarchar", true, 8000)]
        public string artgenins2cmd
        {
            get;
            set;
        }

        [SqlColumn("artgendel2cmd", 28), SqlTypeFacets("nvarchar", true, 8000)]
        public string artgendel2cmd
        {
            get;
            set;
        }

        [SqlColumn("fInReconcile", 29), SqlTypeFacets("tinyint", true)]
        public byte? fInReconcile
        {
            get;
            set;
        }

        [SqlColumn("fPubAllowUpdate", 30), SqlTypeFacets("tinyint", true)]
        public byte? fPubAllowUpdate
        {
            get;
            set;
        }

        [SqlColumn("intPublicationOptions", 31), SqlTypeFacets("int", true)]
        public int? intPublicationOptions
        {
            get;
            set;
        }

        public dm_repl_articles()
        {
        }

        public dm_repl_articles(object[] items)
        {
            artcache_db_address = (Byte[])items[0];
            artcache_table_address = (Byte[])items[1];
            artcache_schema_address = (Byte[])items[2];
            artcache_article_address = (Byte[])items[3];
            artid = (int?)items[4];
            artfilter = (int?)items[5];
            artobjid = (int?)items[6];
            artpubid = (int?)items[7];
            artstatus = (byte?)items[8];
            arttype = (byte?)items[9];
            wszArtdesttable = (string)items[10];
            wszArtdesttableowner = (string)items[11];
            wszArtinscmd = (string)items[12];
            cmdTypeIns = (int?)items[13];
            wszArtdelcmd = (string)items[14];
            cmdTypeDel = (int?)items[15];
            wszArtupdcmd = (string)items[16];
            cmdTypeUpd = (int?)items[17];
            wszArtpartialupdcmd = (string)items[18];
            cmdTypePartialUpd = (int?)items[19];
            numcol = (int?)items[20];
            artcmdtype = (byte?)items[21];
            artgeninscmd = (string)items[22];
            artgendelcmd = (string)items[23];
            artgenupdcmd = (string)items[24];
            artpartialupdcmd = (string)items[25];
            artupdtxtcmd = (string)items[26];
            artgenins2cmd = (string)items[27];
            artgendel2cmd = (string)items[28];
            fInReconcile = (byte?)items[29];
            fPubAllowUpdate = (byte?)items[30];
            intPublicationOptions = (int?)items[31];
        }

        public dm_repl_articles(Byte[] artcache_db_address, Byte[] artcache_table_address, Byte[] artcache_schema_address, Byte[] artcache_article_address, int? artid, int? artfilter, int? artobjid, int? artpubid, byte? artstatus, byte? arttype, string wszArtdesttable, string wszArtdesttableowner, string wszArtinscmd, int? cmdTypeIns, string wszArtdelcmd, int? cmdTypeDel, string wszArtupdcmd, int? cmdTypeUpd, string wszArtpartialupdcmd, int? cmdTypePartialUpd, int? numcol, byte? artcmdtype, string artgeninscmd, string artgendelcmd, string artgenupdcmd, string artpartialupdcmd, string artupdtxtcmd, string artgenins2cmd, string artgendel2cmd, byte? fInReconcile, byte? fPubAllowUpdate, int? intPublicationOptions)
        {
            this.artcache_db_address = artcache_db_address;
            this.artcache_table_address = artcache_table_address;
            this.artcache_schema_address = artcache_schema_address;
            this.artcache_article_address = artcache_article_address;
            this.artid = artid;
            this.artfilter = artfilter;
            this.artobjid = artobjid;
            this.artpubid = artpubid;
            this.artstatus = artstatus;
            this.arttype = arttype;
            this.wszArtdesttable = wszArtdesttable;
            this.wszArtdesttableowner = wszArtdesttableowner;
            this.wszArtinscmd = wszArtinscmd;
            this.cmdTypeIns = cmdTypeIns;
            this.wszArtdelcmd = wszArtdelcmd;
            this.cmdTypeDel = cmdTypeDel;
            this.wszArtupdcmd = wszArtupdcmd;
            this.cmdTypeUpd = cmdTypeUpd;
            this.wszArtpartialupdcmd = wszArtpartialupdcmd;
            this.cmdTypePartialUpd = cmdTypePartialUpd;
            this.numcol = numcol;
            this.artcmdtype = artcmdtype;
            this.artgeninscmd = artgeninscmd;
            this.artgendelcmd = artgendelcmd;
            this.artgenupdcmd = artgenupdcmd;
            this.artpartialupdcmd = artpartialupdcmd;
            this.artupdtxtcmd = artupdtxtcmd;
            this.artgenins2cmd = artgenins2cmd;
            this.artgendel2cmd = artgendel2cmd;
            this.fInReconcile = fInReconcile;
            this.fPubAllowUpdate = fPubAllowUpdate;
            this.intPublicationOptions = intPublicationOptions;
        }

        public override object[] GetItemArray()
        {
            return new object[] { artcache_db_address, artcache_table_address, artcache_schema_address, artcache_article_address, artid, artfilter, artobjid, artpubid, artstatus, arttype, wszArtdesttable, wszArtdesttableowner, wszArtinscmd, cmdTypeIns, wszArtdelcmd, cmdTypeDel, wszArtupdcmd, cmdTypeUpd, wszArtpartialupdcmd, cmdTypePartialUpd, numcol, artcmdtype, artgeninscmd, artgendelcmd, artgenupdcmd, artpartialupdcmd, artupdtxtcmd, artgenins2cmd, artgendel2cmd, fInReconcile, fPubAllowUpdate, intPublicationOptions };
        }

        public override void SetItemArray(object[] items)
        {
            artcache_db_address = (Byte[])items[0];
            artcache_table_address = (Byte[])items[1];
            artcache_schema_address = (Byte[])items[2];
            artcache_article_address = (Byte[])items[3];
            artid = (int?)items[4];
            artfilter = (int?)items[5];
            artobjid = (int?)items[6];
            artpubid = (int?)items[7];
            artstatus = (byte?)items[8];
            arttype = (byte?)items[9];
            wszArtdesttable = (string)items[10];
            wszArtdesttableowner = (string)items[11];
            wszArtinscmd = (string)items[12];
            cmdTypeIns = (int?)items[13];
            wszArtdelcmd = (string)items[14];
            cmdTypeDel = (int?)items[15];
            wszArtupdcmd = (string)items[16];
            cmdTypeUpd = (int?)items[17];
            wszArtpartialupdcmd = (string)items[18];
            cmdTypePartialUpd = (int?)items[19];
            numcol = (int?)items[20];
            artcmdtype = (byte?)items[21];
            artgeninscmd = (string)items[22];
            artgendelcmd = (string)items[23];
            artgenupdcmd = (string)items[24];
            artpartialupdcmd = (string)items[25];
            artupdtxtcmd = (string)items[26];
            artgenins2cmd = (string)items[27];
            artgendel2cmd = (string)items[28];
            fInReconcile = (byte?)items[29];
            fPubAllowUpdate = (byte?)items[30];
            intPublicationOptions = (int?)items[31];
        }
    }

    [SqlView("sys", "dm_db_xtp_memory_consumers")]
    public partial class dm_db_xtp_memory_consumers : SqlViewProxy
    {
        [SqlColumn("memory_consumer_id", 0), SqlTypeFacets("bigint", false)]
        public long memory_consumer_id
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_type", 1), SqlTypeFacets("int", false)]
        public int memory_consumer_type
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_type_desc", 2), SqlTypeFacets("nvarchar", false, 32)]
        public string memory_consumer_type_desc
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_desc", 3), SqlTypeFacets("nvarchar", true, 128)]
        public string memory_consumer_desc
        {
            get;
            set;
        }

        [SqlColumn("object_id", 4), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 5), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_bytes", 6), SqlTypeFacets("bigint", false)]
        public long allocated_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_bytes", 7), SqlTypeFacets("bigint", false)]
        public long used_bytes
        {
            get;
            set;
        }

        [SqlColumn("allocation_count", 8), SqlTypeFacets("int", false)]
        public int allocation_count
        {
            get;
            set;
        }

        [SqlColumn("partition_count", 9), SqlTypeFacets("int", false)]
        public int partition_count
        {
            get;
            set;
        }

        [SqlColumn("sizeclass_count", 10), SqlTypeFacets("int", false)]
        public int sizeclass_count
        {
            get;
            set;
        }

        [SqlColumn("min_sizeclass", 11), SqlTypeFacets("int", false)]
        public int min_sizeclass
        {
            get;
            set;
        }

        [SqlColumn("max_sizeclass", 12), SqlTypeFacets("int", false)]
        public int max_sizeclass
        {
            get;
            set;
        }

        [SqlColumn("memory_consumer_address", 13), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_consumer_address
        {
            get;
            set;
        }

        public dm_db_xtp_memory_consumers()
        {
        }

        public dm_db_xtp_memory_consumers(object[] items)
        {
            memory_consumer_id = (long)items[0];
            memory_consumer_type = (int)items[1];
            memory_consumer_type_desc = (string)items[2];
            memory_consumer_desc = (string)items[3];
            object_id = (int?)items[4];
            index_id = (int?)items[5];
            allocated_bytes = (long)items[6];
            used_bytes = (long)items[7];
            allocation_count = (int)items[8];
            partition_count = (int)items[9];
            sizeclass_count = (int)items[10];
            min_sizeclass = (int)items[11];
            max_sizeclass = (int)items[12];
            memory_consumer_address = (Byte[])items[13];
        }

        public dm_db_xtp_memory_consumers(long memory_consumer_id, int memory_consumer_type, string memory_consumer_type_desc, string memory_consumer_desc, int? object_id, int? index_id, long allocated_bytes, long used_bytes, int allocation_count, int partition_count, int sizeclass_count, int min_sizeclass, int max_sizeclass, Byte[] memory_consumer_address)
        {
            this.memory_consumer_id = memory_consumer_id;
            this.memory_consumer_type = memory_consumer_type;
            this.memory_consumer_type_desc = memory_consumer_type_desc;
            this.memory_consumer_desc = memory_consumer_desc;
            this.object_id = object_id;
            this.index_id = index_id;
            this.allocated_bytes = allocated_bytes;
            this.used_bytes = used_bytes;
            this.allocation_count = allocation_count;
            this.partition_count = partition_count;
            this.sizeclass_count = sizeclass_count;
            this.min_sizeclass = min_sizeclass;
            this.max_sizeclass = max_sizeclass;
            this.memory_consumer_address = memory_consumer_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_consumer_id, memory_consumer_type, memory_consumer_type_desc, memory_consumer_desc, object_id, index_id, allocated_bytes, used_bytes, allocation_count, partition_count, sizeclass_count, min_sizeclass, max_sizeclass, memory_consumer_address };
        }

        public override void SetItemArray(object[] items)
        {
            memory_consumer_id = (long)items[0];
            memory_consumer_type = (int)items[1];
            memory_consumer_type_desc = (string)items[2];
            memory_consumer_desc = (string)items[3];
            object_id = (int?)items[4];
            index_id = (int?)items[5];
            allocated_bytes = (long)items[6];
            used_bytes = (long)items[7];
            allocation_count = (int)items[8];
            partition_count = (int)items[9];
            sizeclass_count = (int)items[10];
            min_sizeclass = (int)items[11];
            max_sizeclass = (int)items[12];
            memory_consumer_address = (Byte[])items[13];
        }
    }

    [SqlView("sys", "dm_hadr_auto_page_repair")]
    public partial class dm_hadr_auto_page_repair : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("page_id", 2), SqlTypeFacets("bigint", false)]
        public long page_id
        {
            get;
            set;
        }

        [SqlColumn("error_type", 3), SqlTypeFacets("smallint", false)]
        public short error_type
        {
            get;
            set;
        }

        [SqlColumn("page_status", 4), SqlTypeFacets("tinyint", false)]
        public byte page_status
        {
            get;
            set;
        }

        [SqlColumn("modification_time", 5), SqlTypeFacets("datetime", false)]
        public DateTime modification_time
        {
            get;
            set;
        }

        public dm_hadr_auto_page_repair()
        {
        }

        public dm_hadr_auto_page_repair(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            page_id = (long)items[2];
            error_type = (short)items[3];
            page_status = (byte)items[4];
            modification_time = (DateTime)items[5];
        }

        public dm_hadr_auto_page_repair(int database_id, int file_id, long page_id, short error_type, byte page_status, DateTime modification_time)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.page_id = page_id;
            this.error_type = error_type;
            this.page_status = page_status;
            this.modification_time = modification_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, page_id, error_type, page_status, modification_time };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            page_id = (long)items[2];
            error_type = (short)items[3];
            page_status = (byte)items[4];
            modification_time = (DateTime)items[5];
        }
    }

    [SqlView("sys", "dm_os_memory_clerks")]
    public partial class dm_os_memory_clerks : SqlViewProxy
    {
        [SqlColumn("memory_clerk_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_clerk_address
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("memory_node_id", 3), SqlTypeFacets("smallint", false)]
        public short memory_node_id
        {
            get;
            set;
        }

        [SqlColumn("pages_kb", 4), SqlTypeFacets("bigint", false)]
        public long pages_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_memory_reserved_kb", 5), SqlTypeFacets("bigint", false)]
        public long virtual_memory_reserved_kb
        {
            get;
            set;
        }

        [SqlColumn("virtual_memory_committed_kb", 6), SqlTypeFacets("bigint", false)]
        public long virtual_memory_committed_kb
        {
            get;
            set;
        }

        [SqlColumn("awe_allocated_kb", 7), SqlTypeFacets("bigint", false)]
        public long awe_allocated_kb
        {
            get;
            set;
        }

        [SqlColumn("shared_memory_reserved_kb", 8), SqlTypeFacets("bigint", false)]
        public long shared_memory_reserved_kb
        {
            get;
            set;
        }

        [SqlColumn("shared_memory_committed_kb", 9), SqlTypeFacets("bigint", false)]
        public long shared_memory_committed_kb
        {
            get;
            set;
        }

        [SqlColumn("page_size_in_bytes", 10), SqlTypeFacets("bigint", false)]
        public long page_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("page_allocator_address", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] page_allocator_address
        {
            get;
            set;
        }

        [SqlColumn("host_address", 12), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] host_address
        {
            get;
            set;
        }

        public dm_os_memory_clerks()
        {
        }

        public dm_os_memory_clerks(object[] items)
        {
            memory_clerk_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            memory_node_id = (short)items[3];
            pages_kb = (long)items[4];
            virtual_memory_reserved_kb = (long)items[5];
            virtual_memory_committed_kb = (long)items[6];
            awe_allocated_kb = (long)items[7];
            shared_memory_reserved_kb = (long)items[8];
            shared_memory_committed_kb = (long)items[9];
            page_size_in_bytes = (long)items[10];
            page_allocator_address = (Byte[])items[11];
            host_address = (Byte[])items[12];
        }

        public dm_os_memory_clerks(Byte[] memory_clerk_address, string type, string name, short memory_node_id, long pages_kb, long virtual_memory_reserved_kb, long virtual_memory_committed_kb, long awe_allocated_kb, long shared_memory_reserved_kb, long shared_memory_committed_kb, long page_size_in_bytes, Byte[] page_allocator_address, Byte[] host_address)
        {
            this.memory_clerk_address = memory_clerk_address;
            this.type = type;
            this.name = name;
            this.memory_node_id = memory_node_id;
            this.pages_kb = pages_kb;
            this.virtual_memory_reserved_kb = virtual_memory_reserved_kb;
            this.virtual_memory_committed_kb = virtual_memory_committed_kb;
            this.awe_allocated_kb = awe_allocated_kb;
            this.shared_memory_reserved_kb = shared_memory_reserved_kb;
            this.shared_memory_committed_kb = shared_memory_committed_kb;
            this.page_size_in_bytes = page_size_in_bytes;
            this.page_allocator_address = page_allocator_address;
            this.host_address = host_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_clerk_address, type, name, memory_node_id, pages_kb, virtual_memory_reserved_kb, virtual_memory_committed_kb, awe_allocated_kb, shared_memory_reserved_kb, shared_memory_committed_kb, page_size_in_bytes, page_allocator_address, host_address };
        }

        public override void SetItemArray(object[] items)
        {
            memory_clerk_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            memory_node_id = (short)items[3];
            pages_kb = (long)items[4];
            virtual_memory_reserved_kb = (long)items[5];
            virtual_memory_committed_kb = (long)items[6];
            awe_allocated_kb = (long)items[7];
            shared_memory_reserved_kb = (long)items[8];
            shared_memory_committed_kb = (long)items[9];
            page_size_in_bytes = (long)items[10];
            page_allocator_address = (Byte[])items[11];
            host_address = (Byte[])items[12];
        }
    }

    [SqlView("sys", "dm_resource_governor_resource_pools")]
    public partial class dm_resource_governor_resource_pools : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("statistics_start_time", 2), SqlTypeFacets("datetime", false)]
        public DateTime statistics_start_time
        {
            get;
            set;
        }

        [SqlColumn("total_cpu_usage_ms", 3), SqlTypeFacets("bigint", false)]
        public long total_cpu_usage_ms
        {
            get;
            set;
        }

        [SqlColumn("cache_memory_kb", 4), SqlTypeFacets("bigint", false)]
        public long cache_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("compile_memory_kb", 5), SqlTypeFacets("bigint", false)]
        public long compile_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("used_memgrant_kb", 6), SqlTypeFacets("bigint", false)]
        public long used_memgrant_kb
        {
            get;
            set;
        }

        [SqlColumn("total_memgrant_count", 7), SqlTypeFacets("bigint", false)]
        public long total_memgrant_count
        {
            get;
            set;
        }

        [SqlColumn("total_memgrant_timeout_count", 8), SqlTypeFacets("bigint", false)]
        public long total_memgrant_timeout_count
        {
            get;
            set;
        }

        [SqlColumn("active_memgrant_count", 9), SqlTypeFacets("int", false)]
        public int active_memgrant_count
        {
            get;
            set;
        }

        [SqlColumn("active_memgrant_kb", 10), SqlTypeFacets("bigint", false)]
        public long active_memgrant_kb
        {
            get;
            set;
        }

        [SqlColumn("memgrant_waiter_count", 11), SqlTypeFacets("int", false)]
        public int memgrant_waiter_count
        {
            get;
            set;
        }

        [SqlColumn("max_memory_kb", 12), SqlTypeFacets("bigint", false)]
        public long max_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("used_memory_kb", 13), SqlTypeFacets("bigint", false)]
        public long used_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("target_memory_kb", 14), SqlTypeFacets("bigint", false)]
        public long target_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("out_of_memory_count", 15), SqlTypeFacets("bigint", false)]
        public long out_of_memory_count
        {
            get;
            set;
        }

        [SqlColumn("min_cpu_percent", 16), SqlTypeFacets("int", false)]
        public int min_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("max_cpu_percent", 17), SqlTypeFacets("int", false)]
        public int max_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("min_memory_percent", 18), SqlTypeFacets("int", false)]
        public int min_memory_percent
        {
            get;
            set;
        }

        [SqlColumn("max_memory_percent", 19), SqlTypeFacets("int", false)]
        public int max_memory_percent
        {
            get;
            set;
        }

        [SqlColumn("cap_cpu_percent", 20), SqlTypeFacets("int", false)]
        public int cap_cpu_percent
        {
            get;
            set;
        }

        [SqlColumn("min_iops_per_volume", 21), SqlTypeFacets("int", true)]
        public int? min_iops_per_volume
        {
            get;
            set;
        }

        [SqlColumn("max_iops_per_volume", 22), SqlTypeFacets("int", true)]
        public int? max_iops_per_volume
        {
            get;
            set;
        }

        [SqlColumn("read_io_queued_total", 23), SqlTypeFacets("int", true)]
        public int? read_io_queued_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_issued_total", 24), SqlTypeFacets("int", true)]
        public int? read_io_issued_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_completed_total", 25), SqlTypeFacets("int", false)]
        public int read_io_completed_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_throttled_total", 26), SqlTypeFacets("int", true)]
        public int? read_io_throttled_total
        {
            get;
            set;
        }

        [SqlColumn("read_bytes_total", 27), SqlTypeFacets("bigint", false)]
        public long read_bytes_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_stall_total_ms", 28), SqlTypeFacets("bigint", false)]
        public long read_io_stall_total_ms
        {
            get;
            set;
        }

        [SqlColumn("read_io_stall_queued_ms", 29), SqlTypeFacets("bigint", true)]
        public long? read_io_stall_queued_ms
        {
            get;
            set;
        }

        [SqlColumn("write_io_queued_total", 30), SqlTypeFacets("int", true)]
        public int? write_io_queued_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_issued_total", 31), SqlTypeFacets("int", true)]
        public int? write_io_issued_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_completed_total", 32), SqlTypeFacets("int", false)]
        public int write_io_completed_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_throttled_total", 33), SqlTypeFacets("int", true)]
        public int? write_io_throttled_total
        {
            get;
            set;
        }

        [SqlColumn("write_bytes_total", 34), SqlTypeFacets("bigint", false)]
        public long write_bytes_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_stall_total_ms", 35), SqlTypeFacets("bigint", false)]
        public long write_io_stall_total_ms
        {
            get;
            set;
        }

        [SqlColumn("write_io_stall_queued_ms", 36), SqlTypeFacets("bigint", true)]
        public long? write_io_stall_queued_ms
        {
            get;
            set;
        }

        [SqlColumn("io_issue_violations_total", 37), SqlTypeFacets("int", true)]
        public int? io_issue_violations_total
        {
            get;
            set;
        }

        [SqlColumn("io_issue_delay_total_ms", 38), SqlTypeFacets("bigint", true)]
        public long? io_issue_delay_total_ms
        {
            get;
            set;
        }

        public dm_resource_governor_resource_pools()
        {
        }

        public dm_resource_governor_resource_pools(object[] items)
        {
            pool_id = (int)items[0];
            name = (string)items[1];
            statistics_start_time = (DateTime)items[2];
            total_cpu_usage_ms = (long)items[3];
            cache_memory_kb = (long)items[4];
            compile_memory_kb = (long)items[5];
            used_memgrant_kb = (long)items[6];
            total_memgrant_count = (long)items[7];
            total_memgrant_timeout_count = (long)items[8];
            active_memgrant_count = (int)items[9];
            active_memgrant_kb = (long)items[10];
            memgrant_waiter_count = (int)items[11];
            max_memory_kb = (long)items[12];
            used_memory_kb = (long)items[13];
            target_memory_kb = (long)items[14];
            out_of_memory_count = (long)items[15];
            min_cpu_percent = (int)items[16];
            max_cpu_percent = (int)items[17];
            min_memory_percent = (int)items[18];
            max_memory_percent = (int)items[19];
            cap_cpu_percent = (int)items[20];
            min_iops_per_volume = (int?)items[21];
            max_iops_per_volume = (int?)items[22];
            read_io_queued_total = (int?)items[23];
            read_io_issued_total = (int?)items[24];
            read_io_completed_total = (int)items[25];
            read_io_throttled_total = (int?)items[26];
            read_bytes_total = (long)items[27];
            read_io_stall_total_ms = (long)items[28];
            read_io_stall_queued_ms = (long?)items[29];
            write_io_queued_total = (int?)items[30];
            write_io_issued_total = (int?)items[31];
            write_io_completed_total = (int)items[32];
            write_io_throttled_total = (int?)items[33];
            write_bytes_total = (long)items[34];
            write_io_stall_total_ms = (long)items[35];
            write_io_stall_queued_ms = (long?)items[36];
            io_issue_violations_total = (int?)items[37];
            io_issue_delay_total_ms = (long?)items[38];
        }

        public dm_resource_governor_resource_pools(int pool_id, string name, DateTime statistics_start_time, long total_cpu_usage_ms, long cache_memory_kb, long compile_memory_kb, long used_memgrant_kb, long total_memgrant_count, long total_memgrant_timeout_count, int active_memgrant_count, long active_memgrant_kb, int memgrant_waiter_count, long max_memory_kb, long used_memory_kb, long target_memory_kb, long out_of_memory_count, int min_cpu_percent, int max_cpu_percent, int min_memory_percent, int max_memory_percent, int cap_cpu_percent, int? min_iops_per_volume, int? max_iops_per_volume, int? read_io_queued_total, int? read_io_issued_total, int read_io_completed_total, int? read_io_throttled_total, long read_bytes_total, long read_io_stall_total_ms, long? read_io_stall_queued_ms, int? write_io_queued_total, int? write_io_issued_total, int write_io_completed_total, int? write_io_throttled_total, long write_bytes_total, long write_io_stall_total_ms, long? write_io_stall_queued_ms, int? io_issue_violations_total, long? io_issue_delay_total_ms)
        {
            this.pool_id = pool_id;
            this.name = name;
            this.statistics_start_time = statistics_start_time;
            this.total_cpu_usage_ms = total_cpu_usage_ms;
            this.cache_memory_kb = cache_memory_kb;
            this.compile_memory_kb = compile_memory_kb;
            this.used_memgrant_kb = used_memgrant_kb;
            this.total_memgrant_count = total_memgrant_count;
            this.total_memgrant_timeout_count = total_memgrant_timeout_count;
            this.active_memgrant_count = active_memgrant_count;
            this.active_memgrant_kb = active_memgrant_kb;
            this.memgrant_waiter_count = memgrant_waiter_count;
            this.max_memory_kb = max_memory_kb;
            this.used_memory_kb = used_memory_kb;
            this.target_memory_kb = target_memory_kb;
            this.out_of_memory_count = out_of_memory_count;
            this.min_cpu_percent = min_cpu_percent;
            this.max_cpu_percent = max_cpu_percent;
            this.min_memory_percent = min_memory_percent;
            this.max_memory_percent = max_memory_percent;
            this.cap_cpu_percent = cap_cpu_percent;
            this.min_iops_per_volume = min_iops_per_volume;
            this.max_iops_per_volume = max_iops_per_volume;
            this.read_io_queued_total = read_io_queued_total;
            this.read_io_issued_total = read_io_issued_total;
            this.read_io_completed_total = read_io_completed_total;
            this.read_io_throttled_total = read_io_throttled_total;
            this.read_bytes_total = read_bytes_total;
            this.read_io_stall_total_ms = read_io_stall_total_ms;
            this.read_io_stall_queued_ms = read_io_stall_queued_ms;
            this.write_io_queued_total = write_io_queued_total;
            this.write_io_issued_total = write_io_issued_total;
            this.write_io_completed_total = write_io_completed_total;
            this.write_io_throttled_total = write_io_throttled_total;
            this.write_bytes_total = write_bytes_total;
            this.write_io_stall_total_ms = write_io_stall_total_ms;
            this.write_io_stall_queued_ms = write_io_stall_queued_ms;
            this.io_issue_violations_total = io_issue_violations_total;
            this.io_issue_delay_total_ms = io_issue_delay_total_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, name, statistics_start_time, total_cpu_usage_ms, cache_memory_kb, compile_memory_kb, used_memgrant_kb, total_memgrant_count, total_memgrant_timeout_count, active_memgrant_count, active_memgrant_kb, memgrant_waiter_count, max_memory_kb, used_memory_kb, target_memory_kb, out_of_memory_count, min_cpu_percent, max_cpu_percent, min_memory_percent, max_memory_percent, cap_cpu_percent, min_iops_per_volume, max_iops_per_volume, read_io_queued_total, read_io_issued_total, read_io_completed_total, read_io_throttled_total, read_bytes_total, read_io_stall_total_ms, read_io_stall_queued_ms, write_io_queued_total, write_io_issued_total, write_io_completed_total, write_io_throttled_total, write_bytes_total, write_io_stall_total_ms, write_io_stall_queued_ms, io_issue_violations_total, io_issue_delay_total_ms };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            name = (string)items[1];
            statistics_start_time = (DateTime)items[2];
            total_cpu_usage_ms = (long)items[3];
            cache_memory_kb = (long)items[4];
            compile_memory_kb = (long)items[5];
            used_memgrant_kb = (long)items[6];
            total_memgrant_count = (long)items[7];
            total_memgrant_timeout_count = (long)items[8];
            active_memgrant_count = (int)items[9];
            active_memgrant_kb = (long)items[10];
            memgrant_waiter_count = (int)items[11];
            max_memory_kb = (long)items[12];
            used_memory_kb = (long)items[13];
            target_memory_kb = (long)items[14];
            out_of_memory_count = (long)items[15];
            min_cpu_percent = (int)items[16];
            max_cpu_percent = (int)items[17];
            min_memory_percent = (int)items[18];
            max_memory_percent = (int)items[19];
            cap_cpu_percent = (int)items[20];
            min_iops_per_volume = (int?)items[21];
            max_iops_per_volume = (int?)items[22];
            read_io_queued_total = (int?)items[23];
            read_io_issued_total = (int?)items[24];
            read_io_completed_total = (int)items[25];
            read_io_throttled_total = (int?)items[26];
            read_bytes_total = (long)items[27];
            read_io_stall_total_ms = (long)items[28];
            read_io_stall_queued_ms = (long?)items[29];
            write_io_queued_total = (int?)items[30];
            write_io_issued_total = (int?)items[31];
            write_io_completed_total = (int)items[32];
            write_io_throttled_total = (int?)items[33];
            write_bytes_total = (long)items[34];
            write_io_stall_total_ms = (long)items[35];
            write_io_stall_queued_ms = (long?)items[36];
            io_issue_violations_total = (int?)items[37];
            io_issue_delay_total_ms = (long?)items[38];
        }
    }

    [SqlView("sys", "dm_broker_forwarded_messages")]
    public partial class dm_broker_forwarded_messages : SqlViewProxy
    {
        [SqlColumn("conversation_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? conversation_id
        {
            get;
            set;
        }

        [SqlColumn("is_initiator", 1), SqlTypeFacets("bit", true)]
        public bool? is_initiator
        {
            get;
            set;
        }

        [SqlColumn("to_service_name", 2), SqlTypeFacets("nvarchar", true, 512)]
        public string to_service_name
        {
            get;
            set;
        }

        [SqlColumn("to_broker_instance", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string to_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("from_service_name", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string from_service_name
        {
            get;
            set;
        }

        [SqlColumn("from_broker_instance", 5), SqlTypeFacets("nvarchar", true, 512)]
        public string from_broker_instance
        {
            get;
            set;
        }

        [SqlColumn("adjacent_broker_address", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string adjacent_broker_address
        {
            get;
            set;
        }

        [SqlColumn("message_sequence_number", 7), SqlTypeFacets("bigint", true)]
        public long? message_sequence_number
        {
            get;
            set;
        }

        [SqlColumn("message_fragment_number", 8), SqlTypeFacets("int", true)]
        public int? message_fragment_number
        {
            get;
            set;
        }

        [SqlColumn("hops_remaining", 9), SqlTypeFacets("tinyint", true)]
        public byte? hops_remaining
        {
            get;
            set;
        }

        [SqlColumn("time_to_live", 10), SqlTypeFacets("int", true)]
        public int? time_to_live
        {
            get;
            set;
        }

        [SqlColumn("time_consumed", 11), SqlTypeFacets("int", true)]
        public int? time_consumed
        {
            get;
            set;
        }

        [SqlColumn("message_id", 12), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? message_id
        {
            get;
            set;
        }

        public dm_broker_forwarded_messages()
        {
        }

        public dm_broker_forwarded_messages(object[] items)
        {
            conversation_id = (Guid?)items[0];
            is_initiator = (bool?)items[1];
            to_service_name = (string)items[2];
            to_broker_instance = (string)items[3];
            from_service_name = (string)items[4];
            from_broker_instance = (string)items[5];
            adjacent_broker_address = (string)items[6];
            message_sequence_number = (long?)items[7];
            message_fragment_number = (int?)items[8];
            hops_remaining = (byte?)items[9];
            time_to_live = (int?)items[10];
            time_consumed = (int?)items[11];
            message_id = (Guid?)items[12];
        }

        public dm_broker_forwarded_messages(Guid? conversation_id, bool? is_initiator, string to_service_name, string to_broker_instance, string from_service_name, string from_broker_instance, string adjacent_broker_address, long? message_sequence_number, int? message_fragment_number, byte? hops_remaining, int? time_to_live, int? time_consumed, Guid? message_id)
        {
            this.conversation_id = conversation_id;
            this.is_initiator = is_initiator;
            this.to_service_name = to_service_name;
            this.to_broker_instance = to_broker_instance;
            this.from_service_name = from_service_name;
            this.from_broker_instance = from_broker_instance;
            this.adjacent_broker_address = adjacent_broker_address;
            this.message_sequence_number = message_sequence_number;
            this.message_fragment_number = message_fragment_number;
            this.hops_remaining = hops_remaining;
            this.time_to_live = time_to_live;
            this.time_consumed = time_consumed;
            this.message_id = message_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { conversation_id, is_initiator, to_service_name, to_broker_instance, from_service_name, from_broker_instance, adjacent_broker_address, message_sequence_number, message_fragment_number, hops_remaining, time_to_live, time_consumed, message_id };
        }

        public override void SetItemArray(object[] items)
        {
            conversation_id = (Guid?)items[0];
            is_initiator = (bool?)items[1];
            to_service_name = (string)items[2];
            to_broker_instance = (string)items[3];
            from_service_name = (string)items[4];
            from_broker_instance = (string)items[5];
            adjacent_broker_address = (string)items[6];
            message_sequence_number = (long?)items[7];
            message_fragment_number = (int?)items[8];
            hops_remaining = (byte?)items[9];
            time_to_live = (int?)items[10];
            time_consumed = (int?)items[11];
            message_id = (Guid?)items[12];
        }
    }

    [SqlView("sys", "dm_exec_sessions")]
    public partial class dm_exec_sessions : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("smallint", false)]
        public short session_id
        {
            get;
            set;
        }

        [SqlColumn("login_time", 1), SqlTypeFacets("datetime", false)]
        public DateTime login_time
        {
            get;
            set;
        }

        [SqlColumn("host_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string host_name
        {
            get;
            set;
        }

        [SqlColumn("program_name", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string program_name
        {
            get;
            set;
        }

        [SqlColumn("host_process_id", 4), SqlTypeFacets("int", true)]
        public int? host_process_id
        {
            get;
            set;
        }

        [SqlColumn("client_version", 5), SqlTypeFacets("int", true)]
        public int? client_version
        {
            get;
            set;
        }

        [SqlColumn("client_interface_name", 6), SqlTypeFacets("nvarchar", true, 64)]
        public string client_interface_name
        {
            get;
            set;
        }

        [SqlColumn("security_id", 7), SqlTypeFacets("varbinary", false, 85)]
        public Byte[] security_id
        {
            get;
            set;
        }

        [SqlColumn("login_name", 8), SqlTypeFacets("nvarchar", false, 256)]
        public string login_name
        {
            get;
            set;
        }

        [SqlColumn("nt_domain", 9), SqlTypeFacets("nvarchar", true, 256)]
        public string nt_domain
        {
            get;
            set;
        }

        [SqlColumn("nt_user_name", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string nt_user_name
        {
            get;
            set;
        }

        [SqlColumn("status", 11), SqlTypeFacets("nvarchar", false, 60)]
        public string status
        {
            get;
            set;
        }

        [SqlColumn("context_info", 12), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] context_info
        {
            get;
            set;
        }

        [SqlColumn("cpu_time", 13), SqlTypeFacets("int", false)]
        public int cpu_time
        {
            get;
            set;
        }

        [SqlColumn("memory_usage", 14), SqlTypeFacets("int", false)]
        public int memory_usage
        {
            get;
            set;
        }

        [SqlColumn("total_scheduled_time", 15), SqlTypeFacets("int", false)]
        public int total_scheduled_time
        {
            get;
            set;
        }

        [SqlColumn("total_elapsed_time", 16), SqlTypeFacets("int", false)]
        public int total_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("endpoint_id", 17), SqlTypeFacets("int", false)]
        public int endpoint_id
        {
            get;
            set;
        }

        [SqlColumn("last_request_start_time", 18), SqlTypeFacets("datetime", false)]
        public DateTime last_request_start_time
        {
            get;
            set;
        }

        [SqlColumn("last_request_end_time", 19), SqlTypeFacets("datetime", true)]
        public DateTime? last_request_end_time
        {
            get;
            set;
        }

        [SqlColumn("reads", 20), SqlTypeFacets("bigint", false)]
        public long reads
        {
            get;
            set;
        }

        [SqlColumn("writes", 21), SqlTypeFacets("bigint", false)]
        public long writes
        {
            get;
            set;
        }

        [SqlColumn("logical_reads", 22), SqlTypeFacets("bigint", false)]
        public long logical_reads
        {
            get;
            set;
        }

        [SqlColumn("is_user_process", 23), SqlTypeFacets("bit", false)]
        public bool is_user_process
        {
            get;
            set;
        }

        [SqlColumn("text_size", 24), SqlTypeFacets("int", false)]
        public int text_size
        {
            get;
            set;
        }

        [SqlColumn("language", 25), SqlTypeFacets("nvarchar", true, 256)]
        public string language
        {
            get;
            set;
        }

        [SqlColumn("date_format", 26), SqlTypeFacets("nvarchar", true, 6)]
        public string date_format
        {
            get;
            set;
        }

        [SqlColumn("date_first", 27), SqlTypeFacets("smallint", false)]
        public short date_first
        {
            get;
            set;
        }

        [SqlColumn("quoted_identifier", 28), SqlTypeFacets("bit", false)]
        public bool quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("arithabort", 29), SqlTypeFacets("bit", false)]
        public bool arithabort
        {
            get;
            set;
        }

        [SqlColumn("ansi_null_dflt_on", 30), SqlTypeFacets("bit", false)]
        public bool ansi_null_dflt_on
        {
            get;
            set;
        }

        [SqlColumn("ansi_defaults", 31), SqlTypeFacets("bit", false)]
        public bool ansi_defaults
        {
            get;
            set;
        }

        [SqlColumn("ansi_warnings", 32), SqlTypeFacets("bit", false)]
        public bool ansi_warnings
        {
            get;
            set;
        }

        [SqlColumn("ansi_padding", 33), SqlTypeFacets("bit", false)]
        public bool ansi_padding
        {
            get;
            set;
        }

        [SqlColumn("ansi_nulls", 34), SqlTypeFacets("bit", false)]
        public bool ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("concat_null_yields_null", 35), SqlTypeFacets("bit", false)]
        public bool concat_null_yields_null
        {
            get;
            set;
        }

        [SqlColumn("transaction_isolation_level", 36), SqlTypeFacets("smallint", false)]
        public short transaction_isolation_level
        {
            get;
            set;
        }

        [SqlColumn("lock_timeout", 37), SqlTypeFacets("int", false)]
        public int lock_timeout
        {
            get;
            set;
        }

        [SqlColumn("deadlock_priority", 38), SqlTypeFacets("int", false)]
        public int deadlock_priority
        {
            get;
            set;
        }

        [SqlColumn("row_count", 39), SqlTypeFacets("bigint", false)]
        public long row_count
        {
            get;
            set;
        }

        [SqlColumn("prev_error", 40), SqlTypeFacets("int", false)]
        public int prev_error
        {
            get;
            set;
        }

        [SqlColumn("original_security_id", 41), SqlTypeFacets("varbinary", false, 85)]
        public Byte[] original_security_id
        {
            get;
            set;
        }

        [SqlColumn("original_login_name", 42), SqlTypeFacets("nvarchar", false, 256)]
        public string original_login_name
        {
            get;
            set;
        }

        [SqlColumn("last_successful_logon", 43), SqlTypeFacets("datetime", true)]
        public DateTime? last_successful_logon
        {
            get;
            set;
        }

        [SqlColumn("last_unsuccessful_logon", 44), SqlTypeFacets("datetime", true)]
        public DateTime? last_unsuccessful_logon
        {
            get;
            set;
        }

        [SqlColumn("unsuccessful_logons", 45), SqlTypeFacets("bigint", true)]
        public long? unsuccessful_logons
        {
            get;
            set;
        }

        [SqlColumn("group_id", 46), SqlTypeFacets("int", false)]
        public int group_id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 47), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("authenticating_database_id", 48), SqlTypeFacets("int", true)]
        public int? authenticating_database_id
        {
            get;
            set;
        }

        [SqlColumn("open_transaction_count", 49), SqlTypeFacets("int", false)]
        public int open_transaction_count
        {
            get;
            set;
        }

        public dm_exec_sessions()
        {
        }

        public dm_exec_sessions(object[] items)
        {
            session_id = (short)items[0];
            login_time = (DateTime)items[1];
            host_name = (string)items[2];
            program_name = (string)items[3];
            host_process_id = (int?)items[4];
            client_version = (int?)items[5];
            client_interface_name = (string)items[6];
            security_id = (Byte[])items[7];
            login_name = (string)items[8];
            nt_domain = (string)items[9];
            nt_user_name = (string)items[10];
            status = (string)items[11];
            context_info = (Byte[])items[12];
            cpu_time = (int)items[13];
            memory_usage = (int)items[14];
            total_scheduled_time = (int)items[15];
            total_elapsed_time = (int)items[16];
            endpoint_id = (int)items[17];
            last_request_start_time = (DateTime)items[18];
            last_request_end_time = (DateTime?)items[19];
            reads = (long)items[20];
            writes = (long)items[21];
            logical_reads = (long)items[22];
            is_user_process = (bool)items[23];
            text_size = (int)items[24];
            language = (string)items[25];
            date_format = (string)items[26];
            date_first = (short)items[27];
            quoted_identifier = (bool)items[28];
            arithabort = (bool)items[29];
            ansi_null_dflt_on = (bool)items[30];
            ansi_defaults = (bool)items[31];
            ansi_warnings = (bool)items[32];
            ansi_padding = (bool)items[33];
            ansi_nulls = (bool)items[34];
            concat_null_yields_null = (bool)items[35];
            transaction_isolation_level = (short)items[36];
            lock_timeout = (int)items[37];
            deadlock_priority = (int)items[38];
            row_count = (long)items[39];
            prev_error = (int)items[40];
            original_security_id = (Byte[])items[41];
            original_login_name = (string)items[42];
            last_successful_logon = (DateTime?)items[43];
            last_unsuccessful_logon = (DateTime?)items[44];
            unsuccessful_logons = (long?)items[45];
            group_id = (int)items[46];
            database_id = (short)items[47];
            authenticating_database_id = (int?)items[48];
            open_transaction_count = (int)items[49];
        }

        public dm_exec_sessions(short session_id, DateTime login_time, string host_name, string program_name, int? host_process_id, int? client_version, string client_interface_name, Byte[] security_id, string login_name, string nt_domain, string nt_user_name, string status, Byte[] context_info, int cpu_time, int memory_usage, int total_scheduled_time, int total_elapsed_time, int endpoint_id, DateTime last_request_start_time, DateTime? last_request_end_time, long reads, long writes, long logical_reads, bool is_user_process, int text_size, string language, string date_format, short date_first, bool quoted_identifier, bool arithabort, bool ansi_null_dflt_on, bool ansi_defaults, bool ansi_warnings, bool ansi_padding, bool ansi_nulls, bool concat_null_yields_null, short transaction_isolation_level, int lock_timeout, int deadlock_priority, long row_count, int prev_error, Byte[] original_security_id, string original_login_name, DateTime? last_successful_logon, DateTime? last_unsuccessful_logon, long? unsuccessful_logons, int group_id, short database_id, int? authenticating_database_id, int open_transaction_count)
        {
            this.session_id = session_id;
            this.login_time = login_time;
            this.host_name = host_name;
            this.program_name = program_name;
            this.host_process_id = host_process_id;
            this.client_version = client_version;
            this.client_interface_name = client_interface_name;
            this.security_id = security_id;
            this.login_name = login_name;
            this.nt_domain = nt_domain;
            this.nt_user_name = nt_user_name;
            this.status = status;
            this.context_info = context_info;
            this.cpu_time = cpu_time;
            this.memory_usage = memory_usage;
            this.total_scheduled_time = total_scheduled_time;
            this.total_elapsed_time = total_elapsed_time;
            this.endpoint_id = endpoint_id;
            this.last_request_start_time = last_request_start_time;
            this.last_request_end_time = last_request_end_time;
            this.reads = reads;
            this.writes = writes;
            this.logical_reads = logical_reads;
            this.is_user_process = is_user_process;
            this.text_size = text_size;
            this.language = language;
            this.date_format = date_format;
            this.date_first = date_first;
            this.quoted_identifier = quoted_identifier;
            this.arithabort = arithabort;
            this.ansi_null_dflt_on = ansi_null_dflt_on;
            this.ansi_defaults = ansi_defaults;
            this.ansi_warnings = ansi_warnings;
            this.ansi_padding = ansi_padding;
            this.ansi_nulls = ansi_nulls;
            this.concat_null_yields_null = concat_null_yields_null;
            this.transaction_isolation_level = transaction_isolation_level;
            this.lock_timeout = lock_timeout;
            this.deadlock_priority = deadlock_priority;
            this.row_count = row_count;
            this.prev_error = prev_error;
            this.original_security_id = original_security_id;
            this.original_login_name = original_login_name;
            this.last_successful_logon = last_successful_logon;
            this.last_unsuccessful_logon = last_unsuccessful_logon;
            this.unsuccessful_logons = unsuccessful_logons;
            this.group_id = group_id;
            this.database_id = database_id;
            this.authenticating_database_id = authenticating_database_id;
            this.open_transaction_count = open_transaction_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, login_time, host_name, program_name, host_process_id, client_version, client_interface_name, security_id, login_name, nt_domain, nt_user_name, status, context_info, cpu_time, memory_usage, total_scheduled_time, total_elapsed_time, endpoint_id, last_request_start_time, last_request_end_time, reads, writes, logical_reads, is_user_process, text_size, language, date_format, date_first, quoted_identifier, arithabort, ansi_null_dflt_on, ansi_defaults, ansi_warnings, ansi_padding, ansi_nulls, concat_null_yields_null, transaction_isolation_level, lock_timeout, deadlock_priority, row_count, prev_error, original_security_id, original_login_name, last_successful_logon, last_unsuccessful_logon, unsuccessful_logons, group_id, database_id, authenticating_database_id, open_transaction_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (short)items[0];
            login_time = (DateTime)items[1];
            host_name = (string)items[2];
            program_name = (string)items[3];
            host_process_id = (int?)items[4];
            client_version = (int?)items[5];
            client_interface_name = (string)items[6];
            security_id = (Byte[])items[7];
            login_name = (string)items[8];
            nt_domain = (string)items[9];
            nt_user_name = (string)items[10];
            status = (string)items[11];
            context_info = (Byte[])items[12];
            cpu_time = (int)items[13];
            memory_usage = (int)items[14];
            total_scheduled_time = (int)items[15];
            total_elapsed_time = (int)items[16];
            endpoint_id = (int)items[17];
            last_request_start_time = (DateTime)items[18];
            last_request_end_time = (DateTime?)items[19];
            reads = (long)items[20];
            writes = (long)items[21];
            logical_reads = (long)items[22];
            is_user_process = (bool)items[23];
            text_size = (int)items[24];
            language = (string)items[25];
            date_format = (string)items[26];
            date_first = (short)items[27];
            quoted_identifier = (bool)items[28];
            arithabort = (bool)items[29];
            ansi_null_dflt_on = (bool)items[30];
            ansi_defaults = (bool)items[31];
            ansi_warnings = (bool)items[32];
            ansi_padding = (bool)items[33];
            ansi_nulls = (bool)items[34];
            concat_null_yields_null = (bool)items[35];
            transaction_isolation_level = (short)items[36];
            lock_timeout = (int)items[37];
            deadlock_priority = (int)items[38];
            row_count = (long)items[39];
            prev_error = (int)items[40];
            original_security_id = (Byte[])items[41];
            original_login_name = (string)items[42];
            last_successful_logon = (DateTime?)items[43];
            last_unsuccessful_logon = (DateTime?)items[44];
            unsuccessful_logons = (long?)items[45];
            group_id = (int)items[46];
            database_id = (short)items[47];
            authenticating_database_id = (int?)items[48];
            open_transaction_count = (int)items[49];
        }
    }

    [SqlView("sys", "user_token")]
    public partial class user_token : SqlViewProxy
    {
        [SqlColumn("principal_id", 0), SqlTypeFacets("int", true)]
        public int? principal_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 1), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("type", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("usage", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string usage
        {
            get;
            set;
        }

        public user_token()
        {
        }

        public user_token(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }

        public user_token(int? principal_id, Byte[] sid, string name, string type, string usage)
        {
            this.principal_id = principal_id;
            this.sid = sid;
            this.name = name;
            this.type = type;
            this.usage = usage;
        }

        public override object[] GetItemArray()
        {
            return new object[] { principal_id, sid, name, type, usage };
        }

        public override void SetItemArray(object[] items)
        {
            principal_id = (int?)items[0];
            sid = (Byte[])items[1];
            name = (string)items[2];
            type = (string)items[3];
            usage = (string)items[4];
        }
    }

    [SqlView("sys", "dm_hadr_availability_replica_cluster_states")]
    public partial class dm_hadr_availability_replica_cluster_states : SqlViewProxy
    {
        [SqlColumn("replica_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid replica_id
        {
            get;
            set;
        }

        [SqlColumn("replica_server_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string replica_server_name
        {
            get;
            set;
        }

        [SqlColumn("group_id", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("join_state", 3), SqlTypeFacets("tinyint", false)]
        public byte join_state
        {
            get;
            set;
        }

        [SqlColumn("join_state_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string join_state_desc
        {
            get;
            set;
        }

        public dm_hadr_availability_replica_cluster_states()
        {
        }

        public dm_hadr_availability_replica_cluster_states(object[] items)
        {
            replica_id = (Guid)items[0];
            replica_server_name = (string)items[1];
            group_id = (Guid)items[2];
            join_state = (byte)items[3];
            join_state_desc = (string)items[4];
        }

        public dm_hadr_availability_replica_cluster_states(Guid replica_id, string replica_server_name, Guid group_id, byte join_state, string join_state_desc)
        {
            this.replica_id = replica_id;
            this.replica_server_name = replica_server_name;
            this.group_id = group_id;
            this.join_state = join_state;
            this.join_state_desc = join_state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { replica_id, replica_server_name, group_id, join_state, join_state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            replica_id = (Guid)items[0];
            replica_server_name = (string)items[1];
            group_id = (Guid)items[2];
            join_state = (byte)items[3];
            join_state_desc = (string)items[4];
        }
    }

    [SqlView("sys", "dm_exec_cached_plans")]
    public partial class dm_exec_cached_plans : SqlViewProxy
    {
        [SqlColumn("bucketid", 0), SqlTypeFacets("int", false)]
        public int bucketid
        {
            get;
            set;
        }

        [SqlColumn("refcounts", 1), SqlTypeFacets("int", false)]
        public int refcounts
        {
            get;
            set;
        }

        [SqlColumn("usecounts", 2), SqlTypeFacets("int", false)]
        public int usecounts
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 3), SqlTypeFacets("int", false)]
        public int size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("cacheobjtype", 5), SqlTypeFacets("nvarchar", false, 100)]
        public string cacheobjtype
        {
            get;
            set;
        }

        [SqlColumn("objtype", 6), SqlTypeFacets("nvarchar", false, 40)]
        public string objtype
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 7), SqlTypeFacets("varbinary", false, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 8), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("parent_plan_handle", 9), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] parent_plan_handle
        {
            get;
            set;
        }

        public dm_exec_cached_plans()
        {
        }

        public dm_exec_cached_plans(object[] items)
        {
            bucketid = (int)items[0];
            refcounts = (int)items[1];
            usecounts = (int)items[2];
            size_in_bytes = (int)items[3];
            memory_object_address = (Byte[])items[4];
            cacheobjtype = (string)items[5];
            objtype = (string)items[6];
            plan_handle = (Byte[])items[7];
            pool_id = (int)items[8];
            parent_plan_handle = (Byte[])items[9];
        }

        public dm_exec_cached_plans(int bucketid, int refcounts, int usecounts, int size_in_bytes, Byte[] memory_object_address, string cacheobjtype, string objtype, Byte[] plan_handle, int pool_id, Byte[] parent_plan_handle)
        {
            this.bucketid = bucketid;
            this.refcounts = refcounts;
            this.usecounts = usecounts;
            this.size_in_bytes = size_in_bytes;
            this.memory_object_address = memory_object_address;
            this.cacheobjtype = cacheobjtype;
            this.objtype = objtype;
            this.plan_handle = plan_handle;
            this.pool_id = pool_id;
            this.parent_plan_handle = parent_plan_handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { bucketid, refcounts, usecounts, size_in_bytes, memory_object_address, cacheobjtype, objtype, plan_handle, pool_id, parent_plan_handle };
        }

        public override void SetItemArray(object[] items)
        {
            bucketid = (int)items[0];
            refcounts = (int)items[1];
            usecounts = (int)items[2];
            size_in_bytes = (int)items[3];
            memory_object_address = (Byte[])items[4];
            cacheobjtype = (string)items[5];
            objtype = (string)items[6];
            plan_handle = (Byte[])items[7];
            pool_id = (int)items[8];
            parent_plan_handle = (Byte[])items[9];
        }
    }

    [SqlView("sys", "dm_db_uncontained_entities")]
    public partial class dm_db_uncontained_entities : SqlViewProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("int", false)]
        public int @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("statement_line_number", 3), SqlTypeFacets("int", true)]
        public int? statement_line_number
        {
            get;
            set;
        }

        [SqlColumn("statement_offset_begin", 4), SqlTypeFacets("int", true)]
        public int? statement_offset_begin
        {
            get;
            set;
        }

        [SqlColumn("statement_offset_end", 5), SqlTypeFacets("int", true)]
        public int? statement_offset_end
        {
            get;
            set;
        }

        [SqlColumn("statement_type", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string statement_type
        {
            get;
            set;
        }

        [SqlColumn("feature_name", 7), SqlTypeFacets("nvarchar", false, 256)]
        public string feature_name
        {
            get;
            set;
        }

        [SqlColumn("feature_type_name", 8), SqlTypeFacets("nvarchar", false, 256)]
        public string feature_type_name
        {
            get;
            set;
        }

        public dm_db_uncontained_entities()
        {
        }

        public dm_db_uncontained_entities(object[] items)
        {
            @class = (int)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            statement_line_number = (int?)items[3];
            statement_offset_begin = (int?)items[4];
            statement_offset_end = (int?)items[5];
            statement_type = (string)items[6];
            feature_name = (string)items[7];
            feature_type_name = (string)items[8];
        }

        public dm_db_uncontained_entities(int @class, string class_desc, int major_id, int? statement_line_number, int? statement_offset_begin, int? statement_offset_end, string statement_type, string feature_name, string feature_type_name)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.statement_line_number = statement_line_number;
            this.statement_offset_begin = statement_offset_begin;
            this.statement_offset_end = statement_offset_end;
            this.statement_type = statement_type;
            this.feature_name = feature_name;
            this.feature_type_name = feature_type_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, statement_line_number, statement_offset_begin, statement_offset_end, statement_type, feature_name, feature_type_name };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (int)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            statement_line_number = (int?)items[3];
            statement_offset_begin = (int?)items[4];
            statement_offset_end = (int?)items[5];
            statement_type = (string)items[6];
            feature_name = (string)items[7];
            feature_type_name = (string)items[8];
        }
    }

    [SqlView("sys", "dm_hadr_cluster_members")]
    public partial class dm_hadr_cluster_members : SqlViewProxy
    {
        [SqlColumn("member_name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string member_name
        {
            get;
            set;
        }

        [SqlColumn("member_type", 1), SqlTypeFacets("tinyint", false)]
        public byte member_type
        {
            get;
            set;
        }

        [SqlColumn("member_type_desc", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string member_type_desc
        {
            get;
            set;
        }

        [SqlColumn("member_state", 3), SqlTypeFacets("tinyint", false)]
        public byte member_state
        {
            get;
            set;
        }

        [SqlColumn("member_state_desc", 4), SqlTypeFacets("nvarchar", false, 120)]
        public string member_state_desc
        {
            get;
            set;
        }

        [SqlColumn("number_of_quorum_votes", 5), SqlTypeFacets("int", true)]
        public int? number_of_quorum_votes
        {
            get;
            set;
        }

        public dm_hadr_cluster_members()
        {
        }

        public dm_hadr_cluster_members(object[] items)
        {
            member_name = (string)items[0];
            member_type = (byte)items[1];
            member_type_desc = (string)items[2];
            member_state = (byte)items[3];
            member_state_desc = (string)items[4];
            number_of_quorum_votes = (int?)items[5];
        }

        public dm_hadr_cluster_members(string member_name, byte member_type, string member_type_desc, byte member_state, string member_state_desc, int? number_of_quorum_votes)
        {
            this.member_name = member_name;
            this.member_type = member_type;
            this.member_type_desc = member_type_desc;
            this.member_state = member_state;
            this.member_state_desc = member_state_desc;
            this.number_of_quorum_votes = number_of_quorum_votes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { member_name, member_type, member_type_desc, member_state, member_state_desc, number_of_quorum_votes };
        }

        public override void SetItemArray(object[] items)
        {
            member_name = (string)items[0];
            member_type = (byte)items[1];
            member_type_desc = (string)items[2];
            member_state = (byte)items[3];
            member_state_desc = (string)items[4];
            number_of_quorum_votes = (int?)items[5];
        }
    }

    [SqlView("sys", "dm_db_missing_index_groups")]
    public partial class dm_db_missing_index_groups : SqlViewProxy
    {
        [SqlColumn("index_group_handle", 0), SqlTypeFacets("int", false)]
        public int index_group_handle
        {
            get;
            set;
        }

        [SqlColumn("index_handle", 1), SqlTypeFacets("int", false)]
        public int index_handle
        {
            get;
            set;
        }

        public dm_db_missing_index_groups()
        {
        }

        public dm_db_missing_index_groups(object[] items)
        {
            index_group_handle = (int)items[0];
            index_handle = (int)items[1];
        }

        public dm_db_missing_index_groups(int index_group_handle, int index_handle)
        {
            this.index_group_handle = index_group_handle;
            this.index_handle = index_handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { index_group_handle, index_handle };
        }

        public override void SetItemArray(object[] items)
        {
            index_group_handle = (int)items[0];
            index_handle = (int)items[1];
        }
    }

    [SqlView("sys", "dm_db_xtp_table_memory_stats")]
    public partial class dm_db_xtp_table_memory_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("memory_allocated_for_table_kb", 1), SqlTypeFacets("bigint", true)]
        public long? memory_allocated_for_table_kb
        {
            get;
            set;
        }

        [SqlColumn("memory_used_by_table_kb", 2), SqlTypeFacets("bigint", true)]
        public long? memory_used_by_table_kb
        {
            get;
            set;
        }

        [SqlColumn("memory_allocated_for_indexes_kb", 3), SqlTypeFacets("bigint", true)]
        public long? memory_allocated_for_indexes_kb
        {
            get;
            set;
        }

        [SqlColumn("memory_used_by_indexes_kb", 4), SqlTypeFacets("bigint", true)]
        public long? memory_used_by_indexes_kb
        {
            get;
            set;
        }

        public dm_db_xtp_table_memory_stats()
        {
        }

        public dm_db_xtp_table_memory_stats(object[] items)
        {
            object_id = (int?)items[0];
            memory_allocated_for_table_kb = (long?)items[1];
            memory_used_by_table_kb = (long?)items[2];
            memory_allocated_for_indexes_kb = (long?)items[3];
            memory_used_by_indexes_kb = (long?)items[4];
        }

        public dm_db_xtp_table_memory_stats(int? object_id, long? memory_allocated_for_table_kb, long? memory_used_by_table_kb, long? memory_allocated_for_indexes_kb, long? memory_used_by_indexes_kb)
        {
            this.object_id = object_id;
            this.memory_allocated_for_table_kb = memory_allocated_for_table_kb;
            this.memory_used_by_table_kb = memory_used_by_table_kb;
            this.memory_allocated_for_indexes_kb = memory_allocated_for_indexes_kb;
            this.memory_used_by_indexes_kb = memory_used_by_indexes_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, memory_allocated_for_table_kb, memory_used_by_table_kb, memory_allocated_for_indexes_kb, memory_used_by_indexes_kb };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            memory_allocated_for_table_kb = (long?)items[1];
            memory_used_by_table_kb = (long?)items[2];
            memory_allocated_for_indexes_kb = (long?)items[3];
            memory_used_by_indexes_kb = (long?)items[4];
        }
    }

    [SqlView("sys", "dm_os_ring_buffers")]
    public partial class dm_os_ring_buffers : SqlViewProxy
    {
        [SqlColumn("ring_buffer_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] ring_buffer_address
        {
            get;
            set;
        }

        [SqlColumn("ring_buffer_type", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string ring_buffer_type
        {
            get;
            set;
        }

        [SqlColumn("timestamp", 2), SqlTypeFacets("bigint", false)]
        public long timestamp
        {
            get;
            set;
        }

        [SqlColumn("record", 3), SqlTypeFacets("nvarchar", true, 6144)]
        public string record
        {
            get;
            set;
        }

        public dm_os_ring_buffers()
        {
        }

        public dm_os_ring_buffers(object[] items)
        {
            ring_buffer_address = (Byte[])items[0];
            ring_buffer_type = (string)items[1];
            timestamp = (long)items[2];
            record = (string)items[3];
        }

        public dm_os_ring_buffers(Byte[] ring_buffer_address, string ring_buffer_type, long timestamp, string record)
        {
            this.ring_buffer_address = ring_buffer_address;
            this.ring_buffer_type = ring_buffer_type;
            this.timestamp = timestamp;
            this.record = record;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ring_buffer_address, ring_buffer_type, timestamp, record };
        }

        public override void SetItemArray(object[] items)
        {
            ring_buffer_address = (Byte[])items[0];
            ring_buffer_type = (string)items[1];
            timestamp = (long)items[2];
            record = (string)items[3];
        }
    }

    [SqlView("sys", "dm_hadr_availability_group_states")]
    public partial class dm_hadr_availability_group_states : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("primary_replica", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string primary_replica
        {
            get;
            set;
        }

        [SqlColumn("primary_recovery_health", 2), SqlTypeFacets("tinyint", true)]
        public byte? primary_recovery_health
        {
            get;
            set;
        }

        [SqlColumn("primary_recovery_health_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string primary_recovery_health_desc
        {
            get;
            set;
        }

        [SqlColumn("secondary_recovery_health", 4), SqlTypeFacets("tinyint", true)]
        public byte? secondary_recovery_health
        {
            get;
            set;
        }

        [SqlColumn("secondary_recovery_health_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string secondary_recovery_health_desc
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health", 6), SqlTypeFacets("tinyint", true)]
        public byte? synchronization_health
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string synchronization_health_desc
        {
            get;
            set;
        }

        public dm_hadr_availability_group_states()
        {
        }

        public dm_hadr_availability_group_states(object[] items)
        {
            group_id = (Guid)items[0];
            primary_replica = (string)items[1];
            primary_recovery_health = (byte?)items[2];
            primary_recovery_health_desc = (string)items[3];
            secondary_recovery_health = (byte?)items[4];
            secondary_recovery_health_desc = (string)items[5];
            synchronization_health = (byte?)items[6];
            synchronization_health_desc = (string)items[7];
        }

        public dm_hadr_availability_group_states(Guid group_id, string primary_replica, byte? primary_recovery_health, string primary_recovery_health_desc, byte? secondary_recovery_health, string secondary_recovery_health_desc, byte? synchronization_health, string synchronization_health_desc)
        {
            this.group_id = group_id;
            this.primary_replica = primary_replica;
            this.primary_recovery_health = primary_recovery_health;
            this.primary_recovery_health_desc = primary_recovery_health_desc;
            this.secondary_recovery_health = secondary_recovery_health;
            this.secondary_recovery_health_desc = secondary_recovery_health_desc;
            this.synchronization_health = synchronization_health;
            this.synchronization_health_desc = synchronization_health_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, primary_replica, primary_recovery_health, primary_recovery_health_desc, secondary_recovery_health, secondary_recovery_health_desc, synchronization_health, synchronization_health_desc };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (Guid)items[0];
            primary_replica = (string)items[1];
            primary_recovery_health = (byte?)items[2];
            primary_recovery_health_desc = (string)items[3];
            secondary_recovery_health = (byte?)items[4];
            secondary_recovery_health_desc = (string)items[5];
            synchronization_health = (byte?)items[6];
            synchronization_health_desc = (string)items[7];
        }
    }

    [SqlView("sys", "dm_audit_actions")]
    public partial class dm_audit_actions : SqlViewProxy
    {
        [SqlColumn("action_id", 0), SqlTypeFacets("varchar", true, 4)]
        public string action_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 2), SqlTypeFacets("nvarchar", true, 70)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("covering_action_name", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string covering_action_name
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 4), SqlTypeFacets("nvarchar", true, 70)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("covering_parent_action_name", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string covering_parent_action_name
        {
            get;
            set;
        }

        [SqlColumn("configuration_level", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string configuration_level
        {
            get;
            set;
        }

        [SqlColumn("containing_group_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string containing_group_name
        {
            get;
            set;
        }

        [SqlColumn("action_in_log", 8), SqlTypeFacets("bit", false)]
        public bool action_in_log
        {
            get;
            set;
        }

        public dm_audit_actions()
        {
        }

        public dm_audit_actions(object[] items)
        {
            action_id = (string)items[0];
            name = (string)items[1];
            class_desc = (string)items[2];
            covering_action_name = (string)items[3];
            parent_class_desc = (string)items[4];
            covering_parent_action_name = (string)items[5];
            configuration_level = (string)items[6];
            containing_group_name = (string)items[7];
            action_in_log = (bool)items[8];
        }

        public dm_audit_actions(string action_id, string name, string class_desc, string covering_action_name, string parent_class_desc, string covering_parent_action_name, string configuration_level, string containing_group_name, bool action_in_log)
        {
            this.action_id = action_id;
            this.name = name;
            this.class_desc = class_desc;
            this.covering_action_name = covering_action_name;
            this.parent_class_desc = parent_class_desc;
            this.covering_parent_action_name = covering_parent_action_name;
            this.configuration_level = configuration_level;
            this.containing_group_name = containing_group_name;
            this.action_in_log = action_in_log;
        }

        public override object[] GetItemArray()
        {
            return new object[] { action_id, name, class_desc, covering_action_name, parent_class_desc, covering_parent_action_name, configuration_level, containing_group_name, action_in_log };
        }

        public override void SetItemArray(object[] items)
        {
            action_id = (string)items[0];
            name = (string)items[1];
            class_desc = (string)items[2];
            covering_action_name = (string)items[3];
            parent_class_desc = (string)items[4];
            covering_parent_action_name = (string)items[5];
            configuration_level = (string)items[6];
            containing_group_name = (string)items[7];
            action_in_log = (bool)items[8];
        }
    }

    [SqlView("sys", "dm_xe_session_targets")]
    public partial class dm_xe_session_targets : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("target_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string target_name
        {
            get;
            set;
        }

        [SqlColumn("target_package_guid", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid target_package_guid
        {
            get;
            set;
        }

        [SqlColumn("execution_count", 3), SqlTypeFacets("bigint", false)]
        public long execution_count
        {
            get;
            set;
        }

        [SqlColumn("execution_duration_ms", 4), SqlTypeFacets("bigint", false)]
        public long execution_duration_ms
        {
            get;
            set;
        }

        [SqlColumn("target_data", 5), SqlTypeFacets("nvarchar", true, -1)]
        public string target_data
        {
            get;
            set;
        }

        public dm_xe_session_targets()
        {
        }

        public dm_xe_session_targets(object[] items)
        {
            event_session_address = (Byte[])items[0];
            target_name = (string)items[1];
            target_package_guid = (Guid)items[2];
            execution_count = (long)items[3];
            execution_duration_ms = (long)items[4];
            target_data = (string)items[5];
        }

        public dm_xe_session_targets(Byte[] event_session_address, string target_name, Guid target_package_guid, long execution_count, long execution_duration_ms, string target_data)
        {
            this.event_session_address = event_session_address;
            this.target_name = target_name;
            this.target_package_guid = target_package_guid;
            this.execution_count = execution_count;
            this.execution_duration_ms = execution_duration_ms;
            this.target_data = target_data;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, target_name, target_package_guid, execution_count, execution_duration_ms, target_data };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            target_name = (string)items[1];
            target_package_guid = (Guid)items[2];
            execution_count = (long)items[3];
            execution_duration_ms = (long)items[4];
            target_data = (string)items[5];
        }
    }

    [SqlView("sys", "dm_filestream_non_transacted_handles")]
    public partial class dm_filestream_non_transacted_handles : SqlViewProxy
    {
        [SqlColumn("opened_file_name", 16), SqlTypeFacets("nvarchar", true, 512)]
        public string opened_file_name
        {
            get;
            set;
        }

        [SqlColumn("database_directory_name", 17), SqlTypeFacets("nvarchar", true, 512)]
        public string database_directory_name
        {
            get;
            set;
        }

        [SqlColumn("table_directory_name", 18), SqlTypeFacets("nvarchar", true, 512)]
        public string table_directory_name
        {
            get;
            set;
        }

        [SqlColumn("remaining_file_name", 19), SqlTypeFacets("nvarchar", true, 512)]
        public string remaining_file_name
        {
            get;
            set;
        }

        [SqlColumn("open_time", 20), SqlTypeFacets("datetime", false)]
        public DateTime open_time
        {
            get;
            set;
        }

        [SqlColumn("flags", 21), SqlTypeFacets("int", true)]
        public int? flags
        {
            get;
            set;
        }

        [SqlColumn("login_id", 22), SqlTypeFacets("int", true)]
        public int? login_id
        {
            get;
            set;
        }

        [SqlColumn("login_name", 23), SqlTypeFacets("nvarchar", true, 512)]
        public string login_name
        {
            get;
            set;
        }

        [SqlColumn("login_sid", 24), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] login_sid
        {
            get;
            set;
        }

        [SqlColumn("read_access", 25), SqlTypeFacets("bit", true)]
        public bool? read_access
        {
            get;
            set;
        }

        [SqlColumn("write_access", 26), SqlTypeFacets("bit", true)]
        public bool? write_access
        {
            get;
            set;
        }

        [SqlColumn("delete_access", 27), SqlTypeFacets("bit", true)]
        public bool? delete_access
        {
            get;
            set;
        }

        [SqlColumn("share_read", 28), SqlTypeFacets("bit", true)]
        public bool? share_read
        {
            get;
            set;
        }

        [SqlColumn("share_write", 29), SqlTypeFacets("bit", true)]
        public bool? share_write
        {
            get;
            set;
        }

        [SqlColumn("share_delete", 30), SqlTypeFacets("bit", true)]
        public bool? share_delete
        {
            get;
            set;
        }

        [SqlColumn("create_disposition", 31), SqlTypeFacets("int", true)]
        public int? create_disposition
        {
            get;
            set;
        }

        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("handle_id", 2), SqlTypeFacets("int", true)]
        public int? handle_id
        {
            get;
            set;
        }

        [SqlColumn("file_object_type", 3), SqlTypeFacets("int", true)]
        public int? file_object_type
        {
            get;
            set;
        }

        [SqlColumn("file_object_type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string file_object_type_desc
        {
            get;
            set;
        }

        [SqlColumn("correlation_process_id", 5), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] correlation_process_id
        {
            get;
            set;
        }

        [SqlColumn("correlation_thread_id", 6), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] correlation_thread_id
        {
            get;
            set;
        }

        [SqlColumn("file_context", 7), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] file_context
        {
            get;
            set;
        }

        [SqlColumn("state", 8), SqlTypeFacets("int", true)]
        public int? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("current_workitem_type", 10), SqlTypeFacets("int", true)]
        public int? current_workitem_type
        {
            get;
            set;
        }

        [SqlColumn("current_workitem_type_desc", 11), SqlTypeFacets("nvarchar", true, 120)]
        public string current_workitem_type_desc
        {
            get;
            set;
        }

        [SqlColumn("fcb_id", 12), SqlTypeFacets("bigint", true)]
        public long? fcb_id
        {
            get;
            set;
        }

        [SqlColumn("item_id", 13), SqlTypeFacets("varbinary", true, 892)]
        public Byte[] item_id
        {
            get;
            set;
        }

        [SqlColumn("is_directory", 14), SqlTypeFacets("bit", true)]
        public bool? is_directory
        {
            get;
            set;
        }

        [SqlColumn("item_name", 15), SqlTypeFacets("nvarchar", true, 512)]
        public string item_name
        {
            get;
            set;
        }

        public dm_filestream_non_transacted_handles()
        {
        }

        public dm_filestream_non_transacted_handles(object[] items)
        {
            opened_file_name = (string)items[0];
            database_directory_name = (string)items[1];
            table_directory_name = (string)items[2];
            remaining_file_name = (string)items[3];
            open_time = (DateTime)items[4];
            flags = (int?)items[5];
            login_id = (int?)items[6];
            login_name = (string)items[7];
            login_sid = (Byte[])items[8];
            read_access = (bool?)items[9];
            write_access = (bool?)items[10];
            delete_access = (bool?)items[11];
            share_read = (bool?)items[12];
            share_write = (bool?)items[13];
            share_delete = (bool?)items[14];
            create_disposition = (int?)items[15];
            database_id = (int?)items[16];
            object_id = (int?)items[17];
            handle_id = (int?)items[18];
            file_object_type = (int?)items[19];
            file_object_type_desc = (string)items[20];
            correlation_process_id = (Byte[])items[21];
            correlation_thread_id = (Byte[])items[22];
            file_context = (Byte[])items[23];
            state = (int?)items[24];
            state_desc = (string)items[25];
            current_workitem_type = (int?)items[26];
            current_workitem_type_desc = (string)items[27];
            fcb_id = (long?)items[28];
            item_id = (Byte[])items[29];
            is_directory = (bool?)items[30];
            item_name = (string)items[31];
        }

        public dm_filestream_non_transacted_handles(string opened_file_name, string database_directory_name, string table_directory_name, string remaining_file_name, DateTime open_time, int? flags, int? login_id, string login_name, Byte[] login_sid, bool? read_access, bool? write_access, bool? delete_access, bool? share_read, bool? share_write, bool? share_delete, int? create_disposition, int? database_id, int? object_id, int? handle_id, int? file_object_type, string file_object_type_desc, Byte[] correlation_process_id, Byte[] correlation_thread_id, Byte[] file_context, int? state, string state_desc, int? current_workitem_type, string current_workitem_type_desc, long? fcb_id, Byte[] item_id, bool? is_directory, string item_name)
        {
            this.opened_file_name = opened_file_name;
            this.database_directory_name = database_directory_name;
            this.table_directory_name = table_directory_name;
            this.remaining_file_name = remaining_file_name;
            this.open_time = open_time;
            this.flags = flags;
            this.login_id = login_id;
            this.login_name = login_name;
            this.login_sid = login_sid;
            this.read_access = read_access;
            this.write_access = write_access;
            this.delete_access = delete_access;
            this.share_read = share_read;
            this.share_write = share_write;
            this.share_delete = share_delete;
            this.create_disposition = create_disposition;
            this.database_id = database_id;
            this.object_id = object_id;
            this.handle_id = handle_id;
            this.file_object_type = file_object_type;
            this.file_object_type_desc = file_object_type_desc;
            this.correlation_process_id = correlation_process_id;
            this.correlation_thread_id = correlation_thread_id;
            this.file_context = file_context;
            this.state = state;
            this.state_desc = state_desc;
            this.current_workitem_type = current_workitem_type;
            this.current_workitem_type_desc = current_workitem_type_desc;
            this.fcb_id = fcb_id;
            this.item_id = item_id;
            this.is_directory = is_directory;
            this.item_name = item_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { opened_file_name, database_directory_name, table_directory_name, remaining_file_name, open_time, flags, login_id, login_name, login_sid, read_access, write_access, delete_access, share_read, share_write, share_delete, create_disposition, database_id, object_id, handle_id, file_object_type, file_object_type_desc, correlation_process_id, correlation_thread_id, file_context, state, state_desc, current_workitem_type, current_workitem_type_desc, fcb_id, item_id, is_directory, item_name };
        }

        public override void SetItemArray(object[] items)
        {
            opened_file_name = (string)items[0];
            database_directory_name = (string)items[1];
            table_directory_name = (string)items[2];
            remaining_file_name = (string)items[3];
            open_time = (DateTime)items[4];
            flags = (int?)items[5];
            login_id = (int?)items[6];
            login_name = (string)items[7];
            login_sid = (Byte[])items[8];
            read_access = (bool?)items[9];
            write_access = (bool?)items[10];
            delete_access = (bool?)items[11];
            share_read = (bool?)items[12];
            share_write = (bool?)items[13];
            share_delete = (bool?)items[14];
            create_disposition = (int?)items[15];
            database_id = (int?)items[16];
            object_id = (int?)items[17];
            handle_id = (int?)items[18];
            file_object_type = (int?)items[19];
            file_object_type_desc = (string)items[20];
            correlation_process_id = (Byte[])items[21];
            correlation_thread_id = (Byte[])items[22];
            file_context = (Byte[])items[23];
            state = (int?)items[24];
            state_desc = (string)items[25];
            current_workitem_type = (int?)items[26];
            current_workitem_type_desc = (string)items[27];
            fcb_id = (long?)items[28];
            item_id = (Byte[])items[29];
            is_directory = (bool?)items[30];
            item_name = (string)items[31];
        }
    }

    [SqlView("sys", "dm_db_xtp_object_stats")]
    public partial class dm_db_xtp_object_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("row_insert_attempts", 1), SqlTypeFacets("bigint", false)]
        public long row_insert_attempts
        {
            get;
            set;
        }

        [SqlColumn("row_update_attempts", 2), SqlTypeFacets("bigint", false)]
        public long row_update_attempts
        {
            get;
            set;
        }

        [SqlColumn("row_delete_attempts", 3), SqlTypeFacets("bigint", false)]
        public long row_delete_attempts
        {
            get;
            set;
        }

        [SqlColumn("write_conflicts", 4), SqlTypeFacets("bigint", false)]
        public long write_conflicts
        {
            get;
            set;
        }

        [SqlColumn("unique_constraint_violations", 5), SqlTypeFacets("bigint", false)]
        public long unique_constraint_violations
        {
            get;
            set;
        }

        [SqlColumn("object_address", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] object_address
        {
            get;
            set;
        }

        public dm_db_xtp_object_stats()
        {
        }

        public dm_db_xtp_object_stats(object[] items)
        {
            object_id = (int)items[0];
            row_insert_attempts = (long)items[1];
            row_update_attempts = (long)items[2];
            row_delete_attempts = (long)items[3];
            write_conflicts = (long)items[4];
            unique_constraint_violations = (long)items[5];
            object_address = (Byte[])items[6];
        }

        public dm_db_xtp_object_stats(int object_id, long row_insert_attempts, long row_update_attempts, long row_delete_attempts, long write_conflicts, long unique_constraint_violations, Byte[] object_address)
        {
            this.object_id = object_id;
            this.row_insert_attempts = row_insert_attempts;
            this.row_update_attempts = row_update_attempts;
            this.row_delete_attempts = row_delete_attempts;
            this.write_conflicts = write_conflicts;
            this.unique_constraint_violations = unique_constraint_violations;
            this.object_address = object_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, row_insert_attempts, row_update_attempts, row_delete_attempts, write_conflicts, unique_constraint_violations, object_address };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            row_insert_attempts = (long)items[1];
            row_update_attempts = (long)items[2];
            row_delete_attempts = (long)items[3];
            write_conflicts = (long)items[4];
            unique_constraint_violations = (long)items[5];
            object_address = (Byte[])items[6];
        }
    }

    [SqlView("sys", "dm_os_stacks")]
    public partial class dm_os_stacks : SqlViewProxy
    {
        [SqlColumn("stack_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] stack_address
        {
            get;
            set;
        }

        [SqlColumn("frame_index", 1), SqlTypeFacets("int", false)]
        public int frame_index
        {
            get;
            set;
        }

        [SqlColumn("frame_address", 2), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] frame_address
        {
            get;
            set;
        }

        public dm_os_stacks()
        {
        }

        public dm_os_stacks(object[] items)
        {
            stack_address = (Byte[])items[0];
            frame_index = (int)items[1];
            frame_address = (Byte[])items[2];
        }

        public dm_os_stacks(Byte[] stack_address, int frame_index, Byte[] frame_address)
        {
            this.stack_address = stack_address;
            this.frame_index = frame_index;
            this.frame_address = frame_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { stack_address, frame_index, frame_address };
        }

        public override void SetItemArray(object[] items)
        {
            stack_address = (Byte[])items[0];
            frame_index = (int)items[1];
            frame_address = (Byte[])items[2];
        }
    }

    [SqlView("sys", "dm_os_dispatchers")]
    public partial class dm_os_dispatchers : SqlViewProxy
    {
        [SqlColumn("dispatcher_pool_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dispatcher_pool_address
        {
            get;
            set;
        }

        [SqlColumn("task_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string state
        {
            get;
            set;
        }

        [SqlColumn("wait_duration", 3), SqlTypeFacets("bigint", true)]
        public long? wait_duration
        {
            get;
            set;
        }

        [SqlColumn("current_item_duration", 4), SqlTypeFacets("bigint", true)]
        public long? current_item_duration
        {
            get;
            set;
        }

        [SqlColumn("items_processed", 5), SqlTypeFacets("bigint", false)]
        public long items_processed
        {
            get;
            set;
        }

        [SqlColumn("fade_end_time", 6), SqlTypeFacets("int", true)]
        public int? fade_end_time
        {
            get;
            set;
        }

        public dm_os_dispatchers()
        {
        }

        public dm_os_dispatchers(object[] items)
        {
            dispatcher_pool_address = (Byte[])items[0];
            task_address = (Byte[])items[1];
            state = (string)items[2];
            wait_duration = (long?)items[3];
            current_item_duration = (long?)items[4];
            items_processed = (long)items[5];
            fade_end_time = (int?)items[6];
        }

        public dm_os_dispatchers(Byte[] dispatcher_pool_address, Byte[] task_address, string state, long? wait_duration, long? current_item_duration, long items_processed, int? fade_end_time)
        {
            this.dispatcher_pool_address = dispatcher_pool_address;
            this.task_address = task_address;
            this.state = state;
            this.wait_duration = wait_duration;
            this.current_item_duration = current_item_duration;
            this.items_processed = items_processed;
            this.fade_end_time = fade_end_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dispatcher_pool_address, task_address, state, wait_duration, current_item_duration, items_processed, fade_end_time };
        }

        public override void SetItemArray(object[] items)
        {
            dispatcher_pool_address = (Byte[])items[0];
            task_address = (Byte[])items[1];
            state = (string)items[2];
            wait_duration = (long?)items[3];
            current_item_duration = (long?)items[4];
            items_processed = (long)items[5];
            fade_end_time = (int?)items[6];
        }
    }

    [SqlView("sys", "dm_server_registry")]
    public partial class dm_server_registry : SqlViewProxy
    {
        [SqlColumn("registry_key", 0), SqlTypeFacets("nvarchar", true, 512)]
        public string registry_key
        {
            get;
            set;
        }

        [SqlColumn("value_name", 1), SqlTypeFacets("nvarchar", true, 512)]
        public string value_name
        {
            get;
            set;
        }

        [SqlColumn("value_data", 2), SqlTypeFacets("sql_variant", true)]
        public Object value_data
        {
            get;
            set;
        }

        public dm_server_registry()
        {
        }

        public dm_server_registry(object[] items)
        {
            registry_key = (string)items[0];
            value_name = (string)items[1];
            value_data = (Object)items[2];
        }

        public dm_server_registry(string registry_key, string value_name, Object value_data)
        {
            this.registry_key = registry_key;
            this.value_name = value_name;
            this.value_data = value_data;
        }

        public override object[] GetItemArray()
        {
            return new object[] { registry_key, value_name, value_data };
        }

        public override void SetItemArray(object[] items)
        {
            registry_key = (string)items[0];
            value_name = (string)items[1];
            value_data = (Object)items[2];
        }
    }

    [SqlView("sys", "dm_db_mirroring_auto_page_repair")]
    public partial class dm_db_mirroring_auto_page_repair : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("page_id", 2), SqlTypeFacets("bigint", false)]
        public long page_id
        {
            get;
            set;
        }

        [SqlColumn("error_type", 3), SqlTypeFacets("smallint", false)]
        public short error_type
        {
            get;
            set;
        }

        [SqlColumn("page_status", 4), SqlTypeFacets("tinyint", false)]
        public byte page_status
        {
            get;
            set;
        }

        [SqlColumn("modification_time", 5), SqlTypeFacets("datetime", false)]
        public DateTime modification_time
        {
            get;
            set;
        }

        public dm_db_mirroring_auto_page_repair()
        {
        }

        public dm_db_mirroring_auto_page_repair(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            page_id = (long)items[2];
            error_type = (short)items[3];
            page_status = (byte)items[4];
            modification_time = (DateTime)items[5];
        }

        public dm_db_mirroring_auto_page_repair(int database_id, int file_id, long page_id, short error_type, byte page_status, DateTime modification_time)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.page_id = page_id;
            this.error_type = error_type;
            this.page_status = page_status;
            this.modification_time = modification_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, page_id, error_type, page_status, modification_time };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            page_id = (long)items[2];
            error_type = (short)items[3];
            page_status = (byte)items[4];
            modification_time = (DateTime)items[5];
        }
    }

    [SqlView("sys", "dm_broker_connections")]
    public partial class dm_broker_connections : SqlViewProxy
    {
        [SqlColumn("connection_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? connection_id
        {
            get;
            set;
        }

        [SqlColumn("transport_stream_id", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? transport_stream_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("smallint", true)]
        public short? state
        {
            get;
            set;
        }

        [SqlColumn("state_desc", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string state_desc
        {
            get;
            set;
        }

        [SqlColumn("connect_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? connect_time
        {
            get;
            set;
        }

        [SqlColumn("login_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? login_time
        {
            get;
            set;
        }

        [SqlColumn("authentication_method", 6), SqlTypeFacets("nvarchar", true, 256)]
        public string authentication_method
        {
            get;
            set;
        }

        [SqlColumn("principal_name", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string principal_name
        {
            get;
            set;
        }

        [SqlColumn("remote_user_name", 8), SqlTypeFacets("nvarchar", true, 256)]
        public string remote_user_name
        {
            get;
            set;
        }

        [SqlColumn("last_activity_time", 9), SqlTypeFacets("datetime", true)]
        public DateTime? last_activity_time
        {
            get;
            set;
        }

        [SqlColumn("is_accept", 10), SqlTypeFacets("bit", true)]
        public bool? is_accept
        {
            get;
            set;
        }

        [SqlColumn("login_state", 11), SqlTypeFacets("smallint", true)]
        public short? login_state
        {
            get;
            set;
        }

        [SqlColumn("login_state_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string login_state_desc
        {
            get;
            set;
        }

        [SqlColumn("peer_certificate_id", 13), SqlTypeFacets("int", true)]
        public int? peer_certificate_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm", 14), SqlTypeFacets("smallint", true)]
        public short? encryption_algorithm
        {
            get;
            set;
        }

        [SqlColumn("encryption_algorithm_desc", 15), SqlTypeFacets("nvarchar", true, 120)]
        public string encryption_algorithm_desc
        {
            get;
            set;
        }

        [SqlColumn("receives_posted", 16), SqlTypeFacets("smallint", true)]
        public short? receives_posted
        {
            get;
            set;
        }

        [SqlColumn("is_receive_flow_controlled", 17), SqlTypeFacets("bit", true)]
        public bool? is_receive_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("sends_posted", 18), SqlTypeFacets("smallint", true)]
        public short? sends_posted
        {
            get;
            set;
        }

        [SqlColumn("is_send_flow_controlled", 19), SqlTypeFacets("bit", true)]
        public bool? is_send_flow_controlled
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_sent", 20), SqlTypeFacets("bigint", true)]
        public long? total_bytes_sent
        {
            get;
            set;
        }

        [SqlColumn("total_bytes_received", 21), SqlTypeFacets("bigint", true)]
        public long? total_bytes_received
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_sent", 22), SqlTypeFacets("bigint", true)]
        public long? total_fragments_sent
        {
            get;
            set;
        }

        [SqlColumn("total_fragments_received", 23), SqlTypeFacets("bigint", true)]
        public long? total_fragments_received
        {
            get;
            set;
        }

        [SqlColumn("total_sends", 24), SqlTypeFacets("bigint", true)]
        public long? total_sends
        {
            get;
            set;
        }

        [SqlColumn("total_receives", 25), SqlTypeFacets("bigint", true)]
        public long? total_receives
        {
            get;
            set;
        }

        [SqlColumn("peer_arbitration_id", 26), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? peer_arbitration_id
        {
            get;
            set;
        }

        public dm_broker_connections()
        {
        }

        public dm_broker_connections(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }

        public dm_broker_connections(Guid? connection_id, Guid? transport_stream_id, short? state, string state_desc, DateTime? connect_time, DateTime? login_time, string authentication_method, string principal_name, string remote_user_name, DateTime? last_activity_time, bool? is_accept, short? login_state, string login_state_desc, int? peer_certificate_id, short? encryption_algorithm, string encryption_algorithm_desc, short? receives_posted, bool? is_receive_flow_controlled, short? sends_posted, bool? is_send_flow_controlled, long? total_bytes_sent, long? total_bytes_received, long? total_fragments_sent, long? total_fragments_received, long? total_sends, long? total_receives, Guid? peer_arbitration_id)
        {
            this.connection_id = connection_id;
            this.transport_stream_id = transport_stream_id;
            this.state = state;
            this.state_desc = state_desc;
            this.connect_time = connect_time;
            this.login_time = login_time;
            this.authentication_method = authentication_method;
            this.principal_name = principal_name;
            this.remote_user_name = remote_user_name;
            this.last_activity_time = last_activity_time;
            this.is_accept = is_accept;
            this.login_state = login_state;
            this.login_state_desc = login_state_desc;
            this.peer_certificate_id = peer_certificate_id;
            this.encryption_algorithm = encryption_algorithm;
            this.encryption_algorithm_desc = encryption_algorithm_desc;
            this.receives_posted = receives_posted;
            this.is_receive_flow_controlled = is_receive_flow_controlled;
            this.sends_posted = sends_posted;
            this.is_send_flow_controlled = is_send_flow_controlled;
            this.total_bytes_sent = total_bytes_sent;
            this.total_bytes_received = total_bytes_received;
            this.total_fragments_sent = total_fragments_sent;
            this.total_fragments_received = total_fragments_received;
            this.total_sends = total_sends;
            this.total_receives = total_receives;
            this.peer_arbitration_id = peer_arbitration_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { connection_id, transport_stream_id, state, state_desc, connect_time, login_time, authentication_method, principal_name, remote_user_name, last_activity_time, is_accept, login_state, login_state_desc, peer_certificate_id, encryption_algorithm, encryption_algorithm_desc, receives_posted, is_receive_flow_controlled, sends_posted, is_send_flow_controlled, total_bytes_sent, total_bytes_received, total_fragments_sent, total_fragments_received, total_sends, total_receives, peer_arbitration_id };
        }

        public override void SetItemArray(object[] items)
        {
            connection_id = (Guid?)items[0];
            transport_stream_id = (Guid?)items[1];
            state = (short?)items[2];
            state_desc = (string)items[3];
            connect_time = (DateTime?)items[4];
            login_time = (DateTime?)items[5];
            authentication_method = (string)items[6];
            principal_name = (string)items[7];
            remote_user_name = (string)items[8];
            last_activity_time = (DateTime?)items[9];
            is_accept = (bool?)items[10];
            login_state = (short?)items[11];
            login_state_desc = (string)items[12];
            peer_certificate_id = (int?)items[13];
            encryption_algorithm = (short?)items[14];
            encryption_algorithm_desc = (string)items[15];
            receives_posted = (short?)items[16];
            is_receive_flow_controlled = (bool?)items[17];
            sends_posted = (short?)items[18];
            is_send_flow_controlled = (bool?)items[19];
            total_bytes_sent = (long?)items[20];
            total_bytes_received = (long?)items[21];
            total_fragments_sent = (long?)items[22];
            total_fragments_received = (long?)items[23];
            total_sends = (long?)items[24];
            total_receives = (long?)items[25];
            peer_arbitration_id = (Guid?)items[26];
        }
    }

    [SqlView("sys", "dm_hadr_availability_replica_states")]
    public partial class dm_hadr_availability_replica_states : SqlViewProxy
    {
        [SqlColumn("replica_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("is_local", 2), SqlTypeFacets("bit", false)]
        public bool is_local
        {
            get;
            set;
        }

        [SqlColumn("role", 3), SqlTypeFacets("tinyint", true)]
        public byte? role
        {
            get;
            set;
        }

        [SqlColumn("role_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string role_desc
        {
            get;
            set;
        }

        [SqlColumn("operational_state", 5), SqlTypeFacets("tinyint", true)]
        public byte? operational_state
        {
            get;
            set;
        }

        [SqlColumn("operational_state_desc", 6), SqlTypeFacets("nvarchar", true, 120)]
        public string operational_state_desc
        {
            get;
            set;
        }

        [SqlColumn("connected_state", 7), SqlTypeFacets("tinyint", true)]
        public byte? connected_state
        {
            get;
            set;
        }

        [SqlColumn("connected_state_desc", 8), SqlTypeFacets("nvarchar", true, 120)]
        public string connected_state_desc
        {
            get;
            set;
        }

        [SqlColumn("recovery_health", 9), SqlTypeFacets("tinyint", true)]
        public byte? recovery_health
        {
            get;
            set;
        }

        [SqlColumn("recovery_health_desc", 10), SqlTypeFacets("nvarchar", true, 120)]
        public string recovery_health_desc
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health", 11), SqlTypeFacets("tinyint", true)]
        public byte? synchronization_health
        {
            get;
            set;
        }

        [SqlColumn("synchronization_health_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string synchronization_health_desc
        {
            get;
            set;
        }

        [SqlColumn("last_connect_error_number", 13), SqlTypeFacets("int", true)]
        public int? last_connect_error_number
        {
            get;
            set;
        }

        [SqlColumn("last_connect_error_description", 14), SqlTypeFacets("nvarchar", true, 2048)]
        public string last_connect_error_description
        {
            get;
            set;
        }

        [SqlColumn("last_connect_error_timestamp", 15), SqlTypeFacets("datetime", true)]
        public DateTime? last_connect_error_timestamp
        {
            get;
            set;
        }

        public dm_hadr_availability_replica_states()
        {
        }

        public dm_hadr_availability_replica_states(object[] items)
        {
            replica_id = (Guid)items[0];
            group_id = (Guid)items[1];
            is_local = (bool)items[2];
            role = (byte?)items[3];
            role_desc = (string)items[4];
            operational_state = (byte?)items[5];
            operational_state_desc = (string)items[6];
            connected_state = (byte?)items[7];
            connected_state_desc = (string)items[8];
            recovery_health = (byte?)items[9];
            recovery_health_desc = (string)items[10];
            synchronization_health = (byte?)items[11];
            synchronization_health_desc = (string)items[12];
            last_connect_error_number = (int?)items[13];
            last_connect_error_description = (string)items[14];
            last_connect_error_timestamp = (DateTime?)items[15];
        }

        public dm_hadr_availability_replica_states(Guid replica_id, Guid group_id, bool is_local, byte? role, string role_desc, byte? operational_state, string operational_state_desc, byte? connected_state, string connected_state_desc, byte? recovery_health, string recovery_health_desc, byte? synchronization_health, string synchronization_health_desc, int? last_connect_error_number, string last_connect_error_description, DateTime? last_connect_error_timestamp)
        {
            this.replica_id = replica_id;
            this.group_id = group_id;
            this.is_local = is_local;
            this.role = role;
            this.role_desc = role_desc;
            this.operational_state = operational_state;
            this.operational_state_desc = operational_state_desc;
            this.connected_state = connected_state;
            this.connected_state_desc = connected_state_desc;
            this.recovery_health = recovery_health;
            this.recovery_health_desc = recovery_health_desc;
            this.synchronization_health = synchronization_health;
            this.synchronization_health_desc = synchronization_health_desc;
            this.last_connect_error_number = last_connect_error_number;
            this.last_connect_error_description = last_connect_error_description;
            this.last_connect_error_timestamp = last_connect_error_timestamp;
        }

        public override object[] GetItemArray()
        {
            return new object[] { replica_id, group_id, is_local, role, role_desc, operational_state, operational_state_desc, connected_state, connected_state_desc, recovery_health, recovery_health_desc, synchronization_health, synchronization_health_desc, last_connect_error_number, last_connect_error_description, last_connect_error_timestamp };
        }

        public override void SetItemArray(object[] items)
        {
            replica_id = (Guid)items[0];
            group_id = (Guid)items[1];
            is_local = (bool)items[2];
            role = (byte?)items[3];
            role_desc = (string)items[4];
            operational_state = (byte?)items[5];
            operational_state_desc = (string)items[6];
            connected_state = (byte?)items[7];
            connected_state_desc = (string)items[8];
            recovery_health = (byte?)items[9];
            recovery_health_desc = (string)items[10];
            synchronization_health = (byte?)items[11];
            synchronization_health_desc = (string)items[12];
            last_connect_error_number = (int?)items[13];
            last_connect_error_description = (string)items[14];
            last_connect_error_timestamp = (DateTime?)items[15];
        }
    }

    [SqlView("sys", "dm_db_xtp_checkpoint_stats")]
    public partial class dm_db_xtp_checkpoint_stats : SqlViewProxy
    {
        [SqlColumn("log_to_process_in_bytes", 0), SqlTypeFacets("bigint", true)]
        public long? log_to_process_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("total_log_blocks_processed", 1), SqlTypeFacets("bigint", true)]
        public long? total_log_blocks_processed
        {
            get;
            set;
        }

        [SqlColumn("total_log_records_processed", 2), SqlTypeFacets("bigint", true)]
        public long? total_log_records_processed
        {
            get;
            set;
        }

        [SqlColumn("xtp_log_records_processed", 3), SqlTypeFacets("bigint", true)]
        public long? xtp_log_records_processed
        {
            get;
            set;
        }

        [SqlColumn("total_wait_time_in_ms", 4), SqlTypeFacets("bigint", true)]
        public long? total_wait_time_in_ms
        {
            get;
            set;
        }

        [SqlColumn("waits_for_io", 5), SqlTypeFacets("bigint", true)]
        public long? waits_for_io
        {
            get;
            set;
        }

        [SqlColumn("io_wait_time_in_ms", 6), SqlTypeFacets("bigint", true)]
        public long? io_wait_time_in_ms
        {
            get;
            set;
        }

        [SqlColumn("waits_for_new_log", 7), SqlTypeFacets("bigint", true)]
        public long? waits_for_new_log
        {
            get;
            set;
        }

        [SqlColumn("new_log_wait_time_in_ms", 8), SqlTypeFacets("bigint", true)]
        public long? new_log_wait_time_in_ms
        {
            get;
            set;
        }

        [SqlColumn("log_generated_since_last_checkpoint_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? log_generated_since_last_checkpoint_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("time_since_last_checkpoint_in_ms", 10), SqlTypeFacets("bigint", true)]
        public long? time_since_last_checkpoint_in_ms
        {
            get;
            set;
        }

        [SqlColumn("checkpoint_lsn", 11), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? checkpoint_lsn
        {
            get;
            set;
        }

        [SqlColumn("current_lsn", 12), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? current_lsn
        {
            get;
            set;
        }

        [SqlColumn("end_of_log_lsn", 13), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? end_of_log_lsn
        {
            get;
            set;
        }

        [SqlColumn("task_address", 14), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        public dm_db_xtp_checkpoint_stats()
        {
        }

        public dm_db_xtp_checkpoint_stats(object[] items)
        {
            log_to_process_in_bytes = (long?)items[0];
            total_log_blocks_processed = (long?)items[1];
            total_log_records_processed = (long?)items[2];
            xtp_log_records_processed = (long?)items[3];
            total_wait_time_in_ms = (long?)items[4];
            waits_for_io = (long?)items[5];
            io_wait_time_in_ms = (long?)items[6];
            waits_for_new_log = (long?)items[7];
            new_log_wait_time_in_ms = (long?)items[8];
            log_generated_since_last_checkpoint_in_bytes = (long?)items[9];
            time_since_last_checkpoint_in_ms = (long?)items[10];
            checkpoint_lsn = (decimal?)items[11];
            current_lsn = (decimal?)items[12];
            end_of_log_lsn = (decimal?)items[13];
            task_address = (Byte[])items[14];
        }

        public dm_db_xtp_checkpoint_stats(long? log_to_process_in_bytes, long? total_log_blocks_processed, long? total_log_records_processed, long? xtp_log_records_processed, long? total_wait_time_in_ms, long? waits_for_io, long? io_wait_time_in_ms, long? waits_for_new_log, long? new_log_wait_time_in_ms, long? log_generated_since_last_checkpoint_in_bytes, long? time_since_last_checkpoint_in_ms, decimal? checkpoint_lsn, decimal? current_lsn, decimal? end_of_log_lsn, Byte[] task_address)
        {
            this.log_to_process_in_bytes = log_to_process_in_bytes;
            this.total_log_blocks_processed = total_log_blocks_processed;
            this.total_log_records_processed = total_log_records_processed;
            this.xtp_log_records_processed = xtp_log_records_processed;
            this.total_wait_time_in_ms = total_wait_time_in_ms;
            this.waits_for_io = waits_for_io;
            this.io_wait_time_in_ms = io_wait_time_in_ms;
            this.waits_for_new_log = waits_for_new_log;
            this.new_log_wait_time_in_ms = new_log_wait_time_in_ms;
            this.log_generated_since_last_checkpoint_in_bytes = log_generated_since_last_checkpoint_in_bytes;
            this.time_since_last_checkpoint_in_ms = time_since_last_checkpoint_in_ms;
            this.checkpoint_lsn = checkpoint_lsn;
            this.current_lsn = current_lsn;
            this.end_of_log_lsn = end_of_log_lsn;
            this.task_address = task_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { log_to_process_in_bytes, total_log_blocks_processed, total_log_records_processed, xtp_log_records_processed, total_wait_time_in_ms, waits_for_io, io_wait_time_in_ms, waits_for_new_log, new_log_wait_time_in_ms, log_generated_since_last_checkpoint_in_bytes, time_since_last_checkpoint_in_ms, checkpoint_lsn, current_lsn, end_of_log_lsn, task_address };
        }

        public override void SetItemArray(object[] items)
        {
            log_to_process_in_bytes = (long?)items[0];
            total_log_blocks_processed = (long?)items[1];
            total_log_records_processed = (long?)items[2];
            xtp_log_records_processed = (long?)items[3];
            total_wait_time_in_ms = (long?)items[4];
            waits_for_io = (long?)items[5];
            io_wait_time_in_ms = (long?)items[6];
            waits_for_new_log = (long?)items[7];
            new_log_wait_time_in_ms = (long?)items[8];
            log_generated_since_last_checkpoint_in_bytes = (long?)items[9];
            time_since_last_checkpoint_in_ms = (long?)items[10];
            checkpoint_lsn = (decimal?)items[11];
            current_lsn = (decimal?)items[12];
            end_of_log_lsn = (decimal?)items[13];
            task_address = (Byte[])items[14];
        }
    }

    [SqlView("sys", "availability_groups")]
    public partial class availability_groups : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("resource_id", 2), SqlTypeFacets("nvarchar", true, 80)]
        public string resource_id
        {
            get;
            set;
        }

        [SqlColumn("resource_group_id", 3), SqlTypeFacets("nvarchar", true, 80)]
        public string resource_group_id
        {
            get;
            set;
        }

        [SqlColumn("failure_condition_level", 4), SqlTypeFacets("int", true)]
        public int? failure_condition_level
        {
            get;
            set;
        }

        [SqlColumn("health_check_timeout", 5), SqlTypeFacets("int", true)]
        public int? health_check_timeout
        {
            get;
            set;
        }

        [SqlColumn("automated_backup_preference", 6), SqlTypeFacets("tinyint", true)]
        public byte? automated_backup_preference
        {
            get;
            set;
        }

        [SqlColumn("automated_backup_preference_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string automated_backup_preference_desc
        {
            get;
            set;
        }

        public availability_groups()
        {
        }

        public availability_groups(object[] items)
        {
            group_id = (Guid)items[0];
            name = (string)items[1];
            resource_id = (string)items[2];
            resource_group_id = (string)items[3];
            failure_condition_level = (int?)items[4];
            health_check_timeout = (int?)items[5];
            automated_backup_preference = (byte?)items[6];
            automated_backup_preference_desc = (string)items[7];
        }

        public availability_groups(Guid group_id, string name, string resource_id, string resource_group_id, int? failure_condition_level, int? health_check_timeout, byte? automated_backup_preference, string automated_backup_preference_desc)
        {
            this.group_id = group_id;
            this.name = name;
            this.resource_id = resource_id;
            this.resource_group_id = resource_group_id;
            this.failure_condition_level = failure_condition_level;
            this.health_check_timeout = health_check_timeout;
            this.automated_backup_preference = automated_backup_preference;
            this.automated_backup_preference_desc = automated_backup_preference_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, name, resource_id, resource_group_id, failure_condition_level, health_check_timeout, automated_backup_preference, automated_backup_preference_desc };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (Guid)items[0];
            name = (string)items[1];
            resource_id = (string)items[2];
            resource_group_id = (string)items[3];
            failure_condition_level = (int?)items[4];
            health_check_timeout = (int?)items[5];
            automated_backup_preference = (byte?)items[6];
            automated_backup_preference_desc = (string)items[7];
        }
    }

    [SqlView("sys", "dm_database_encryption_keys")]
    public partial class dm_database_encryption_keys : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("encryption_state", 1), SqlTypeFacets("int", true)]
        public int? encryption_state
        {
            get;
            set;
        }

        [SqlColumn("create_date", 2), SqlTypeFacets("datetime", true)]
        public DateTime? create_date
        {
            get;
            set;
        }

        [SqlColumn("regenerate_date", 3), SqlTypeFacets("datetime", true)]
        public DateTime? regenerate_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 4), SqlTypeFacets("datetime", true)]
        public DateTime? modify_date
        {
            get;
            set;
        }

        [SqlColumn("set_date", 5), SqlTypeFacets("datetime", true)]
        public DateTime? set_date
        {
            get;
            set;
        }

        [SqlColumn("opened_date", 6), SqlTypeFacets("datetime", true)]
        public DateTime? opened_date
        {
            get;
            set;
        }

        [SqlColumn("key_algorithm", 7), SqlTypeFacets("nvarchar", true, 256)]
        public string key_algorithm
        {
            get;
            set;
        }

        [SqlColumn("key_length", 8), SqlTypeFacets("int", true)]
        public int? key_length
        {
            get;
            set;
        }

        [SqlColumn("encryptor_thumbprint", 9), SqlTypeFacets("varbinary", true, 20)]
        public Byte[] encryptor_thumbprint
        {
            get;
            set;
        }

        [SqlColumn("encryptor_type", 10), SqlTypeFacets("nvarchar", true, 256)]
        public string encryptor_type
        {
            get;
            set;
        }

        [SqlColumn("percent_complete", 11), SqlTypeFacets("real", true)]
        public float? percent_complete
        {
            get;
            set;
        }

        public dm_database_encryption_keys()
        {
        }

        public dm_database_encryption_keys(object[] items)
        {
            database_id = (int?)items[0];
            encryption_state = (int?)items[1];
            create_date = (DateTime?)items[2];
            regenerate_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            set_date = (DateTime?)items[5];
            opened_date = (DateTime?)items[6];
            key_algorithm = (string)items[7];
            key_length = (int?)items[8];
            encryptor_thumbprint = (Byte[])items[9];
            encryptor_type = (string)items[10];
            percent_complete = (float?)items[11];
        }

        public dm_database_encryption_keys(int? database_id, int? encryption_state, DateTime? create_date, DateTime? regenerate_date, DateTime? modify_date, DateTime? set_date, DateTime? opened_date, string key_algorithm, int? key_length, Byte[] encryptor_thumbprint, string encryptor_type, float? percent_complete)
        {
            this.database_id = database_id;
            this.encryption_state = encryption_state;
            this.create_date = create_date;
            this.regenerate_date = regenerate_date;
            this.modify_date = modify_date;
            this.set_date = set_date;
            this.opened_date = opened_date;
            this.key_algorithm = key_algorithm;
            this.key_length = key_length;
            this.encryptor_thumbprint = encryptor_thumbprint;
            this.encryptor_type = encryptor_type;
            this.percent_complete = percent_complete;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, encryption_state, create_date, regenerate_date, modify_date, set_date, opened_date, key_algorithm, key_length, encryptor_thumbprint, encryptor_type, percent_complete };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            encryption_state = (int?)items[1];
            create_date = (DateTime?)items[2];
            regenerate_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            set_date = (DateTime?)items[5];
            opened_date = (DateTime?)items[6];
            key_algorithm = (string)items[7];
            key_length = (int?)items[8];
            encryptor_thumbprint = (Byte[])items[9];
            encryptor_type = (string)items[10];
            percent_complete = (float?)items[11];
        }
    }

    [SqlView("sys", "dm_os_spinlock_stats")]
    public partial class dm_os_spinlock_stats : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("collisions", 1), SqlTypeFacets("bigint", true)]
        public long? collisions
        {
            get;
            set;
        }

        [SqlColumn("spins", 2), SqlTypeFacets("bigint", true)]
        public long? spins
        {
            get;
            set;
        }

        [SqlColumn("spins_per_collision", 3), SqlTypeFacets("real", true)]
        public float? spins_per_collision
        {
            get;
            set;
        }

        [SqlColumn("sleep_time", 4), SqlTypeFacets("bigint", true)]
        public long? sleep_time
        {
            get;
            set;
        }

        [SqlColumn("backoffs", 5), SqlTypeFacets("int", true)]
        public int? backoffs
        {
            get;
            set;
        }

        public dm_os_spinlock_stats()
        {
        }

        public dm_os_spinlock_stats(object[] items)
        {
            name = (string)items[0];
            collisions = (long?)items[1];
            spins = (long?)items[2];
            spins_per_collision = (float?)items[3];
            sleep_time = (long?)items[4];
            backoffs = (int?)items[5];
        }

        public dm_os_spinlock_stats(string name, long? collisions, long? spins, float? spins_per_collision, long? sleep_time, int? backoffs)
        {
            this.name = name;
            this.collisions = collisions;
            this.spins = spins;
            this.spins_per_collision = spins_per_collision;
            this.sleep_time = sleep_time;
            this.backoffs = backoffs;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, collisions, spins, spins_per_collision, sleep_time, backoffs };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            collisions = (long?)items[1];
            spins = (long?)items[2];
            spins_per_collision = (float?)items[3];
            sleep_time = (long?)items[4];
            backoffs = (int?)items[5];
        }
    }

    [SqlView("sys", "availability_replicas")]
    public partial class availability_replicas : SqlViewProxy
    {
        [SqlColumn("primary_role_allow_connections_desc", 12), SqlTypeFacets("nvarchar", true, 120)]
        public string primary_role_allow_connections_desc
        {
            get;
            set;
        }

        [SqlColumn("secondary_role_allow_connections", 13), SqlTypeFacets("tinyint", true)]
        public byte? secondary_role_allow_connections
        {
            get;
            set;
        }

        [SqlColumn("secondary_role_allow_connections_desc", 14), SqlTypeFacets("nvarchar", true, 120)]
        public string secondary_role_allow_connections_desc
        {
            get;
            set;
        }

        [SqlColumn("create_date", 15), SqlTypeFacets("datetime", true)]
        public DateTime? create_date
        {
            get;
            set;
        }

        [SqlColumn("modify_date", 16), SqlTypeFacets("datetime", true)]
        public DateTime? modify_date
        {
            get;
            set;
        }

        [SqlColumn("backup_priority", 17), SqlTypeFacets("int", true)]
        public int? backup_priority
        {
            get;
            set;
        }

        [SqlColumn("read_only_routing_url", 18), SqlTypeFacets("nvarchar", true, 512)]
        public string read_only_routing_url
        {
            get;
            set;
        }

        [SqlColumn("replica_id", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? replica_id
        {
            get;
            set;
        }

        [SqlColumn("group_id", 1), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? group_id
        {
            get;
            set;
        }

        [SqlColumn("replica_metadata_id", 2), SqlTypeFacets("int", true)]
        public int? replica_metadata_id
        {
            get;
            set;
        }

        [SqlColumn("replica_server_name", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string replica_server_name
        {
            get;
            set;
        }

        [SqlColumn("owner_sid", 4), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] owner_sid
        {
            get;
            set;
        }

        [SqlColumn("endpoint_url", 5), SqlTypeFacets("nvarchar", true, 512)]
        public string endpoint_url
        {
            get;
            set;
        }

        [SqlColumn("availability_mode", 6), SqlTypeFacets("tinyint", true)]
        public byte? availability_mode
        {
            get;
            set;
        }

        [SqlColumn("availability_mode_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string availability_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("failover_mode", 8), SqlTypeFacets("tinyint", true)]
        public byte? failover_mode
        {
            get;
            set;
        }

        [SqlColumn("failover_mode_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string failover_mode_desc
        {
            get;
            set;
        }

        [SqlColumn("session_timeout", 10), SqlTypeFacets("int", true)]
        public int? session_timeout
        {
            get;
            set;
        }

        [SqlColumn("primary_role_allow_connections", 11), SqlTypeFacets("tinyint", true)]
        public byte? primary_role_allow_connections
        {
            get;
            set;
        }

        public availability_replicas()
        {
        }

        public availability_replicas(object[] items)
        {
            primary_role_allow_connections_desc = (string)items[0];
            secondary_role_allow_connections = (byte?)items[1];
            secondary_role_allow_connections_desc = (string)items[2];
            create_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            backup_priority = (int?)items[5];
            read_only_routing_url = (string)items[6];
            replica_id = (Guid?)items[7];
            group_id = (Guid?)items[8];
            replica_metadata_id = (int?)items[9];
            replica_server_name = (string)items[10];
            owner_sid = (Byte[])items[11];
            endpoint_url = (string)items[12];
            availability_mode = (byte?)items[13];
            availability_mode_desc = (string)items[14];
            failover_mode = (byte?)items[15];
            failover_mode_desc = (string)items[16];
            session_timeout = (int?)items[17];
            primary_role_allow_connections = (byte?)items[18];
        }

        public availability_replicas(string primary_role_allow_connections_desc, byte? secondary_role_allow_connections, string secondary_role_allow_connections_desc, DateTime? create_date, DateTime? modify_date, int? backup_priority, string read_only_routing_url, Guid? replica_id, Guid? group_id, int? replica_metadata_id, string replica_server_name, Byte[] owner_sid, string endpoint_url, byte? availability_mode, string availability_mode_desc, byte? failover_mode, string failover_mode_desc, int? session_timeout, byte? primary_role_allow_connections)
        {
            this.primary_role_allow_connections_desc = primary_role_allow_connections_desc;
            this.secondary_role_allow_connections = secondary_role_allow_connections;
            this.secondary_role_allow_connections_desc = secondary_role_allow_connections_desc;
            this.create_date = create_date;
            this.modify_date = modify_date;
            this.backup_priority = backup_priority;
            this.read_only_routing_url = read_only_routing_url;
            this.replica_id = replica_id;
            this.group_id = group_id;
            this.replica_metadata_id = replica_metadata_id;
            this.replica_server_name = replica_server_name;
            this.owner_sid = owner_sid;
            this.endpoint_url = endpoint_url;
            this.availability_mode = availability_mode;
            this.availability_mode_desc = availability_mode_desc;
            this.failover_mode = failover_mode;
            this.failover_mode_desc = failover_mode_desc;
            this.session_timeout = session_timeout;
            this.primary_role_allow_connections = primary_role_allow_connections;
        }

        public override object[] GetItemArray()
        {
            return new object[] { primary_role_allow_connections_desc, secondary_role_allow_connections, secondary_role_allow_connections_desc, create_date, modify_date, backup_priority, read_only_routing_url, replica_id, group_id, replica_metadata_id, replica_server_name, owner_sid, endpoint_url, availability_mode, availability_mode_desc, failover_mode, failover_mode_desc, session_timeout, primary_role_allow_connections };
        }

        public override void SetItemArray(object[] items)
        {
            primary_role_allow_connections_desc = (string)items[0];
            secondary_role_allow_connections = (byte?)items[1];
            secondary_role_allow_connections_desc = (string)items[2];
            create_date = (DateTime?)items[3];
            modify_date = (DateTime?)items[4];
            backup_priority = (int?)items[5];
            read_only_routing_url = (string)items[6];
            replica_id = (Guid?)items[7];
            group_id = (Guid?)items[8];
            replica_metadata_id = (int?)items[9];
            replica_server_name = (string)items[10];
            owner_sid = (Byte[])items[11];
            endpoint_url = (string)items[12];
            availability_mode = (byte?)items[13];
            availability_mode_desc = (string)items[14];
            failover_mode = (byte?)items[15];
            failover_mode_desc = (string)items[16];
            session_timeout = (int?)items[17];
            primary_role_allow_connections = (byte?)items[18];
        }
    }

    [SqlView("sys", "dm_os_memory_node_access_stats")]
    public partial class dm_os_memory_node_access_stats : SqlViewProxy
    {
        [SqlColumn("local_node", 0), SqlTypeFacets("int", true)]
        public int? local_node
        {
            get;
            set;
        }

        [SqlColumn("remote_node", 1), SqlTypeFacets("int", true)]
        public int? remote_node
        {
            get;
            set;
        }

        [SqlColumn("page_class", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string page_class
        {
            get;
            set;
        }

        [SqlColumn("read_count", 3), SqlTypeFacets("bigint", true)]
        public long? read_count
        {
            get;
            set;
        }

        [SqlColumn("write_count", 4), SqlTypeFacets("bigint", true)]
        public long? write_count
        {
            get;
            set;
        }

        public dm_os_memory_node_access_stats()
        {
        }

        public dm_os_memory_node_access_stats(object[] items)
        {
            local_node = (int?)items[0];
            remote_node = (int?)items[1];
            page_class = (string)items[2];
            read_count = (long?)items[3];
            write_count = (long?)items[4];
        }

        public dm_os_memory_node_access_stats(int? local_node, int? remote_node, string page_class, long? read_count, long? write_count)
        {
            this.local_node = local_node;
            this.remote_node = remote_node;
            this.page_class = page_class;
            this.read_count = read_count;
            this.write_count = write_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { local_node, remote_node, page_class, read_count, write_count };
        }

        public override void SetItemArray(object[] items)
        {
            local_node = (int?)items[0];
            remote_node = (int?)items[1];
            page_class = (string)items[2];
            read_count = (long?)items[3];
            write_count = (long?)items[4];
        }
    }

    [SqlView("sys", "dm_os_wait_stats")]
    public partial class dm_os_wait_stats : SqlViewProxy
    {
        [SqlColumn("wait_type", 0), SqlTypeFacets("nvarchar", false, 120)]
        public string wait_type
        {
            get;
            set;
        }

        [SqlColumn("waiting_tasks_count", 1), SqlTypeFacets("bigint", false)]
        public long waiting_tasks_count
        {
            get;
            set;
        }

        [SqlColumn("wait_time_ms", 2), SqlTypeFacets("bigint", false)]
        public long wait_time_ms
        {
            get;
            set;
        }

        [SqlColumn("max_wait_time_ms", 3), SqlTypeFacets("bigint", false)]
        public long max_wait_time_ms
        {
            get;
            set;
        }

        [SqlColumn("signal_wait_time_ms", 4), SqlTypeFacets("bigint", false)]
        public long signal_wait_time_ms
        {
            get;
            set;
        }

        public dm_os_wait_stats()
        {
        }

        public dm_os_wait_stats(object[] items)
        {
            wait_type = (string)items[0];
            waiting_tasks_count = (long)items[1];
            wait_time_ms = (long)items[2];
            max_wait_time_ms = (long)items[3];
            signal_wait_time_ms = (long)items[4];
        }

        public dm_os_wait_stats(string wait_type, long waiting_tasks_count, long wait_time_ms, long max_wait_time_ms, long signal_wait_time_ms)
        {
            this.wait_type = wait_type;
            this.waiting_tasks_count = waiting_tasks_count;
            this.wait_time_ms = wait_time_ms;
            this.max_wait_time_ms = max_wait_time_ms;
            this.signal_wait_time_ms = signal_wait_time_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms };
        }

        public override void SetItemArray(object[] items)
        {
            wait_type = (string)items[0];
            waiting_tasks_count = (long)items[1];
            wait_time_ms = (long)items[2];
            max_wait_time_ms = (long)items[3];
            signal_wait_time_ms = (long)items[4];
        }
    }

    [SqlView("sys", "dm_tran_current_snapshot")]
    public partial class dm_tran_current_snapshot : SqlViewProxy
    {
        [SqlColumn("transaction_sequence_num", 0), SqlTypeFacets("bigint", true)]
        public long? transaction_sequence_num
        {
            get;
            set;
        }

        public dm_tran_current_snapshot()
        {
        }

        public dm_tran_current_snapshot(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
        }

        public dm_tran_current_snapshot(long? transaction_sequence_num)
        {
            this.transaction_sequence_num = transaction_sequence_num;
        }

        public override object[] GetItemArray()
        {
            return new object[] { transaction_sequence_num };
        }

        public override void SetItemArray(object[] items)
        {
            transaction_sequence_num = (long?)items[0];
        }
    }

    [SqlView("sys", "dm_logpool_hashentries")]
    public partial class dm_logpool_hashentries : SqlViewProxy
    {
        [SqlColumn("bucket_no", 0), SqlTypeFacets("int", false)]
        public int bucket_no
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 2), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("log_block_id", 3), SqlTypeFacets("bigint", false)]
        public long log_block_id
        {
            get;
            set;
        }

        [SqlColumn("cache_buffer", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_buffer
        {
            get;
            set;
        }

        public dm_logpool_hashentries()
        {
        }

        public dm_logpool_hashentries(object[] items)
        {
            bucket_no = (int)items[0];
            database_id = (int)items[1];
            recovery_unit_id = (int)items[2];
            log_block_id = (long)items[3];
            cache_buffer = (Byte[])items[4];
        }

        public dm_logpool_hashentries(int bucket_no, int database_id, int recovery_unit_id, long log_block_id, Byte[] cache_buffer)
        {
            this.bucket_no = bucket_no;
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.log_block_id = log_block_id;
            this.cache_buffer = cache_buffer;
        }

        public override object[] GetItemArray()
        {
            return new object[] { bucket_no, database_id, recovery_unit_id, log_block_id, cache_buffer };
        }

        public override void SetItemArray(object[] items)
        {
            bucket_no = (int)items[0];
            database_id = (int)items[1];
            recovery_unit_id = (int)items[2];
            log_block_id = (long)items[3];
            cache_buffer = (Byte[])items[4];
        }
    }

    [SqlView("sys", "dm_exec_query_memory_grants")]
    public partial class dm_exec_query_memory_grants : SqlViewProxy
    {
        [SqlColumn("request_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? request_time
        {
            get;
            set;
        }

        [SqlColumn("grant_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? grant_time
        {
            get;
            set;
        }

        [SqlColumn("requested_memory_kb", 6), SqlTypeFacets("bigint", true)]
        public long? requested_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("granted_memory_kb", 7), SqlTypeFacets("bigint", true)]
        public long? granted_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("required_memory_kb", 8), SqlTypeFacets("bigint", true)]
        public long? required_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("used_memory_kb", 9), SqlTypeFacets("bigint", true)]
        public long? used_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("max_used_memory_kb", 10), SqlTypeFacets("bigint", true)]
        public long? max_used_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("query_cost", 11), SqlTypeFacets("float", true)]
        public double? query_cost
        {
            get;
            set;
        }

        [SqlColumn("timeout_sec", 12), SqlTypeFacets("int", true)]
        public int? timeout_sec
        {
            get;
            set;
        }

        [SqlColumn("resource_semaphore_id", 13), SqlTypeFacets("smallint", true)]
        public short? resource_semaphore_id
        {
            get;
            set;
        }

        [SqlColumn("queue_id", 14), SqlTypeFacets("smallint", true)]
        public short? queue_id
        {
            get;
            set;
        }

        [SqlColumn("wait_order", 15), SqlTypeFacets("int", true)]
        public int? wait_order
        {
            get;
            set;
        }

        [SqlColumn("is_next_candidate", 16), SqlTypeFacets("bit", true)]
        public bool? is_next_candidate
        {
            get;
            set;
        }

        [SqlColumn("wait_time_ms", 17), SqlTypeFacets("bigint", true)]
        public long? wait_time_ms
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 18), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 19), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("group_id", 20), SqlTypeFacets("int", true)]
        public int? group_id
        {
            get;
            set;
        }

        [SqlColumn("pool_id", 21), SqlTypeFacets("int", true)]
        public int? pool_id
        {
            get;
            set;
        }

        [SqlColumn("is_small", 22), SqlTypeFacets("bit", true)]
        public bool? is_small
        {
            get;
            set;
        }

        [SqlColumn("ideal_memory_kb", 23), SqlTypeFacets("bigint", true)]
        public long? ideal_memory_kb
        {
            get;
            set;
        }

        [SqlColumn("session_id", 0), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("request_id", 1), SqlTypeFacets("int", true)]
        public int? request_id
        {
            get;
            set;
        }

        [SqlColumn("scheduler_id", 2), SqlTypeFacets("int", true)]
        public int? scheduler_id
        {
            get;
            set;
        }

        [SqlColumn("dop", 3), SqlTypeFacets("smallint", true)]
        public short? dop
        {
            get;
            set;
        }

        public dm_exec_query_memory_grants()
        {
        }

        public dm_exec_query_memory_grants(object[] items)
        {
            request_time = (DateTime?)items[0];
            grant_time = (DateTime?)items[1];
            requested_memory_kb = (long?)items[2];
            granted_memory_kb = (long?)items[3];
            required_memory_kb = (long?)items[4];
            used_memory_kb = (long?)items[5];
            max_used_memory_kb = (long?)items[6];
            query_cost = (double?)items[7];
            timeout_sec = (int?)items[8];
            resource_semaphore_id = (short?)items[9];
            queue_id = (short?)items[10];
            wait_order = (int?)items[11];
            is_next_candidate = (bool?)items[12];
            wait_time_ms = (long?)items[13];
            plan_handle = (Byte[])items[14];
            sql_handle = (Byte[])items[15];
            group_id = (int?)items[16];
            pool_id = (int?)items[17];
            is_small = (bool?)items[18];
            ideal_memory_kb = (long?)items[19];
            session_id = (short?)items[20];
            request_id = (int?)items[21];
            scheduler_id = (int?)items[22];
            dop = (short?)items[23];
        }

        public dm_exec_query_memory_grants(DateTime? request_time, DateTime? grant_time, long? requested_memory_kb, long? granted_memory_kb, long? required_memory_kb, long? used_memory_kb, long? max_used_memory_kb, double? query_cost, int? timeout_sec, short? resource_semaphore_id, short? queue_id, int? wait_order, bool? is_next_candidate, long? wait_time_ms, Byte[] plan_handle, Byte[] sql_handle, int? group_id, int? pool_id, bool? is_small, long? ideal_memory_kb, short? session_id, int? request_id, int? scheduler_id, short? dop)
        {
            this.request_time = request_time;
            this.grant_time = grant_time;
            this.requested_memory_kb = requested_memory_kb;
            this.granted_memory_kb = granted_memory_kb;
            this.required_memory_kb = required_memory_kb;
            this.used_memory_kb = used_memory_kb;
            this.max_used_memory_kb = max_used_memory_kb;
            this.query_cost = query_cost;
            this.timeout_sec = timeout_sec;
            this.resource_semaphore_id = resource_semaphore_id;
            this.queue_id = queue_id;
            this.wait_order = wait_order;
            this.is_next_candidate = is_next_candidate;
            this.wait_time_ms = wait_time_ms;
            this.plan_handle = plan_handle;
            this.sql_handle = sql_handle;
            this.group_id = group_id;
            this.pool_id = pool_id;
            this.is_small = is_small;
            this.ideal_memory_kb = ideal_memory_kb;
            this.session_id = session_id;
            this.request_id = request_id;
            this.scheduler_id = scheduler_id;
            this.dop = dop;
        }

        public override object[] GetItemArray()
        {
            return new object[] { request_time, grant_time, requested_memory_kb, granted_memory_kb, required_memory_kb, used_memory_kb, max_used_memory_kb, query_cost, timeout_sec, resource_semaphore_id, queue_id, wait_order, is_next_candidate, wait_time_ms, plan_handle, sql_handle, group_id, pool_id, is_small, ideal_memory_kb, session_id, request_id, scheduler_id, dop };
        }

        public override void SetItemArray(object[] items)
        {
            request_time = (DateTime?)items[0];
            grant_time = (DateTime?)items[1];
            requested_memory_kb = (long?)items[2];
            granted_memory_kb = (long?)items[3];
            required_memory_kb = (long?)items[4];
            used_memory_kb = (long?)items[5];
            max_used_memory_kb = (long?)items[6];
            query_cost = (double?)items[7];
            timeout_sec = (int?)items[8];
            resource_semaphore_id = (short?)items[9];
            queue_id = (short?)items[10];
            wait_order = (int?)items[11];
            is_next_candidate = (bool?)items[12];
            wait_time_ms = (long?)items[13];
            plan_handle = (Byte[])items[14];
            sql_handle = (Byte[])items[15];
            group_id = (int?)items[16];
            pool_id = (int?)items[17];
            is_small = (bool?)items[18];
            ideal_memory_kb = (long?)items[19];
            session_id = (short?)items[20];
            request_id = (int?)items[21];
            scheduler_id = (int?)items[22];
            dop = (short?)items[23];
        }
    }

    [SqlView("sys", "dm_os_buffer_pool_extension_configuration")]
    public partial class dm_os_buffer_pool_extension_configuration : SqlViewProxy
    {
        [SqlColumn("path", 0), SqlTypeFacets("nvarchar", true, 512)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", true)]
        public int? file_id
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("int", true)]
        public int? state
        {
            get;
            set;
        }

        [SqlColumn("state_description", 3), SqlTypeFacets("nvarchar", false, 120)]
        public string state_description
        {
            get;
            set;
        }

        [SqlColumn("current_size_in_kb", 4), SqlTypeFacets("bigint", true)]
        public long? current_size_in_kb
        {
            get;
            set;
        }

        public dm_os_buffer_pool_extension_configuration()
        {
        }

        public dm_os_buffer_pool_extension_configuration(object[] items)
        {
            path = (string)items[0];
            file_id = (int?)items[1];
            state = (int?)items[2];
            state_description = (string)items[3];
            current_size_in_kb = (long?)items[4];
        }

        public dm_os_buffer_pool_extension_configuration(string path, int? file_id, int? state, string state_description, long? current_size_in_kb)
        {
            this.path = path;
            this.file_id = file_id;
            this.state = state;
            this.state_description = state_description;
            this.current_size_in_kb = current_size_in_kb;
        }

        public override object[] GetItemArray()
        {
            return new object[] { path, file_id, state, state_description, current_size_in_kb };
        }

        public override void SetItemArray(object[] items)
        {
            path = (string)items[0];
            file_id = (int?)items[1];
            state = (int?)items[2];
            state_description = (string)items[3];
            current_size_in_kb = (long?)items[4];
        }
    }

    [SqlView("sys", "dm_os_sublatches")]
    public partial class dm_os_sublatches : SqlViewProxy
    {
        [SqlColumn("superlatch_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] superlatch_address
        {
            get;
            set;
        }

        [SqlColumn("sublatch_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] sublatch_address
        {
            get;
            set;
        }

        [SqlColumn("partition_id", 2), SqlTypeFacets("int", false)]
        public int partition_id
        {
            get;
            set;
        }

        public dm_os_sublatches()
        {
        }

        public dm_os_sublatches(object[] items)
        {
            superlatch_address = (Byte[])items[0];
            sublatch_address = (Byte[])items[1];
            partition_id = (int)items[2];
        }

        public dm_os_sublatches(Byte[] superlatch_address, Byte[] sublatch_address, int partition_id)
        {
            this.superlatch_address = superlatch_address;
            this.sublatch_address = sublatch_address;
            this.partition_id = partition_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { superlatch_address, sublatch_address, partition_id };
        }

        public override void SetItemArray(object[] items)
        {
            superlatch_address = (Byte[])items[0];
            sublatch_address = (Byte[])items[1];
            partition_id = (int)items[2];
        }
    }

    [SqlView("sys", "dm_clr_properties")]
    public partial class dm_clr_properties : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string value
        {
            get;
            set;
        }

        public dm_clr_properties()
        {
        }

        public dm_clr_properties(object[] items)
        {
            name = (string)items[0];
            value = (string)items[1];
        }

        public dm_clr_properties(string name, string value)
        {
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            value = (string)items[1];
        }
    }

    [SqlView("sys", "dm_db_missing_index_details")]
    public partial class dm_db_missing_index_details : SqlViewProxy
    {
        [SqlColumn("index_handle", 0), SqlTypeFacets("int", false)]
        public int index_handle
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 2), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("equality_columns", 3), SqlTypeFacets("nvarchar", true, 8000)]
        public string equality_columns
        {
            get;
            set;
        }

        [SqlColumn("inequality_columns", 4), SqlTypeFacets("nvarchar", true, 8000)]
        public string inequality_columns
        {
            get;
            set;
        }

        [SqlColumn("included_columns", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string included_columns
        {
            get;
            set;
        }

        [SqlColumn("statement", 6), SqlTypeFacets("nvarchar", true, 8000)]
        public string statement
        {
            get;
            set;
        }

        public dm_db_missing_index_details()
        {
        }

        public dm_db_missing_index_details(object[] items)
        {
            index_handle = (int)items[0];
            database_id = (short)items[1];
            object_id = (int)items[2];
            equality_columns = (string)items[3];
            inequality_columns = (string)items[4];
            included_columns = (string)items[5];
            statement = (string)items[6];
        }

        public dm_db_missing_index_details(int index_handle, short database_id, int object_id, string equality_columns, string inequality_columns, string included_columns, string statement)
        {
            this.index_handle = index_handle;
            this.database_id = database_id;
            this.object_id = object_id;
            this.equality_columns = equality_columns;
            this.inequality_columns = inequality_columns;
            this.included_columns = included_columns;
            this.statement = statement;
        }

        public override object[] GetItemArray()
        {
            return new object[] { index_handle, database_id, object_id, equality_columns, inequality_columns, included_columns, statement };
        }

        public override void SetItemArray(object[] items)
        {
            index_handle = (int)items[0];
            database_id = (short)items[1];
            object_id = (int)items[2];
            equality_columns = (string)items[3];
            inequality_columns = (string)items[4];
            included_columns = (string)items[5];
            statement = (string)items[6];
        }
    }

    [SqlView("sys", "dm_exec_background_job_queue")]
    public partial class dm_exec_background_job_queue : SqlViewProxy
    {
        [SqlColumn("time_queued", 0), SqlTypeFacets("datetime", false)]
        public DateTime time_queued
        {
            get;
            set;
        }

        [SqlColumn("job_id", 1), SqlTypeFacets("int", false)]
        public int job_id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 2), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id1", 3), SqlTypeFacets("int", false)]
        public int object_id1
        {
            get;
            set;
        }

        [SqlColumn("object_id2", 4), SqlTypeFacets("int", false)]
        public int object_id2
        {
            get;
            set;
        }

        [SqlColumn("object_id3", 5), SqlTypeFacets("int", false)]
        public int object_id3
        {
            get;
            set;
        }

        [SqlColumn("object_id4", 6), SqlTypeFacets("int", false)]
        public int object_id4
        {
            get;
            set;
        }

        [SqlColumn("error_code", 7), SqlTypeFacets("int", true)]
        public int? error_code
        {
            get;
            set;
        }

        [SqlColumn("request_type", 8), SqlTypeFacets("smallint", false)]
        public short request_type
        {
            get;
            set;
        }

        [SqlColumn("retry_count", 9), SqlTypeFacets("smallint", false)]
        public short retry_count
        {
            get;
            set;
        }

        [SqlColumn("in_progress", 10), SqlTypeFacets("smallint", false)]
        public short in_progress
        {
            get;
            set;
        }

        [SqlColumn("session_id", 11), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        public dm_exec_background_job_queue()
        {
        }

        public dm_exec_background_job_queue(object[] items)
        {
            time_queued = (DateTime)items[0];
            job_id = (int)items[1];
            database_id = (int)items[2];
            object_id1 = (int)items[3];
            object_id2 = (int)items[4];
            object_id3 = (int)items[5];
            object_id4 = (int)items[6];
            error_code = (int?)items[7];
            request_type = (short)items[8];
            retry_count = (short)items[9];
            in_progress = (short)items[10];
            session_id = (short?)items[11];
        }

        public dm_exec_background_job_queue(DateTime time_queued, int job_id, int database_id, int object_id1, int object_id2, int object_id3, int object_id4, int? error_code, short request_type, short retry_count, short in_progress, short? session_id)
        {
            this.time_queued = time_queued;
            this.job_id = job_id;
            this.database_id = database_id;
            this.object_id1 = object_id1;
            this.object_id2 = object_id2;
            this.object_id3 = object_id3;
            this.object_id4 = object_id4;
            this.error_code = error_code;
            this.request_type = request_type;
            this.retry_count = retry_count;
            this.in_progress = in_progress;
            this.session_id = session_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { time_queued, job_id, database_id, object_id1, object_id2, object_id3, object_id4, error_code, request_type, retry_count, in_progress, session_id };
        }

        public override void SetItemArray(object[] items)
        {
            time_queued = (DateTime)items[0];
            job_id = (int)items[1];
            database_id = (int)items[2];
            object_id1 = (int)items[3];
            object_id2 = (int)items[4];
            object_id3 = (int)items[5];
            object_id4 = (int)items[6];
            error_code = (int?)items[7];
            request_type = (short)items[8];
            retry_count = (short)items[9];
            in_progress = (short)items[10];
            session_id = (short?)items[11];
        }
    }

    [SqlView("sys", "dm_os_waiting_tasks")]
    public partial class dm_os_waiting_tasks : SqlViewProxy
    {
        [SqlColumn("waiting_task_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] waiting_task_address
        {
            get;
            set;
        }

        [SqlColumn("session_id", 1), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("exec_context_id", 2), SqlTypeFacets("int", true)]
        public int? exec_context_id
        {
            get;
            set;
        }

        [SqlColumn("wait_duration_ms", 3), SqlTypeFacets("bigint", true)]
        public long? wait_duration_ms
        {
            get;
            set;
        }

        [SqlColumn("wait_type", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string wait_type
        {
            get;
            set;
        }

        [SqlColumn("resource_address", 5), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] resource_address
        {
            get;
            set;
        }

        [SqlColumn("blocking_task_address", 6), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] blocking_task_address
        {
            get;
            set;
        }

        [SqlColumn("blocking_session_id", 7), SqlTypeFacets("smallint", true)]
        public short? blocking_session_id
        {
            get;
            set;
        }

        [SqlColumn("blocking_exec_context_id", 8), SqlTypeFacets("int", true)]
        public int? blocking_exec_context_id
        {
            get;
            set;
        }

        [SqlColumn("resource_description", 9), SqlTypeFacets("nvarchar", true, 6144)]
        public string resource_description
        {
            get;
            set;
        }

        public dm_os_waiting_tasks()
        {
        }

        public dm_os_waiting_tasks(object[] items)
        {
            waiting_task_address = (Byte[])items[0];
            session_id = (short?)items[1];
            exec_context_id = (int?)items[2];
            wait_duration_ms = (long?)items[3];
            wait_type = (string)items[4];
            resource_address = (Byte[])items[5];
            blocking_task_address = (Byte[])items[6];
            blocking_session_id = (short?)items[7];
            blocking_exec_context_id = (int?)items[8];
            resource_description = (string)items[9];
        }

        public dm_os_waiting_tasks(Byte[] waiting_task_address, short? session_id, int? exec_context_id, long? wait_duration_ms, string wait_type, Byte[] resource_address, Byte[] blocking_task_address, short? blocking_session_id, int? blocking_exec_context_id, string resource_description)
        {
            this.waiting_task_address = waiting_task_address;
            this.session_id = session_id;
            this.exec_context_id = exec_context_id;
            this.wait_duration_ms = wait_duration_ms;
            this.wait_type = wait_type;
            this.resource_address = resource_address;
            this.blocking_task_address = blocking_task_address;
            this.blocking_session_id = blocking_session_id;
            this.blocking_exec_context_id = blocking_exec_context_id;
            this.resource_description = resource_description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { waiting_task_address, session_id, exec_context_id, wait_duration_ms, wait_type, resource_address, blocking_task_address, blocking_session_id, blocking_exec_context_id, resource_description };
        }

        public override void SetItemArray(object[] items)
        {
            waiting_task_address = (Byte[])items[0];
            session_id = (short?)items[1];
            exec_context_id = (int?)items[2];
            wait_duration_ms = (long?)items[3];
            wait_type = (string)items[4];
            resource_address = (Byte[])items[5];
            blocking_task_address = (Byte[])items[6];
            blocking_session_id = (short?)items[7];
            blocking_exec_context_id = (int?)items[8];
            resource_description = (string)items[9];
        }
    }

    [SqlView("sys", "dm_hadr_name_id_map")]
    public partial class dm_hadr_name_id_map : SqlViewProxy
    {
        [SqlColumn("ag_name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string ag_name
        {
            get;
            set;
        }

        [SqlColumn("ag_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid ag_id
        {
            get;
            set;
        }

        [SqlColumn("ag_resource_id", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string ag_resource_id
        {
            get;
            set;
        }

        [SqlColumn("ag_group_id", 3), SqlTypeFacets("nvarchar", false, 512)]
        public string ag_group_id
        {
            get;
            set;
        }

        public dm_hadr_name_id_map()
        {
        }

        public dm_hadr_name_id_map(object[] items)
        {
            ag_name = (string)items[0];
            ag_id = (Guid)items[1];
            ag_resource_id = (string)items[2];
            ag_group_id = (string)items[3];
        }

        public dm_hadr_name_id_map(string ag_name, Guid ag_id, string ag_resource_id, string ag_group_id)
        {
            this.ag_name = ag_name;
            this.ag_id = ag_id;
            this.ag_resource_id = ag_resource_id;
            this.ag_group_id = ag_group_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ag_name, ag_id, ag_resource_id, ag_group_id };
        }

        public override void SetItemArray(object[] items)
        {
            ag_name = (string)items[0];
            ag_id = (Guid)items[1];
            ag_resource_id = (string)items[2];
            ag_group_id = (string)items[3];
        }
    }

    [SqlView("sys", "traces")]
    public partial class traces : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("path", 2), SqlTypeFacets("nvarchar", true, 520)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("max_size", 3), SqlTypeFacets("bigint", true)]
        public long? max_size
        {
            get;
            set;
        }

        [SqlColumn("stop_time", 4), SqlTypeFacets("datetime", true)]
        public DateTime? stop_time
        {
            get;
            set;
        }

        [SqlColumn("max_files", 5), SqlTypeFacets("int", true)]
        public int? max_files
        {
            get;
            set;
        }

        [SqlColumn("is_rowset", 6), SqlTypeFacets("bit", true)]
        public bool? is_rowset
        {
            get;
            set;
        }

        [SqlColumn("is_rollover", 7), SqlTypeFacets("bit", true)]
        public bool? is_rollover
        {
            get;
            set;
        }

        [SqlColumn("is_shutdown", 8), SqlTypeFacets("bit", true)]
        public bool? is_shutdown
        {
            get;
            set;
        }

        [SqlColumn("is_default", 9), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        [SqlColumn("buffer_count", 10), SqlTypeFacets("int", true)]
        public int? buffer_count
        {
            get;
            set;
        }

        [SqlColumn("buffer_size", 11), SqlTypeFacets("int", true)]
        public int? buffer_size
        {
            get;
            set;
        }

        [SqlColumn("file_position", 12), SqlTypeFacets("bigint", true)]
        public long? file_position
        {
            get;
            set;
        }

        [SqlColumn("reader_spid", 13), SqlTypeFacets("int", true)]
        public int? reader_spid
        {
            get;
            set;
        }

        [SqlColumn("start_time", 14), SqlTypeFacets("datetime", true)]
        public DateTime? start_time
        {
            get;
            set;
        }

        [SqlColumn("last_event_time", 15), SqlTypeFacets("datetime", true)]
        public DateTime? last_event_time
        {
            get;
            set;
        }

        [SqlColumn("event_count", 16), SqlTypeFacets("bigint", true)]
        public long? event_count
        {
            get;
            set;
        }

        [SqlColumn("dropped_event_count", 17), SqlTypeFacets("int", true)]
        public int? dropped_event_count
        {
            get;
            set;
        }

        public traces()
        {
        }

        public traces(object[] items)
        {
            id = (int)items[0];
            status = (int)items[1];
            path = (string)items[2];
            max_size = (long?)items[3];
            stop_time = (DateTime?)items[4];
            max_files = (int?)items[5];
            is_rowset = (bool?)items[6];
            is_rollover = (bool?)items[7];
            is_shutdown = (bool?)items[8];
            is_default = (bool?)items[9];
            buffer_count = (int?)items[10];
            buffer_size = (int?)items[11];
            file_position = (long?)items[12];
            reader_spid = (int?)items[13];
            start_time = (DateTime?)items[14];
            last_event_time = (DateTime?)items[15];
            event_count = (long?)items[16];
            dropped_event_count = (int?)items[17];
        }

        public traces(int id, int status, string path, long? max_size, DateTime? stop_time, int? max_files, bool? is_rowset, bool? is_rollover, bool? is_shutdown, bool? is_default, int? buffer_count, int? buffer_size, long? file_position, int? reader_spid, DateTime? start_time, DateTime? last_event_time, long? event_count, int? dropped_event_count)
        {
            this.id = id;
            this.status = status;
            this.path = path;
            this.max_size = max_size;
            this.stop_time = stop_time;
            this.max_files = max_files;
            this.is_rowset = is_rowset;
            this.is_rollover = is_rollover;
            this.is_shutdown = is_shutdown;
            this.is_default = is_default;
            this.buffer_count = buffer_count;
            this.buffer_size = buffer_size;
            this.file_position = file_position;
            this.reader_spid = reader_spid;
            this.start_time = start_time;
            this.last_event_time = last_event_time;
            this.event_count = event_count;
            this.dropped_event_count = dropped_event_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, status, path, max_size, stop_time, max_files, is_rowset, is_rollover, is_shutdown, is_default, buffer_count, buffer_size, file_position, reader_spid, start_time, last_event_time, event_count, dropped_event_count };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            status = (int)items[1];
            path = (string)items[2];
            max_size = (long?)items[3];
            stop_time = (DateTime?)items[4];
            max_files = (int?)items[5];
            is_rowset = (bool?)items[6];
            is_rollover = (bool?)items[7];
            is_shutdown = (bool?)items[8];
            is_default = (bool?)items[9];
            buffer_count = (int?)items[10];
            buffer_size = (int?)items[11];
            file_position = (long?)items[12];
            reader_spid = (int?)items[13];
            start_time = (DateTime?)items[14];
            last_event_time = (DateTime?)items[15];
            event_count = (long?)items[16];
            dropped_event_count = (int?)items[17];
        }
    }

    [SqlView("sys", "dm_db_log_space_usage")]
    public partial class dm_db_log_space_usage : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("total_log_size_in_bytes", 1), SqlTypeFacets("bigint", true)]
        public long? total_log_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_log_space_in_bytes", 2), SqlTypeFacets("bigint", true)]
        public long? used_log_space_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("used_log_space_in_percent", 3), SqlTypeFacets("real", true)]
        public float? used_log_space_in_percent
        {
            get;
            set;
        }

        [SqlColumn("log_space_in_bytes_since_last_backup", 4), SqlTypeFacets("bigint", true)]
        public long? log_space_in_bytes_since_last_backup
        {
            get;
            set;
        }

        public dm_db_log_space_usage()
        {
        }

        public dm_db_log_space_usage(object[] items)
        {
            database_id = (int?)items[0];
            total_log_size_in_bytes = (long?)items[1];
            used_log_space_in_bytes = (long?)items[2];
            used_log_space_in_percent = (float?)items[3];
            log_space_in_bytes_since_last_backup = (long?)items[4];
        }

        public dm_db_log_space_usage(int? database_id, long? total_log_size_in_bytes, long? used_log_space_in_bytes, float? used_log_space_in_percent, long? log_space_in_bytes_since_last_backup)
        {
            this.database_id = database_id;
            this.total_log_size_in_bytes = total_log_size_in_bytes;
            this.used_log_space_in_bytes = used_log_space_in_bytes;
            this.used_log_space_in_percent = used_log_space_in_percent;
            this.log_space_in_bytes_since_last_backup = log_space_in_bytes_since_last_backup;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, total_log_size_in_bytes, used_log_space_in_bytes, used_log_space_in_percent, log_space_in_bytes_since_last_backup };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            total_log_size_in_bytes = (long?)items[1];
            used_log_space_in_bytes = (long?)items[2];
            used_log_space_in_percent = (float?)items[3];
            log_space_in_bytes_since_last_backup = (long?)items[4];
        }
    }

    [SqlView("sys", "trigger_event_types")]
    public partial class trigger_event_types : SqlViewProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("type_name", 1), SqlTypeFacets("nvarchar", true, 128)]
        public string type_name
        {
            get;
            set;
        }

        [SqlColumn("parent_type", 2), SqlTypeFacets("int", true)]
        public int? parent_type
        {
            get;
            set;
        }

        public trigger_event_types()
        {
        }

        public trigger_event_types(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }

        public trigger_event_types(int type, string type_name, int? parent_type)
        {
            this.type = type;
            this.type_name = type_name;
            this.parent_type = parent_type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, type_name, parent_type };
        }

        public override void SetItemArray(object[] items)
        {
            type = (int)items[0];
            type_name = (string)items[1];
            parent_type = (int?)items[2];
        }
    }

    [SqlView("sys", "dm_xe_sessions")]
    public partial class dm_xe_sessions : SqlViewProxy
    {
        [SqlColumn("total_regular_buffers", 3), SqlTypeFacets("int", false)]
        public int total_regular_buffers
        {
            get;
            set;
        }

        [SqlColumn("regular_buffer_size", 4), SqlTypeFacets("bigint", false)]
        public long regular_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("total_large_buffers", 5), SqlTypeFacets("int", false)]
        public int total_large_buffers
        {
            get;
            set;
        }

        [SqlColumn("large_buffer_size", 6), SqlTypeFacets("bigint", false)]
        public long large_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("total_buffer_size", 7), SqlTypeFacets("bigint", false)]
        public long total_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("buffer_policy_flags", 8), SqlTypeFacets("int", false)]
        public int buffer_policy_flags
        {
            get;
            set;
        }

        [SqlColumn("buffer_policy_desc", 9), SqlTypeFacets("nvarchar", false, 512)]
        public string buffer_policy_desc
        {
            get;
            set;
        }

        [SqlColumn("flags", 10), SqlTypeFacets("int", false)]
        public int flags
        {
            get;
            set;
        }

        [SqlColumn("flag_desc", 11), SqlTypeFacets("nvarchar", false, 512)]
        public string flag_desc
        {
            get;
            set;
        }

        [SqlColumn("dropped_event_count", 12), SqlTypeFacets("int", false)]
        public int dropped_event_count
        {
            get;
            set;
        }

        [SqlColumn("dropped_buffer_count", 13), SqlTypeFacets("int", false)]
        public int dropped_buffer_count
        {
            get;
            set;
        }

        [SqlColumn("blocked_event_fire_time", 14), SqlTypeFacets("int", false)]
        public int blocked_event_fire_time
        {
            get;
            set;
        }

        [SqlColumn("create_time", 15), SqlTypeFacets("datetime", false)]
        public DateTime create_time
        {
            get;
            set;
        }

        [SqlColumn("largest_event_dropped_size", 16), SqlTypeFacets("int", false)]
        public int largest_event_dropped_size
        {
            get;
            set;
        }

        [SqlColumn("session_source", 17), SqlTypeFacets("nvarchar", false, 512)]
        public string session_source
        {
            get;
            set;
        }

        [SqlColumn("address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] address
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("pending_buffers", 2), SqlTypeFacets("int", false)]
        public int pending_buffers
        {
            get;
            set;
        }

        public dm_xe_sessions()
        {
        }

        public dm_xe_sessions(object[] items)
        {
            total_regular_buffers = (int)items[0];
            regular_buffer_size = (long)items[1];
            total_large_buffers = (int)items[2];
            large_buffer_size = (long)items[3];
            total_buffer_size = (long)items[4];
            buffer_policy_flags = (int)items[5];
            buffer_policy_desc = (string)items[6];
            flags = (int)items[7];
            flag_desc = (string)items[8];
            dropped_event_count = (int)items[9];
            dropped_buffer_count = (int)items[10];
            blocked_event_fire_time = (int)items[11];
            create_time = (DateTime)items[12];
            largest_event_dropped_size = (int)items[13];
            session_source = (string)items[14];
            address = (Byte[])items[15];
            name = (string)items[16];
            pending_buffers = (int)items[17];
        }

        public dm_xe_sessions(int total_regular_buffers, long regular_buffer_size, int total_large_buffers, long large_buffer_size, long total_buffer_size, int buffer_policy_flags, string buffer_policy_desc, int flags, string flag_desc, int dropped_event_count, int dropped_buffer_count, int blocked_event_fire_time, DateTime create_time, int largest_event_dropped_size, string session_source, Byte[] address, string name, int pending_buffers)
        {
            this.total_regular_buffers = total_regular_buffers;
            this.regular_buffer_size = regular_buffer_size;
            this.total_large_buffers = total_large_buffers;
            this.large_buffer_size = large_buffer_size;
            this.total_buffer_size = total_buffer_size;
            this.buffer_policy_flags = buffer_policy_flags;
            this.buffer_policy_desc = buffer_policy_desc;
            this.flags = flags;
            this.flag_desc = flag_desc;
            this.dropped_event_count = dropped_event_count;
            this.dropped_buffer_count = dropped_buffer_count;
            this.blocked_event_fire_time = blocked_event_fire_time;
            this.create_time = create_time;
            this.largest_event_dropped_size = largest_event_dropped_size;
            this.session_source = session_source;
            this.address = address;
            this.name = name;
            this.pending_buffers = pending_buffers;
        }

        public override object[] GetItemArray()
        {
            return new object[] { total_regular_buffers, regular_buffer_size, total_large_buffers, large_buffer_size, total_buffer_size, buffer_policy_flags, buffer_policy_desc, flags, flag_desc, dropped_event_count, dropped_buffer_count, blocked_event_fire_time, create_time, largest_event_dropped_size, session_source, address, name, pending_buffers };
        }

        public override void SetItemArray(object[] items)
        {
            total_regular_buffers = (int)items[0];
            regular_buffer_size = (long)items[1];
            total_large_buffers = (int)items[2];
            large_buffer_size = (long)items[3];
            total_buffer_size = (long)items[4];
            buffer_policy_flags = (int)items[5];
            buffer_policy_desc = (string)items[6];
            flags = (int)items[7];
            flag_desc = (string)items[8];
            dropped_event_count = (int)items[9];
            dropped_buffer_count = (int)items[10];
            blocked_event_fire_time = (int)items[11];
            create_time = (DateTime)items[12];
            largest_event_dropped_size = (int)items[13];
            session_source = (string)items[14];
            address = (Byte[])items[15];
            name = (string)items[16];
            pending_buffers = (int)items[17];
        }
    }

    [SqlView("sys", "dm_fts_fdhosts")]
    public partial class dm_fts_fdhosts : SqlViewProxy
    {
        [SqlColumn("fdhost_id", 0), SqlTypeFacets("int", false)]
        public int fdhost_id
        {
            get;
            set;
        }

        [SqlColumn("fdhost_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string fdhost_name
        {
            get;
            set;
        }

        [SqlColumn("fdhost_process_id", 2), SqlTypeFacets("int", false)]
        public int fdhost_process_id
        {
            get;
            set;
        }

        [SqlColumn("fdhost_type", 3), SqlTypeFacets("nvarchar", true, 128)]
        public string fdhost_type
        {
            get;
            set;
        }

        [SqlColumn("max_thread", 4), SqlTypeFacets("int", false)]
        public int max_thread
        {
            get;
            set;
        }

        [SqlColumn("batch_count", 5), SqlTypeFacets("int", false)]
        public int batch_count
        {
            get;
            set;
        }

        public dm_fts_fdhosts()
        {
        }

        public dm_fts_fdhosts(object[] items)
        {
            fdhost_id = (int)items[0];
            fdhost_name = (string)items[1];
            fdhost_process_id = (int)items[2];
            fdhost_type = (string)items[3];
            max_thread = (int)items[4];
            batch_count = (int)items[5];
        }

        public dm_fts_fdhosts(int fdhost_id, string fdhost_name, int fdhost_process_id, string fdhost_type, int max_thread, int batch_count)
        {
            this.fdhost_id = fdhost_id;
            this.fdhost_name = fdhost_name;
            this.fdhost_process_id = fdhost_process_id;
            this.fdhost_type = fdhost_type;
            this.max_thread = max_thread;
            this.batch_count = batch_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { fdhost_id, fdhost_name, fdhost_process_id, fdhost_type, max_thread, batch_count };
        }

        public override void SetItemArray(object[] items)
        {
            fdhost_id = (int)items[0];
            fdhost_name = (string)items[1];
            fdhost_process_id = (int)items[2];
            fdhost_type = (string)items[3];
            max_thread = (int)items[4];
            batch_count = (int)items[5];
        }
    }

    [SqlView("sys", "dm_tran_top_version_generators")]
    public partial class dm_tran_top_version_generators : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("rowset_id", 1), SqlTypeFacets("bigint", true)]
        public long? rowset_id
        {
            get;
            set;
        }

        [SqlColumn("aggregated_record_length_in_bytes", 2), SqlTypeFacets("int", true)]
        public int? aggregated_record_length_in_bytes
        {
            get;
            set;
        }

        public dm_tran_top_version_generators()
        {
        }

        public dm_tran_top_version_generators(object[] items)
        {
            database_id = (short?)items[0];
            rowset_id = (long?)items[1];
            aggregated_record_length_in_bytes = (int?)items[2];
        }

        public dm_tran_top_version_generators(short? database_id, long? rowset_id, int? aggregated_record_length_in_bytes)
        {
            this.database_id = database_id;
            this.rowset_id = rowset_id;
            this.aggregated_record_length_in_bytes = aggregated_record_length_in_bytes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, rowset_id, aggregated_record_length_in_bytes };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (short?)items[0];
            rowset_id = (long?)items[1];
            aggregated_record_length_in_bytes = (int?)items[2];
        }
    }

    [SqlView("sys", "dm_db_xtp_index_stats")]
    public partial class dm_db_xtp_index_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("scans_started", 2), SqlTypeFacets("bigint", false)]
        public long scans_started
        {
            get;
            set;
        }

        [SqlColumn("scans_retries", 3), SqlTypeFacets("bigint", false)]
        public long scans_retries
        {
            get;
            set;
        }

        [SqlColumn("rows_returned", 4), SqlTypeFacets("bigint", false)]
        public long rows_returned
        {
            get;
            set;
        }

        [SqlColumn("rows_touched", 5), SqlTypeFacets("bigint", false)]
        public long rows_touched
        {
            get;
            set;
        }

        [SqlColumn("rows_expiring", 6), SqlTypeFacets("bigint", false)]
        public long rows_expiring
        {
            get;
            set;
        }

        [SqlColumn("rows_expired", 7), SqlTypeFacets("bigint", false)]
        public long rows_expired
        {
            get;
            set;
        }

        [SqlColumn("rows_expired_removed", 8), SqlTypeFacets("bigint", false)]
        public long rows_expired_removed
        {
            get;
            set;
        }

        [SqlColumn("phantom_scans_started", 9), SqlTypeFacets("bigint", false)]
        public long phantom_scans_started
        {
            get;
            set;
        }

        [SqlColumn("phantom_scans_retries", 10), SqlTypeFacets("bigint", false)]
        public long phantom_scans_retries
        {
            get;
            set;
        }

        [SqlColumn("phantom_rows_touched", 11), SqlTypeFacets("bigint", false)]
        public long phantom_rows_touched
        {
            get;
            set;
        }

        [SqlColumn("phantom_expiring_rows_encountered", 12), SqlTypeFacets("bigint", false)]
        public long phantom_expiring_rows_encountered
        {
            get;
            set;
        }

        [SqlColumn("phantom_expired_removed_rows_encountered", 13), SqlTypeFacets("bigint", false)]
        public long phantom_expired_removed_rows_encountered
        {
            get;
            set;
        }

        [SqlColumn("phantom_expired_rows_removed", 14), SqlTypeFacets("bigint", false)]
        public long phantom_expired_rows_removed
        {
            get;
            set;
        }

        [SqlColumn("object_address", 15), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] object_address
        {
            get;
            set;
        }

        public dm_db_xtp_index_stats()
        {
        }

        public dm_db_xtp_index_stats(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            scans_started = (long)items[2];
            scans_retries = (long)items[3];
            rows_returned = (long)items[4];
            rows_touched = (long)items[5];
            rows_expiring = (long)items[6];
            rows_expired = (long)items[7];
            rows_expired_removed = (long)items[8];
            phantom_scans_started = (long)items[9];
            phantom_scans_retries = (long)items[10];
            phantom_rows_touched = (long)items[11];
            phantom_expiring_rows_encountered = (long)items[12];
            phantom_expired_removed_rows_encountered = (long)items[13];
            phantom_expired_rows_removed = (long)items[14];
            object_address = (Byte[])items[15];
        }

        public dm_db_xtp_index_stats(int object_id, int index_id, long scans_started, long scans_retries, long rows_returned, long rows_touched, long rows_expiring, long rows_expired, long rows_expired_removed, long phantom_scans_started, long phantom_scans_retries, long phantom_rows_touched, long phantom_expiring_rows_encountered, long phantom_expired_removed_rows_encountered, long phantom_expired_rows_removed, Byte[] object_address)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.scans_started = scans_started;
            this.scans_retries = scans_retries;
            this.rows_returned = rows_returned;
            this.rows_touched = rows_touched;
            this.rows_expiring = rows_expiring;
            this.rows_expired = rows_expired;
            this.rows_expired_removed = rows_expired_removed;
            this.phantom_scans_started = phantom_scans_started;
            this.phantom_scans_retries = phantom_scans_retries;
            this.phantom_rows_touched = phantom_rows_touched;
            this.phantom_expiring_rows_encountered = phantom_expiring_rows_encountered;
            this.phantom_expired_removed_rows_encountered = phantom_expired_removed_rows_encountered;
            this.phantom_expired_rows_removed = phantom_expired_rows_removed;
            this.object_address = object_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, scans_started, scans_retries, rows_returned, rows_touched, rows_expiring, rows_expired, rows_expired_removed, phantom_scans_started, phantom_scans_retries, phantom_rows_touched, phantom_expiring_rows_encountered, phantom_expired_removed_rows_encountered, phantom_expired_rows_removed, object_address };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            scans_started = (long)items[2];
            scans_retries = (long)items[3];
            rows_returned = (long)items[4];
            rows_touched = (long)items[5];
            rows_expiring = (long)items[6];
            rows_expired = (long)items[7];
            rows_expired_removed = (long)items[8];
            phantom_scans_started = (long)items[9];
            phantom_scans_retries = (long)items[10];
            phantom_rows_touched = (long)items[11];
            phantom_expiring_rows_encountered = (long)items[12];
            phantom_expired_removed_rows_encountered = (long)items[13];
            phantom_expired_rows_removed = (long)items[14];
            object_address = (Byte[])items[15];
        }
    }

    [SqlView("sys", "dm_xe_map_values")]
    public partial class dm_xe_map_values : SqlViewProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        [SqlColumn("map_key", 2), SqlTypeFacets("int", false)]
        public int map_key
        {
            get;
            set;
        }

        [SqlColumn("map_value", 3), SqlTypeFacets("nvarchar", false, 6144)]
        public string map_value
        {
            get;
            set;
        }

        public dm_xe_map_values()
        {
        }

        public dm_xe_map_values(object[] items)
        {
            name = (string)items[0];
            object_package_guid = (Guid)items[1];
            map_key = (int)items[2];
            map_value = (string)items[3];
        }

        public dm_xe_map_values(string name, Guid object_package_guid, int map_key, string map_value)
        {
            this.name = name;
            this.object_package_guid = object_package_guid;
            this.map_key = map_key;
            this.map_value = map_value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, object_package_guid, map_key, map_value };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            object_package_guid = (Guid)items[1];
            map_key = (int)items[2];
            map_value = (string)items[3];
        }
    }

    [SqlView("sys", "dm_exec_query_optimizer_info")]
    public partial class dm_exec_query_optimizer_info : SqlViewProxy
    {
        [SqlColumn("counter", 0), SqlTypeFacets("nvarchar", false, 8000)]
        public string counter
        {
            get;
            set;
        }

        [SqlColumn("occurrence", 1), SqlTypeFacets("bigint", false)]
        public long occurrence
        {
            get;
            set;
        }

        [SqlColumn("value", 2), SqlTypeFacets("float", true)]
        public double? value
        {
            get;
            set;
        }

        public dm_exec_query_optimizer_info()
        {
        }

        public dm_exec_query_optimizer_info(object[] items)
        {
            counter = (string)items[0];
            occurrence = (long)items[1];
            value = (double?)items[2];
        }

        public dm_exec_query_optimizer_info(string counter, long occurrence, double? value)
        {
            this.counter = counter;
            this.occurrence = occurrence;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { counter, occurrence, value };
        }

        public override void SetItemArray(object[] items)
        {
            counter = (string)items[0];
            occurrence = (long)items[1];
            value = (double?)items[2];
        }
    }

    [SqlView("sys", "dm_xtp_gc_stats")]
    public partial class dm_xtp_gc_stats : SqlViewProxy
    {
        [SqlColumn("rows_examined", 0), SqlTypeFacets("bigint", false)]
        public long rows_examined
        {
            get;
            set;
        }

        [SqlColumn("rows_no_sweep_needed", 1), SqlTypeFacets("bigint", false)]
        public long rows_no_sweep_needed
        {
            get;
            set;
        }

        [SqlColumn("rows_first_in_bucket", 2), SqlTypeFacets("bigint", false)]
        public long rows_first_in_bucket
        {
            get;
            set;
        }

        [SqlColumn("rows_first_in_bucket_removed", 3), SqlTypeFacets("bigint", false)]
        public long rows_first_in_bucket_removed
        {
            get;
            set;
        }

        [SqlColumn("rows_marked_for_unlink", 4), SqlTypeFacets("bigint", false)]
        public long rows_marked_for_unlink
        {
            get;
            set;
        }

        [SqlColumn("parallel_assist_count", 5), SqlTypeFacets("bigint", false)]
        public long parallel_assist_count
        {
            get;
            set;
        }

        [SqlColumn("idle_worker_count", 6), SqlTypeFacets("bigint", false)]
        public long idle_worker_count
        {
            get;
            set;
        }

        [SqlColumn("sweep_scans_started", 7), SqlTypeFacets("bigint", false)]
        public long sweep_scans_started
        {
            get;
            set;
        }

        [SqlColumn("sweep_scan_retries", 8), SqlTypeFacets("bigint", false)]
        public long sweep_scan_retries
        {
            get;
            set;
        }

        [SqlColumn("sweep_rows_touched", 9), SqlTypeFacets("bigint", false)]
        public long sweep_rows_touched
        {
            get;
            set;
        }

        [SqlColumn("sweep_rows_expiring", 10), SqlTypeFacets("bigint", false)]
        public long sweep_rows_expiring
        {
            get;
            set;
        }

        [SqlColumn("sweep_rows_expired", 11), SqlTypeFacets("bigint", false)]
        public long sweep_rows_expired
        {
            get;
            set;
        }

        [SqlColumn("sweep_rows_expired_removed", 12), SqlTypeFacets("bigint", false)]
        public long sweep_rows_expired_removed
        {
            get;
            set;
        }

        public dm_xtp_gc_stats()
        {
        }

        public dm_xtp_gc_stats(object[] items)
        {
            rows_examined = (long)items[0];
            rows_no_sweep_needed = (long)items[1];
            rows_first_in_bucket = (long)items[2];
            rows_first_in_bucket_removed = (long)items[3];
            rows_marked_for_unlink = (long)items[4];
            parallel_assist_count = (long)items[5];
            idle_worker_count = (long)items[6];
            sweep_scans_started = (long)items[7];
            sweep_scan_retries = (long)items[8];
            sweep_rows_touched = (long)items[9];
            sweep_rows_expiring = (long)items[10];
            sweep_rows_expired = (long)items[11];
            sweep_rows_expired_removed = (long)items[12];
        }

        public dm_xtp_gc_stats(long rows_examined, long rows_no_sweep_needed, long rows_first_in_bucket, long rows_first_in_bucket_removed, long rows_marked_for_unlink, long parallel_assist_count, long idle_worker_count, long sweep_scans_started, long sweep_scan_retries, long sweep_rows_touched, long sweep_rows_expiring, long sweep_rows_expired, long sweep_rows_expired_removed)
        {
            this.rows_examined = rows_examined;
            this.rows_no_sweep_needed = rows_no_sweep_needed;
            this.rows_first_in_bucket = rows_first_in_bucket;
            this.rows_first_in_bucket_removed = rows_first_in_bucket_removed;
            this.rows_marked_for_unlink = rows_marked_for_unlink;
            this.parallel_assist_count = parallel_assist_count;
            this.idle_worker_count = idle_worker_count;
            this.sweep_scans_started = sweep_scans_started;
            this.sweep_scan_retries = sweep_scan_retries;
            this.sweep_rows_touched = sweep_rows_touched;
            this.sweep_rows_expiring = sweep_rows_expiring;
            this.sweep_rows_expired = sweep_rows_expired;
            this.sweep_rows_expired_removed = sweep_rows_expired_removed;
        }

        public override object[] GetItemArray()
        {
            return new object[] { rows_examined, rows_no_sweep_needed, rows_first_in_bucket, rows_first_in_bucket_removed, rows_marked_for_unlink, parallel_assist_count, idle_worker_count, sweep_scans_started, sweep_scan_retries, sweep_rows_touched, sweep_rows_expiring, sweep_rows_expired, sweep_rows_expired_removed };
        }

        public override void SetItemArray(object[] items)
        {
            rows_examined = (long)items[0];
            rows_no_sweep_needed = (long)items[1];
            rows_first_in_bucket = (long)items[2];
            rows_first_in_bucket_removed = (long)items[3];
            rows_marked_for_unlink = (long)items[4];
            parallel_assist_count = (long)items[5];
            idle_worker_count = (long)items[6];
            sweep_scans_started = (long)items[7];
            sweep_scan_retries = (long)items[8];
            sweep_rows_touched = (long)items[9];
            sweep_rows_expiring = (long)items[10];
            sweep_rows_expired = (long)items[11];
            sweep_rows_expired_removed = (long)items[12];
        }
    }

    [SqlView("sys", "availability_read_only_routing_lists")]
    public partial class availability_read_only_routing_lists : SqlViewProxy
    {
        [SqlColumn("replica_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid replica_id
        {
            get;
            set;
        }

        [SqlColumn("routing_priority", 1), SqlTypeFacets("int", false)]
        public int routing_priority
        {
            get;
            set;
        }

        [SqlColumn("read_only_replica_id", 2), SqlTypeFacets("uniqueidentifier", false)]
        public Guid read_only_replica_id
        {
            get;
            set;
        }

        public availability_read_only_routing_lists()
        {
        }

        public availability_read_only_routing_lists(object[] items)
        {
            replica_id = (Guid)items[0];
            routing_priority = (int)items[1];
            read_only_replica_id = (Guid)items[2];
        }

        public availability_read_only_routing_lists(Guid replica_id, int routing_priority, Guid read_only_replica_id)
        {
            this.replica_id = replica_id;
            this.routing_priority = routing_priority;
            this.read_only_replica_id = read_only_replica_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { replica_id, routing_priority, read_only_replica_id };
        }

        public override void SetItemArray(object[] items)
        {
            replica_id = (Guid)items[0];
            routing_priority = (int)items[1];
            read_only_replica_id = (Guid)items[2];
        }
    }

    [SqlView("sys", "dm_db_session_space_usage")]
    public partial class dm_db_session_space_usage : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("user_objects_alloc_page_count", 2), SqlTypeFacets("bigint", true)]
        public long? user_objects_alloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("user_objects_dealloc_page_count", 3), SqlTypeFacets("bigint", true)]
        public long? user_objects_dealloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_objects_alloc_page_count", 4), SqlTypeFacets("bigint", true)]
        public long? internal_objects_alloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_objects_dealloc_page_count", 5), SqlTypeFacets("bigint", true)]
        public long? internal_objects_dealloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("user_objects_deferred_dealloc_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? user_objects_deferred_dealloc_page_count
        {
            get;
            set;
        }

        public dm_db_session_space_usage()
        {
        }

        public dm_db_session_space_usage(object[] items)
        {
            session_id = (short?)items[0];
            database_id = (int?)items[1];
            user_objects_alloc_page_count = (long?)items[2];
            user_objects_dealloc_page_count = (long?)items[3];
            internal_objects_alloc_page_count = (long?)items[4];
            internal_objects_dealloc_page_count = (long?)items[5];
            user_objects_deferred_dealloc_page_count = (long?)items[6];
        }

        public dm_db_session_space_usage(short? session_id, int? database_id, long? user_objects_alloc_page_count, long? user_objects_dealloc_page_count, long? internal_objects_alloc_page_count, long? internal_objects_dealloc_page_count, long? user_objects_deferred_dealloc_page_count)
        {
            this.session_id = session_id;
            this.database_id = database_id;
            this.user_objects_alloc_page_count = user_objects_alloc_page_count;
            this.user_objects_dealloc_page_count = user_objects_dealloc_page_count;
            this.internal_objects_alloc_page_count = internal_objects_alloc_page_count;
            this.internal_objects_dealloc_page_count = internal_objects_dealloc_page_count;
            this.user_objects_deferred_dealloc_page_count = user_objects_deferred_dealloc_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, database_id, user_objects_alloc_page_count, user_objects_dealloc_page_count, internal_objects_alloc_page_count, internal_objects_dealloc_page_count, user_objects_deferred_dealloc_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (short?)items[0];
            database_id = (int?)items[1];
            user_objects_alloc_page_count = (long?)items[2];
            user_objects_dealloc_page_count = (long?)items[3];
            internal_objects_alloc_page_count = (long?)items[4];
            internal_objects_dealloc_page_count = (long?)items[5];
            user_objects_deferred_dealloc_page_count = (long?)items[6];
        }
    }

    [SqlView("sys", "dm_qn_subscriptions")]
    public partial class dm_qn_subscriptions : SqlViewProxy
    {
        [SqlColumn("id", 0), SqlTypeFacets("int", false)]
        public int id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 1), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("sid", 2), SqlTypeFacets("varbinary", false, 85)]
        public Byte[] sid
        {
            get;
            set;
        }

        [SqlColumn("object_id", 3), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("created", 4), SqlTypeFacets("datetime", false)]
        public DateTime created
        {
            get;
            set;
        }

        [SqlColumn("timeout", 5), SqlTypeFacets("int", false)]
        public int timeout
        {
            get;
            set;
        }

        [SqlColumn("status", 6), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        public dm_qn_subscriptions()
        {
        }

        public dm_qn_subscriptions(object[] items)
        {
            id = (int)items[0];
            database_id = (int)items[1];
            sid = (Byte[])items[2];
            object_id = (int)items[3];
            created = (DateTime)items[4];
            timeout = (int)items[5];
            status = (int)items[6];
        }

        public dm_qn_subscriptions(int id, int database_id, Byte[] sid, int object_id, DateTime created, int timeout, int status)
        {
            this.id = id;
            this.database_id = database_id;
            this.sid = sid;
            this.object_id = object_id;
            this.created = created;
            this.timeout = timeout;
            this.status = status;
        }

        public override object[] GetItemArray()
        {
            return new object[] { id, database_id, sid, object_id, created, timeout, status };
        }

        public override void SetItemArray(object[] items)
        {
            id = (int)items[0];
            database_id = (int)items[1];
            sid = (Byte[])items[2];
            object_id = (int)items[3];
            created = (DateTime)items[4];
            timeout = (int)items[5];
            status = (int)items[6];
        }
    }

    [SqlView("sys", "dm_hadr_cluster")]
    public partial class dm_hadr_cluster : SqlViewProxy
    {
        [SqlColumn("cluster_name", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string cluster_name
        {
            get;
            set;
        }

        [SqlColumn("quorum_type", 1), SqlTypeFacets("tinyint", false)]
        public byte quorum_type
        {
            get;
            set;
        }

        [SqlColumn("quorum_type_desc", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string quorum_type_desc
        {
            get;
            set;
        }

        [SqlColumn("quorum_state", 3), SqlTypeFacets("tinyint", false)]
        public byte quorum_state
        {
            get;
            set;
        }

        [SqlColumn("quorum_state_desc", 4), SqlTypeFacets("nvarchar", false, 120)]
        public string quorum_state_desc
        {
            get;
            set;
        }

        public dm_hadr_cluster()
        {
        }

        public dm_hadr_cluster(object[] items)
        {
            cluster_name = (string)items[0];
            quorum_type = (byte)items[1];
            quorum_type_desc = (string)items[2];
            quorum_state = (byte)items[3];
            quorum_state_desc = (string)items[4];
        }

        public dm_hadr_cluster(string cluster_name, byte quorum_type, string quorum_type_desc, byte quorum_state, string quorum_state_desc)
        {
            this.cluster_name = cluster_name;
            this.quorum_type = quorum_type;
            this.quorum_type_desc = quorum_type_desc;
            this.quorum_state = quorum_state;
            this.quorum_state_desc = quorum_state_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { cluster_name, quorum_type, quorum_type_desc, quorum_state, quorum_state_desc };
        }

        public override void SetItemArray(object[] items)
        {
            cluster_name = (string)items[0];
            quorum_type = (byte)items[1];
            quorum_type_desc = (string)items[2];
            quorum_state = (byte)items[3];
            quorum_state_desc = (string)items[4];
        }
    }

    [SqlView("sys", "dm_repl_tranhash")]
    public partial class dm_repl_tranhash : SqlViewProxy
    {
        [SqlColumn("buckets", 0), SqlTypeFacets("int", true)]
        public int? buckets
        {
            get;
            set;
        }

        [SqlColumn("hashed_trans", 1), SqlTypeFacets("int", true)]
        public int? hashed_trans
        {
            get;
            set;
        }

        [SqlColumn("completed_trans", 2), SqlTypeFacets("int", true)]
        public int? completed_trans
        {
            get;
            set;
        }

        [SqlColumn("compensated_trans", 3), SqlTypeFacets("int", true)]
        public int? compensated_trans
        {
            get;
            set;
        }

        [SqlColumn("first_begin_lsn", 4), SqlTypeFacets("nvarchar", true, 48)]
        public string first_begin_lsn
        {
            get;
            set;
        }

        [SqlColumn("last_commit_lsn", 5), SqlTypeFacets("nvarchar", true, 48)]
        public string last_commit_lsn
        {
            get;
            set;
        }

        public dm_repl_tranhash()
        {
        }

        public dm_repl_tranhash(object[] items)
        {
            buckets = (int?)items[0];
            hashed_trans = (int?)items[1];
            completed_trans = (int?)items[2];
            compensated_trans = (int?)items[3];
            first_begin_lsn = (string)items[4];
            last_commit_lsn = (string)items[5];
        }

        public dm_repl_tranhash(int? buckets, int? hashed_trans, int? completed_trans, int? compensated_trans, string first_begin_lsn, string last_commit_lsn)
        {
            this.buckets = buckets;
            this.hashed_trans = hashed_trans;
            this.completed_trans = completed_trans;
            this.compensated_trans = compensated_trans;
            this.first_begin_lsn = first_begin_lsn;
            this.last_commit_lsn = last_commit_lsn;
        }

        public override object[] GetItemArray()
        {
            return new object[] { buckets, hashed_trans, completed_trans, compensated_trans, first_begin_lsn, last_commit_lsn };
        }

        public override void SetItemArray(object[] items)
        {
            buckets = (int?)items[0];
            hashed_trans = (int?)items[1];
            completed_trans = (int?)items[2];
            compensated_trans = (int?)items[3];
            first_begin_lsn = (string)items[4];
            last_commit_lsn = (string)items[5];
        }
    }

    [SqlView("sys", "dm_fts_outstanding_batches")]
    public partial class dm_fts_outstanding_batches : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("catalog_id", 1), SqlTypeFacets("int", false)]
        public int catalog_id
        {
            get;
            set;
        }

        [SqlColumn("table_id", 2), SqlTypeFacets("int", false)]
        public int table_id
        {
            get;
            set;
        }

        [SqlColumn("batch_id", 3), SqlTypeFacets("int", false)]
        public int batch_id
        {
            get;
            set;
        }

        [SqlColumn("memory_address", 4), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_address
        {
            get;
            set;
        }

        [SqlColumn("crawl_memory_address", 5), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] crawl_memory_address
        {
            get;
            set;
        }

        [SqlColumn("memregion_memory_address", 6), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memregion_memory_address
        {
            get;
            set;
        }

        [SqlColumn("hr_batch", 7), SqlTypeFacets("int", false)]
        public int hr_batch
        {
            get;
            set;
        }

        [SqlColumn("is_retry_batch", 8), SqlTypeFacets("bit", false)]
        public bool is_retry_batch
        {
            get;
            set;
        }

        [SqlColumn("retry_hints", 9), SqlTypeFacets("int", false)]
        public int retry_hints
        {
            get;
            set;
        }

        [SqlColumn("retry_hints_description", 10), SqlTypeFacets("nvarchar", true, 128)]
        public string retry_hints_description
        {
            get;
            set;
        }

        [SqlColumn("doc_failed", 11), SqlTypeFacets("bigint", false)]
        public long doc_failed
        {
            get;
            set;
        }

        [SqlColumn("batch_timestamp", 12), SqlTypeFacets("binary", false, 8)]
        public Byte[] batch_timestamp
        {
            get;
            set;
        }

        public dm_fts_outstanding_batches()
        {
        }

        public dm_fts_outstanding_batches(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            batch_id = (int)items[3];
            memory_address = (Byte[])items[4];
            crawl_memory_address = (Byte[])items[5];
            memregion_memory_address = (Byte[])items[6];
            hr_batch = (int)items[7];
            is_retry_batch = (bool)items[8];
            retry_hints = (int)items[9];
            retry_hints_description = (string)items[10];
            doc_failed = (long)items[11];
            batch_timestamp = (Byte[])items[12];
        }

        public dm_fts_outstanding_batches(int database_id, int catalog_id, int table_id, int batch_id, Byte[] memory_address, Byte[] crawl_memory_address, Byte[] memregion_memory_address, int hr_batch, bool is_retry_batch, int retry_hints, string retry_hints_description, long doc_failed, Byte[] batch_timestamp)
        {
            this.database_id = database_id;
            this.catalog_id = catalog_id;
            this.table_id = table_id;
            this.batch_id = batch_id;
            this.memory_address = memory_address;
            this.crawl_memory_address = crawl_memory_address;
            this.memregion_memory_address = memregion_memory_address;
            this.hr_batch = hr_batch;
            this.is_retry_batch = is_retry_batch;
            this.retry_hints = retry_hints;
            this.retry_hints_description = retry_hints_description;
            this.doc_failed = doc_failed;
            this.batch_timestamp = batch_timestamp;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, catalog_id, table_id, batch_id, memory_address, crawl_memory_address, memregion_memory_address, hr_batch, is_retry_batch, retry_hints, retry_hints_description, doc_failed, batch_timestamp };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            catalog_id = (int)items[1];
            table_id = (int)items[2];
            batch_id = (int)items[3];
            memory_address = (Byte[])items[4];
            crawl_memory_address = (Byte[])items[5];
            memregion_memory_address = (Byte[])items[6];
            hr_batch = (int)items[7];
            is_retry_batch = (bool)items[8];
            retry_hints = (int)items[9];
            retry_hints_description = (string)items[10];
            doc_failed = (long)items[11];
            batch_timestamp = (Byte[])items[12];
        }
    }

    [SqlView("sys", "dm_tran_commit_table")]
    public partial class dm_tran_commit_table : SqlViewProxy
    {
        [SqlColumn("commit_ts", 0), SqlTypeFacets("bigint", true)]
        public long? commit_ts
        {
            get;
            set;
        }

        [SqlColumn("xdes_id", 1), SqlTypeFacets("bigint", true)]
        public long? xdes_id
        {
            get;
            set;
        }

        [SqlColumn("commit_lbn", 2), SqlTypeFacets("bigint", false)]
        public long commit_lbn
        {
            get;
            set;
        }

        [SqlColumn("commit_csn", 3), SqlTypeFacets("bigint", false)]
        public long commit_csn
        {
            get;
            set;
        }

        [SqlColumn("commit_time", 4), SqlTypeFacets("datetime", false)]
        public DateTime commit_time
        {
            get;
            set;
        }

        public dm_tran_commit_table()
        {
        }

        public dm_tran_commit_table(object[] items)
        {
            commit_ts = (long?)items[0];
            xdes_id = (long?)items[1];
            commit_lbn = (long)items[2];
            commit_csn = (long)items[3];
            commit_time = (DateTime)items[4];
        }

        public dm_tran_commit_table(long? commit_ts, long? xdes_id, long commit_lbn, long commit_csn, DateTime commit_time)
        {
            this.commit_ts = commit_ts;
            this.xdes_id = xdes_id;
            this.commit_lbn = commit_lbn;
            this.commit_csn = commit_csn;
            this.commit_time = commit_time;
        }

        public override object[] GetItemArray()
        {
            return new object[] { commit_ts, xdes_id, commit_lbn, commit_csn, commit_time };
        }

        public override void SetItemArray(object[] items)
        {
            commit_ts = (long?)items[0];
            xdes_id = (long?)items[1];
            commit_lbn = (long)items[2];
            commit_csn = (long)items[3];
            commit_time = (DateTime)items[4];
        }
    }

    [SqlView("sys", "dm_exec_requests")]
    public partial class dm_exec_requests : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("smallint", false)]
        public short session_id
        {
            get;
            set;
        }

        [SqlColumn("request_id", 1), SqlTypeFacets("int", false)]
        public int request_id
        {
            get;
            set;
        }

        [SqlColumn("start_time", 2), SqlTypeFacets("datetime", false)]
        public DateTime start_time
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("nvarchar", false, 60)]
        public string status
        {
            get;
            set;
        }

        [SqlColumn("command", 4), SqlTypeFacets("nvarchar", false, 64)]
        public string command
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 5), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_start_offset", 6), SqlTypeFacets("int", true)]
        public int? statement_start_offset
        {
            get;
            set;
        }

        [SqlColumn("statement_end_offset", 7), SqlTypeFacets("int", true)]
        public int? statement_end_offset
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 8), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("database_id", 9), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("user_id", 10), SqlTypeFacets("int", false)]
        public int user_id
        {
            get;
            set;
        }

        [SqlColumn("connection_id", 11), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? connection_id
        {
            get;
            set;
        }

        [SqlColumn("blocking_session_id", 12), SqlTypeFacets("smallint", true)]
        public short? blocking_session_id
        {
            get;
            set;
        }

        [SqlColumn("wait_type", 13), SqlTypeFacets("nvarchar", true, 120)]
        public string wait_type
        {
            get;
            set;
        }

        [SqlColumn("wait_time", 14), SqlTypeFacets("int", false)]
        public int wait_time
        {
            get;
            set;
        }

        [SqlColumn("last_wait_type", 15), SqlTypeFacets("nvarchar", false, 120)]
        public string last_wait_type
        {
            get;
            set;
        }

        [SqlColumn("wait_resource", 16), SqlTypeFacets("nvarchar", false, 512)]
        public string wait_resource
        {
            get;
            set;
        }

        [SqlColumn("open_transaction_count", 17), SqlTypeFacets("int", false)]
        public int open_transaction_count
        {
            get;
            set;
        }

        [SqlColumn("open_resultset_count", 18), SqlTypeFacets("int", false)]
        public int open_resultset_count
        {
            get;
            set;
        }

        [SqlColumn("transaction_id", 19), SqlTypeFacets("bigint", false)]
        public long transaction_id
        {
            get;
            set;
        }

        [SqlColumn("context_info", 20), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] context_info
        {
            get;
            set;
        }

        [SqlColumn("percent_complete", 21), SqlTypeFacets("real", false)]
        public float percent_complete
        {
            get;
            set;
        }

        [SqlColumn("estimated_completion_time", 22), SqlTypeFacets("bigint", false)]
        public long estimated_completion_time
        {
            get;
            set;
        }

        [SqlColumn("cpu_time", 23), SqlTypeFacets("int", false)]
        public int cpu_time
        {
            get;
            set;
        }

        [SqlColumn("total_elapsed_time", 24), SqlTypeFacets("int", false)]
        public int total_elapsed_time
        {
            get;
            set;
        }

        [SqlColumn("scheduler_id", 25), SqlTypeFacets("int", true)]
        public int? scheduler_id
        {
            get;
            set;
        }

        [SqlColumn("task_address", 26), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("reads", 27), SqlTypeFacets("bigint", false)]
        public long reads
        {
            get;
            set;
        }

        [SqlColumn("writes", 28), SqlTypeFacets("bigint", false)]
        public long writes
        {
            get;
            set;
        }

        [SqlColumn("logical_reads", 29), SqlTypeFacets("bigint", false)]
        public long logical_reads
        {
            get;
            set;
        }

        [SqlColumn("text_size", 30), SqlTypeFacets("int", false)]
        public int text_size
        {
            get;
            set;
        }

        [SqlColumn("language", 31), SqlTypeFacets("nvarchar", true, 256)]
        public string language
        {
            get;
            set;
        }

        [SqlColumn("date_format", 32), SqlTypeFacets("nvarchar", true, 6)]
        public string date_format
        {
            get;
            set;
        }

        [SqlColumn("date_first", 33), SqlTypeFacets("smallint", false)]
        public short date_first
        {
            get;
            set;
        }

        [SqlColumn("quoted_identifier", 34), SqlTypeFacets("bit", false)]
        public bool quoted_identifier
        {
            get;
            set;
        }

        [SqlColumn("arithabort", 35), SqlTypeFacets("bit", false)]
        public bool arithabort
        {
            get;
            set;
        }

        [SqlColumn("ansi_null_dflt_on", 36), SqlTypeFacets("bit", false)]
        public bool ansi_null_dflt_on
        {
            get;
            set;
        }

        [SqlColumn("ansi_defaults", 37), SqlTypeFacets("bit", false)]
        public bool ansi_defaults
        {
            get;
            set;
        }

        [SqlColumn("ansi_warnings", 38), SqlTypeFacets("bit", false)]
        public bool ansi_warnings
        {
            get;
            set;
        }

        [SqlColumn("ansi_padding", 39), SqlTypeFacets("bit", false)]
        public bool ansi_padding
        {
            get;
            set;
        }

        [SqlColumn("ansi_nulls", 40), SqlTypeFacets("bit", false)]
        public bool ansi_nulls
        {
            get;
            set;
        }

        [SqlColumn("concat_null_yields_null", 41), SqlTypeFacets("bit", false)]
        public bool concat_null_yields_null
        {
            get;
            set;
        }

        [SqlColumn("transaction_isolation_level", 42), SqlTypeFacets("smallint", false)]
        public short transaction_isolation_level
        {
            get;
            set;
        }

        [SqlColumn("lock_timeout", 43), SqlTypeFacets("int", false)]
        public int lock_timeout
        {
            get;
            set;
        }

        [SqlColumn("deadlock_priority", 44), SqlTypeFacets("int", false)]
        public int deadlock_priority
        {
            get;
            set;
        }

        [SqlColumn("row_count", 45), SqlTypeFacets("bigint", false)]
        public long row_count
        {
            get;
            set;
        }

        [SqlColumn("prev_error", 46), SqlTypeFacets("int", false)]
        public int prev_error
        {
            get;
            set;
        }

        [SqlColumn("nest_level", 47), SqlTypeFacets("int", false)]
        public int nest_level
        {
            get;
            set;
        }

        [SqlColumn("granted_query_memory", 48), SqlTypeFacets("int", false)]
        public int granted_query_memory
        {
            get;
            set;
        }

        [SqlColumn("executing_managed_code", 49), SqlTypeFacets("bit", false)]
        public bool executing_managed_code
        {
            get;
            set;
        }

        [SqlColumn("group_id", 50), SqlTypeFacets("int", false)]
        public int group_id
        {
            get;
            set;
        }

        [SqlColumn("query_hash", 51), SqlTypeFacets("binary", true, 8)]
        public Byte[] query_hash
        {
            get;
            set;
        }

        [SqlColumn("query_plan_hash", 52), SqlTypeFacets("binary", true, 8)]
        public Byte[] query_plan_hash
        {
            get;
            set;
        }

        [SqlColumn("statement_sql_handle", 53), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] statement_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_context_id", 54), SqlTypeFacets("bigint", true)]
        public long? statement_context_id
        {
            get;
            set;
        }

        public dm_exec_requests()
        {
        }

        public dm_exec_requests(object[] items)
        {
            session_id = (short)items[0];
            request_id = (int)items[1];
            start_time = (DateTime)items[2];
            status = (string)items[3];
            command = (string)items[4];
            sql_handle = (Byte[])items[5];
            statement_start_offset = (int?)items[6];
            statement_end_offset = (int?)items[7];
            plan_handle = (Byte[])items[8];
            database_id = (short)items[9];
            user_id = (int)items[10];
            connection_id = (Guid?)items[11];
            blocking_session_id = (short?)items[12];
            wait_type = (string)items[13];
            wait_time = (int)items[14];
            last_wait_type = (string)items[15];
            wait_resource = (string)items[16];
            open_transaction_count = (int)items[17];
            open_resultset_count = (int)items[18];
            transaction_id = (long)items[19];
            context_info = (Byte[])items[20];
            percent_complete = (float)items[21];
            estimated_completion_time = (long)items[22];
            cpu_time = (int)items[23];
            total_elapsed_time = (int)items[24];
            scheduler_id = (int?)items[25];
            task_address = (Byte[])items[26];
            reads = (long)items[27];
            writes = (long)items[28];
            logical_reads = (long)items[29];
            text_size = (int)items[30];
            language = (string)items[31];
            date_format = (string)items[32];
            date_first = (short)items[33];
            quoted_identifier = (bool)items[34];
            arithabort = (bool)items[35];
            ansi_null_dflt_on = (bool)items[36];
            ansi_defaults = (bool)items[37];
            ansi_warnings = (bool)items[38];
            ansi_padding = (bool)items[39];
            ansi_nulls = (bool)items[40];
            concat_null_yields_null = (bool)items[41];
            transaction_isolation_level = (short)items[42];
            lock_timeout = (int)items[43];
            deadlock_priority = (int)items[44];
            row_count = (long)items[45];
            prev_error = (int)items[46];
            nest_level = (int)items[47];
            granted_query_memory = (int)items[48];
            executing_managed_code = (bool)items[49];
            group_id = (int)items[50];
            query_hash = (Byte[])items[51];
            query_plan_hash = (Byte[])items[52];
            statement_sql_handle = (Byte[])items[53];
            statement_context_id = (long?)items[54];
        }

        public dm_exec_requests(short session_id, int request_id, DateTime start_time, string status, string command, Byte[] sql_handle, int? statement_start_offset, int? statement_end_offset, Byte[] plan_handle, short database_id, int user_id, Guid? connection_id, short? blocking_session_id, string wait_type, int wait_time, string last_wait_type, string wait_resource, int open_transaction_count, int open_resultset_count, long transaction_id, Byte[] context_info, float percent_complete, long estimated_completion_time, int cpu_time, int total_elapsed_time, int? scheduler_id, Byte[] task_address, long reads, long writes, long logical_reads, int text_size, string language, string date_format, short date_first, bool quoted_identifier, bool arithabort, bool ansi_null_dflt_on, bool ansi_defaults, bool ansi_warnings, bool ansi_padding, bool ansi_nulls, bool concat_null_yields_null, short transaction_isolation_level, int lock_timeout, int deadlock_priority, long row_count, int prev_error, int nest_level, int granted_query_memory, bool executing_managed_code, int group_id, Byte[] query_hash, Byte[] query_plan_hash, Byte[] statement_sql_handle, long? statement_context_id)
        {
            this.session_id = session_id;
            this.request_id = request_id;
            this.start_time = start_time;
            this.status = status;
            this.command = command;
            this.sql_handle = sql_handle;
            this.statement_start_offset = statement_start_offset;
            this.statement_end_offset = statement_end_offset;
            this.plan_handle = plan_handle;
            this.database_id = database_id;
            this.user_id = user_id;
            this.connection_id = connection_id;
            this.blocking_session_id = blocking_session_id;
            this.wait_type = wait_type;
            this.wait_time = wait_time;
            this.last_wait_type = last_wait_type;
            this.wait_resource = wait_resource;
            this.open_transaction_count = open_transaction_count;
            this.open_resultset_count = open_resultset_count;
            this.transaction_id = transaction_id;
            this.context_info = context_info;
            this.percent_complete = percent_complete;
            this.estimated_completion_time = estimated_completion_time;
            this.cpu_time = cpu_time;
            this.total_elapsed_time = total_elapsed_time;
            this.scheduler_id = scheduler_id;
            this.task_address = task_address;
            this.reads = reads;
            this.writes = writes;
            this.logical_reads = logical_reads;
            this.text_size = text_size;
            this.language = language;
            this.date_format = date_format;
            this.date_first = date_first;
            this.quoted_identifier = quoted_identifier;
            this.arithabort = arithabort;
            this.ansi_null_dflt_on = ansi_null_dflt_on;
            this.ansi_defaults = ansi_defaults;
            this.ansi_warnings = ansi_warnings;
            this.ansi_padding = ansi_padding;
            this.ansi_nulls = ansi_nulls;
            this.concat_null_yields_null = concat_null_yields_null;
            this.transaction_isolation_level = transaction_isolation_level;
            this.lock_timeout = lock_timeout;
            this.deadlock_priority = deadlock_priority;
            this.row_count = row_count;
            this.prev_error = prev_error;
            this.nest_level = nest_level;
            this.granted_query_memory = granted_query_memory;
            this.executing_managed_code = executing_managed_code;
            this.group_id = group_id;
            this.query_hash = query_hash;
            this.query_plan_hash = query_plan_hash;
            this.statement_sql_handle = statement_sql_handle;
            this.statement_context_id = statement_context_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, request_id, start_time, status, command, sql_handle, statement_start_offset, statement_end_offset, plan_handle, database_id, user_id, connection_id, blocking_session_id, wait_type, wait_time, last_wait_type, wait_resource, open_transaction_count, open_resultset_count, transaction_id, context_info, percent_complete, estimated_completion_time, cpu_time, total_elapsed_time, scheduler_id, task_address, reads, writes, logical_reads, text_size, language, date_format, date_first, quoted_identifier, arithabort, ansi_null_dflt_on, ansi_defaults, ansi_warnings, ansi_padding, ansi_nulls, concat_null_yields_null, transaction_isolation_level, lock_timeout, deadlock_priority, row_count, prev_error, nest_level, granted_query_memory, executing_managed_code, group_id, query_hash, query_plan_hash, statement_sql_handle, statement_context_id };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (short)items[0];
            request_id = (int)items[1];
            start_time = (DateTime)items[2];
            status = (string)items[3];
            command = (string)items[4];
            sql_handle = (Byte[])items[5];
            statement_start_offset = (int?)items[6];
            statement_end_offset = (int?)items[7];
            plan_handle = (Byte[])items[8];
            database_id = (short)items[9];
            user_id = (int)items[10];
            connection_id = (Guid?)items[11];
            blocking_session_id = (short?)items[12];
            wait_type = (string)items[13];
            wait_time = (int)items[14];
            last_wait_type = (string)items[15];
            wait_resource = (string)items[16];
            open_transaction_count = (int)items[17];
            open_resultset_count = (int)items[18];
            transaction_id = (long)items[19];
            context_info = (Byte[])items[20];
            percent_complete = (float)items[21];
            estimated_completion_time = (long)items[22];
            cpu_time = (int)items[23];
            total_elapsed_time = (int)items[24];
            scheduler_id = (int?)items[25];
            task_address = (Byte[])items[26];
            reads = (long)items[27];
            writes = (long)items[28];
            logical_reads = (long)items[29];
            text_size = (int)items[30];
            language = (string)items[31];
            date_format = (string)items[32];
            date_first = (short)items[33];
            quoted_identifier = (bool)items[34];
            arithabort = (bool)items[35];
            ansi_null_dflt_on = (bool)items[36];
            ansi_defaults = (bool)items[37];
            ansi_warnings = (bool)items[38];
            ansi_padding = (bool)items[39];
            ansi_nulls = (bool)items[40];
            concat_null_yields_null = (bool)items[41];
            transaction_isolation_level = (short)items[42];
            lock_timeout = (int)items[43];
            deadlock_priority = (int)items[44];
            row_count = (long)items[45];
            prev_error = (int)items[46];
            nest_level = (int)items[47];
            granted_query_memory = (int)items[48];
            executing_managed_code = (bool)items[49];
            group_id = (int)items[50];
            query_hash = (Byte[])items[51];
            query_plan_hash = (Byte[])items[52];
            statement_sql_handle = (Byte[])items[53];
            statement_context_id = (long?)items[54];
        }
    }

    [SqlView("sys", "dm_os_threads")]
    public partial class dm_os_threads : SqlViewProxy
    {
        [SqlColumn("thread_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] thread_address
        {
            get;
            set;
        }

        [SqlColumn("started_by_sqlservr", 1), SqlTypeFacets("bit", false)]
        public bool started_by_sqlservr
        {
            get;
            set;
        }

        [SqlColumn("os_thread_id", 2), SqlTypeFacets("int", false)]
        public int os_thread_id
        {
            get;
            set;
        }

        [SqlColumn("status", 3), SqlTypeFacets("int", false)]
        public int status
        {
            get;
            set;
        }

        [SqlColumn("instruction_address", 4), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] instruction_address
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 5), SqlTypeFacets("datetime", true)]
        public DateTime? creation_time
        {
            get;
            set;
        }

        [SqlColumn("kernel_time", 6), SqlTypeFacets("bigint", true)]
        public long? kernel_time
        {
            get;
            set;
        }

        [SqlColumn("usermode_time", 7), SqlTypeFacets("bigint", true)]
        public long? usermode_time
        {
            get;
            set;
        }

        [SqlColumn("stack_base_address", 8), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] stack_base_address
        {
            get;
            set;
        }

        [SqlColumn("stack_end_address", 9), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] stack_end_address
        {
            get;
            set;
        }

        [SqlColumn("stack_bytes_committed", 10), SqlTypeFacets("int", false)]
        public int stack_bytes_committed
        {
            get;
            set;
        }

        [SqlColumn("stack_bytes_used", 11), SqlTypeFacets("int", true)]
        public int? stack_bytes_used
        {
            get;
            set;
        }

        [SqlColumn("affinity", 12), SqlTypeFacets("bigint", false)]
        public long affinity
        {
            get;
            set;
        }

        [SqlColumn("priority", 13), SqlTypeFacets("int", true)]
        public int? priority
        {
            get;
            set;
        }

        [SqlColumn("locale", 14), SqlTypeFacets("int", false)]
        public int locale
        {
            get;
            set;
        }

        [SqlColumn("token", 15), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] token
        {
            get;
            set;
        }

        [SqlColumn("is_impersonating", 16), SqlTypeFacets("int", false)]
        public int is_impersonating
        {
            get;
            set;
        }

        [SqlColumn("is_waiting_on_loader_lock", 17), SqlTypeFacets("int", false)]
        public int is_waiting_on_loader_lock
        {
            get;
            set;
        }

        [SqlColumn("fiber_data", 18), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] fiber_data
        {
            get;
            set;
        }

        [SqlColumn("thread_handle", 19), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] thread_handle
        {
            get;
            set;
        }

        [SqlColumn("event_handle", 20), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] event_handle
        {
            get;
            set;
        }

        [SqlColumn("scheduler_address", 21), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] scheduler_address
        {
            get;
            set;
        }

        [SqlColumn("worker_address", 22), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] worker_address
        {
            get;
            set;
        }

        [SqlColumn("fiber_context_address", 23), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] fiber_context_address
        {
            get;
            set;
        }

        [SqlColumn("self_address", 24), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] self_address
        {
            get;
            set;
        }

        [SqlColumn("processor_group", 25), SqlTypeFacets("smallint", false)]
        public short processor_group
        {
            get;
            set;
        }

        public dm_os_threads()
        {
        }

        public dm_os_threads(object[] items)
        {
            thread_address = (Byte[])items[0];
            started_by_sqlservr = (bool)items[1];
            os_thread_id = (int)items[2];
            status = (int)items[3];
            instruction_address = (Byte[])items[4];
            creation_time = (DateTime?)items[5];
            kernel_time = (long?)items[6];
            usermode_time = (long?)items[7];
            stack_base_address = (Byte[])items[8];
            stack_end_address = (Byte[])items[9];
            stack_bytes_committed = (int)items[10];
            stack_bytes_used = (int?)items[11];
            affinity = (long)items[12];
            priority = (int?)items[13];
            locale = (int)items[14];
            token = (Byte[])items[15];
            is_impersonating = (int)items[16];
            is_waiting_on_loader_lock = (int)items[17];
            fiber_data = (Byte[])items[18];
            thread_handle = (Byte[])items[19];
            event_handle = (Byte[])items[20];
            scheduler_address = (Byte[])items[21];
            worker_address = (Byte[])items[22];
            fiber_context_address = (Byte[])items[23];
            self_address = (Byte[])items[24];
            processor_group = (short)items[25];
        }

        public dm_os_threads(Byte[] thread_address, bool started_by_sqlservr, int os_thread_id, int status, Byte[] instruction_address, DateTime? creation_time, long? kernel_time, long? usermode_time, Byte[] stack_base_address, Byte[] stack_end_address, int stack_bytes_committed, int? stack_bytes_used, long affinity, int? priority, int locale, Byte[] token, int is_impersonating, int is_waiting_on_loader_lock, Byte[] fiber_data, Byte[] thread_handle, Byte[] event_handle, Byte[] scheduler_address, Byte[] worker_address, Byte[] fiber_context_address, Byte[] self_address, short processor_group)
        {
            this.thread_address = thread_address;
            this.started_by_sqlservr = started_by_sqlservr;
            this.os_thread_id = os_thread_id;
            this.status = status;
            this.instruction_address = instruction_address;
            this.creation_time = creation_time;
            this.kernel_time = kernel_time;
            this.usermode_time = usermode_time;
            this.stack_base_address = stack_base_address;
            this.stack_end_address = stack_end_address;
            this.stack_bytes_committed = stack_bytes_committed;
            this.stack_bytes_used = stack_bytes_used;
            this.affinity = affinity;
            this.priority = priority;
            this.locale = locale;
            this.token = token;
            this.is_impersonating = is_impersonating;
            this.is_waiting_on_loader_lock = is_waiting_on_loader_lock;
            this.fiber_data = fiber_data;
            this.thread_handle = thread_handle;
            this.event_handle = event_handle;
            this.scheduler_address = scheduler_address;
            this.worker_address = worker_address;
            this.fiber_context_address = fiber_context_address;
            this.self_address = self_address;
            this.processor_group = processor_group;
        }

        public override object[] GetItemArray()
        {
            return new object[] { thread_address, started_by_sqlservr, os_thread_id, status, instruction_address, creation_time, kernel_time, usermode_time, stack_base_address, stack_end_address, stack_bytes_committed, stack_bytes_used, affinity, priority, locale, token, is_impersonating, is_waiting_on_loader_lock, fiber_data, thread_handle, event_handle, scheduler_address, worker_address, fiber_context_address, self_address, processor_group };
        }

        public override void SetItemArray(object[] items)
        {
            thread_address = (Byte[])items[0];
            started_by_sqlservr = (bool)items[1];
            os_thread_id = (int)items[2];
            status = (int)items[3];
            instruction_address = (Byte[])items[4];
            creation_time = (DateTime?)items[5];
            kernel_time = (long?)items[6];
            usermode_time = (long?)items[7];
            stack_base_address = (Byte[])items[8];
            stack_end_address = (Byte[])items[9];
            stack_bytes_committed = (int)items[10];
            stack_bytes_used = (int?)items[11];
            affinity = (long)items[12];
            priority = (int?)items[13];
            locale = (int)items[14];
            token = (Byte[])items[15];
            is_impersonating = (int)items[16];
            is_waiting_on_loader_lock = (int)items[17];
            fiber_data = (Byte[])items[18];
            thread_handle = (Byte[])items[19];
            event_handle = (Byte[])items[20];
            scheduler_address = (Byte[])items[21];
            worker_address = (Byte[])items[22];
            fiber_context_address = (Byte[])items[23];
            self_address = (Byte[])items[24];
            processor_group = (short)items[25];
        }
    }

    [SqlView("sys", "dm_exec_query_profiles")]
    public partial class dm_exec_query_profiles : SqlViewProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("request_id", 1), SqlTypeFacets("int", true)]
        public int? request_id
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 2), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("plan_handle", 3), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] plan_handle
        {
            get;
            set;
        }

        [SqlColumn("physical_operator_name", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string physical_operator_name
        {
            get;
            set;
        }

        [SqlColumn("node_id", 5), SqlTypeFacets("int", true)]
        public int? node_id
        {
            get;
            set;
        }

        [SqlColumn("thread_id", 6), SqlTypeFacets("int", true)]
        public int? thread_id
        {
            get;
            set;
        }

        [SqlColumn("task_address", 7), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("row_count", 8), SqlTypeFacets("bigint", true)]
        public long? row_count
        {
            get;
            set;
        }

        [SqlColumn("rewind_count", 9), SqlTypeFacets("bigint", true)]
        public long? rewind_count
        {
            get;
            set;
        }

        [SqlColumn("rebind_count", 10), SqlTypeFacets("bigint", true)]
        public long? rebind_count
        {
            get;
            set;
        }

        [SqlColumn("end_of_scan_count", 11), SqlTypeFacets("bigint", true)]
        public long? end_of_scan_count
        {
            get;
            set;
        }

        [SqlColumn("estimate_row_count", 12), SqlTypeFacets("bigint", true)]
        public long? estimate_row_count
        {
            get;
            set;
        }

        [SqlColumn("first_active_time", 13), SqlTypeFacets("bigint", true)]
        public long? first_active_time
        {
            get;
            set;
        }

        [SqlColumn("last_active_time", 14), SqlTypeFacets("bigint", true)]
        public long? last_active_time
        {
            get;
            set;
        }

        [SqlColumn("open_time", 15), SqlTypeFacets("bigint", true)]
        public long? open_time
        {
            get;
            set;
        }

        [SqlColumn("first_row_time", 16), SqlTypeFacets("bigint", true)]
        public long? first_row_time
        {
            get;
            set;
        }

        [SqlColumn("last_row_time", 17), SqlTypeFacets("bigint", true)]
        public long? last_row_time
        {
            get;
            set;
        }

        [SqlColumn("close_time", 18), SqlTypeFacets("bigint", true)]
        public long? close_time
        {
            get;
            set;
        }

        [SqlColumn("elapsed_time_ms", 19), SqlTypeFacets("bigint", true)]
        public long? elapsed_time_ms
        {
            get;
            set;
        }

        [SqlColumn("cpu_time_ms", 20), SqlTypeFacets("bigint", true)]
        public long? cpu_time_ms
        {
            get;
            set;
        }

        [SqlColumn("database_id", 21), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 22), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 23), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("scan_count", 24), SqlTypeFacets("bigint", true)]
        public long? scan_count
        {
            get;
            set;
        }

        [SqlColumn("logical_read_count", 25), SqlTypeFacets("bigint", true)]
        public long? logical_read_count
        {
            get;
            set;
        }

        [SqlColumn("physical_read_count", 26), SqlTypeFacets("bigint", true)]
        public long? physical_read_count
        {
            get;
            set;
        }

        [SqlColumn("read_ahead_count", 27), SqlTypeFacets("bigint", true)]
        public long? read_ahead_count
        {
            get;
            set;
        }

        [SqlColumn("write_page_count", 28), SqlTypeFacets("bigint", true)]
        public long? write_page_count
        {
            get;
            set;
        }

        [SqlColumn("lob_logical_read_count", 29), SqlTypeFacets("bigint", true)]
        public long? lob_logical_read_count
        {
            get;
            set;
        }

        [SqlColumn("lob_physical_read_count", 30), SqlTypeFacets("bigint", true)]
        public long? lob_physical_read_count
        {
            get;
            set;
        }

        [SqlColumn("lob_read_ahead_count", 31), SqlTypeFacets("bigint", true)]
        public long? lob_read_ahead_count
        {
            get;
            set;
        }

        [SqlColumn("segment_read_count", 32), SqlTypeFacets("int", true)]
        public int? segment_read_count
        {
            get;
            set;
        }

        [SqlColumn("segment_skip_count", 33), SqlTypeFacets("int", true)]
        public int? segment_skip_count
        {
            get;
            set;
        }

        public dm_exec_query_profiles()
        {
        }

        public dm_exec_query_profiles(object[] items)
        {
            session_id = (short?)items[0];
            request_id = (int?)items[1];
            sql_handle = (Byte[])items[2];
            plan_handle = (Byte[])items[3];
            physical_operator_name = (string)items[4];
            node_id = (int?)items[5];
            thread_id = (int?)items[6];
            task_address = (Byte[])items[7];
            row_count = (long?)items[8];
            rewind_count = (long?)items[9];
            rebind_count = (long?)items[10];
            end_of_scan_count = (long?)items[11];
            estimate_row_count = (long?)items[12];
            first_active_time = (long?)items[13];
            last_active_time = (long?)items[14];
            open_time = (long?)items[15];
            first_row_time = (long?)items[16];
            last_row_time = (long?)items[17];
            close_time = (long?)items[18];
            elapsed_time_ms = (long?)items[19];
            cpu_time_ms = (long?)items[20];
            database_id = (short?)items[21];
            object_id = (int?)items[22];
            index_id = (int?)items[23];
            scan_count = (long?)items[24];
            logical_read_count = (long?)items[25];
            physical_read_count = (long?)items[26];
            read_ahead_count = (long?)items[27];
            write_page_count = (long?)items[28];
            lob_logical_read_count = (long?)items[29];
            lob_physical_read_count = (long?)items[30];
            lob_read_ahead_count = (long?)items[31];
            segment_read_count = (int?)items[32];
            segment_skip_count = (int?)items[33];
        }

        public dm_exec_query_profiles(short? session_id, int? request_id, Byte[] sql_handle, Byte[] plan_handle, string physical_operator_name, int? node_id, int? thread_id, Byte[] task_address, long? row_count, long? rewind_count, long? rebind_count, long? end_of_scan_count, long? estimate_row_count, long? first_active_time, long? last_active_time, long? open_time, long? first_row_time, long? last_row_time, long? close_time, long? elapsed_time_ms, long? cpu_time_ms, short? database_id, int? object_id, int? index_id, long? scan_count, long? logical_read_count, long? physical_read_count, long? read_ahead_count, long? write_page_count, long? lob_logical_read_count, long? lob_physical_read_count, long? lob_read_ahead_count, int? segment_read_count, int? segment_skip_count)
        {
            this.session_id = session_id;
            this.request_id = request_id;
            this.sql_handle = sql_handle;
            this.plan_handle = plan_handle;
            this.physical_operator_name = physical_operator_name;
            this.node_id = node_id;
            this.thread_id = thread_id;
            this.task_address = task_address;
            this.row_count = row_count;
            this.rewind_count = rewind_count;
            this.rebind_count = rebind_count;
            this.end_of_scan_count = end_of_scan_count;
            this.estimate_row_count = estimate_row_count;
            this.first_active_time = first_active_time;
            this.last_active_time = last_active_time;
            this.open_time = open_time;
            this.first_row_time = first_row_time;
            this.last_row_time = last_row_time;
            this.close_time = close_time;
            this.elapsed_time_ms = elapsed_time_ms;
            this.cpu_time_ms = cpu_time_ms;
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.scan_count = scan_count;
            this.logical_read_count = logical_read_count;
            this.physical_read_count = physical_read_count;
            this.read_ahead_count = read_ahead_count;
            this.write_page_count = write_page_count;
            this.lob_logical_read_count = lob_logical_read_count;
            this.lob_physical_read_count = lob_physical_read_count;
            this.lob_read_ahead_count = lob_read_ahead_count;
            this.segment_read_count = segment_read_count;
            this.segment_skip_count = segment_skip_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, request_id, sql_handle, plan_handle, physical_operator_name, node_id, thread_id, task_address, row_count, rewind_count, rebind_count, end_of_scan_count, estimate_row_count, first_active_time, last_active_time, open_time, first_row_time, last_row_time, close_time, elapsed_time_ms, cpu_time_ms, database_id, object_id, index_id, scan_count, logical_read_count, physical_read_count, read_ahead_count, write_page_count, lob_logical_read_count, lob_physical_read_count, lob_read_ahead_count, segment_read_count, segment_skip_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (short?)items[0];
            request_id = (int?)items[1];
            sql_handle = (Byte[])items[2];
            plan_handle = (Byte[])items[3];
            physical_operator_name = (string)items[4];
            node_id = (int?)items[5];
            thread_id = (int?)items[6];
            task_address = (Byte[])items[7];
            row_count = (long?)items[8];
            rewind_count = (long?)items[9];
            rebind_count = (long?)items[10];
            end_of_scan_count = (long?)items[11];
            estimate_row_count = (long?)items[12];
            first_active_time = (long?)items[13];
            last_active_time = (long?)items[14];
            open_time = (long?)items[15];
            first_row_time = (long?)items[16];
            last_row_time = (long?)items[17];
            close_time = (long?)items[18];
            elapsed_time_ms = (long?)items[19];
            cpu_time_ms = (long?)items[20];
            database_id = (short?)items[21];
            object_id = (int?)items[22];
            index_id = (int?)items[23];
            scan_count = (long?)items[24];
            logical_read_count = (long?)items[25];
            physical_read_count = (long?)items[26];
            read_ahead_count = (long?)items[27];
            write_page_count = (long?)items[28];
            lob_logical_read_count = (long?)items[29];
            lob_physical_read_count = (long?)items[30];
            lob_read_ahead_count = (long?)items[31];
            segment_read_count = (int?)items[32];
            segment_skip_count = (int?)items[33];
        }
    }

    [SqlView("sys", "dm_xtp_transaction_stats")]
    public partial class dm_xtp_transaction_stats : SqlViewProxy
    {
        [SqlColumn("total_count", 0), SqlTypeFacets("bigint", false)]
        public long total_count
        {
            get;
            set;
        }

        [SqlColumn("read_only_count", 1), SqlTypeFacets("bigint", false)]
        public long read_only_count
        {
            get;
            set;
        }

        [SqlColumn("total_aborts", 2), SqlTypeFacets("bigint", false)]
        public long total_aborts
        {
            get;
            set;
        }

        [SqlColumn("system_aborts", 3), SqlTypeFacets("bigint", false)]
        public long system_aborts
        {
            get;
            set;
        }

        [SqlColumn("validation_failures", 4), SqlTypeFacets("bigint", false)]
        public long validation_failures
        {
            get;
            set;
        }

        [SqlColumn("dependencies_taken", 5), SqlTypeFacets("bigint", false)]
        public long dependencies_taken
        {
            get;
            set;
        }

        [SqlColumn("dependencies_failed", 6), SqlTypeFacets("bigint", false)]
        public long dependencies_failed
        {
            get;
            set;
        }

        [SqlColumn("savepoint_create", 7), SqlTypeFacets("bigint", false)]
        public long savepoint_create
        {
            get;
            set;
        }

        [SqlColumn("savepoint_rollbacks", 8), SqlTypeFacets("bigint", false)]
        public long savepoint_rollbacks
        {
            get;
            set;
        }

        [SqlColumn("savepoint_refreshes", 9), SqlTypeFacets("bigint", false)]
        public long savepoint_refreshes
        {
            get;
            set;
        }

        [SqlColumn("log_bytes_written", 10), SqlTypeFacets("bigint", false)]
        public long log_bytes_written
        {
            get;
            set;
        }

        [SqlColumn("log_IO_count", 11), SqlTypeFacets("bigint", false)]
        public long log_IO_count
        {
            get;
            set;
        }

        [SqlColumn("phantom_scans_started", 12), SqlTypeFacets("bigint", false)]
        public long phantom_scans_started
        {
            get;
            set;
        }

        [SqlColumn("phantom_scans_retries", 13), SqlTypeFacets("bigint", false)]
        public long phantom_scans_retries
        {
            get;
            set;
        }

        [SqlColumn("phantom_rows_touched", 14), SqlTypeFacets("bigint", false)]
        public long phantom_rows_touched
        {
            get;
            set;
        }

        [SqlColumn("phantom_rows_expiring", 15), SqlTypeFacets("bigint", false)]
        public long phantom_rows_expiring
        {
            get;
            set;
        }

        [SqlColumn("phantom_rows_expired", 16), SqlTypeFacets("bigint", false)]
        public long phantom_rows_expired
        {
            get;
            set;
        }

        [SqlColumn("phantom_rows_expired_removed", 17), SqlTypeFacets("bigint", false)]
        public long phantom_rows_expired_removed
        {
            get;
            set;
        }

        [SqlColumn("scans_started", 18), SqlTypeFacets("bigint", false)]
        public long scans_started
        {
            get;
            set;
        }

        [SqlColumn("scans_retried", 19), SqlTypeFacets("bigint", false)]
        public long scans_retried
        {
            get;
            set;
        }

        [SqlColumn("rows_returned", 20), SqlTypeFacets("bigint", false)]
        public long rows_returned
        {
            get;
            set;
        }

        [SqlColumn("rows_touched", 21), SqlTypeFacets("bigint", false)]
        public long rows_touched
        {
            get;
            set;
        }

        [SqlColumn("rows_expiring", 22), SqlTypeFacets("bigint", false)]
        public long rows_expiring
        {
            get;
            set;
        }

        [SqlColumn("rows_expired", 23), SqlTypeFacets("bigint", false)]
        public long rows_expired
        {
            get;
            set;
        }

        [SqlColumn("rows_expired_removed", 24), SqlTypeFacets("bigint", false)]
        public long rows_expired_removed
        {
            get;
            set;
        }

        [SqlColumn("row_insert_attempts", 25), SqlTypeFacets("bigint", false)]
        public long row_insert_attempts
        {
            get;
            set;
        }

        [SqlColumn("row_update_attempts", 26), SqlTypeFacets("bigint", false)]
        public long row_update_attempts
        {
            get;
            set;
        }

        [SqlColumn("row_delete_attempts", 27), SqlTypeFacets("bigint", false)]
        public long row_delete_attempts
        {
            get;
            set;
        }

        [SqlColumn("write_conflicts", 28), SqlTypeFacets("bigint", false)]
        public long write_conflicts
        {
            get;
            set;
        }

        [SqlColumn("unique_constraint_violations", 29), SqlTypeFacets("bigint", false)]
        public long unique_constraint_violations
        {
            get;
            set;
        }

        public dm_xtp_transaction_stats()
        {
        }

        public dm_xtp_transaction_stats(object[] items)
        {
            total_count = (long)items[0];
            read_only_count = (long)items[1];
            total_aborts = (long)items[2];
            system_aborts = (long)items[3];
            validation_failures = (long)items[4];
            dependencies_taken = (long)items[5];
            dependencies_failed = (long)items[6];
            savepoint_create = (long)items[7];
            savepoint_rollbacks = (long)items[8];
            savepoint_refreshes = (long)items[9];
            log_bytes_written = (long)items[10];
            log_IO_count = (long)items[11];
            phantom_scans_started = (long)items[12];
            phantom_scans_retries = (long)items[13];
            phantom_rows_touched = (long)items[14];
            phantom_rows_expiring = (long)items[15];
            phantom_rows_expired = (long)items[16];
            phantom_rows_expired_removed = (long)items[17];
            scans_started = (long)items[18];
            scans_retried = (long)items[19];
            rows_returned = (long)items[20];
            rows_touched = (long)items[21];
            rows_expiring = (long)items[22];
            rows_expired = (long)items[23];
            rows_expired_removed = (long)items[24];
            row_insert_attempts = (long)items[25];
            row_update_attempts = (long)items[26];
            row_delete_attempts = (long)items[27];
            write_conflicts = (long)items[28];
            unique_constraint_violations = (long)items[29];
        }

        public dm_xtp_transaction_stats(long total_count, long read_only_count, long total_aborts, long system_aborts, long validation_failures, long dependencies_taken, long dependencies_failed, long savepoint_create, long savepoint_rollbacks, long savepoint_refreshes, long log_bytes_written, long log_IO_count, long phantom_scans_started, long phantom_scans_retries, long phantom_rows_touched, long phantom_rows_expiring, long phantom_rows_expired, long phantom_rows_expired_removed, long scans_started, long scans_retried, long rows_returned, long rows_touched, long rows_expiring, long rows_expired, long rows_expired_removed, long row_insert_attempts, long row_update_attempts, long row_delete_attempts, long write_conflicts, long unique_constraint_violations)
        {
            this.total_count = total_count;
            this.read_only_count = read_only_count;
            this.total_aborts = total_aborts;
            this.system_aborts = system_aborts;
            this.validation_failures = validation_failures;
            this.dependencies_taken = dependencies_taken;
            this.dependencies_failed = dependencies_failed;
            this.savepoint_create = savepoint_create;
            this.savepoint_rollbacks = savepoint_rollbacks;
            this.savepoint_refreshes = savepoint_refreshes;
            this.log_bytes_written = log_bytes_written;
            this.log_IO_count = log_IO_count;
            this.phantom_scans_started = phantom_scans_started;
            this.phantom_scans_retries = phantom_scans_retries;
            this.phantom_rows_touched = phantom_rows_touched;
            this.phantom_rows_expiring = phantom_rows_expiring;
            this.phantom_rows_expired = phantom_rows_expired;
            this.phantom_rows_expired_removed = phantom_rows_expired_removed;
            this.scans_started = scans_started;
            this.scans_retried = scans_retried;
            this.rows_returned = rows_returned;
            this.rows_touched = rows_touched;
            this.rows_expiring = rows_expiring;
            this.rows_expired = rows_expired;
            this.rows_expired_removed = rows_expired_removed;
            this.row_insert_attempts = row_insert_attempts;
            this.row_update_attempts = row_update_attempts;
            this.row_delete_attempts = row_delete_attempts;
            this.write_conflicts = write_conflicts;
            this.unique_constraint_violations = unique_constraint_violations;
        }

        public override object[] GetItemArray()
        {
            return new object[] { total_count, read_only_count, total_aborts, system_aborts, validation_failures, dependencies_taken, dependencies_failed, savepoint_create, savepoint_rollbacks, savepoint_refreshes, log_bytes_written, log_IO_count, phantom_scans_started, phantom_scans_retries, phantom_rows_touched, phantom_rows_expiring, phantom_rows_expired, phantom_rows_expired_removed, scans_started, scans_retried, rows_returned, rows_touched, rows_expiring, rows_expired, rows_expired_removed, row_insert_attempts, row_update_attempts, row_delete_attempts, write_conflicts, unique_constraint_violations };
        }

        public override void SetItemArray(object[] items)
        {
            total_count = (long)items[0];
            read_only_count = (long)items[1];
            total_aborts = (long)items[2];
            system_aborts = (long)items[3];
            validation_failures = (long)items[4];
            dependencies_taken = (long)items[5];
            dependencies_failed = (long)items[6];
            savepoint_create = (long)items[7];
            savepoint_rollbacks = (long)items[8];
            savepoint_refreshes = (long)items[9];
            log_bytes_written = (long)items[10];
            log_IO_count = (long)items[11];
            phantom_scans_started = (long)items[12];
            phantom_scans_retries = (long)items[13];
            phantom_rows_touched = (long)items[14];
            phantom_rows_expiring = (long)items[15];
            phantom_rows_expired = (long)items[16];
            phantom_rows_expired_removed = (long)items[17];
            scans_started = (long)items[18];
            scans_retried = (long)items[19];
            rows_returned = (long)items[20];
            rows_touched = (long)items[21];
            rows_expiring = (long)items[22];
            rows_expired = (long)items[23];
            rows_expired_removed = (long)items[24];
            row_insert_attempts = (long)items[25];
            row_update_attempts = (long)items[26];
            row_delete_attempts = (long)items[27];
            write_conflicts = (long)items[28];
            unique_constraint_violations = (long)items[29];
        }
    }

    [SqlView("sys", "dm_os_dispatcher_pools")]
    public partial class dm_os_dispatcher_pools : SqlViewProxy
    {
        [SqlColumn("dispatcher_pool_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] dispatcher_pool_address
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("dispatcher_count", 3), SqlTypeFacets("int", false)]
        public int dispatcher_count
        {
            get;
            set;
        }

        [SqlColumn("dispatcher_ideal_count", 4), SqlTypeFacets("int", false)]
        public int dispatcher_ideal_count
        {
            get;
            set;
        }

        [SqlColumn("dispatcher_timeout_ms", 5), SqlTypeFacets("int", false)]
        public int dispatcher_timeout_ms
        {
            get;
            set;
        }

        [SqlColumn("dispatcher_waiting_count", 6), SqlTypeFacets("int", false)]
        public int dispatcher_waiting_count
        {
            get;
            set;
        }

        [SqlColumn("queue_length", 7), SqlTypeFacets("int", false)]
        public int queue_length
        {
            get;
            set;
        }

        public dm_os_dispatcher_pools()
        {
        }

        public dm_os_dispatcher_pools(object[] items)
        {
            dispatcher_pool_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            dispatcher_count = (int)items[3];
            dispatcher_ideal_count = (int)items[4];
            dispatcher_timeout_ms = (int)items[5];
            dispatcher_waiting_count = (int)items[6];
            queue_length = (int)items[7];
        }

        public dm_os_dispatcher_pools(Byte[] dispatcher_pool_address, string type, string name, int dispatcher_count, int dispatcher_ideal_count, int dispatcher_timeout_ms, int dispatcher_waiting_count, int queue_length)
        {
            this.dispatcher_pool_address = dispatcher_pool_address;
            this.type = type;
            this.name = name;
            this.dispatcher_count = dispatcher_count;
            this.dispatcher_ideal_count = dispatcher_ideal_count;
            this.dispatcher_timeout_ms = dispatcher_timeout_ms;
            this.dispatcher_waiting_count = dispatcher_waiting_count;
            this.queue_length = queue_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dispatcher_pool_address, type, name, dispatcher_count, dispatcher_ideal_count, dispatcher_timeout_ms, dispatcher_waiting_count, queue_length };
        }

        public override void SetItemArray(object[] items)
        {
            dispatcher_pool_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            dispatcher_count = (int)items[3];
            dispatcher_ideal_count = (int)items[4];
            dispatcher_timeout_ms = (int)items[5];
            dispatcher_waiting_count = (int)items[6];
            queue_length = (int)items[7];
        }
    }

    [SqlView("sys", "dm_io_cluster_valid_path_names")]
    public partial class dm_io_cluster_valid_path_names : SqlViewProxy
    {
        [SqlColumn("path_name", 0), SqlTypeFacets("nvarchar", true, 512)]
        public string path_name
        {
            get;
            set;
        }

        [SqlColumn("cluster_owner_node", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string cluster_owner_node
        {
            get;
            set;
        }

        [SqlColumn("is_cluster_shared_volume", 2), SqlTypeFacets("bit", false)]
        public bool is_cluster_shared_volume
        {
            get;
            set;
        }

        public dm_io_cluster_valid_path_names()
        {
        }

        public dm_io_cluster_valid_path_names(object[] items)
        {
            path_name = (string)items[0];
            cluster_owner_node = (string)items[1];
            is_cluster_shared_volume = (bool)items[2];
        }

        public dm_io_cluster_valid_path_names(string path_name, string cluster_owner_node, bool is_cluster_shared_volume)
        {
            this.path_name = path_name;
            this.cluster_owner_node = cluster_owner_node;
            this.is_cluster_shared_volume = is_cluster_shared_volume;
        }

        public override object[] GetItemArray()
        {
            return new object[] { path_name, cluster_owner_node, is_cluster_shared_volume };
        }

        public override void SetItemArray(object[] items)
        {
            path_name = (string)items[0];
            cluster_owner_node = (string)items[1];
            is_cluster_shared_volume = (bool)items[2];
        }
    }

    [SqlView("sys", "dm_hadr_instance_node_map")]
    public partial class dm_hadr_instance_node_map : SqlViewProxy
    {
        [SqlColumn("ag_resource_id", 0), SqlTypeFacets("nvarchar", false, 512)]
        public string ag_resource_id
        {
            get;
            set;
        }

        [SqlColumn("instance_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string instance_name
        {
            get;
            set;
        }

        [SqlColumn("node_name", 2), SqlTypeFacets("nvarchar", false, 512)]
        public string node_name
        {
            get;
            set;
        }

        public dm_hadr_instance_node_map()
        {
        }

        public dm_hadr_instance_node_map(object[] items)
        {
            ag_resource_id = (string)items[0];
            instance_name = (string)items[1];
            node_name = (string)items[2];
        }

        public dm_hadr_instance_node_map(string ag_resource_id, string instance_name, string node_name)
        {
            this.ag_resource_id = ag_resource_id;
            this.instance_name = instance_name;
            this.node_name = node_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ag_resource_id, instance_name, node_name };
        }

        public override void SetItemArray(object[] items)
        {
            ag_resource_id = (string)items[0];
            instance_name = (string)items[1];
            node_name = (string)items[2];
        }
    }

    [SqlView("sys", "dm_os_server_diagnostics_log_configurations")]
    public partial class dm_os_server_diagnostics_log_configurations : SqlViewProxy
    {
        [SqlColumn("is_enabled", 0), SqlTypeFacets("int", true)]
        public int? is_enabled
        {
            get;
            set;
        }

        [SqlColumn("path", 1), SqlTypeFacets("nvarchar", false, 520)]
        public string path
        {
            get;
            set;
        }

        [SqlColumn("max_size", 2), SqlTypeFacets("int", true)]
        public int? max_size
        {
            get;
            set;
        }

        [SqlColumn("max_files", 3), SqlTypeFacets("int", true)]
        public int? max_files
        {
            get;
            set;
        }

        public dm_os_server_diagnostics_log_configurations()
        {
        }

        public dm_os_server_diagnostics_log_configurations(object[] items)
        {
            is_enabled = (int?)items[0];
            path = (string)items[1];
            max_size = (int?)items[2];
            max_files = (int?)items[3];
        }

        public dm_os_server_diagnostics_log_configurations(int? is_enabled, string path, int? max_size, int? max_files)
        {
            this.is_enabled = is_enabled;
            this.path = path;
            this.max_size = max_size;
            this.max_files = max_files;
        }

        public override object[] GetItemArray()
        {
            return new object[] { is_enabled, path, max_size, max_files };
        }

        public override void SetItemArray(object[] items)
        {
            is_enabled = (int?)items[0];
            path = (string)items[1];
            max_size = (int?)items[2];
            max_files = (int?)items[3];
        }
    }

    [SqlView("sys", "dm_os_schedulers")]
    public partial class dm_os_schedulers : SqlViewProxy
    {
        [SqlColumn("scheduler_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] scheduler_address
        {
            get;
            set;
        }

        [SqlColumn("parent_node_id", 1), SqlTypeFacets("int", false)]
        public int parent_node_id
        {
            get;
            set;
        }

        [SqlColumn("scheduler_id", 2), SqlTypeFacets("int", false)]
        public int scheduler_id
        {
            get;
            set;
        }

        [SqlColumn("cpu_id", 3), SqlTypeFacets("int", false)]
        public int cpu_id
        {
            get;
            set;
        }

        [SqlColumn("status", 4), SqlTypeFacets("nvarchar", false, 120)]
        public string status
        {
            get;
            set;
        }

        [SqlColumn("is_online", 5), SqlTypeFacets("bit", false)]
        public bool is_online
        {
            get;
            set;
        }

        [SqlColumn("is_idle", 6), SqlTypeFacets("bit", false)]
        public bool is_idle
        {
            get;
            set;
        }

        [SqlColumn("preemptive_switches_count", 7), SqlTypeFacets("int", false)]
        public int preemptive_switches_count
        {
            get;
            set;
        }

        [SqlColumn("context_switches_count", 8), SqlTypeFacets("int", false)]
        public int context_switches_count
        {
            get;
            set;
        }

        [SqlColumn("idle_switches_count", 9), SqlTypeFacets("int", false)]
        public int idle_switches_count
        {
            get;
            set;
        }

        [SqlColumn("current_tasks_count", 10), SqlTypeFacets("int", false)]
        public int current_tasks_count
        {
            get;
            set;
        }

        [SqlColumn("runnable_tasks_count", 11), SqlTypeFacets("int", false)]
        public int runnable_tasks_count
        {
            get;
            set;
        }

        [SqlColumn("current_workers_count", 12), SqlTypeFacets("int", false)]
        public int current_workers_count
        {
            get;
            set;
        }

        [SqlColumn("active_workers_count", 13), SqlTypeFacets("int", false)]
        public int active_workers_count
        {
            get;
            set;
        }

        [SqlColumn("work_queue_count", 14), SqlTypeFacets("bigint", false)]
        public long work_queue_count
        {
            get;
            set;
        }

        [SqlColumn("pending_disk_io_count", 15), SqlTypeFacets("int", false)]
        public int pending_disk_io_count
        {
            get;
            set;
        }

        [SqlColumn("load_factor", 16), SqlTypeFacets("int", false)]
        public int load_factor
        {
            get;
            set;
        }

        [SqlColumn("yield_count", 17), SqlTypeFacets("int", false)]
        public int yield_count
        {
            get;
            set;
        }

        [SqlColumn("last_timer_activity", 18), SqlTypeFacets("bigint", false)]
        public long last_timer_activity
        {
            get;
            set;
        }

        [SqlColumn("failed_to_create_worker", 19), SqlTypeFacets("bit", false)]
        public bool failed_to_create_worker
        {
            get;
            set;
        }

        [SqlColumn("active_worker_address", 20), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] active_worker_address
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 21), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("task_memory_object_address", 22), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] task_memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("quantum_length_us", 23), SqlTypeFacets("bigint", false)]
        public long quantum_length_us
        {
            get;
            set;
        }

        public dm_os_schedulers()
        {
        }

        public dm_os_schedulers(object[] items)
        {
            scheduler_address = (Byte[])items[0];
            parent_node_id = (int)items[1];
            scheduler_id = (int)items[2];
            cpu_id = (int)items[3];
            status = (string)items[4];
            is_online = (bool)items[5];
            is_idle = (bool)items[6];
            preemptive_switches_count = (int)items[7];
            context_switches_count = (int)items[8];
            idle_switches_count = (int)items[9];
            current_tasks_count = (int)items[10];
            runnable_tasks_count = (int)items[11];
            current_workers_count = (int)items[12];
            active_workers_count = (int)items[13];
            work_queue_count = (long)items[14];
            pending_disk_io_count = (int)items[15];
            load_factor = (int)items[16];
            yield_count = (int)items[17];
            last_timer_activity = (long)items[18];
            failed_to_create_worker = (bool)items[19];
            active_worker_address = (Byte[])items[20];
            memory_object_address = (Byte[])items[21];
            task_memory_object_address = (Byte[])items[22];
            quantum_length_us = (long)items[23];
        }

        public dm_os_schedulers(Byte[] scheduler_address, int parent_node_id, int scheduler_id, int cpu_id, string status, bool is_online, bool is_idle, int preemptive_switches_count, int context_switches_count, int idle_switches_count, int current_tasks_count, int runnable_tasks_count, int current_workers_count, int active_workers_count, long work_queue_count, int pending_disk_io_count, int load_factor, int yield_count, long last_timer_activity, bool failed_to_create_worker, Byte[] active_worker_address, Byte[] memory_object_address, Byte[] task_memory_object_address, long quantum_length_us)
        {
            this.scheduler_address = scheduler_address;
            this.parent_node_id = parent_node_id;
            this.scheduler_id = scheduler_id;
            this.cpu_id = cpu_id;
            this.status = status;
            this.is_online = is_online;
            this.is_idle = is_idle;
            this.preemptive_switches_count = preemptive_switches_count;
            this.context_switches_count = context_switches_count;
            this.idle_switches_count = idle_switches_count;
            this.current_tasks_count = current_tasks_count;
            this.runnable_tasks_count = runnable_tasks_count;
            this.current_workers_count = current_workers_count;
            this.active_workers_count = active_workers_count;
            this.work_queue_count = work_queue_count;
            this.pending_disk_io_count = pending_disk_io_count;
            this.load_factor = load_factor;
            this.yield_count = yield_count;
            this.last_timer_activity = last_timer_activity;
            this.failed_to_create_worker = failed_to_create_worker;
            this.active_worker_address = active_worker_address;
            this.memory_object_address = memory_object_address;
            this.task_memory_object_address = task_memory_object_address;
            this.quantum_length_us = quantum_length_us;
        }

        public override object[] GetItemArray()
        {
            return new object[] { scheduler_address, parent_node_id, scheduler_id, cpu_id, status, is_online, is_idle, preemptive_switches_count, context_switches_count, idle_switches_count, current_tasks_count, runnable_tasks_count, current_workers_count, active_workers_count, work_queue_count, pending_disk_io_count, load_factor, yield_count, last_timer_activity, failed_to_create_worker, active_worker_address, memory_object_address, task_memory_object_address, quantum_length_us };
        }

        public override void SetItemArray(object[] items)
        {
            scheduler_address = (Byte[])items[0];
            parent_node_id = (int)items[1];
            scheduler_id = (int)items[2];
            cpu_id = (int)items[3];
            status = (string)items[4];
            is_online = (bool)items[5];
            is_idle = (bool)items[6];
            preemptive_switches_count = (int)items[7];
            context_switches_count = (int)items[8];
            idle_switches_count = (int)items[9];
            current_tasks_count = (int)items[10];
            runnable_tasks_count = (int)items[11];
            current_workers_count = (int)items[12];
            active_workers_count = (int)items[13];
            work_queue_count = (long)items[14];
            pending_disk_io_count = (int)items[15];
            load_factor = (int)items[16];
            yield_count = (int)items[17];
            last_timer_activity = (long)items[18];
            failed_to_create_worker = (bool)items[19];
            active_worker_address = (Byte[])items[20];
            memory_object_address = (Byte[])items[21];
            task_memory_object_address = (Byte[])items[22];
            quantum_length_us = (long)items[23];
        }
    }

    [SqlView("sys", "dm_audit_class_type_map")]
    public partial class dm_audit_class_type_map : SqlViewProxy
    {
        [SqlColumn("class_type", 0), SqlTypeFacets("varchar", true, 2)]
        public string class_type
        {
            get;
            set;
        }

        [SqlColumn("class_type_desc", 1), SqlTypeFacets("nvarchar", true, 70)]
        public string class_type_desc
        {
            get;
            set;
        }

        [SqlColumn("securable_class_desc", 2), SqlTypeFacets("nvarchar", true, 70)]
        public string securable_class_desc
        {
            get;
            set;
        }

        public dm_audit_class_type_map()
        {
        }

        public dm_audit_class_type_map(object[] items)
        {
            class_type = (string)items[0];
            class_type_desc = (string)items[1];
            securable_class_desc = (string)items[2];
        }

        public dm_audit_class_type_map(string class_type, string class_type_desc, string securable_class_desc)
        {
            this.class_type = class_type;
            this.class_type_desc = class_type_desc;
            this.securable_class_desc = securable_class_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { class_type, class_type_desc, securable_class_desc };
        }

        public override void SetItemArray(object[] items)
        {
            class_type = (string)items[0];
            class_type_desc = (string)items[1];
            securable_class_desc = (string)items[2];
        }
    }

    [SqlView("sys", "availability_groups_cluster")]
    public partial class availability_groups_cluster : SqlViewProxy
    {
        [SqlColumn("group_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid group_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("resource_id", 2), SqlTypeFacets("nvarchar", true, 80)]
        public string resource_id
        {
            get;
            set;
        }

        [SqlColumn("resource_group_id", 3), SqlTypeFacets("nvarchar", true, 80)]
        public string resource_group_id
        {
            get;
            set;
        }

        [SqlColumn("failure_condition_level", 4), SqlTypeFacets("int", true)]
        public int? failure_condition_level
        {
            get;
            set;
        }

        [SqlColumn("health_check_timeout", 5), SqlTypeFacets("int", true)]
        public int? health_check_timeout
        {
            get;
            set;
        }

        [SqlColumn("automated_backup_preference", 6), SqlTypeFacets("tinyint", true)]
        public byte? automated_backup_preference
        {
            get;
            set;
        }

        [SqlColumn("automated_backup_preference_desc", 7), SqlTypeFacets("nvarchar", true, 120)]
        public string automated_backup_preference_desc
        {
            get;
            set;
        }

        public availability_groups_cluster()
        {
        }

        public availability_groups_cluster(object[] items)
        {
            group_id = (Guid)items[0];
            name = (string)items[1];
            resource_id = (string)items[2];
            resource_group_id = (string)items[3];
            failure_condition_level = (int?)items[4];
            health_check_timeout = (int?)items[5];
            automated_backup_preference = (byte?)items[6];
            automated_backup_preference_desc = (string)items[7];
        }

        public availability_groups_cluster(Guid group_id, string name, string resource_id, string resource_group_id, int? failure_condition_level, int? health_check_timeout, byte? automated_backup_preference, string automated_backup_preference_desc)
        {
            this.group_id = group_id;
            this.name = name;
            this.resource_id = resource_id;
            this.resource_group_id = resource_group_id;
            this.failure_condition_level = failure_condition_level;
            this.health_check_timeout = health_check_timeout;
            this.automated_backup_preference = automated_backup_preference;
            this.automated_backup_preference_desc = automated_backup_preference_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { group_id, name, resource_id, resource_group_id, failure_condition_level, health_check_timeout, automated_backup_preference, automated_backup_preference_desc };
        }

        public override void SetItemArray(object[] items)
        {
            group_id = (Guid)items[0];
            name = (string)items[1];
            resource_id = (string)items[2];
            resource_group_id = (string)items[3];
            failure_condition_level = (int?)items[4];
            health_check_timeout = (int?)items[5];
            automated_backup_preference = (byte?)items[6];
            automated_backup_preference_desc = (string)items[7];
        }
    }

    [SqlView("sys", "dm_os_memory_objects")]
    public partial class dm_os_memory_objects : SqlViewProxy
    {
        [SqlColumn("memory_object_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("parent_address", 1), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] parent_address
        {
            get;
            set;
        }

        [SqlColumn("pages_in_bytes", 2), SqlTypeFacets("bigint", false)]
        public long pages_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("creation_options", 3), SqlTypeFacets("int", true)]
        public int? creation_options
        {
            get;
            set;
        }

        [SqlColumn("bytes_used", 4), SqlTypeFacets("bigint", true)]
        public long? bytes_used
        {
            get;
            set;
        }

        [SqlColumn("type", 5), SqlTypeFacets("nvarchar", false, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("name", 6), SqlTypeFacets("varchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("memory_node_id", 7), SqlTypeFacets("smallint", false)]
        public short memory_node_id
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 8), SqlTypeFacets("datetime", true)]
        public DateTime? creation_time
        {
            get;
            set;
        }

        [SqlColumn("page_size_in_bytes", 9), SqlTypeFacets("int", false)]
        public int page_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("max_pages_in_bytes", 10), SqlTypeFacets("bigint", false)]
        public long max_pages_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("page_allocator_address", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] page_allocator_address
        {
            get;
            set;
        }

        [SqlColumn("creation_stack_address", 12), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] creation_stack_address
        {
            get;
            set;
        }

        [SqlColumn("sequence_num", 13), SqlTypeFacets("int", true)]
        public int? sequence_num
        {
            get;
            set;
        }

        public dm_os_memory_objects()
        {
        }

        public dm_os_memory_objects(object[] items)
        {
            memory_object_address = (Byte[])items[0];
            parent_address = (Byte[])items[1];
            pages_in_bytes = (long)items[2];
            creation_options = (int?)items[3];
            bytes_used = (long?)items[4];
            type = (string)items[5];
            name = (string)items[6];
            memory_node_id = (short)items[7];
            creation_time = (DateTime?)items[8];
            page_size_in_bytes = (int)items[9];
            max_pages_in_bytes = (long)items[10];
            page_allocator_address = (Byte[])items[11];
            creation_stack_address = (Byte[])items[12];
            sequence_num = (int?)items[13];
        }

        public dm_os_memory_objects(Byte[] memory_object_address, Byte[] parent_address, long pages_in_bytes, int? creation_options, long? bytes_used, string type, string name, short memory_node_id, DateTime? creation_time, int page_size_in_bytes, long max_pages_in_bytes, Byte[] page_allocator_address, Byte[] creation_stack_address, int? sequence_num)
        {
            this.memory_object_address = memory_object_address;
            this.parent_address = parent_address;
            this.pages_in_bytes = pages_in_bytes;
            this.creation_options = creation_options;
            this.bytes_used = bytes_used;
            this.type = type;
            this.name = name;
            this.memory_node_id = memory_node_id;
            this.creation_time = creation_time;
            this.page_size_in_bytes = page_size_in_bytes;
            this.max_pages_in_bytes = max_pages_in_bytes;
            this.page_allocator_address = page_allocator_address;
            this.creation_stack_address = creation_stack_address;
            this.sequence_num = sequence_num;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_object_address, parent_address, pages_in_bytes, creation_options, bytes_used, type, name, memory_node_id, creation_time, page_size_in_bytes, max_pages_in_bytes, page_allocator_address, creation_stack_address, sequence_num };
        }

        public override void SetItemArray(object[] items)
        {
            memory_object_address = (Byte[])items[0];
            parent_address = (Byte[])items[1];
            pages_in_bytes = (long)items[2];
            creation_options = (int?)items[3];
            bytes_used = (long?)items[4];
            type = (string)items[5];
            name = (string)items[6];
            memory_node_id = (short)items[7];
            creation_time = (DateTime?)items[8];
            page_size_in_bytes = (int)items[9];
            max_pages_in_bytes = (long)items[10];
            page_allocator_address = (Byte[])items[11];
            creation_stack_address = (Byte[])items[12];
            sequence_num = (int?)items[13];
        }
    }

    [SqlView("sys", "dm_db_task_space_usage")]
    public partial class dm_db_task_space_usage : SqlViewProxy
    {
        [SqlColumn("task_address", 0), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] task_address
        {
            get;
            set;
        }

        [SqlColumn("is_remote_task", 1), SqlTypeFacets("bit", false)]
        public bool is_remote_task
        {
            get;
            set;
        }

        [SqlColumn("session_id", 2), SqlTypeFacets("smallint", true)]
        public short? session_id
        {
            get;
            set;
        }

        [SqlColumn("request_id", 3), SqlTypeFacets("int", true)]
        public int? request_id
        {
            get;
            set;
        }

        [SqlColumn("exec_context_id", 4), SqlTypeFacets("int", true)]
        public int? exec_context_id
        {
            get;
            set;
        }

        [SqlColumn("database_id", 5), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("user_objects_alloc_page_count", 6), SqlTypeFacets("bigint", true)]
        public long? user_objects_alloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("user_objects_dealloc_page_count", 7), SqlTypeFacets("bigint", true)]
        public long? user_objects_dealloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_objects_alloc_page_count", 8), SqlTypeFacets("bigint", true)]
        public long? internal_objects_alloc_page_count
        {
            get;
            set;
        }

        [SqlColumn("internal_objects_dealloc_page_count", 9), SqlTypeFacets("bigint", true)]
        public long? internal_objects_dealloc_page_count
        {
            get;
            set;
        }

        public dm_db_task_space_usage()
        {
        }

        public dm_db_task_space_usage(object[] items)
        {
            task_address = (Byte[])items[0];
            is_remote_task = (bool)items[1];
            session_id = (short?)items[2];
            request_id = (int?)items[3];
            exec_context_id = (int?)items[4];
            database_id = (int?)items[5];
            user_objects_alloc_page_count = (long?)items[6];
            user_objects_dealloc_page_count = (long?)items[7];
            internal_objects_alloc_page_count = (long?)items[8];
            internal_objects_dealloc_page_count = (long?)items[9];
        }

        public dm_db_task_space_usage(Byte[] task_address, bool is_remote_task, short? session_id, int? request_id, int? exec_context_id, int? database_id, long? user_objects_alloc_page_count, long? user_objects_dealloc_page_count, long? internal_objects_alloc_page_count, long? internal_objects_dealloc_page_count)
        {
            this.task_address = task_address;
            this.is_remote_task = is_remote_task;
            this.session_id = session_id;
            this.request_id = request_id;
            this.exec_context_id = exec_context_id;
            this.database_id = database_id;
            this.user_objects_alloc_page_count = user_objects_alloc_page_count;
            this.user_objects_dealloc_page_count = user_objects_dealloc_page_count;
            this.internal_objects_alloc_page_count = internal_objects_alloc_page_count;
            this.internal_objects_dealloc_page_count = internal_objects_dealloc_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { task_address, is_remote_task, session_id, request_id, exec_context_id, database_id, user_objects_alloc_page_count, user_objects_dealloc_page_count, internal_objects_alloc_page_count, internal_objects_dealloc_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            task_address = (Byte[])items[0];
            is_remote_task = (bool)items[1];
            session_id = (short?)items[2];
            request_id = (int?)items[3];
            exec_context_id = (int?)items[4];
            database_id = (int?)items[5];
            user_objects_alloc_page_count = (long?)items[6];
            user_objects_dealloc_page_count = (long?)items[7];
            internal_objects_alloc_page_count = (long?)items[8];
            internal_objects_dealloc_page_count = (long?)items[9];
        }
    }

    [SqlView("sys", "dm_os_loaded_modules")]
    public partial class dm_os_loaded_modules : SqlViewProxy
    {
        [SqlColumn("base_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] base_address
        {
            get;
            set;
        }

        [SqlColumn("file_version", 1), SqlTypeFacets("varchar", true, 256)]
        public string file_version
        {
            get;
            set;
        }

        [SqlColumn("product_version", 2), SqlTypeFacets("varchar", true, 256)]
        public string product_version
        {
            get;
            set;
        }

        [SqlColumn("debug", 3), SqlTypeFacets("bit", true)]
        public bool? debug
        {
            get;
            set;
        }

        [SqlColumn("patched", 4), SqlTypeFacets("bit", true)]
        public bool? patched
        {
            get;
            set;
        }

        [SqlColumn("prerelease", 5), SqlTypeFacets("bit", true)]
        public bool? prerelease
        {
            get;
            set;
        }

        [SqlColumn("private_build", 6), SqlTypeFacets("bit", true)]
        public bool? private_build
        {
            get;
            set;
        }

        [SqlColumn("special_build", 7), SqlTypeFacets("bit", true)]
        public bool? special_build
        {
            get;
            set;
        }

        [SqlColumn("language", 8), SqlTypeFacets("int", true)]
        public int? language
        {
            get;
            set;
        }

        [SqlColumn("company", 9), SqlTypeFacets("nvarchar", true, 512)]
        public string company
        {
            get;
            set;
        }

        [SqlColumn("description", 10), SqlTypeFacets("nvarchar", true, 512)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("name", 11), SqlTypeFacets("nvarchar", true, 512)]
        public string name
        {
            get;
            set;
        }

        public dm_os_loaded_modules()
        {
        }

        public dm_os_loaded_modules(object[] items)
        {
            base_address = (Byte[])items[0];
            file_version = (string)items[1];
            product_version = (string)items[2];
            debug = (bool?)items[3];
            patched = (bool?)items[4];
            prerelease = (bool?)items[5];
            private_build = (bool?)items[6];
            special_build = (bool?)items[7];
            language = (int?)items[8];
            company = (string)items[9];
            description = (string)items[10];
            name = (string)items[11];
        }

        public dm_os_loaded_modules(Byte[] base_address, string file_version, string product_version, bool? debug, bool? patched, bool? prerelease, bool? private_build, bool? special_build, int? language, string company, string description, string name)
        {
            this.base_address = base_address;
            this.file_version = file_version;
            this.product_version = product_version;
            this.debug = debug;
            this.patched = patched;
            this.prerelease = prerelease;
            this.private_build = private_build;
            this.special_build = special_build;
            this.language = language;
            this.company = company;
            this.description = description;
            this.name = name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { base_address, file_version, product_version, debug, patched, prerelease, private_build, special_build, language, company, description, name };
        }

        public override void SetItemArray(object[] items)
        {
            base_address = (Byte[])items[0];
            file_version = (string)items[1];
            product_version = (string)items[2];
            debug = (bool?)items[3];
            patched = (bool?)items[4];
            prerelease = (bool?)items[5];
            private_build = (bool?)items[6];
            special_build = (bool?)items[7];
            language = (int?)items[8];
            company = (string)items[9];
            description = (string)items[10];
            name = (string)items[11];
        }
    }

    [SqlView("sys", "dm_xe_session_object_columns")]
    public partial class dm_xe_session_object_columns : SqlViewProxy
    {
        [SqlColumn("event_session_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] event_session_address
        {
            get;
            set;
        }

        [SqlColumn("column_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string column_name
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("column_value", 3), SqlTypeFacets("nvarchar", true, 6144)]
        public string column_value
        {
            get;
            set;
        }

        [SqlColumn("object_type", 4), SqlTypeFacets("nvarchar", false, 120)]
        public string object_type
        {
            get;
            set;
        }

        [SqlColumn("object_name", 5), SqlTypeFacets("nvarchar", false, 512)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("object_package_guid", 6), SqlTypeFacets("uniqueidentifier", false)]
        public Guid object_package_guid
        {
            get;
            set;
        }

        public dm_xe_session_object_columns()
        {
        }

        public dm_xe_session_object_columns(object[] items)
        {
            event_session_address = (Byte[])items[0];
            column_name = (string)items[1];
            column_id = (int)items[2];
            column_value = (string)items[3];
            object_type = (string)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
        }

        public dm_xe_session_object_columns(Byte[] event_session_address, string column_name, int column_id, string column_value, string object_type, string object_name, Guid object_package_guid)
        {
            this.event_session_address = event_session_address;
            this.column_name = column_name;
            this.column_id = column_id;
            this.column_value = column_value;
            this.object_type = object_type;
            this.object_name = object_name;
            this.object_package_guid = object_package_guid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_session_address, column_name, column_id, column_value, object_type, object_name, object_package_guid };
        }

        public override void SetItemArray(object[] items)
        {
            event_session_address = (Byte[])items[0];
            column_name = (string)items[1];
            column_id = (int)items[2];
            column_value = (string)items[3];
            object_type = (string)items[4];
            object_name = (string)items[5];
            object_package_guid = (Guid)items[6];
        }
    }

    [SqlView("sys", "dm_db_mirroring_past_actions")]
    public partial class dm_db_mirroring_past_actions : SqlViewProxy
    {
        [SqlColumn("mirroring_guid", 0), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? mirroring_guid
        {
            get;
            set;
        }

        [SqlColumn("state_machine_name", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string state_machine_name
        {
            get;
            set;
        }

        [SqlColumn("action_type", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string action_type
        {
            get;
            set;
        }

        [SqlColumn("name", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("current_state", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string current_state
        {
            get;
            set;
        }

        [SqlColumn("action_sequence", 5), SqlTypeFacets("int", false)]
        public int action_sequence
        {
            get;
            set;
        }

        public dm_db_mirroring_past_actions()
        {
        }

        public dm_db_mirroring_past_actions(object[] items)
        {
            mirroring_guid = (Guid?)items[0];
            state_machine_name = (string)items[1];
            action_type = (string)items[2];
            name = (string)items[3];
            current_state = (string)items[4];
            action_sequence = (int)items[5];
        }

        public dm_db_mirroring_past_actions(Guid? mirroring_guid, string state_machine_name, string action_type, string name, string current_state, int action_sequence)
        {
            this.mirroring_guid = mirroring_guid;
            this.state_machine_name = state_machine_name;
            this.action_type = action_type;
            this.name = name;
            this.current_state = current_state;
            this.action_sequence = action_sequence;
        }

        public override object[] GetItemArray()
        {
            return new object[] { mirroring_guid, state_machine_name, action_type, name, current_state, action_sequence };
        }

        public override void SetItemArray(object[] items)
        {
            mirroring_guid = (Guid?)items[0];
            state_machine_name = (string)items[1];
            action_type = (string)items[2];
            name = (string)items[3];
            current_state = (string)items[4];
            action_sequence = (int)items[5];
        }
    }

    [SqlView("sys", "dm_db_xtp_nonclustered_index_stats")]
    public partial class dm_db_xtp_nonclustered_index_stats : SqlViewProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("delta_pages", 2), SqlTypeFacets("bigint", false)]
        public long delta_pages
        {
            get;
            set;
        }

        [SqlColumn("internal_pages", 3), SqlTypeFacets("bigint", false)]
        public long internal_pages
        {
            get;
            set;
        }

        [SqlColumn("leaf_pages", 4), SqlTypeFacets("bigint", false)]
        public long leaf_pages
        {
            get;
            set;
        }

        [SqlColumn("outstanding_retired_nodes", 5), SqlTypeFacets("bigint", false)]
        public long outstanding_retired_nodes
        {
            get;
            set;
        }

        [SqlColumn("page_update_count", 6), SqlTypeFacets("bigint", false)]
        public long page_update_count
        {
            get;
            set;
        }

        [SqlColumn("page_update_retry_count", 7), SqlTypeFacets("bigint", false)]
        public long page_update_retry_count
        {
            get;
            set;
        }

        [SqlColumn("page_consolidation_count", 8), SqlTypeFacets("bigint", false)]
        public long page_consolidation_count
        {
            get;
            set;
        }

        [SqlColumn("page_consolidation_retry_count", 9), SqlTypeFacets("bigint", false)]
        public long page_consolidation_retry_count
        {
            get;
            set;
        }

        [SqlColumn("page_split_count", 10), SqlTypeFacets("bigint", false)]
        public long page_split_count
        {
            get;
            set;
        }

        [SqlColumn("page_split_retry_count", 11), SqlTypeFacets("bigint", false)]
        public long page_split_retry_count
        {
            get;
            set;
        }

        [SqlColumn("key_split_count", 12), SqlTypeFacets("bigint", false)]
        public long key_split_count
        {
            get;
            set;
        }

        [SqlColumn("key_split_retry_count", 13), SqlTypeFacets("bigint", false)]
        public long key_split_retry_count
        {
            get;
            set;
        }

        [SqlColumn("page_merge_count", 14), SqlTypeFacets("bigint", false)]
        public long page_merge_count
        {
            get;
            set;
        }

        [SqlColumn("page_merge_retry_count", 15), SqlTypeFacets("bigint", false)]
        public long page_merge_retry_count
        {
            get;
            set;
        }

        [SqlColumn("key_merge_count", 16), SqlTypeFacets("bigint", false)]
        public long key_merge_count
        {
            get;
            set;
        }

        [SqlColumn("key_merge_retry_count", 17), SqlTypeFacets("bigint", false)]
        public long key_merge_retry_count
        {
            get;
            set;
        }

        public dm_db_xtp_nonclustered_index_stats()
        {
        }

        public dm_db_xtp_nonclustered_index_stats(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            delta_pages = (long)items[2];
            internal_pages = (long)items[3];
            leaf_pages = (long)items[4];
            outstanding_retired_nodes = (long)items[5];
            page_update_count = (long)items[6];
            page_update_retry_count = (long)items[7];
            page_consolidation_count = (long)items[8];
            page_consolidation_retry_count = (long)items[9];
            page_split_count = (long)items[10];
            page_split_retry_count = (long)items[11];
            key_split_count = (long)items[12];
            key_split_retry_count = (long)items[13];
            page_merge_count = (long)items[14];
            page_merge_retry_count = (long)items[15];
            key_merge_count = (long)items[16];
            key_merge_retry_count = (long)items[17];
        }

        public dm_db_xtp_nonclustered_index_stats(int object_id, int index_id, long delta_pages, long internal_pages, long leaf_pages, long outstanding_retired_nodes, long page_update_count, long page_update_retry_count, long page_consolidation_count, long page_consolidation_retry_count, long page_split_count, long page_split_retry_count, long key_split_count, long key_split_retry_count, long page_merge_count, long page_merge_retry_count, long key_merge_count, long key_merge_retry_count)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.delta_pages = delta_pages;
            this.internal_pages = internal_pages;
            this.leaf_pages = leaf_pages;
            this.outstanding_retired_nodes = outstanding_retired_nodes;
            this.page_update_count = page_update_count;
            this.page_update_retry_count = page_update_retry_count;
            this.page_consolidation_count = page_consolidation_count;
            this.page_consolidation_retry_count = page_consolidation_retry_count;
            this.page_split_count = page_split_count;
            this.page_split_retry_count = page_split_retry_count;
            this.key_split_count = key_split_count;
            this.key_split_retry_count = key_split_retry_count;
            this.page_merge_count = page_merge_count;
            this.page_merge_retry_count = page_merge_retry_count;
            this.key_merge_count = key_merge_count;
            this.key_merge_retry_count = key_merge_retry_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, delta_pages, internal_pages, leaf_pages, outstanding_retired_nodes, page_update_count, page_update_retry_count, page_consolidation_count, page_consolidation_retry_count, page_split_count, page_split_retry_count, key_split_count, key_split_retry_count, page_merge_count, page_merge_retry_count, key_merge_count, key_merge_retry_count };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            index_id = (int)items[1];
            delta_pages = (long)items[2];
            internal_pages = (long)items[3];
            leaf_pages = (long)items[4];
            outstanding_retired_nodes = (long)items[5];
            page_update_count = (long)items[6];
            page_update_retry_count = (long)items[7];
            page_consolidation_count = (long)items[8];
            page_consolidation_retry_count = (long)items[9];
            page_split_count = (long)items[10];
            page_split_retry_count = (long)items[11];
            key_split_count = (long)items[12];
            key_split_retry_count = (long)items[13];
            page_merge_count = (long)items[14];
            page_merge_retry_count = (long)items[15];
            key_merge_count = (long)items[16];
            key_merge_retry_count = (long)items[17];
        }
    }

    [SqlView("sys", "dm_os_memory_allocations")]
    public partial class dm_os_memory_allocations : SqlViewProxy
    {
        [SqlColumn("memory_allocation_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_allocation_address
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 1), SqlTypeFacets("bigint", false)]
        public long size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 2), SqlTypeFacets("datetime", false)]
        public DateTime creation_time
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("memory_node_id", 4), SqlTypeFacets("smallint", false)]
        public short memory_node_id
        {
            get;
            set;
        }

        [SqlColumn("allocator_stack_address", 5), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] allocator_stack_address
        {
            get;
            set;
        }

        [SqlColumn("source_file", 6), SqlTypeFacets("varchar", true, 256)]
        public string source_file
        {
            get;
            set;
        }

        [SqlColumn("line_num", 7), SqlTypeFacets("int", false)]
        public int line_num
        {
            get;
            set;
        }

        [SqlColumn("sequence_num", 8), SqlTypeFacets("int", false)]
        public int sequence_num
        {
            get;
            set;
        }

        [SqlColumn("tag", 9), SqlTypeFacets("int", false)]
        public int tag
        {
            get;
            set;
        }

        public dm_os_memory_allocations()
        {
        }

        public dm_os_memory_allocations(object[] items)
        {
            memory_allocation_address = (Byte[])items[0];
            size_in_bytes = (long)items[1];
            creation_time = (DateTime)items[2];
            memory_object_address = (Byte[])items[3];
            memory_node_id = (short)items[4];
            allocator_stack_address = (Byte[])items[5];
            source_file = (string)items[6];
            line_num = (int)items[7];
            sequence_num = (int)items[8];
            tag = (int)items[9];
        }

        public dm_os_memory_allocations(Byte[] memory_allocation_address, long size_in_bytes, DateTime creation_time, Byte[] memory_object_address, short memory_node_id, Byte[] allocator_stack_address, string source_file, int line_num, int sequence_num, int tag)
        {
            this.memory_allocation_address = memory_allocation_address;
            this.size_in_bytes = size_in_bytes;
            this.creation_time = creation_time;
            this.memory_object_address = memory_object_address;
            this.memory_node_id = memory_node_id;
            this.allocator_stack_address = allocator_stack_address;
            this.source_file = source_file;
            this.line_num = line_num;
            this.sequence_num = sequence_num;
            this.tag = tag;
        }

        public override object[] GetItemArray()
        {
            return new object[] { memory_allocation_address, size_in_bytes, creation_time, memory_object_address, memory_node_id, allocator_stack_address, source_file, line_num, sequence_num, tag };
        }

        public override void SetItemArray(object[] items)
        {
            memory_allocation_address = (Byte[])items[0];
            size_in_bytes = (long)items[1];
            creation_time = (DateTime)items[2];
            memory_object_address = (Byte[])items[3];
            memory_node_id = (short)items[4];
            allocator_stack_address = (Byte[])items[5];
            source_file = (string)items[6];
            line_num = (int)items[7];
            sequence_num = (int)items[8];
            tag = (int)items[9];
        }
    }

    [SqlView("sys", "openkeys")]
    public partial class openkeys : SqlViewProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("database_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("key_id", 2), SqlTypeFacets("int", true)]
        public int? key_id
        {
            get;
            set;
        }

        [SqlColumn("key_name", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string key_name
        {
            get;
            set;
        }

        [SqlColumn("key_guid", 4), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? key_guid
        {
            get;
            set;
        }

        [SqlColumn("opened_date", 5), SqlTypeFacets("datetime", true)]
        public DateTime? opened_date
        {
            get;
            set;
        }

        [SqlColumn("status", 6), SqlTypeFacets("smallint", true)]
        public short? status
        {
            get;
            set;
        }

        public openkeys()
        {
        }

        public openkeys(object[] items)
        {
            database_id = (int?)items[0];
            database_name = (string)items[1];
            key_id = (int?)items[2];
            key_name = (string)items[3];
            key_guid = (Guid?)items[4];
            opened_date = (DateTime?)items[5];
            status = (short?)items[6];
        }

        public openkeys(int? database_id, string database_name, int? key_id, string key_name, Guid? key_guid, DateTime? opened_date, short? status)
        {
            this.database_id = database_id;
            this.database_name = database_name;
            this.key_id = key_id;
            this.key_name = key_name;
            this.key_guid = key_guid;
            this.opened_date = opened_date;
            this.status = status;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, database_name, key_id, key_name, key_guid, opened_date, status };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            database_name = (string)items[1];
            key_id = (int?)items[2];
            key_name = (string)items[3];
            key_guid = (Guid?)items[4];
            opened_date = (DateTime?)items[5];
            status = (short?)items[6];
        }
    }

    [SqlView("sys", "dm_os_memory_brokers")]
    public partial class dm_os_memory_brokers : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("memory_broker_type", 1), SqlTypeFacets("nvarchar", false, 120)]
        public string memory_broker_type
        {
            get;
            set;
        }

        [SqlColumn("allocations_kb", 2), SqlTypeFacets("bigint", false)]
        public long allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("allocations_kb_per_sec", 3), SqlTypeFacets("bigint", false)]
        public long allocations_kb_per_sec
        {
            get;
            set;
        }

        [SqlColumn("predicted_allocations_kb", 4), SqlTypeFacets("bigint", false)]
        public long predicted_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("target_allocations_kb", 5), SqlTypeFacets("bigint", false)]
        public long target_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("future_allocations_kb", 6), SqlTypeFacets("bigint", false)]
        public long future_allocations_kb
        {
            get;
            set;
        }

        [SqlColumn("overall_limit_kb", 7), SqlTypeFacets("bigint", false)]
        public long overall_limit_kb
        {
            get;
            set;
        }

        [SqlColumn("last_notification", 8), SqlTypeFacets("nvarchar", false, 120)]
        public string last_notification
        {
            get;
            set;
        }

        public dm_os_memory_brokers()
        {
        }

        public dm_os_memory_brokers(object[] items)
        {
            pool_id = (int)items[0];
            memory_broker_type = (string)items[1];
            allocations_kb = (long)items[2];
            allocations_kb_per_sec = (long)items[3];
            predicted_allocations_kb = (long)items[4];
            target_allocations_kb = (long)items[5];
            future_allocations_kb = (long)items[6];
            overall_limit_kb = (long)items[7];
            last_notification = (string)items[8];
        }

        public dm_os_memory_brokers(int pool_id, string memory_broker_type, long allocations_kb, long allocations_kb_per_sec, long predicted_allocations_kb, long target_allocations_kb, long future_allocations_kb, long overall_limit_kb, string last_notification)
        {
            this.pool_id = pool_id;
            this.memory_broker_type = memory_broker_type;
            this.allocations_kb = allocations_kb;
            this.allocations_kb_per_sec = allocations_kb_per_sec;
            this.predicted_allocations_kb = predicted_allocations_kb;
            this.target_allocations_kb = target_allocations_kb;
            this.future_allocations_kb = future_allocations_kb;
            this.overall_limit_kb = overall_limit_kb;
            this.last_notification = last_notification;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, memory_broker_type, allocations_kb, allocations_kb_per_sec, predicted_allocations_kb, target_allocations_kb, future_allocations_kb, overall_limit_kb, last_notification };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            memory_broker_type = (string)items[1];
            allocations_kb = (long)items[2];
            allocations_kb_per_sec = (long)items[3];
            predicted_allocations_kb = (long)items[4];
            target_allocations_kb = (long)items[5];
            future_allocations_kb = (long)items[6];
            overall_limit_kb = (long)items[7];
            last_notification = (string)items[8];
        }
    }

    [SqlView("sys", "dm_os_hosts")]
    public partial class dm_os_hosts : SqlViewProxy
    {
        [SqlColumn("host_address", 0), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] host_address
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("enqueued_tasks_count", 3), SqlTypeFacets("int", true)]
        public int? enqueued_tasks_count
        {
            get;
            set;
        }

        [SqlColumn("active_tasks_count", 4), SqlTypeFacets("int", true)]
        public int? active_tasks_count
        {
            get;
            set;
        }

        [SqlColumn("completed_ios_count", 5), SqlTypeFacets("int", true)]
        public int? completed_ios_count
        {
            get;
            set;
        }

        [SqlColumn("completed_ios_in_bytes", 6), SqlTypeFacets("bigint", true)]
        public long? completed_ios_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("active_ios_count", 7), SqlTypeFacets("int", true)]
        public int? active_ios_count
        {
            get;
            set;
        }

        [SqlColumn("default_memory_clerk_address", 8), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] default_memory_clerk_address
        {
            get;
            set;
        }

        public dm_os_hosts()
        {
        }

        public dm_os_hosts(object[] items)
        {
            host_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            enqueued_tasks_count = (int?)items[3];
            active_tasks_count = (int?)items[4];
            completed_ios_count = (int?)items[5];
            completed_ios_in_bytes = (long?)items[6];
            active_ios_count = (int?)items[7];
            default_memory_clerk_address = (Byte[])items[8];
        }

        public dm_os_hosts(Byte[] host_address, string type, string name, int? enqueued_tasks_count, int? active_tasks_count, int? completed_ios_count, long? completed_ios_in_bytes, int? active_ios_count, Byte[] default_memory_clerk_address)
        {
            this.host_address = host_address;
            this.type = type;
            this.name = name;
            this.enqueued_tasks_count = enqueued_tasks_count;
            this.active_tasks_count = active_tasks_count;
            this.completed_ios_count = completed_ios_count;
            this.completed_ios_in_bytes = completed_ios_in_bytes;
            this.active_ios_count = active_ios_count;
            this.default_memory_clerk_address = default_memory_clerk_address;
        }

        public override object[] GetItemArray()
        {
            return new object[] { host_address, type, name, enqueued_tasks_count, active_tasks_count, completed_ios_count, completed_ios_in_bytes, active_ios_count, default_memory_clerk_address };
        }

        public override void SetItemArray(object[] items)
        {
            host_address = (Byte[])items[0];
            type = (string)items[1];
            name = (string)items[2];
            enqueued_tasks_count = (int?)items[3];
            active_tasks_count = (int?)items[4];
            completed_ios_count = (int?)items[5];
            completed_ios_in_bytes = (long?)items[6];
            active_ios_count = (int?)items[7];
            default_memory_clerk_address = (Byte[])items[8];
        }
    }

    [SqlView("sys", "dm_resource_governor_resource_pool_volumes")]
    public partial class dm_resource_governor_resource_pool_volumes : SqlViewProxy
    {
        [SqlColumn("pool_id", 0), SqlTypeFacets("int", false)]
        public int pool_id
        {
            get;
            set;
        }

        [SqlColumn("volume_name", 1), SqlTypeFacets("nvarchar", false, 512)]
        public string volume_name
        {
            get;
            set;
        }

        [SqlColumn("read_io_queued_total", 2), SqlTypeFacets("int", false)]
        public int read_io_queued_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_issued_total", 3), SqlTypeFacets("int", false)]
        public int read_io_issued_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_completed_total", 4), SqlTypeFacets("int", false)]
        public int read_io_completed_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_throttled_total", 5), SqlTypeFacets("int", false)]
        public int read_io_throttled_total
        {
            get;
            set;
        }

        [SqlColumn("read_bytes_total", 6), SqlTypeFacets("bigint", false)]
        public long read_bytes_total
        {
            get;
            set;
        }

        [SqlColumn("read_io_stall_total_ms", 7), SqlTypeFacets("bigint", false)]
        public long read_io_stall_total_ms
        {
            get;
            set;
        }

        [SqlColumn("read_io_stall_queued_ms", 8), SqlTypeFacets("bigint", false)]
        public long read_io_stall_queued_ms
        {
            get;
            set;
        }

        [SqlColumn("write_io_queued_total", 9), SqlTypeFacets("int", false)]
        public int write_io_queued_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_issued_total", 10), SqlTypeFacets("int", false)]
        public int write_io_issued_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_completed_total", 11), SqlTypeFacets("int", false)]
        public int write_io_completed_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_throttled_total", 12), SqlTypeFacets("int", false)]
        public int write_io_throttled_total
        {
            get;
            set;
        }

        [SqlColumn("write_bytes_total", 13), SqlTypeFacets("bigint", false)]
        public long write_bytes_total
        {
            get;
            set;
        }

        [SqlColumn("write_io_stall_total_ms", 14), SqlTypeFacets("bigint", false)]
        public long write_io_stall_total_ms
        {
            get;
            set;
        }

        [SqlColumn("write_io_stall_queued_ms", 15), SqlTypeFacets("bigint", false)]
        public long write_io_stall_queued_ms
        {
            get;
            set;
        }

        [SqlColumn("io_issue_violations_total", 16), SqlTypeFacets("int", false)]
        public int io_issue_violations_total
        {
            get;
            set;
        }

        [SqlColumn("io_issue_delay_total_ms", 17), SqlTypeFacets("bigint", false)]
        public long io_issue_delay_total_ms
        {
            get;
            set;
        }

        public dm_resource_governor_resource_pool_volumes()
        {
        }

        public dm_resource_governor_resource_pool_volumes(object[] items)
        {
            pool_id = (int)items[0];
            volume_name = (string)items[1];
            read_io_queued_total = (int)items[2];
            read_io_issued_total = (int)items[3];
            read_io_completed_total = (int)items[4];
            read_io_throttled_total = (int)items[5];
            read_bytes_total = (long)items[6];
            read_io_stall_total_ms = (long)items[7];
            read_io_stall_queued_ms = (long)items[8];
            write_io_queued_total = (int)items[9];
            write_io_issued_total = (int)items[10];
            write_io_completed_total = (int)items[11];
            write_io_throttled_total = (int)items[12];
            write_bytes_total = (long)items[13];
            write_io_stall_total_ms = (long)items[14];
            write_io_stall_queued_ms = (long)items[15];
            io_issue_violations_total = (int)items[16];
            io_issue_delay_total_ms = (long)items[17];
        }

        public dm_resource_governor_resource_pool_volumes(int pool_id, string volume_name, int read_io_queued_total, int read_io_issued_total, int read_io_completed_total, int read_io_throttled_total, long read_bytes_total, long read_io_stall_total_ms, long read_io_stall_queued_ms, int write_io_queued_total, int write_io_issued_total, int write_io_completed_total, int write_io_throttled_total, long write_bytes_total, long write_io_stall_total_ms, long write_io_stall_queued_ms, int io_issue_violations_total, long io_issue_delay_total_ms)
        {
            this.pool_id = pool_id;
            this.volume_name = volume_name;
            this.read_io_queued_total = read_io_queued_total;
            this.read_io_issued_total = read_io_issued_total;
            this.read_io_completed_total = read_io_completed_total;
            this.read_io_throttled_total = read_io_throttled_total;
            this.read_bytes_total = read_bytes_total;
            this.read_io_stall_total_ms = read_io_stall_total_ms;
            this.read_io_stall_queued_ms = read_io_stall_queued_ms;
            this.write_io_queued_total = write_io_queued_total;
            this.write_io_issued_total = write_io_issued_total;
            this.write_io_completed_total = write_io_completed_total;
            this.write_io_throttled_total = write_io_throttled_total;
            this.write_bytes_total = write_bytes_total;
            this.write_io_stall_total_ms = write_io_stall_total_ms;
            this.write_io_stall_queued_ms = write_io_stall_queued_ms;
            this.io_issue_violations_total = io_issue_violations_total;
            this.io_issue_delay_total_ms = io_issue_delay_total_ms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { pool_id, volume_name, read_io_queued_total, read_io_issued_total, read_io_completed_total, read_io_throttled_total, read_bytes_total, read_io_stall_total_ms, read_io_stall_queued_ms, write_io_queued_total, write_io_issued_total, write_io_completed_total, write_io_throttled_total, write_bytes_total, write_io_stall_total_ms, write_io_stall_queued_ms, io_issue_violations_total, io_issue_delay_total_ms };
        }

        public override void SetItemArray(object[] items)
        {
            pool_id = (int)items[0];
            volume_name = (string)items[1];
            read_io_queued_total = (int)items[2];
            read_io_issued_total = (int)items[3];
            read_io_completed_total = (int)items[4];
            read_io_throttled_total = (int)items[5];
            read_bytes_total = (long)items[6];
            read_io_stall_total_ms = (long)items[7];
            read_io_stall_queued_ms = (long)items[8];
            write_io_queued_total = (int)items[9];
            write_io_issued_total = (int)items[10];
            write_io_completed_total = (int)items[11];
            write_io_throttled_total = (int)items[12];
            write_bytes_total = (long)items[13];
            write_io_stall_total_ms = (long)items[14];
            write_io_stall_queued_ms = (long)items[15];
            io_issue_violations_total = (int)items[16];
            io_issue_delay_total_ms = (long)items[17];
        }
    }

    public sealed class sysTableFunctionNames
    {
        public const string dm_cryptographic_provider_algorithms = "[sys].[dm_cryptographic_provider_algorithms]";
        public const string dm_cryptographic_provider_keys = "[sys].[dm_cryptographic_provider_keys]";
        public const string dm_cryptographic_provider_sessions = "[sys].[dm_cryptographic_provider_sessions]";
        public const string dm_db_database_page_allocations = "[sys].[dm_db_database_page_allocations]";
        public const string dm_db_index_operational_stats = "[sys].[dm_db_index_operational_stats]";
        public const string dm_db_index_physical_stats = "[sys].[dm_db_index_physical_stats]";
        public const string dm_db_missing_index_columns = "[sys].[dm_db_missing_index_columns]";
        public const string dm_db_objects_disabled_on_compatibility_level_change = "[sys].[dm_db_objects_disabled_on_compatibility_level_change]";
        public const string dm_db_stats_properties = "[sys].[dm_db_stats_properties]";
        public const string dm_db_stats_properties_internal = "[sys].[dm_db_stats_properties_internal]";
        public const string dm_exec_cached_plan_dependent_objects = "[sys].[dm_exec_cached_plan_dependent_objects]";
        public const string dm_exec_cursors = "[sys].[dm_exec_cursors]";
        public const string dm_exec_describe_first_result_set = "[sys].[dm_exec_describe_first_result_set]";
        public const string dm_exec_describe_first_result_set_for_object = "[sys].[dm_exec_describe_first_result_set_for_object]";
        public const string dm_exec_plan_attributes = "[sys].[dm_exec_plan_attributes]";
        public const string dm_exec_query_plan = "[sys].[dm_exec_query_plan]";
        public const string dm_exec_sql_text = "[sys].[dm_exec_sql_text]";
        public const string dm_exec_text_query_plan = "[sys].[dm_exec_text_query_plan]";
        public const string dm_exec_xml_handles = "[sys].[dm_exec_xml_handles]";
        public const string dm_fts_index_keywords = "[sys].[dm_fts_index_keywords]";
        public const string dm_fts_index_keywords_by_document = "[sys].[dm_fts_index_keywords_by_document]";
        public const string dm_fts_index_keywords_by_property = "[sys].[dm_fts_index_keywords_by_property]";
        public const string dm_fts_index_keywords_position_by_document = "[sys].[dm_fts_index_keywords_position_by_document]";
        public const string dm_fts_parser = "[sys].[dm_fts_parser]";
        public const string dm_io_virtual_file_stats = "[sys].[dm_io_virtual_file_stats]";
        public const string dm_logconsumer_cachebufferrefs = "[sys].[dm_logconsumer_cachebufferrefs]";
        public const string dm_logconsumer_privatecachebuffers = "[sys].[dm_logconsumer_privatecachebuffers]";
        public const string dm_logpool_consumers = "[sys].[dm_logpool_consumers]";
        public const string dm_logpool_sharedcachebuffers = "[sys].[dm_logpool_sharedcachebuffers]";
        public const string dm_logpoolmgr_freepools = "[sys].[dm_logpoolmgr_freepools]";
        public const string dm_logpoolmgr_respoolsize = "[sys].[dm_logpoolmgr_respoolsize]";
        public const string dm_logpoolmgr_stats = "[sys].[dm_logpoolmgr_stats]";
        public const string dm_os_volume_stats = "[sys].[dm_os_volume_stats]";
        public const string dm_sql_referenced_entities = "[sys].[dm_sql_referenced_entities]";
        public const string dm_sql_referencing_entities = "[sys].[dm_sql_referencing_entities]";
        public const string fn_builtin_permissions = "[sys].[fn_builtin_permissions]";
        public const string fn_check_object_signatures = "[sys].[fn_check_object_signatures]";
        public const string fn_column_store_row_groups = "[sys].[fn_column_store_row_groups]";
        public const string fn_dblog = "[sys].[fn_dblog]";
        public const string fn_dblog_xtp = "[sys].[fn_dblog_xtp]";
        public const string fn_dump_dblog = "[sys].[fn_dump_dblog]";
        public const string fn_dump_dblog_xtp = "[sys].[fn_dump_dblog_xtp]";
        public const string fn_EnumCurrentPrincipals = "[sys].[fn_EnumCurrentPrincipals]";
        public const string fn_get_audit_file = "[sys].[fn_get_audit_file]";
        public const string fn_get_sql = "[sys].[fn_get_sql]";
        public const string fn_helpcollations = "[sys].[fn_helpcollations]";
        public const string fn_helpdatatypemap = "[sys].[fn_helpdatatypemap]";
        public const string fn_listextendedproperty = "[sys].[fn_listextendedproperty]";
        public const string fn_MSxe_read_event_stream = "[sys].[fn_MSxe_read_event_stream]";
        public const string fn_my_permissions = "[sys].[fn_my_permissions]";
        public const string fn_PhysLocCracker = "[sys].[fn_PhysLocCracker]";
        public const string fn_replgetcolidfrombitmap = "[sys].[fn_replgetcolidfrombitmap]";
        public const string fn_RowDumpCracker = "[sys].[fn_RowDumpCracker]";
        public const string fn_servershareddrives = "[sys].[fn_servershareddrives]";
        public const string fn_sqlagent_job_history = "[sys].[fn_sqlagent_job_history]";
        public const string fn_sqlagent_jobs = "[sys].[fn_sqlagent_jobs]";
        public const string fn_sqlagent_jobsteps = "[sys].[fn_sqlagent_jobsteps]";
        public const string fn_sqlagent_jobsteps_logs = "[sys].[fn_sqlagent_jobsteps_logs]";
        public const string fn_sqlagent_subsystems = "[sys].[fn_sqlagent_subsystems]";
        public const string fn_trace_geteventinfo = "[sys].[fn_trace_geteventinfo]";
        public const string fn_trace_getfilterinfo = "[sys].[fn_trace_getfilterinfo]";
        public const string fn_trace_getinfo = "[sys].[fn_trace_getinfo]";
        public const string fn_trace_gettable = "[sys].[fn_trace_gettable]";
        public const string fn_translate_permissions = "[sys].[fn_translate_permissions]";
        public const string fn_validate_plan_guide = "[sys].[fn_validate_plan_guide]";
        public const string fn_virtualfilestats = "[sys].[fn_virtualfilestats]";
        public const string fn_virtualservernodes = "[sys].[fn_virtualservernodes]";
        public const string fn_xe_file_target_read_file = "[sys].[fn_xe_file_target_read_file]";
    }

    [SqlTableFunctionResult("sys", "dm_exec_plan_attributes")]
    public partial class dm_exec_plan_attributesResult : SqlTabularProxy
    {
        [SqlColumn("attribute", 0), SqlTypeFacets("nvarchar", false, 256)]
        public string attribute
        {
            get;
            set;
        }

        [SqlColumn("value", 1), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        [SqlColumn("is_cache_key", 2), SqlTypeFacets("bit", false)]
        public bool is_cache_key
        {
            get;
            set;
        }

        public dm_exec_plan_attributesResult()
        {
        }

        public dm_exec_plan_attributesResult(object[] items)
        {
            attribute = (string)items[0];
            value = (Object)items[1];
            is_cache_key = (bool)items[2];
        }

        public dm_exec_plan_attributesResult(string attribute, Object value, bool is_cache_key)
        {
            this.attribute = attribute;
            this.value = value;
            this.is_cache_key = is_cache_key;
        }

        public override object[] GetItemArray()
        {
            return new object[] { attribute, value, is_cache_key };
        }

        public override void SetItemArray(object[] items)
        {
            attribute = (string)items[0];
            value = (Object)items[1];
            is_cache_key = (bool)items[2];
        }
    }

    [SqlTableFunction("sys", "dm_exec_plan_attributes")]
    public partial class dm_exec_plan_attributes : SqlTableFunctionProxy<dm_exec_plan_attributes, dm_exec_plan_attributesResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] handle
        {
            get;
            set;
        }

        public dm_exec_plan_attributes()
        {
        }

        public dm_exec_plan_attributes(object[] items)
        {
            handle = (Byte[])items[0];
        }

        public dm_exec_plan_attributes(Byte[] handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_trace_geteventinfo")]
    public partial class fn_trace_geteventinfoResult : SqlTabularProxy
    {
        [SqlColumn("eventid", 0), SqlTypeFacets("int", false)]
        public int eventid
        {
            get;
            set;
        }

        [SqlColumn("columnid", 1), SqlTypeFacets("int", false)]
        public int columnid
        {
            get;
            set;
        }

        public fn_trace_geteventinfoResult()
        {
        }

        public fn_trace_geteventinfoResult(object[] items)
        {
            eventid = (int)items[0];
            columnid = (int)items[1];
        }

        public fn_trace_geteventinfoResult(int eventid, int columnid)
        {
            this.eventid = eventid;
            this.columnid = columnid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { eventid, columnid };
        }

        public override void SetItemArray(object[] items)
        {
            eventid = (int)items[0];
            columnid = (int)items[1];
        }
    }

    [SqlTableFunction("sys", "fn_trace_geteventinfo")]
    public partial class fn_trace_geteventinfo : SqlTableFunctionProxy<fn_trace_geteventinfo, fn_trace_geteventinfoResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)]
        public int? handle
        {
            get;
            set;
        }

        public fn_trace_geteventinfo()
        {
        }

        public fn_trace_geteventinfo(object[] items)
        {
            handle = (int?)items[0];
        }

        public fn_trace_geteventinfo(int? handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_sqlagent_subsystems")]
    public partial class fn_sqlagent_subsystemsResult : SqlTabularProxy
    {
        [SqlColumn("subsystem_id", 0), SqlTypeFacets("int", false)]
        public int subsystem_id
        {
            get;
            set;
        }

        [SqlColumn("subsystem", 1), SqlTypeFacets("nvarchar", false, 80)]
        public string subsystem
        {
            get;
            set;
        }

        [SqlColumn("description_id", 2), SqlTypeFacets("int", true)]
        public int? description_id
        {
            get;
            set;
        }

        [SqlColumn("subsystem_dll", 3), SqlTypeFacets("nvarchar", true, 510)]
        public string subsystem_dll
        {
            get;
            set;
        }

        [SqlColumn("agent_exe", 4), SqlTypeFacets("nvarchar", true, 510)]
        public string agent_exe
        {
            get;
            set;
        }

        [SqlColumn("start_entry_point", 5), SqlTypeFacets("nvarchar", true, 60)]
        public string start_entry_point
        {
            get;
            set;
        }

        [SqlColumn("event_entry_point", 6), SqlTypeFacets("nvarchar", true, 60)]
        public string event_entry_point
        {
            get;
            set;
        }

        [SqlColumn("stop_entry_point", 7), SqlTypeFacets("nvarchar", true, 60)]
        public string stop_entry_point
        {
            get;
            set;
        }

        [SqlColumn("max_worker_threads", 8), SqlTypeFacets("int", true)]
        public int? max_worker_threads
        {
            get;
            set;
        }

        public fn_sqlagent_subsystemsResult()
        {
        }

        public fn_sqlagent_subsystemsResult(object[] items)
        {
            subsystem_id = (int)items[0];
            subsystem = (string)items[1];
            description_id = (int?)items[2];
            subsystem_dll = (string)items[3];
            agent_exe = (string)items[4];
            start_entry_point = (string)items[5];
            event_entry_point = (string)items[6];
            stop_entry_point = (string)items[7];
            max_worker_threads = (int?)items[8];
        }

        public fn_sqlagent_subsystemsResult(int subsystem_id, string subsystem, int? description_id, string subsystem_dll, string agent_exe, string start_entry_point, string event_entry_point, string stop_entry_point, int? max_worker_threads)
        {
            this.subsystem_id = subsystem_id;
            this.subsystem = subsystem;
            this.description_id = description_id;
            this.subsystem_dll = subsystem_dll;
            this.agent_exe = agent_exe;
            this.start_entry_point = start_entry_point;
            this.event_entry_point = event_entry_point;
            this.stop_entry_point = stop_entry_point;
            this.max_worker_threads = max_worker_threads;
        }

        public override object[] GetItemArray()
        {
            return new object[] { subsystem_id, subsystem, description_id, subsystem_dll, agent_exe, start_entry_point, event_entry_point, stop_entry_point, max_worker_threads };
        }

        public override void SetItemArray(object[] items)
        {
            subsystem_id = (int)items[0];
            subsystem = (string)items[1];
            description_id = (int?)items[2];
            subsystem_dll = (string)items[3];
            agent_exe = (string)items[4];
            start_entry_point = (string)items[5];
            event_entry_point = (string)items[6];
            stop_entry_point = (string)items[7];
            max_worker_threads = (int?)items[8];
        }
    }

    [SqlTableFunction("sys", "fn_sqlagent_subsystems")]
    public partial class fn_sqlagent_subsystems : SqlTableFunctionProxy<fn_sqlagent_subsystems, fn_sqlagent_subsystemsResult>
    {
        public fn_sqlagent_subsystems()
        {
        }
    }

    [SqlTableFunctionResult("sys", "fn_replgetcolidfrombitmap")]
    public partial class fn_replgetcolidfrombitmapResult : SqlTabularProxy
    {
        [SqlColumn("colid", 0), SqlTypeFacets("int", true)]
        public int? colid
        {
            get;
            set;
        }

        public fn_replgetcolidfrombitmapResult()
        {
        }

        public fn_replgetcolidfrombitmapResult(object[] items)
        {
            colid = (int?)items[0];
        }

        public fn_replgetcolidfrombitmapResult(int? colid)
        {
            this.colid = colid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { colid };
        }

        public override void SetItemArray(object[] items)
        {
            colid = (int?)items[0];
        }
    }

    [SqlTableFunction("sys", "fn_replgetcolidfrombitmap")]
    public partial class fn_replgetcolidfrombitmap : SqlTableFunctionProxy<fn_replgetcolidfrombitmap, fn_replgetcolidfrombitmapResult>
    {
        [SqlParameter("@columns", 0, false, false), SqlTypeFacets("binary", true, 32)]
        public Byte[] columns
        {
            get;
            set;
        }

        public fn_replgetcolidfrombitmap()
        {
        }

        public fn_replgetcolidfrombitmap(object[] items)
        {
            columns = (Byte[])items[0];
        }

        public fn_replgetcolidfrombitmap(Byte[] columns)
        {
            this.columns = columns;
        }

        public override object[] GetItemArray()
        {
            return new object[] { columns };
        }

        public override void SetItemArray(object[] items)
        {
            columns = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_trace_getfilterinfo")]
    public partial class fn_trace_getfilterinfoResult : SqlTabularProxy
    {
        [SqlColumn("columnid", 0), SqlTypeFacets("int", false)]
        public int columnid
        {
            get;
            set;
        }

        [SqlColumn("logical_operator", 1), SqlTypeFacets("int", false)]
        public int logical_operator
        {
            get;
            set;
        }

        [SqlColumn("comparison_operator", 2), SqlTypeFacets("int", false)]
        public int comparison_operator
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public fn_trace_getfilterinfoResult()
        {
        }

        public fn_trace_getfilterinfoResult(object[] items)
        {
            columnid = (int)items[0];
            logical_operator = (int)items[1];
            comparison_operator = (int)items[2];
            value = (Object)items[3];
        }

        public fn_trace_getfilterinfoResult(int columnid, int logical_operator, int comparison_operator, Object value)
        {
            this.columnid = columnid;
            this.logical_operator = logical_operator;
            this.comparison_operator = comparison_operator;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { columnid, logical_operator, comparison_operator, value };
        }

        public override void SetItemArray(object[] items)
        {
            columnid = (int)items[0];
            logical_operator = (int)items[1];
            comparison_operator = (int)items[2];
            value = (Object)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_trace_getfilterinfo")]
    public partial class fn_trace_getfilterinfo : SqlTableFunctionProxy<fn_trace_getfilterinfo, fn_trace_getfilterinfoResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)]
        public int? handle
        {
            get;
            set;
        }

        public fn_trace_getfilterinfo()
        {
        }

        public fn_trace_getfilterinfo(object[] items)
        {
            handle = (int?)items[0];
        }

        public fn_trace_getfilterinfo(int? handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_column_store_row_groups")]
    public partial class fn_column_store_row_groupsResult : SqlTabularProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 1), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 2), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        [SqlColumn("row_group_id", 3), SqlTypeFacets("int", true)]
        public int? row_group_id
        {
            get;
            set;
        }

        [SqlColumn("delta_store_hobt_id", 4), SqlTypeFacets("bigint", true)]
        public long? delta_store_hobt_id
        {
            get;
            set;
        }

        [SqlColumn("state", 5), SqlTypeFacets("tinyint", true)]
        public byte? state
        {
            get;
            set;
        }

        [SqlColumn("state_description", 6), SqlTypeFacets("nvarchar", false, 120)]
        public string state_description
        {
            get;
            set;
        }

        [SqlColumn("total_rows", 7), SqlTypeFacets("bigint", true)]
        public long? total_rows
        {
            get;
            set;
        }

        [SqlColumn("deleted_rows", 8), SqlTypeFacets("bigint", true)]
        public long? deleted_rows
        {
            get;
            set;
        }

        [SqlColumn("size_in_bytes", 9), SqlTypeFacets("bigint", true)]
        public long? size_in_bytes
        {
            get;
            set;
        }

        public fn_column_store_row_groupsResult()
        {
        }

        public fn_column_store_row_groupsResult(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }

        public fn_column_store_row_groupsResult(int? object_id, int? index_id, int? partition_number, int? row_group_id, long? delta_store_hobt_id, byte? state, string state_description, long? total_rows, long? deleted_rows, long? size_in_bytes)
        {
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.row_group_id = row_group_id;
            this.delta_store_hobt_id = delta_store_hobt_id;
            this.state = state;
            this.state_description = state_description;
            this.total_rows = total_rows;
            this.deleted_rows = deleted_rows;
            this.size_in_bytes = size_in_bytes;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, index_id, partition_number, row_group_id, delta_store_hobt_id, state, state_description, total_rows, deleted_rows, size_in_bytes };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            index_id = (int?)items[1];
            partition_number = (int?)items[2];
            row_group_id = (int?)items[3];
            delta_store_hobt_id = (long?)items[4];
            state = (byte?)items[5];
            state_description = (string)items[6];
            total_rows = (long?)items[7];
            deleted_rows = (long?)items[8];
            size_in_bytes = (long?)items[9];
        }
    }

    [SqlTableFunction("sys", "fn_column_store_row_groups")]
    public partial class fn_column_store_row_groups : SqlTableFunctionProxy<fn_column_store_row_groups, fn_column_store_row_groupsResult>
    {
        [SqlParameter("@obj_id", 0, false, false), SqlTypeFacets("bigint", true)]
        public long? obj_id
        {
            get;
            set;
        }

        public fn_column_store_row_groups()
        {
        }

        public fn_column_store_row_groups(object[] items)
        {
            obj_id = (long?)items[0];
        }

        public fn_column_store_row_groups(long? obj_id)
        {
            this.obj_id = obj_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { obj_id };
        }

        public override void SetItemArray(object[] items)
        {
            obj_id = (long?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logconsumer_privatecachebuffers")]
    public partial class dm_logconsumer_privatecachebuffersResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("consumer_id", 2), SqlTypeFacets("bigint", false)]
        public long consumer_id
        {
            get;
            set;
        }

        [SqlColumn("cache_buffer", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_buffer
        {
            get;
            set;
        }

        [SqlColumn("size", 4), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("start_log_block_id", 5), SqlTypeFacets("bigint", false)]
        public long start_log_block_id
        {
            get;
            set;
        }

        [SqlColumn("last_log_block_id", 6), SqlTypeFacets("bigint", false)]
        public long last_log_block_id
        {
            get;
            set;
        }

        [SqlColumn("ref_counter", 7), SqlTypeFacets("int", false)]
        public int ref_counter
        {
            get;
            set;
        }

        [SqlColumn("is_log_read_ahead", 8), SqlTypeFacets("tinyint", false)]
        public byte is_log_read_ahead
        {
            get;
            set;
        }

        [SqlColumn("persistence_status", 9), SqlTypeFacets("int", false)]
        public int persistence_status
        {
            get;
            set;
        }

        [SqlColumn("incomplete", 10), SqlTypeFacets("tinyint", false)]
        public byte incomplete
        {
            get;
            set;
        }

        [SqlColumn("future_interest", 11), SqlTypeFacets("int", false)]
        public int future_interest
        {
            get;
            set;
        }

        [SqlColumn("is_emergent_mem", 12), SqlTypeFacets("tinyint", false)]
        public byte is_emergent_mem
        {
            get;
            set;
        }

        public dm_logconsumer_privatecachebuffersResult()
        {
        }

        public dm_logconsumer_privatecachebuffersResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            consumer_id = (long)items[2];
            cache_buffer = (Byte[])items[3];
            size = (int)items[4];
            start_log_block_id = (long)items[5];
            last_log_block_id = (long)items[6];
            ref_counter = (int)items[7];
            is_log_read_ahead = (byte)items[8];
            persistence_status = (int)items[9];
            incomplete = (byte)items[10];
            future_interest = (int)items[11];
            is_emergent_mem = (byte)items[12];
        }

        public dm_logconsumer_privatecachebuffersResult(int database_id, int recovery_unit_id, long consumer_id, Byte[] cache_buffer, int size, long start_log_block_id, long last_log_block_id, int ref_counter, byte is_log_read_ahead, int persistence_status, byte incomplete, int future_interest, byte is_emergent_mem)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.consumer_id = consumer_id;
            this.cache_buffer = cache_buffer;
            this.size = size;
            this.start_log_block_id = start_log_block_id;
            this.last_log_block_id = last_log_block_id;
            this.ref_counter = ref_counter;
            this.is_log_read_ahead = is_log_read_ahead;
            this.persistence_status = persistence_status;
            this.incomplete = incomplete;
            this.future_interest = future_interest;
            this.is_emergent_mem = is_emergent_mem;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, consumer_id, cache_buffer, size, start_log_block_id, last_log_block_id, ref_counter, is_log_read_ahead, persistence_status, incomplete, future_interest, is_emergent_mem };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            consumer_id = (long)items[2];
            cache_buffer = (Byte[])items[3];
            size = (int)items[4];
            start_log_block_id = (long)items[5];
            last_log_block_id = (long)items[6];
            ref_counter = (int)items[7];
            is_log_read_ahead = (byte)items[8];
            persistence_status = (int)items[9];
            incomplete = (byte)items[10];
            future_interest = (int)items[11];
            is_emergent_mem = (byte)items[12];
        }
    }

    [SqlTableFunction("sys", "dm_logconsumer_privatecachebuffers")]
    public partial class dm_logconsumer_privatecachebuffers : SqlTableFunctionProxy<dm_logconsumer_privatecachebuffers, dm_logconsumer_privatecachebuffersResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@ConsumerId", 1, false, false), SqlTypeFacets("bigint", true)]
        public long? ConsumerId
        {
            get;
            set;
        }

        public dm_logconsumer_privatecachebuffers()
        {
        }

        public dm_logconsumer_privatecachebuffers(object[] items)
        {
            DatabaseId = (int?)items[0];
            ConsumerId = (long?)items[1];
        }

        public dm_logconsumer_privatecachebuffers(int? DatabaseId, long? ConsumerId)
        {
            this.DatabaseId = DatabaseId;
            this.ConsumerId = ConsumerId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, ConsumerId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
            ConsumerId = (long?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_cryptographic_provider_algorithms")]
    public partial class dm_cryptographic_provider_algorithmsResult : SqlTabularProxy
    {
        [SqlColumn("algorithm_id", 0), SqlTypeFacets("int", true)]
        public int? algorithm_id
        {
            get;
            set;
        }

        [SqlColumn("algorithm_tag", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string algorithm_tag
        {
            get;
            set;
        }

        [SqlColumn("key_type", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string key_type
        {
            get;
            set;
        }

        [SqlColumn("key_length", 3), SqlTypeFacets("int", true)]
        public int? key_length
        {
            get;
            set;
        }

        public dm_cryptographic_provider_algorithmsResult()
        {
        }

        public dm_cryptographic_provider_algorithmsResult(object[] items)
        {
            algorithm_id = (int?)items[0];
            algorithm_tag = (string)items[1];
            key_type = (string)items[2];
            key_length = (int?)items[3];
        }

        public dm_cryptographic_provider_algorithmsResult(int? algorithm_id, string algorithm_tag, string key_type, int? key_length)
        {
            this.algorithm_id = algorithm_id;
            this.algorithm_tag = algorithm_tag;
            this.key_type = key_type;
            this.key_length = key_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { algorithm_id, algorithm_tag, key_type, key_length };
        }

        public override void SetItemArray(object[] items)
        {
            algorithm_id = (int?)items[0];
            algorithm_tag = (string)items[1];
            key_type = (string)items[2];
            key_length = (int?)items[3];
        }
    }

    [SqlTableFunction("sys", "dm_cryptographic_provider_algorithms")]
    public partial class dm_cryptographic_provider_algorithms : SqlTableFunctionProxy<dm_cryptographic_provider_algorithms, dm_cryptographic_provider_algorithmsResult>
    {
        [SqlParameter("@ProviderId", 0, false, false), SqlTypeFacets("int", true)]
        public int? ProviderId
        {
            get;
            set;
        }

        public dm_cryptographic_provider_algorithms()
        {
        }

        public dm_cryptographic_provider_algorithms(object[] items)
        {
            ProviderId = (int?)items[0];
        }

        public dm_cryptographic_provider_algorithms(int? ProviderId)
        {
            this.ProviderId = ProviderId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ProviderId };
        }

        public override void SetItemArray(object[] items)
        {
            ProviderId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_check_object_signatures")]
    public partial class fn_check_object_signaturesResult : SqlTabularProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("nvarchar", true, 120)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("entity_id", 1), SqlTypeFacets("int", false)]
        public int entity_id
        {
            get;
            set;
        }

        [SqlColumn("is_signed", 2), SqlTypeFacets("int", false)]
        public int is_signed
        {
            get;
            set;
        }

        [SqlColumn("is_signature_valid", 3), SqlTypeFacets("int", false)]
        public int is_signature_valid
        {
            get;
            set;
        }

        public fn_check_object_signaturesResult()
        {
        }

        public fn_check_object_signaturesResult(object[] items)
        {
            type = (string)items[0];
            entity_id = (int)items[1];
            is_signed = (int)items[2];
            is_signature_valid = (int)items[3];
        }

        public fn_check_object_signaturesResult(string type, int entity_id, int is_signed, int is_signature_valid)
        {
            this.type = type;
            this.entity_id = entity_id;
            this.is_signed = is_signed;
            this.is_signature_valid = is_signature_valid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, entity_id, is_signed, is_signature_valid };
        }

        public override void SetItemArray(object[] items)
        {
            type = (string)items[0];
            entity_id = (int)items[1];
            is_signed = (int)items[2];
            is_signature_valid = (int)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_check_object_signatures")]
    public partial class fn_check_object_signatures : SqlTableFunctionProxy<fn_check_object_signatures, fn_check_object_signaturesResult>
    {
        [SqlParameter("@class", 0, false, false), SqlTypeFacets("sysname", true)]
        public string @class
        {
            get;
            set;
        }

        [SqlParameter("@thumbprint", 1, false, false), SqlTypeFacets("varbinary", true, 20)]
        public Byte[] thumbprint
        {
            get;
            set;
        }

        public fn_check_object_signatures()
        {
        }

        public fn_check_object_signatures(object[] items)
        {
            @class = (string)items[0];
            thumbprint = (Byte[])items[1];
        }

        public fn_check_object_signatures(string @class, Byte[] thumbprint)
        {
            this.@class = @class;
            this.thumbprint = thumbprint;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, thumbprint };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (string)items[0];
            thumbprint = (Byte[])items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_fts_index_keywords_by_property")]
    public partial class dm_fts_index_keywords_by_propertyResult : SqlTabularProxy
    {
        [SqlColumn("keyword", 0), SqlTypeFacets("varbinary", false, 128)]
        public Byte[] keyword
        {
            get;
            set;
        }

        [SqlColumn("display_term", 1), SqlTypeFacets("nvarchar", false, 8000)]
        public string display_term
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("document_id", 3), SqlTypeFacets("bigint", true)]
        public long? document_id
        {
            get;
            set;
        }

        [SqlColumn("property_id", 4), SqlTypeFacets("int", true)]
        public int? property_id
        {
            get;
            set;
        }

        public dm_fts_index_keywords_by_propertyResult()
        {
        }

        public dm_fts_index_keywords_by_propertyResult(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            property_id = (int?)items[4];
        }

        public dm_fts_index_keywords_by_propertyResult(Byte[] keyword, string display_term, int column_id, long? document_id, int? property_id)
        {
            this.keyword = keyword;
            this.display_term = display_term;
            this.column_id = column_id;
            this.document_id = document_id;
            this.property_id = property_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { keyword, display_term, column_id, document_id, property_id };
        }

        public override void SetItemArray(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            property_id = (int?)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_fts_index_keywords_by_property")]
    public partial class dm_fts_index_keywords_by_property : SqlTableFunctionProxy<dm_fts_index_keywords_by_property, dm_fts_index_keywords_by_propertyResult>
    {
        [SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)]
        public int? dbid
        {
            get;
            set;
        }

        [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)]
        public int? objid
        {
            get;
            set;
        }

        public dm_fts_index_keywords_by_property()
        {
        }

        public dm_fts_index_keywords_by_property(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }

        public dm_fts_index_keywords_by_property(int? dbid, int? objid)
        {
            this.dbid = dbid;
            this.objid = objid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objid };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_sql_text")]
    public partial class dm_exec_sql_textResult : SqlTabularProxy
    {
        [SqlColumn("dbid", 0), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("objectid", 1), SqlTypeFacets("int", true)]
        public int? objectid
        {
            get;
            set;
        }

        [SqlColumn("number", 2), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("encrypted", 3), SqlTypeFacets("bit", false)]
        public bool encrypted
        {
            get;
            set;
        }

        [SqlColumn("text", 4), SqlTypeFacets("nvarchar", true, -1)]
        public string text
        {
            get;
            set;
        }

        public dm_exec_sql_textResult()
        {
        }

        public dm_exec_sql_textResult(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            text = (string)items[4];
        }

        public dm_exec_sql_textResult(short? dbid, int? objectid, short? number, bool encrypted, string text)
        {
            this.dbid = dbid;
            this.objectid = objectid;
            this.number = number;
            this.encrypted = encrypted;
            this.text = text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objectid, number, encrypted, text };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            text = (string)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_exec_sql_text")]
    public partial class dm_exec_sql_text : SqlTableFunctionProxy<dm_exec_sql_text, dm_exec_sql_textResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] handle
        {
            get;
            set;
        }

        public dm_exec_sql_text()
        {
        }

        public dm_exec_sql_text(object[] items)
        {
            handle = (Byte[])items[0];
        }

        public dm_exec_sql_text(Byte[] handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_servershareddrives")]
    public partial class fn_servershareddrivesResult : SqlTabularProxy
    {
        [SqlColumn("DriveName", 0), SqlTypeFacets("nchar", false, 2)]
        public string DriveName
        {
            get;
            set;
        }

        public fn_servershareddrivesResult()
        {
        }

        public fn_servershareddrivesResult(object[] items)
        {
            DriveName = (string)items[0];
        }

        public fn_servershareddrivesResult(string DriveName)
        {
            this.DriveName = DriveName;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DriveName };
        }

        public override void SetItemArray(object[] items)
        {
            DriveName = (string)items[0];
        }
    }

    [SqlTableFunction("sys", "fn_servershareddrives")]
    public partial class fn_servershareddrives : SqlTableFunctionProxy<fn_servershareddrives, fn_servershareddrivesResult>
    {
        public fn_servershareddrives()
        {
        }
    }

    [SqlTableFunctionResult("sys", "dm_logpool_sharedcachebuffers")]
    public partial class dm_logpool_sharedcachebuffersResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("log_block_id", 2), SqlTypeFacets("bigint", false)]
        public long log_block_id
        {
            get;
            set;
        }

        [SqlColumn("cache_buffer", 3), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_buffer
        {
            get;
            set;
        }

        [SqlColumn("size", 4), SqlTypeFacets("int", false)]
        public int size
        {
            get;
            set;
        }

        [SqlColumn("ref_counter", 5), SqlTypeFacets("int", false)]
        public int ref_counter
        {
            get;
            set;
        }

        [SqlColumn("future_interest", 6), SqlTypeFacets("int", false)]
        public int future_interest
        {
            get;
            set;
        }

        [SqlColumn("is_pushed", 7), SqlTypeFacets("tinyint", false)]
        public byte is_pushed
        {
            get;
            set;
        }

        [SqlColumn("disk_read_consumer_id", 8), SqlTypeFacets("bigint", false)]
        public long disk_read_consumer_id
        {
            get;
            set;
        }

        [SqlColumn("is_log_read_ahead", 9), SqlTypeFacets("tinyint", false)]
        public byte is_log_read_ahead
        {
            get;
            set;
        }

        [SqlColumn("is_tran_consumed", 10), SqlTypeFacets("tinyint", false)]
        public byte is_tran_consumed
        {
            get;
            set;
        }

        [SqlColumn("is_hadron_consumed", 11), SqlTypeFacets("tinyint", false)]
        public byte is_hadron_consumed
        {
            get;
            set;
        }

        [SqlColumn("is_replay_consumed", 12), SqlTypeFacets("tinyint", false)]
        public byte is_replay_consumed
        {
            get;
            set;
        }

        [SqlColumn("is_repl_consumed", 13), SqlTypeFacets("tinyint", false)]
        public byte is_repl_consumed
        {
            get;
            set;
        }

        [SqlColumn("persistence_status", 14), SqlTypeFacets("int", false)]
        public int persistence_status
        {
            get;
            set;
        }

        [SqlColumn("entry_scan_direction", 15), SqlTypeFacets("int", false)]
        public int entry_scan_direction
        {
            get;
            set;
        }

        [SqlColumn("weight", 16), SqlTypeFacets("int", false)]
        public int weight
        {
            get;
            set;
        }

        public dm_logpool_sharedcachebuffersResult()
        {
        }

        public dm_logpool_sharedcachebuffersResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            log_block_id = (long)items[2];
            cache_buffer = (Byte[])items[3];
            size = (int)items[4];
            ref_counter = (int)items[5];
            future_interest = (int)items[6];
            is_pushed = (byte)items[7];
            disk_read_consumer_id = (long)items[8];
            is_log_read_ahead = (byte)items[9];
            is_tran_consumed = (byte)items[10];
            is_hadron_consumed = (byte)items[11];
            is_replay_consumed = (byte)items[12];
            is_repl_consumed = (byte)items[13];
            persistence_status = (int)items[14];
            entry_scan_direction = (int)items[15];
            weight = (int)items[16];
        }

        public dm_logpool_sharedcachebuffersResult(int database_id, int recovery_unit_id, long log_block_id, Byte[] cache_buffer, int size, int ref_counter, int future_interest, byte is_pushed, long disk_read_consumer_id, byte is_log_read_ahead, byte is_tran_consumed, byte is_hadron_consumed, byte is_replay_consumed, byte is_repl_consumed, int persistence_status, int entry_scan_direction, int weight)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.log_block_id = log_block_id;
            this.cache_buffer = cache_buffer;
            this.size = size;
            this.ref_counter = ref_counter;
            this.future_interest = future_interest;
            this.is_pushed = is_pushed;
            this.disk_read_consumer_id = disk_read_consumer_id;
            this.is_log_read_ahead = is_log_read_ahead;
            this.is_tran_consumed = is_tran_consumed;
            this.is_hadron_consumed = is_hadron_consumed;
            this.is_replay_consumed = is_replay_consumed;
            this.is_repl_consumed = is_repl_consumed;
            this.persistence_status = persistence_status;
            this.entry_scan_direction = entry_scan_direction;
            this.weight = weight;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, log_block_id, cache_buffer, size, ref_counter, future_interest, is_pushed, disk_read_consumer_id, is_log_read_ahead, is_tran_consumed, is_hadron_consumed, is_replay_consumed, is_repl_consumed, persistence_status, entry_scan_direction, weight };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            log_block_id = (long)items[2];
            cache_buffer = (Byte[])items[3];
            size = (int)items[4];
            ref_counter = (int)items[5];
            future_interest = (int)items[6];
            is_pushed = (byte)items[7];
            disk_read_consumer_id = (long)items[8];
            is_log_read_ahead = (byte)items[9];
            is_tran_consumed = (byte)items[10];
            is_hadron_consumed = (byte)items[11];
            is_replay_consumed = (byte)items[12];
            is_repl_consumed = (byte)items[13];
            persistence_status = (int)items[14];
            entry_scan_direction = (int)items[15];
            weight = (int)items[16];
        }
    }

    [SqlTableFunction("sys", "dm_logpool_sharedcachebuffers")]
    public partial class dm_logpool_sharedcachebuffers : SqlTableFunctionProxy<dm_logpool_sharedcachebuffers, dm_logpool_sharedcachebuffersResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        public dm_logpool_sharedcachebuffers()
        {
        }

        public dm_logpool_sharedcachebuffers(object[] items)
        {
            DatabaseId = (int?)items[0];
        }

        public dm_logpool_sharedcachebuffers(int? DatabaseId)
        {
            this.DatabaseId = DatabaseId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_fts_index_keywords_by_document")]
    public partial class dm_fts_index_keywords_by_documentResult : SqlTabularProxy
    {
        [SqlColumn("keyword", 0), SqlTypeFacets("varbinary", false, 128)]
        public Byte[] keyword
        {
            get;
            set;
        }

        [SqlColumn("display_term", 1), SqlTypeFacets("nvarchar", false, 8000)]
        public string display_term
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("document_id", 3), SqlTypeFacets("bigint", true)]
        public long? document_id
        {
            get;
            set;
        }

        [SqlColumn("occurrence_count", 4), SqlTypeFacets("int", true)]
        public int? occurrence_count
        {
            get;
            set;
        }

        public dm_fts_index_keywords_by_documentResult()
        {
        }

        public dm_fts_index_keywords_by_documentResult(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            occurrence_count = (int?)items[4];
        }

        public dm_fts_index_keywords_by_documentResult(Byte[] keyword, string display_term, int column_id, long? document_id, int? occurrence_count)
        {
            this.keyword = keyword;
            this.display_term = display_term;
            this.column_id = column_id;
            this.document_id = document_id;
            this.occurrence_count = occurrence_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { keyword, display_term, column_id, document_id, occurrence_count };
        }

        public override void SetItemArray(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            occurrence_count = (int?)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_fts_index_keywords_by_document")]
    public partial class dm_fts_index_keywords_by_document : SqlTableFunctionProxy<dm_fts_index_keywords_by_document, dm_fts_index_keywords_by_documentResult>
    {
        [SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)]
        public int? dbid
        {
            get;
            set;
        }

        [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)]
        public int? objid
        {
            get;
            set;
        }

        public dm_fts_index_keywords_by_document()
        {
        }

        public dm_fts_index_keywords_by_document(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }

        public dm_fts_index_keywords_by_document(int? dbid, int? objid)
        {
            this.dbid = dbid;
            this.objid = objid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objid };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_dblog_xtp")]
    public partial class fn_dblog_xtpResult : SqlTabularProxy
    {
        [SqlColumn("Current LSN", 0), SqlTypeFacets("nvarchar", false, 46)]
        public string Current_LSN
        {
            get;
            set;
        }

        [SqlColumn("Operation", 1), SqlTypeFacets("nvarchar", false, 62)]
        public string Operation
        {
            get;
            set;
        }

        [SqlColumn("Context", 2), SqlTypeFacets("nvarchar", false, 62)]
        public string Context
        {
            get;
            set;
        }

        [SqlColumn("Transaction ID", 3), SqlTypeFacets("nvarchar", false, 28)]
        public string Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("LogBlockGeneration", 4), SqlTypeFacets("bigint", false)]
        public long LogBlockGeneration
        {
            get;
            set;
        }

        [SqlColumn("Tag Bits", 5), SqlTypeFacets("binary", false, 2)]
        public Byte[] Tag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Record Fixed Length", 6), SqlTypeFacets("smallint", false)]
        public short Log_Record_Fixed_Length
        {
            get;
            set;
        }

        [SqlColumn("Log Record Length", 7), SqlTypeFacets("smallint", false)]
        public short Log_Record_Length
        {
            get;
            set;
        }

        [SqlColumn("Previous LSN", 8), SqlTypeFacets("nvarchar", false, 46)]
        public string Previous_LSN
        {
            get;
            set;
        }

        [SqlColumn("Flag Bits", 9), SqlTypeFacets("binary", false, 2)]
        public Byte[] Flag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Reserve", 10), SqlTypeFacets("int", false)]
        public int Log_Reserve
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitId", 11), SqlTypeFacets("bigint", true)]
        public long? AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitName", 12), SqlTypeFacets("nvarchar", true, 774)]
        public string AllocUnitName
        {
            get;
            set;
        }

        [SqlColumn("Page ID", 13), SqlTypeFacets("nvarchar", true, 28)]
        public string Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Slot ID", 14), SqlTypeFacets("int", true)]
        public int? Slot_ID
        {
            get;
            set;
        }

        [SqlColumn("Previous Page LSN", 15), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("PartitionId", 16), SqlTypeFacets("bigint", true)]
        public long? PartitionId
        {
            get;
            set;
        }

        [SqlColumn("RowFlags", 17), SqlTypeFacets("smallint", true)]
        public short? RowFlags
        {
            get;
            set;
        }

        [SqlColumn("Num Elements", 18), SqlTypeFacets("smallint", true)]
        public short? Num_Elements
        {
            get;
            set;
        }

        [SqlColumn("Offset in Row", 19), SqlTypeFacets("smallint", true)]
        public short? Offset_in_Row
        {
            get;
            set;
        }

        [SqlColumn("Modify Size", 20), SqlTypeFacets("smallint", true)]
        public short? Modify_Size
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint Begin", 21), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_Begin
        {
            get;
            set;
        }

        [SqlColumn("CHKPT Begin DB Version", 22), SqlTypeFacets("smallint", true)]
        public short? CHKPT_Begin_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Max XDESID", 23), SqlTypeFacets("nvarchar", true, 28)]
        public string Max_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Num Transactions", 24), SqlTypeFacets("smallint", true)]
        public short? Num_Transactions
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint End", 25), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_End
        {
            get;
            set;
        }

        [SqlColumn("CHKPT End DB Version", 26), SqlTypeFacets("smallint", true)]
        public short? CHKPT_End_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Minimum LSN", 27), SqlTypeFacets("nvarchar", true, 46)]
        public string Minimum_LSN
        {
            get;
            set;
        }

        [SqlColumn("Dirty Pages", 28), SqlTypeFacets("int", true)]
        public int? Dirty_Pages
        {
            get;
            set;
        }

        [SqlColumn("Oldest Replicated Begin LSN", 29), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Replicated_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Next Replicated End LSN", 30), SqlTypeFacets("nvarchar", true, 46)]
        public string Next_Replicated_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed Backup End LSN", 31), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_Backup_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed End LSN", 32), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Min Hold LSN", 33), SqlTypeFacets("nvarchar", true, 46)]
        public string Repl_Min_Hold_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server UID", 34), SqlTypeFacets("int", true)]
        public int? Server_UID
        {
            get;
            set;
        }

        [SqlColumn("SPID", 35), SqlTypeFacets("int", true)]
        public int? SPID
        {
            get;
            set;
        }

        [SqlColumn("Beginlog Status", 36), SqlTypeFacets("binary", true, 4)]
        public Byte[] Beginlog_Status
        {
            get;
            set;
        }

        [SqlColumn("Xact Type", 37), SqlTypeFacets("int", true)]
        public int? Xact_Type
        {
            get;
            set;
        }

        [SqlColumn("Begin Time", 38), SqlTypeFacets("nvarchar", true, 48)]
        public string Begin_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Name", 39), SqlTypeFacets("nvarchar", true, 66)]
        public string Transaction_Name
        {
            get;
            set;
        }

        [SqlColumn("Transaction SID", 40), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] Transaction_SID
        {
            get;
            set;
        }

        [SqlColumn("Parent Transaction ID", 41), SqlTypeFacets("nvarchar", true, 28)]
        public string Parent_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active Transaction ID", 42), SqlTypeFacets("nvarchar", true, 28)]
        public string Oldest_Active_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact ID", 43), SqlTypeFacets("bigint", true)]
        public long? Xact_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node ID", 44), SqlTypeFacets("int", true)]
        public int? Xact_Node_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node Local ID", 45), SqlTypeFacets("int", true)]
        public int? Xact_Node_Local_ID
        {
            get;
            set;
        }

        [SqlColumn("End AGE", 46), SqlTypeFacets("bigint", true)]
        public long? End_AGE
        {
            get;
            set;
        }

        [SqlColumn("End Time", 47), SqlTypeFacets("nvarchar", true, 48)]
        public string End_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Begin", 48), SqlTypeFacets("nvarchar", true, 46)]
        public string Transaction_Begin
        {
            get;
            set;
        }

        [SqlColumn("Replicated Records", 49), SqlTypeFacets("bigint", true)]
        public long? Replicated_Records
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active LSN", 50), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Active_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server Name", 51), SqlTypeFacets("nvarchar", true, 258)]
        public string Server_Name
        {
            get;
            set;
        }

        [SqlColumn("Database Name", 52), SqlTypeFacets("nvarchar", true, 258)]
        public string Database_Name
        {
            get;
            set;
        }

        [SqlColumn("Mark Name", 53), SqlTypeFacets("nvarchar", true, 66)]
        public string Mark_Name
        {
            get;
            set;
        }

        [SqlColumn("Repl Partition ID", 54), SqlTypeFacets("int", true)]
        public int? Repl_Partition_ID
        {
            get;
            set;
        }

        [SqlColumn("Repl Epoch", 55), SqlTypeFacets("int", true)]
        public int? Repl_Epoch
        {
            get;
            set;
        }

        [SqlColumn("Repl CSN", 56), SqlTypeFacets("bigint", true)]
        public long? Repl_CSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Flags", 57), SqlTypeFacets("int", true)]
        public int? Repl_Flags
        {
            get;
            set;
        }

        [SqlColumn("Repl Msg", 58), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Repl_Msg
        {
            get;
            set;
        }

        [SqlColumn("Repl Source Commit Time", 59), SqlTypeFacets("nvarchar", true, 48)]
        public string Repl_Source_Commit_Time
        {
            get;
            set;
        }

        [SqlColumn("Master XDESID", 60), SqlTypeFacets("nvarchar", true, 28)]
        public string Master_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Master DBID", 61), SqlTypeFacets("int", true)]
        public int? Master_DBID
        {
            get;
            set;
        }

        [SqlColumn("Preplog Begin LSN", 62), SqlTypeFacets("nvarchar", true, 46)]
        public string Preplog_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Prepare Time", 63), SqlTypeFacets("nvarchar", true, 48)]
        public string Prepare_Time
        {
            get;
            set;
        }

        [SqlColumn("Virtual Clock", 64), SqlTypeFacets("bigint", true)]
        public long? Virtual_Clock
        {
            get;
            set;
        }

        [SqlColumn("Previous Savepoint", 65), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Savepoint
        {
            get;
            set;
        }

        [SqlColumn("Savepoint Name", 66), SqlTypeFacets("nvarchar", true, 66)]
        public string Savepoint_Name
        {
            get;
            set;
        }

        [SqlColumn("Rowbits First Bit", 67), SqlTypeFacets("smallint", true)]
        public short? Rowbits_First_Bit
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Count", 68), SqlTypeFacets("smallint", true)]
        public short? Rowbits_Bit_Count
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Value", 69), SqlTypeFacets("binary", true, 1)]
        public Byte[] Rowbits_Bit_Value
        {
            get;
            set;
        }

        [SqlColumn("Number of Locks", 70), SqlTypeFacets("smallint", true)]
        public short? Number_of_Locks
        {
            get;
            set;
        }

        [SqlColumn("Lock Information", 71), SqlTypeFacets("nvarchar", true, 512)]
        public string Lock_Information
        {
            get;
            set;
        }

        [SqlColumn("LSN before writes", 72), SqlTypeFacets("nvarchar", true, 46)]
        public string LSN_before_writes
        {
            get;
            set;
        }

        [SqlColumn("Pages Written", 73), SqlTypeFacets("smallint", true)]
        public short? Pages_Written
        {
            get;
            set;
        }

        [SqlColumn("Command Type", 74), SqlTypeFacets("int", true)]
        public int? Command_Type
        {
            get;
            set;
        }

        [SqlColumn("Publication ID", 75), SqlTypeFacets("int", true)]
        public int? Publication_ID
        {
            get;
            set;
        }

        [SqlColumn("Article ID", 76), SqlTypeFacets("int", true)]
        public int? Article_ID
        {
            get;
            set;
        }

        [SqlColumn("Partial Status", 77), SqlTypeFacets("int", true)]
        public int? Partial_Status
        {
            get;
            set;
        }

        [SqlColumn("Command", 78), SqlTypeFacets("nvarchar", true, 52)]
        public string Command
        {
            get;
            set;
        }

        [SqlColumn("Byte Offset", 79), SqlTypeFacets("smallint", true)]
        public short? Byte_Offset
        {
            get;
            set;
        }

        [SqlColumn("New Value", 80), SqlTypeFacets("binary", true, 1)]
        public Byte[] New_Value
        {
            get;
            set;
        }

        [SqlColumn("Old Value", 81), SqlTypeFacets("binary", true, 1)]
        public Byte[] Old_Value
        {
            get;
            set;
        }

        [SqlColumn("New Split Page", 82), SqlTypeFacets("nvarchar", true, 28)]
        public string New_Split_Page
        {
            get;
            set;
        }

        [SqlColumn("Rows Deleted", 83), SqlTypeFacets("smallint", true)]
        public short? Rows_Deleted
        {
            get;
            set;
        }

        [SqlColumn("Bytes Freed", 84), SqlTypeFacets("smallint", true)]
        public short? Bytes_Freed
        {
            get;
            set;
        }

        [SqlColumn("CI Table Id", 85), SqlTypeFacets("int", true)]
        public int? CI_Table_Id
        {
            get;
            set;
        }

        [SqlColumn("CI Index Id", 86), SqlTypeFacets("smallint", true)]
        public short? CI_Index_Id
        {
            get;
            set;
        }

        [SqlColumn("NewAllocUnitId", 87), SqlTypeFacets("bigint", true)]
        public long? NewAllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("FileGroup ID", 88), SqlTypeFacets("smallint", true)]
        public short? FileGroup_ID
        {
            get;
            set;
        }

        [SqlColumn("Meta Status", 89), SqlTypeFacets("binary", true, 4)]
        public Byte[] Meta_Status
        {
            get;
            set;
        }

        [SqlColumn("File Status", 90), SqlTypeFacets("binary", true, 4)]
        public Byte[] File_Status
        {
            get;
            set;
        }

        [SqlColumn("File ID", 91), SqlTypeFacets("smallint", true)]
        public short? File_ID
        {
            get;
            set;
        }

        [SqlColumn("Physical Name", 92), SqlTypeFacets("nvarchar", true, 522)]
        public string Physical_Name
        {
            get;
            set;
        }

        [SqlColumn("Logical Name", 93), SqlTypeFacets("nvarchar", true, 258)]
        public string Logical_Name
        {
            get;
            set;
        }

        [SqlColumn("Format LSN", 94), SqlTypeFacets("nvarchar", true, 46)]
        public string Format_LSN
        {
            get;
            set;
        }

        [SqlColumn("RowsetId", 95), SqlTypeFacets("bigint", true)]
        public long? RowsetId
        {
            get;
            set;
        }

        [SqlColumn("TextPtr", 96), SqlTypeFacets("binary", true, 16)]
        public Byte[] TextPtr
        {
            get;
            set;
        }

        [SqlColumn("Column Offset", 97), SqlTypeFacets("int", true)]
        public int? Column_Offset
        {
            get;
            set;
        }

        [SqlColumn("Flags", 98), SqlTypeFacets("int", true)]
        public int? Flags
        {
            get;
            set;
        }

        [SqlColumn("Text Size", 99), SqlTypeFacets("bigint", true)]
        public long? Text_Size
        {
            get;
            set;
        }

        [SqlColumn("Offset", 100), SqlTypeFacets("bigint", true)]
        public long? Offset
        {
            get;
            set;
        }

        [SqlColumn("Old Size", 101), SqlTypeFacets("bigint", true)]
        public long? Old_Size
        {
            get;
            set;
        }

        [SqlColumn("New Size", 102), SqlTypeFacets("bigint", true)]
        public long? New_Size
        {
            get;
            set;
        }

        [SqlColumn("Description", 103), SqlTypeFacets("nvarchar", false, 512)]
        public string Description
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent count", 104), SqlTypeFacets("int", true)]
        public int? Bulk_allocated_extent_count
        {
            get;
            set;
        }

        [SqlColumn("Bulk RowsetId", 105), SqlTypeFacets("bigint", true)]
        public long? Bulk_RowsetId
        {
            get;
            set;
        }

        [SqlColumn("Bulk AllocUnitId", 106), SqlTypeFacets("bigint", true)]
        public long? Bulk_AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocation first IAM Page ID", 107), SqlTypeFacets("nvarchar", true, 28)]
        public string Bulk_allocation_first_IAM_Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent ids", 108), SqlTypeFacets("nvarchar", true, 1922)]
        public string Bulk_allocated_extent_ids
        {
            get;
            set;
        }

        [SqlColumn("VLFs added", 109), SqlTypeFacets("nvarchar", true, 1376)]
        public string VLFs_added
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache Id", 110), SqlTypeFacets("int", true)]
        public int? InvalidateCache_Id
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache keys", 111), SqlTypeFacets("nvarchar", true, 512)]
        public string InvalidateCache_keys
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page Id", 112), SqlTypeFacets("nvarchar", true, 28)]
        public string CopyVerionInfo_Source_Page_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page LSN", 113), SqlTypeFacets("nvarchar", true, 46)]
        public string CopyVerionInfo_Source_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Id", 114), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Count", 115), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Count
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 0", 116), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_0
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 1", 117), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_1
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 2", 118), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_2
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 3", 119), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_3
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 4", 120), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_4
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 5", 121), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_5
        {
            get;
            set;
        }

        [SqlColumn("Compression Log Type", 122), SqlTypeFacets("smallint", true)]
        public short? Compression_Log_Type
        {
            get;
            set;
        }

        [SqlColumn("Compression Info", 123), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Compression_Info
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageType", 124), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageType
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageFlags", 125), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageFlags
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageLevel", 126), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageLevel
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageStat", 127), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageStat
        {
            get;
            set;
        }

        [SqlColumn("PageFormat FormatOption", 128), SqlTypeFacets("smallint", true)]
        public short? PageFormat_FormatOption
        {
            get;
            set;
        }

        [SqlColumn("Log Record", 129), SqlTypeFacets("varbinary", false, 8000)]
        public Byte[] Log_Record
        {
            get;
            set;
        }

        [SqlColumn("operation_desc", 130), SqlTypeFacets("nvarchar", true, 60)]
        public string operation_desc
        {
            get;
            set;
        }

        [SqlColumn("tx_end_timestamp", 131), SqlTypeFacets("bigint", true)]
        public long? tx_end_timestamp
        {
            get;
            set;
        }

        [SqlColumn("total_size", 132), SqlTypeFacets("int", true)]
        public int? total_size
        {
            get;
            set;
        }

        [SqlColumn("table_id", 133), SqlTypeFacets("bigint", true)]
        public long? table_id
        {
            get;
            set;
        }

        [SqlColumn("newrow_identity", 134), SqlTypeFacets("bigint", true)]
        public long? newrow_identity
        {
            get;
            set;
        }

        [SqlColumn("newrow_data", 135), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] newrow_data
        {
            get;
            set;
        }

        [SqlColumn("newrow_datasize", 136), SqlTypeFacets("int", true)]
        public int? newrow_datasize
        {
            get;
            set;
        }

        [SqlColumn("oldrow_begin_timestamp", 137), SqlTypeFacets("bigint", true)]
        public long? oldrow_begin_timestamp
        {
            get;
            set;
        }

        [SqlColumn("oldrow_identity", 138), SqlTypeFacets("bigint", true)]
        public long? oldrow_identity
        {
            get;
            set;
        }

        [SqlColumn("oldrow_key_data", 139), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] oldrow_key_data
        {
            get;
            set;
        }

        [SqlColumn("oldrow_key_datasize", 140), SqlTypeFacets("int", true)]
        public int? oldrow_key_datasize
        {
            get;
            set;
        }

        [SqlColumn("xtp_description", 141), SqlTypeFacets("nvarchar", true, 2048)]
        public string xtp_description
        {
            get;
            set;
        }

        public fn_dblog_xtpResult()
        {
        }

        public fn_dblog_xtpResult(object[] items)
        {
            Current_LSN = (string)items[0];
            Operation = (string)items[1];
            Context = (string)items[2];
            Transaction_ID = (string)items[3];
            LogBlockGeneration = (long)items[4];
            Tag_Bits = (Byte[])items[5];
            Log_Record_Fixed_Length = (short)items[6];
            Log_Record_Length = (short)items[7];
            Previous_LSN = (string)items[8];
            Flag_Bits = (Byte[])items[9];
            Log_Reserve = (int)items[10];
            AllocUnitId = (long?)items[11];
            AllocUnitName = (string)items[12];
            Page_ID = (string)items[13];
            Slot_ID = (int?)items[14];
            Previous_Page_LSN = (string)items[15];
            PartitionId = (long?)items[16];
            RowFlags = (short?)items[17];
            Num_Elements = (short?)items[18];
            Offset_in_Row = (short?)items[19];
            Modify_Size = (short?)items[20];
            Checkpoint_Begin = (string)items[21];
            CHKPT_Begin_DB_Version = (short?)items[22];
            Max_XDESID = (string)items[23];
            Num_Transactions = (short?)items[24];
            Checkpoint_End = (string)items[25];
            CHKPT_End_DB_Version = (short?)items[26];
            Minimum_LSN = (string)items[27];
            Dirty_Pages = (int?)items[28];
            Oldest_Replicated_Begin_LSN = (string)items[29];
            Next_Replicated_End_LSN = (string)items[30];
            Last_Distributed_Backup_End_LSN = (string)items[31];
            Last_Distributed_End_LSN = (string)items[32];
            Repl_Min_Hold_LSN = (string)items[33];
            Server_UID = (int?)items[34];
            SPID = (int?)items[35];
            Beginlog_Status = (Byte[])items[36];
            Xact_Type = (int?)items[37];
            Begin_Time = (string)items[38];
            Transaction_Name = (string)items[39];
            Transaction_SID = (Byte[])items[40];
            Parent_Transaction_ID = (string)items[41];
            Oldest_Active_Transaction_ID = (string)items[42];
            Xact_ID = (long?)items[43];
            Xact_Node_ID = (int?)items[44];
            Xact_Node_Local_ID = (int?)items[45];
            End_AGE = (long?)items[46];
            End_Time = (string)items[47];
            Transaction_Begin = (string)items[48];
            Replicated_Records = (long?)items[49];
            Oldest_Active_LSN = (string)items[50];
            Server_Name = (string)items[51];
            Database_Name = (string)items[52];
            Mark_Name = (string)items[53];
            Repl_Partition_ID = (int?)items[54];
            Repl_Epoch = (int?)items[55];
            Repl_CSN = (long?)items[56];
            Repl_Flags = (int?)items[57];
            Repl_Msg = (Byte[])items[58];
            Repl_Source_Commit_Time = (string)items[59];
            Master_XDESID = (string)items[60];
            Master_DBID = (int?)items[61];
            Preplog_Begin_LSN = (string)items[62];
            Prepare_Time = (string)items[63];
            Virtual_Clock = (long?)items[64];
            Previous_Savepoint = (string)items[65];
            Savepoint_Name = (string)items[66];
            Rowbits_First_Bit = (short?)items[67];
            Rowbits_Bit_Count = (short?)items[68];
            Rowbits_Bit_Value = (Byte[])items[69];
            Number_of_Locks = (short?)items[70];
            Lock_Information = (string)items[71];
            LSN_before_writes = (string)items[72];
            Pages_Written = (short?)items[73];
            Command_Type = (int?)items[74];
            Publication_ID = (int?)items[75];
            Article_ID = (int?)items[76];
            Partial_Status = (int?)items[77];
            Command = (string)items[78];
            Byte_Offset = (short?)items[79];
            New_Value = (Byte[])items[80];
            Old_Value = (Byte[])items[81];
            New_Split_Page = (string)items[82];
            Rows_Deleted = (short?)items[83];
            Bytes_Freed = (short?)items[84];
            CI_Table_Id = (int?)items[85];
            CI_Index_Id = (short?)items[86];
            NewAllocUnitId = (long?)items[87];
            FileGroup_ID = (short?)items[88];
            Meta_Status = (Byte[])items[89];
            File_Status = (Byte[])items[90];
            File_ID = (short?)items[91];
            Physical_Name = (string)items[92];
            Logical_Name = (string)items[93];
            Format_LSN = (string)items[94];
            RowsetId = (long?)items[95];
            TextPtr = (Byte[])items[96];
            Column_Offset = (int?)items[97];
            Flags = (int?)items[98];
            Text_Size = (long?)items[99];
            Offset = (long?)items[100];
            Old_Size = (long?)items[101];
            New_Size = (long?)items[102];
            Description = (string)items[103];
            Bulk_allocated_extent_count = (int?)items[104];
            Bulk_RowsetId = (long?)items[105];
            Bulk_AllocUnitId = (long?)items[106];
            Bulk_allocation_first_IAM_Page_ID = (string)items[107];
            Bulk_allocated_extent_ids = (string)items[108];
            VLFs_added = (string)items[109];
            InvalidateCache_Id = (int?)items[110];
            InvalidateCache_keys = (string)items[111];
            CopyVerionInfo_Source_Page_Id = (string)items[112];
            CopyVerionInfo_Source_Page_LSN = (string)items[113];
            CopyVerionInfo_Source_Slot_Id = (int?)items[114];
            CopyVerionInfo_Source_Slot_Count = (int?)items[115];
            RowLog_Contents_0 = (Byte[])items[116];
            RowLog_Contents_1 = (Byte[])items[117];
            RowLog_Contents_2 = (Byte[])items[118];
            RowLog_Contents_3 = (Byte[])items[119];
            RowLog_Contents_4 = (Byte[])items[120];
            RowLog_Contents_5 = (Byte[])items[121];
            Compression_Log_Type = (short?)items[122];
            Compression_Info = (Byte[])items[123];
            PageFormat_PageType = (short?)items[124];
            PageFormat_PageFlags = (short?)items[125];
            PageFormat_PageLevel = (short?)items[126];
            PageFormat_PageStat = (short?)items[127];
            PageFormat_FormatOption = (short?)items[128];
            Log_Record = (Byte[])items[129];
            operation_desc = (string)items[130];
            tx_end_timestamp = (long?)items[131];
            total_size = (int?)items[132];
            table_id = (long?)items[133];
            newrow_identity = (long?)items[134];
            newrow_data = (Byte[])items[135];
            newrow_datasize = (int?)items[136];
            oldrow_begin_timestamp = (long?)items[137];
            oldrow_identity = (long?)items[138];
            oldrow_key_data = (Byte[])items[139];
            oldrow_key_datasize = (int?)items[140];
            xtp_description = (string)items[141];
        }

        public fn_dblog_xtpResult(string Current_LSN, string Operation, string Context, string Transaction_ID, long LogBlockGeneration, Byte[] Tag_Bits, short Log_Record_Fixed_Length, short Log_Record_Length, string Previous_LSN, Byte[] Flag_Bits, int Log_Reserve, long? AllocUnitId, string AllocUnitName, string Page_ID, int? Slot_ID, string Previous_Page_LSN, long? PartitionId, short? RowFlags, short? Num_Elements, short? Offset_in_Row, short? Modify_Size, string Checkpoint_Begin, short? CHKPT_Begin_DB_Version, string Max_XDESID, short? Num_Transactions, string Checkpoint_End, short? CHKPT_End_DB_Version, string Minimum_LSN, int? Dirty_Pages, string Oldest_Replicated_Begin_LSN, string Next_Replicated_End_LSN, string Last_Distributed_Backup_End_LSN, string Last_Distributed_End_LSN, string Repl_Min_Hold_LSN, int? Server_UID, int? SPID, Byte[] Beginlog_Status, int? Xact_Type, string Begin_Time, string Transaction_Name, Byte[] Transaction_SID, string Parent_Transaction_ID, string Oldest_Active_Transaction_ID, long? Xact_ID, int? Xact_Node_ID, int? Xact_Node_Local_ID, long? End_AGE, string End_Time, string Transaction_Begin, long? Replicated_Records, string Oldest_Active_LSN, string Server_Name, string Database_Name, string Mark_Name, int? Repl_Partition_ID, int? Repl_Epoch, long? Repl_CSN, int? Repl_Flags, Byte[] Repl_Msg, string Repl_Source_Commit_Time, string Master_XDESID, int? Master_DBID, string Preplog_Begin_LSN, string Prepare_Time, long? Virtual_Clock, string Previous_Savepoint, string Savepoint_Name, short? Rowbits_First_Bit, short? Rowbits_Bit_Count, Byte[] Rowbits_Bit_Value, short? Number_of_Locks, string Lock_Information, string LSN_before_writes, short? Pages_Written, int? Command_Type, int? Publication_ID, int? Article_ID, int? Partial_Status, string Command, short? Byte_Offset, Byte[] New_Value, Byte[] Old_Value, string New_Split_Page, short? Rows_Deleted, short? Bytes_Freed, int? CI_Table_Id, short? CI_Index_Id, long? NewAllocUnitId, short? FileGroup_ID, Byte[] Meta_Status, Byte[] File_Status, short? File_ID, string Physical_Name, string Logical_Name, string Format_LSN, long? RowsetId, Byte[] TextPtr, int? Column_Offset, int? Flags, long? Text_Size, long? Offset, long? Old_Size, long? New_Size, string Description, int? Bulk_allocated_extent_count, long? Bulk_RowsetId, long? Bulk_AllocUnitId, string Bulk_allocation_first_IAM_Page_ID, string Bulk_allocated_extent_ids, string VLFs_added, int? InvalidateCache_Id, string InvalidateCache_keys, string CopyVerionInfo_Source_Page_Id, string CopyVerionInfo_Source_Page_LSN, int? CopyVerionInfo_Source_Slot_Id, int? CopyVerionInfo_Source_Slot_Count, Byte[] RowLog_Contents_0, Byte[] RowLog_Contents_1, Byte[] RowLog_Contents_2, Byte[] RowLog_Contents_3, Byte[] RowLog_Contents_4, Byte[] RowLog_Contents_5, short? Compression_Log_Type, Byte[] Compression_Info, short? PageFormat_PageType, short? PageFormat_PageFlags, short? PageFormat_PageLevel, short? PageFormat_PageStat, short? PageFormat_FormatOption, Byte[] Log_Record, string operation_desc, long? tx_end_timestamp, int? total_size, long? table_id, long? newrow_identity, Byte[] newrow_data, int? newrow_datasize, long? oldrow_begin_timestamp, long? oldrow_identity, Byte[] oldrow_key_data, int? oldrow_key_datasize, string xtp_description)
        {
            this.Current_LSN = Current_LSN;
            this.Operation = Operation;
            this.Context = Context;
            this.Transaction_ID = Transaction_ID;
            this.LogBlockGeneration = LogBlockGeneration;
            this.Tag_Bits = Tag_Bits;
            this.Log_Record_Fixed_Length = Log_Record_Fixed_Length;
            this.Log_Record_Length = Log_Record_Length;
            this.Previous_LSN = Previous_LSN;
            this.Flag_Bits = Flag_Bits;
            this.Log_Reserve = Log_Reserve;
            this.AllocUnitId = AllocUnitId;
            this.AllocUnitName = AllocUnitName;
            this.Page_ID = Page_ID;
            this.Slot_ID = Slot_ID;
            this.Previous_Page_LSN = Previous_Page_LSN;
            this.PartitionId = PartitionId;
            this.RowFlags = RowFlags;
            this.Num_Elements = Num_Elements;
            this.Offset_in_Row = Offset_in_Row;
            this.Modify_Size = Modify_Size;
            this.Checkpoint_Begin = Checkpoint_Begin;
            this.CHKPT_Begin_DB_Version = CHKPT_Begin_DB_Version;
            this.Max_XDESID = Max_XDESID;
            this.Num_Transactions = Num_Transactions;
            this.Checkpoint_End = Checkpoint_End;
            this.CHKPT_End_DB_Version = CHKPT_End_DB_Version;
            this.Minimum_LSN = Minimum_LSN;
            this.Dirty_Pages = Dirty_Pages;
            this.Oldest_Replicated_Begin_LSN = Oldest_Replicated_Begin_LSN;
            this.Next_Replicated_End_LSN = Next_Replicated_End_LSN;
            this.Last_Distributed_Backup_End_LSN = Last_Distributed_Backup_End_LSN;
            this.Last_Distributed_End_LSN = Last_Distributed_End_LSN;
            this.Repl_Min_Hold_LSN = Repl_Min_Hold_LSN;
            this.Server_UID = Server_UID;
            this.SPID = SPID;
            this.Beginlog_Status = Beginlog_Status;
            this.Xact_Type = Xact_Type;
            this.Begin_Time = Begin_Time;
            this.Transaction_Name = Transaction_Name;
            this.Transaction_SID = Transaction_SID;
            this.Parent_Transaction_ID = Parent_Transaction_ID;
            this.Oldest_Active_Transaction_ID = Oldest_Active_Transaction_ID;
            this.Xact_ID = Xact_ID;
            this.Xact_Node_ID = Xact_Node_ID;
            this.Xact_Node_Local_ID = Xact_Node_Local_ID;
            this.End_AGE = End_AGE;
            this.End_Time = End_Time;
            this.Transaction_Begin = Transaction_Begin;
            this.Replicated_Records = Replicated_Records;
            this.Oldest_Active_LSN = Oldest_Active_LSN;
            this.Server_Name = Server_Name;
            this.Database_Name = Database_Name;
            this.Mark_Name = Mark_Name;
            this.Repl_Partition_ID = Repl_Partition_ID;
            this.Repl_Epoch = Repl_Epoch;
            this.Repl_CSN = Repl_CSN;
            this.Repl_Flags = Repl_Flags;
            this.Repl_Msg = Repl_Msg;
            this.Repl_Source_Commit_Time = Repl_Source_Commit_Time;
            this.Master_XDESID = Master_XDESID;
            this.Master_DBID = Master_DBID;
            this.Preplog_Begin_LSN = Preplog_Begin_LSN;
            this.Prepare_Time = Prepare_Time;
            this.Virtual_Clock = Virtual_Clock;
            this.Previous_Savepoint = Previous_Savepoint;
            this.Savepoint_Name = Savepoint_Name;
            this.Rowbits_First_Bit = Rowbits_First_Bit;
            this.Rowbits_Bit_Count = Rowbits_Bit_Count;
            this.Rowbits_Bit_Value = Rowbits_Bit_Value;
            this.Number_of_Locks = Number_of_Locks;
            this.Lock_Information = Lock_Information;
            this.LSN_before_writes = LSN_before_writes;
            this.Pages_Written = Pages_Written;
            this.Command_Type = Command_Type;
            this.Publication_ID = Publication_ID;
            this.Article_ID = Article_ID;
            this.Partial_Status = Partial_Status;
            this.Command = Command;
            this.Byte_Offset = Byte_Offset;
            this.New_Value = New_Value;
            this.Old_Value = Old_Value;
            this.New_Split_Page = New_Split_Page;
            this.Rows_Deleted = Rows_Deleted;
            this.Bytes_Freed = Bytes_Freed;
            this.CI_Table_Id = CI_Table_Id;
            this.CI_Index_Id = CI_Index_Id;
            this.NewAllocUnitId = NewAllocUnitId;
            this.FileGroup_ID = FileGroup_ID;
            this.Meta_Status = Meta_Status;
            this.File_Status = File_Status;
            this.File_ID = File_ID;
            this.Physical_Name = Physical_Name;
            this.Logical_Name = Logical_Name;
            this.Format_LSN = Format_LSN;
            this.RowsetId = RowsetId;
            this.TextPtr = TextPtr;
            this.Column_Offset = Column_Offset;
            this.Flags = Flags;
            this.Text_Size = Text_Size;
            this.Offset = Offset;
            this.Old_Size = Old_Size;
            this.New_Size = New_Size;
            this.Description = Description;
            this.Bulk_allocated_extent_count = Bulk_allocated_extent_count;
            this.Bulk_RowsetId = Bulk_RowsetId;
            this.Bulk_AllocUnitId = Bulk_AllocUnitId;
            this.Bulk_allocation_first_IAM_Page_ID = Bulk_allocation_first_IAM_Page_ID;
            this.Bulk_allocated_extent_ids = Bulk_allocated_extent_ids;
            this.VLFs_added = VLFs_added;
            this.InvalidateCache_Id = InvalidateCache_Id;
            this.InvalidateCache_keys = InvalidateCache_keys;
            this.CopyVerionInfo_Source_Page_Id = CopyVerionInfo_Source_Page_Id;
            this.CopyVerionInfo_Source_Page_LSN = CopyVerionInfo_Source_Page_LSN;
            this.CopyVerionInfo_Source_Slot_Id = CopyVerionInfo_Source_Slot_Id;
            this.CopyVerionInfo_Source_Slot_Count = CopyVerionInfo_Source_Slot_Count;
            this.RowLog_Contents_0 = RowLog_Contents_0;
            this.RowLog_Contents_1 = RowLog_Contents_1;
            this.RowLog_Contents_2 = RowLog_Contents_2;
            this.RowLog_Contents_3 = RowLog_Contents_3;
            this.RowLog_Contents_4 = RowLog_Contents_4;
            this.RowLog_Contents_5 = RowLog_Contents_5;
            this.Compression_Log_Type = Compression_Log_Type;
            this.Compression_Info = Compression_Info;
            this.PageFormat_PageType = PageFormat_PageType;
            this.PageFormat_PageFlags = PageFormat_PageFlags;
            this.PageFormat_PageLevel = PageFormat_PageLevel;
            this.PageFormat_PageStat = PageFormat_PageStat;
            this.PageFormat_FormatOption = PageFormat_FormatOption;
            this.Log_Record = Log_Record;
            this.operation_desc = operation_desc;
            this.tx_end_timestamp = tx_end_timestamp;
            this.total_size = total_size;
            this.table_id = table_id;
            this.newrow_identity = newrow_identity;
            this.newrow_data = newrow_data;
            this.newrow_datasize = newrow_datasize;
            this.oldrow_begin_timestamp = oldrow_begin_timestamp;
            this.oldrow_identity = oldrow_identity;
            this.oldrow_key_data = oldrow_key_data;
            this.oldrow_key_datasize = oldrow_key_datasize;
            this.xtp_description = xtp_description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { Current_LSN, Operation, Context, Transaction_ID, LogBlockGeneration, Tag_Bits, Log_Record_Fixed_Length, Log_Record_Length, Previous_LSN, Flag_Bits, Log_Reserve, AllocUnitId, AllocUnitName, Page_ID, Slot_ID, Previous_Page_LSN, PartitionId, RowFlags, Num_Elements, Offset_in_Row, Modify_Size, Checkpoint_Begin, CHKPT_Begin_DB_Version, Max_XDESID, Num_Transactions, Checkpoint_End, CHKPT_End_DB_Version, Minimum_LSN, Dirty_Pages, Oldest_Replicated_Begin_LSN, Next_Replicated_End_LSN, Last_Distributed_Backup_End_LSN, Last_Distributed_End_LSN, Repl_Min_Hold_LSN, Server_UID, SPID, Beginlog_Status, Xact_Type, Begin_Time, Transaction_Name, Transaction_SID, Parent_Transaction_ID, Oldest_Active_Transaction_ID, Xact_ID, Xact_Node_ID, Xact_Node_Local_ID, End_AGE, End_Time, Transaction_Begin, Replicated_Records, Oldest_Active_LSN, Server_Name, Database_Name, Mark_Name, Repl_Partition_ID, Repl_Epoch, Repl_CSN, Repl_Flags, Repl_Msg, Repl_Source_Commit_Time, Master_XDESID, Master_DBID, Preplog_Begin_LSN, Prepare_Time, Virtual_Clock, Previous_Savepoint, Savepoint_Name, Rowbits_First_Bit, Rowbits_Bit_Count, Rowbits_Bit_Value, Number_of_Locks, Lock_Information, LSN_before_writes, Pages_Written, Command_Type, Publication_ID, Article_ID, Partial_Status, Command, Byte_Offset, New_Value, Old_Value, New_Split_Page, Rows_Deleted, Bytes_Freed, CI_Table_Id, CI_Index_Id, NewAllocUnitId, FileGroup_ID, Meta_Status, File_Status, File_ID, Physical_Name, Logical_Name, Format_LSN, RowsetId, TextPtr, Column_Offset, Flags, Text_Size, Offset, Old_Size, New_Size, Description, Bulk_allocated_extent_count, Bulk_RowsetId, Bulk_AllocUnitId, Bulk_allocation_first_IAM_Page_ID, Bulk_allocated_extent_ids, VLFs_added, InvalidateCache_Id, InvalidateCache_keys, CopyVerionInfo_Source_Page_Id, CopyVerionInfo_Source_Page_LSN, CopyVerionInfo_Source_Slot_Id, CopyVerionInfo_Source_Slot_Count, RowLog_Contents_0, RowLog_Contents_1, RowLog_Contents_2, RowLog_Contents_3, RowLog_Contents_4, RowLog_Contents_5, Compression_Log_Type, Compression_Info, PageFormat_PageType, PageFormat_PageFlags, PageFormat_PageLevel, PageFormat_PageStat, PageFormat_FormatOption, Log_Record, operation_desc, tx_end_timestamp, total_size, table_id, newrow_identity, newrow_data, newrow_datasize, oldrow_begin_timestamp, oldrow_identity, oldrow_key_data, oldrow_key_datasize, xtp_description };
        }

        public override void SetItemArray(object[] items)
        {
            Current_LSN = (string)items[0];
            Operation = (string)items[1];
            Context = (string)items[2];
            Transaction_ID = (string)items[3];
            LogBlockGeneration = (long)items[4];
            Tag_Bits = (Byte[])items[5];
            Log_Record_Fixed_Length = (short)items[6];
            Log_Record_Length = (short)items[7];
            Previous_LSN = (string)items[8];
            Flag_Bits = (Byte[])items[9];
            Log_Reserve = (int)items[10];
            AllocUnitId = (long?)items[11];
            AllocUnitName = (string)items[12];
            Page_ID = (string)items[13];
            Slot_ID = (int?)items[14];
            Previous_Page_LSN = (string)items[15];
            PartitionId = (long?)items[16];
            RowFlags = (short?)items[17];
            Num_Elements = (short?)items[18];
            Offset_in_Row = (short?)items[19];
            Modify_Size = (short?)items[20];
            Checkpoint_Begin = (string)items[21];
            CHKPT_Begin_DB_Version = (short?)items[22];
            Max_XDESID = (string)items[23];
            Num_Transactions = (short?)items[24];
            Checkpoint_End = (string)items[25];
            CHKPT_End_DB_Version = (short?)items[26];
            Minimum_LSN = (string)items[27];
            Dirty_Pages = (int?)items[28];
            Oldest_Replicated_Begin_LSN = (string)items[29];
            Next_Replicated_End_LSN = (string)items[30];
            Last_Distributed_Backup_End_LSN = (string)items[31];
            Last_Distributed_End_LSN = (string)items[32];
            Repl_Min_Hold_LSN = (string)items[33];
            Server_UID = (int?)items[34];
            SPID = (int?)items[35];
            Beginlog_Status = (Byte[])items[36];
            Xact_Type = (int?)items[37];
            Begin_Time = (string)items[38];
            Transaction_Name = (string)items[39];
            Transaction_SID = (Byte[])items[40];
            Parent_Transaction_ID = (string)items[41];
            Oldest_Active_Transaction_ID = (string)items[42];
            Xact_ID = (long?)items[43];
            Xact_Node_ID = (int?)items[44];
            Xact_Node_Local_ID = (int?)items[45];
            End_AGE = (long?)items[46];
            End_Time = (string)items[47];
            Transaction_Begin = (string)items[48];
            Replicated_Records = (long?)items[49];
            Oldest_Active_LSN = (string)items[50];
            Server_Name = (string)items[51];
            Database_Name = (string)items[52];
            Mark_Name = (string)items[53];
            Repl_Partition_ID = (int?)items[54];
            Repl_Epoch = (int?)items[55];
            Repl_CSN = (long?)items[56];
            Repl_Flags = (int?)items[57];
            Repl_Msg = (Byte[])items[58];
            Repl_Source_Commit_Time = (string)items[59];
            Master_XDESID = (string)items[60];
            Master_DBID = (int?)items[61];
            Preplog_Begin_LSN = (string)items[62];
            Prepare_Time = (string)items[63];
            Virtual_Clock = (long?)items[64];
            Previous_Savepoint = (string)items[65];
            Savepoint_Name = (string)items[66];
            Rowbits_First_Bit = (short?)items[67];
            Rowbits_Bit_Count = (short?)items[68];
            Rowbits_Bit_Value = (Byte[])items[69];
            Number_of_Locks = (short?)items[70];
            Lock_Information = (string)items[71];
            LSN_before_writes = (string)items[72];
            Pages_Written = (short?)items[73];
            Command_Type = (int?)items[74];
            Publication_ID = (int?)items[75];
            Article_ID = (int?)items[76];
            Partial_Status = (int?)items[77];
            Command = (string)items[78];
            Byte_Offset = (short?)items[79];
            New_Value = (Byte[])items[80];
            Old_Value = (Byte[])items[81];
            New_Split_Page = (string)items[82];
            Rows_Deleted = (short?)items[83];
            Bytes_Freed = (short?)items[84];
            CI_Table_Id = (int?)items[85];
            CI_Index_Id = (short?)items[86];
            NewAllocUnitId = (long?)items[87];
            FileGroup_ID = (short?)items[88];
            Meta_Status = (Byte[])items[89];
            File_Status = (Byte[])items[90];
            File_ID = (short?)items[91];
            Physical_Name = (string)items[92];
            Logical_Name = (string)items[93];
            Format_LSN = (string)items[94];
            RowsetId = (long?)items[95];
            TextPtr = (Byte[])items[96];
            Column_Offset = (int?)items[97];
            Flags = (int?)items[98];
            Text_Size = (long?)items[99];
            Offset = (long?)items[100];
            Old_Size = (long?)items[101];
            New_Size = (long?)items[102];
            Description = (string)items[103];
            Bulk_allocated_extent_count = (int?)items[104];
            Bulk_RowsetId = (long?)items[105];
            Bulk_AllocUnitId = (long?)items[106];
            Bulk_allocation_first_IAM_Page_ID = (string)items[107];
            Bulk_allocated_extent_ids = (string)items[108];
            VLFs_added = (string)items[109];
            InvalidateCache_Id = (int?)items[110];
            InvalidateCache_keys = (string)items[111];
            CopyVerionInfo_Source_Page_Id = (string)items[112];
            CopyVerionInfo_Source_Page_LSN = (string)items[113];
            CopyVerionInfo_Source_Slot_Id = (int?)items[114];
            CopyVerionInfo_Source_Slot_Count = (int?)items[115];
            RowLog_Contents_0 = (Byte[])items[116];
            RowLog_Contents_1 = (Byte[])items[117];
            RowLog_Contents_2 = (Byte[])items[118];
            RowLog_Contents_3 = (Byte[])items[119];
            RowLog_Contents_4 = (Byte[])items[120];
            RowLog_Contents_5 = (Byte[])items[121];
            Compression_Log_Type = (short?)items[122];
            Compression_Info = (Byte[])items[123];
            PageFormat_PageType = (short?)items[124];
            PageFormat_PageFlags = (short?)items[125];
            PageFormat_PageLevel = (short?)items[126];
            PageFormat_PageStat = (short?)items[127];
            PageFormat_FormatOption = (short?)items[128];
            Log_Record = (Byte[])items[129];
            operation_desc = (string)items[130];
            tx_end_timestamp = (long?)items[131];
            total_size = (int?)items[132];
            table_id = (long?)items[133];
            newrow_identity = (long?)items[134];
            newrow_data = (Byte[])items[135];
            newrow_datasize = (int?)items[136];
            oldrow_begin_timestamp = (long?)items[137];
            oldrow_identity = (long?)items[138];
            oldrow_key_data = (Byte[])items[139];
            oldrow_key_datasize = (int?)items[140];
            xtp_description = (string)items[141];
        }
    }

    [SqlTableFunction("sys", "fn_dblog_xtp")]
    public partial class fn_dblog_xtp : SqlTableFunctionProxy<fn_dblog_xtp, fn_dblog_xtpResult>
    {
        [SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string start
        {
            get;
            set;
        }

        [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string end
        {
            get;
            set;
        }

        public fn_dblog_xtp()
        {
        }

        public fn_dblog_xtp(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
        }

        public fn_dblog_xtp(string start, string end)
        {
            this.start = start;
            this.end = end;
        }

        public override object[] GetItemArray()
        {
            return new object[] { start, end };
        }

        public override void SetItemArray(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_index_physical_stats")]
    public partial class dm_db_index_physical_statsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", true)]
        public short? database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        [SqlColumn("index_type_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string index_type_desc
        {
            get;
            set;
        }

        [SqlColumn("alloc_unit_type_desc", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string alloc_unit_type_desc
        {
            get;
            set;
        }

        [SqlColumn("index_depth", 6), SqlTypeFacets("tinyint", true)]
        public byte? index_depth
        {
            get;
            set;
        }

        [SqlColumn("index_level", 7), SqlTypeFacets("tinyint", true)]
        public byte? index_level
        {
            get;
            set;
        }

        [SqlColumn("avg_fragmentation_in_percent", 8), SqlTypeFacets("float", true)]
        public double? avg_fragmentation_in_percent
        {
            get;
            set;
        }

        [SqlColumn("fragment_count", 9), SqlTypeFacets("bigint", true)]
        public long? fragment_count
        {
            get;
            set;
        }

        [SqlColumn("avg_fragment_size_in_pages", 10), SqlTypeFacets("float", true)]
        public double? avg_fragment_size_in_pages
        {
            get;
            set;
        }

        [SqlColumn("page_count", 11), SqlTypeFacets("bigint", true)]
        public long? page_count
        {
            get;
            set;
        }

        [SqlColumn("avg_page_space_used_in_percent", 12), SqlTypeFacets("float", true)]
        public double? avg_page_space_used_in_percent
        {
            get;
            set;
        }

        [SqlColumn("record_count", 13), SqlTypeFacets("bigint", true)]
        public long? record_count
        {
            get;
            set;
        }

        [SqlColumn("ghost_record_count", 14), SqlTypeFacets("bigint", true)]
        public long? ghost_record_count
        {
            get;
            set;
        }

        [SqlColumn("version_ghost_record_count", 15), SqlTypeFacets("bigint", true)]
        public long? version_ghost_record_count
        {
            get;
            set;
        }

        [SqlColumn("min_record_size_in_bytes", 16), SqlTypeFacets("int", true)]
        public int? min_record_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("max_record_size_in_bytes", 17), SqlTypeFacets("int", true)]
        public int? max_record_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("avg_record_size_in_bytes", 18), SqlTypeFacets("float", true)]
        public double? avg_record_size_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("forwarded_record_count", 19), SqlTypeFacets("bigint", true)]
        public long? forwarded_record_count
        {
            get;
            set;
        }

        [SqlColumn("compressed_page_count", 20), SqlTypeFacets("bigint", true)]
        public long? compressed_page_count
        {
            get;
            set;
        }

        public dm_db_index_physical_statsResult()
        {
        }

        public dm_db_index_physical_statsResult(object[] items)
        {
            database_id = (short?)items[0];
            object_id = (int?)items[1];
            index_id = (int?)items[2];
            partition_number = (int?)items[3];
            index_type_desc = (string)items[4];
            alloc_unit_type_desc = (string)items[5];
            index_depth = (byte?)items[6];
            index_level = (byte?)items[7];
            avg_fragmentation_in_percent = (double?)items[8];
            fragment_count = (long?)items[9];
            avg_fragment_size_in_pages = (double?)items[10];
            page_count = (long?)items[11];
            avg_page_space_used_in_percent = (double?)items[12];
            record_count = (long?)items[13];
            ghost_record_count = (long?)items[14];
            version_ghost_record_count = (long?)items[15];
            min_record_size_in_bytes = (int?)items[16];
            max_record_size_in_bytes = (int?)items[17];
            avg_record_size_in_bytes = (double?)items[18];
            forwarded_record_count = (long?)items[19];
            compressed_page_count = (long?)items[20];
        }

        public dm_db_index_physical_statsResult(short? database_id, int? object_id, int? index_id, int? partition_number, string index_type_desc, string alloc_unit_type_desc, byte? index_depth, byte? index_level, double? avg_fragmentation_in_percent, long? fragment_count, double? avg_fragment_size_in_pages, long? page_count, double? avg_page_space_used_in_percent, long? record_count, long? ghost_record_count, long? version_ghost_record_count, int? min_record_size_in_bytes, int? max_record_size_in_bytes, double? avg_record_size_in_bytes, long? forwarded_record_count, long? compressed_page_count)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.index_type_desc = index_type_desc;
            this.alloc_unit_type_desc = alloc_unit_type_desc;
            this.index_depth = index_depth;
            this.index_level = index_level;
            this.avg_fragmentation_in_percent = avg_fragmentation_in_percent;
            this.fragment_count = fragment_count;
            this.avg_fragment_size_in_pages = avg_fragment_size_in_pages;
            this.page_count = page_count;
            this.avg_page_space_used_in_percent = avg_page_space_used_in_percent;
            this.record_count = record_count;
            this.ghost_record_count = ghost_record_count;
            this.version_ghost_record_count = version_ghost_record_count;
            this.min_record_size_in_bytes = min_record_size_in_bytes;
            this.max_record_size_in_bytes = max_record_size_in_bytes;
            this.avg_record_size_in_bytes = avg_record_size_in_bytes;
            this.forwarded_record_count = forwarded_record_count;
            this.compressed_page_count = compressed_page_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, index_id, partition_number, index_type_desc, alloc_unit_type_desc, index_depth, index_level, avg_fragmentation_in_percent, fragment_count, avg_fragment_size_in_pages, page_count, avg_page_space_used_in_percent, record_count, ghost_record_count, version_ghost_record_count, min_record_size_in_bytes, max_record_size_in_bytes, avg_record_size_in_bytes, forwarded_record_count, compressed_page_count };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (short?)items[0];
            object_id = (int?)items[1];
            index_id = (int?)items[2];
            partition_number = (int?)items[3];
            index_type_desc = (string)items[4];
            alloc_unit_type_desc = (string)items[5];
            index_depth = (byte?)items[6];
            index_level = (byte?)items[7];
            avg_fragmentation_in_percent = (double?)items[8];
            fragment_count = (long?)items[9];
            avg_fragment_size_in_pages = (double?)items[10];
            page_count = (long?)items[11];
            avg_page_space_used_in_percent = (double?)items[12];
            record_count = (long?)items[13];
            ghost_record_count = (long?)items[14];
            version_ghost_record_count = (long?)items[15];
            min_record_size_in_bytes = (int?)items[16];
            max_record_size_in_bytes = (int?)items[17];
            avg_record_size_in_bytes = (double?)items[18];
            forwarded_record_count = (long?)items[19];
            compressed_page_count = (long?)items[20];
        }
    }

    [SqlTableFunction("sys", "dm_db_index_physical_stats")]
    public partial class dm_db_index_physical_stats : SqlTableFunctionProxy<dm_db_index_physical_stats, dm_db_index_physical_statsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)]
        public short? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@ObjectId", 1, false, false), SqlTypeFacets("int", true)]
        public int? ObjectId
        {
            get;
            set;
        }

        [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)]
        public int? IndexId
        {
            get;
            set;
        }

        [SqlParameter("@PartitionNumber", 3, false, false), SqlTypeFacets("int", true)]
        public int? PartitionNumber
        {
            get;
            set;
        }

        [SqlParameter("@Mode", 4, false, false), SqlTypeFacets("nvarchar", true, 40)]
        public string Mode
        {
            get;
            set;
        }

        public dm_db_index_physical_stats()
        {
        }

        public dm_db_index_physical_stats(object[] items)
        {
            DatabaseId = (short?)items[0];
            ObjectId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionNumber = (int?)items[3];
            Mode = (string)items[4];
        }

        public dm_db_index_physical_stats(short? DatabaseId, int? ObjectId, int? IndexId, int? PartitionNumber, string Mode)
        {
            this.DatabaseId = DatabaseId;
            this.ObjectId = ObjectId;
            this.IndexId = IndexId;
            this.PartitionNumber = PartitionNumber;
            this.Mode = Mode;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, ObjectId, IndexId, PartitionNumber, Mode };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (short?)items[0];
            ObjectId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionNumber = (int?)items[3];
            Mode = (string)items[4];
        }
    }

    [SqlTableFunctionResult("sys", "fn_virtualfilestats")]
    public partial class fn_virtualfilestatsResult : SqlTabularProxy
    {
        [SqlColumn("DbId", 0), SqlTypeFacets("smallint", false)]
        public short DbId
        {
            get;
            set;
        }

        [SqlColumn("FileId", 1), SqlTypeFacets("smallint", false)]
        public short FileId
        {
            get;
            set;
        }

        [SqlColumn("TimeStamp", 2), SqlTypeFacets("int", false)]
        public int TimeStamp
        {
            get;
            set;
        }

        [SqlColumn("NumberReads", 3), SqlTypeFacets("bigint", false)]
        public long NumberReads
        {
            get;
            set;
        }

        [SqlColumn("BytesRead", 4), SqlTypeFacets("bigint", false)]
        public long BytesRead
        {
            get;
            set;
        }

        [SqlColumn("IoStallReadMS", 5), SqlTypeFacets("bigint", false)]
        public long IoStallReadMS
        {
            get;
            set;
        }

        [SqlColumn("NumberWrites", 6), SqlTypeFacets("bigint", false)]
        public long NumberWrites
        {
            get;
            set;
        }

        [SqlColumn("BytesWritten", 7), SqlTypeFacets("bigint", false)]
        public long BytesWritten
        {
            get;
            set;
        }

        [SqlColumn("IoStallWriteMS", 8), SqlTypeFacets("bigint", false)]
        public long IoStallWriteMS
        {
            get;
            set;
        }

        [SqlColumn("IoStallMS", 9), SqlTypeFacets("bigint", false)]
        public long IoStallMS
        {
            get;
            set;
        }

        [SqlColumn("BytesOnDisk", 10), SqlTypeFacets("bigint", false)]
        public long BytesOnDisk
        {
            get;
            set;
        }

        [SqlColumn("FileHandle", 11), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] FileHandle
        {
            get;
            set;
        }

        public fn_virtualfilestatsResult()
        {
        }

        public fn_virtualfilestatsResult(object[] items)
        {
            DbId = (short)items[0];
            FileId = (short)items[1];
            TimeStamp = (int)items[2];
            NumberReads = (long)items[3];
            BytesRead = (long)items[4];
            IoStallReadMS = (long)items[5];
            NumberWrites = (long)items[6];
            BytesWritten = (long)items[7];
            IoStallWriteMS = (long)items[8];
            IoStallMS = (long)items[9];
            BytesOnDisk = (long)items[10];
            FileHandle = (Byte[])items[11];
        }

        public fn_virtualfilestatsResult(short DbId, short FileId, int TimeStamp, long NumberReads, long BytesRead, long IoStallReadMS, long NumberWrites, long BytesWritten, long IoStallWriteMS, long IoStallMS, long BytesOnDisk, Byte[] FileHandle)
        {
            this.DbId = DbId;
            this.FileId = FileId;
            this.TimeStamp = TimeStamp;
            this.NumberReads = NumberReads;
            this.BytesRead = BytesRead;
            this.IoStallReadMS = IoStallReadMS;
            this.NumberWrites = NumberWrites;
            this.BytesWritten = BytesWritten;
            this.IoStallWriteMS = IoStallWriteMS;
            this.IoStallMS = IoStallMS;
            this.BytesOnDisk = BytesOnDisk;
            this.FileHandle = FileHandle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DbId, FileId, TimeStamp, NumberReads, BytesRead, IoStallReadMS, NumberWrites, BytesWritten, IoStallWriteMS, IoStallMS, BytesOnDisk, FileHandle };
        }

        public override void SetItemArray(object[] items)
        {
            DbId = (short)items[0];
            FileId = (short)items[1];
            TimeStamp = (int)items[2];
            NumberReads = (long)items[3];
            BytesRead = (long)items[4];
            IoStallReadMS = (long)items[5];
            NumberWrites = (long)items[6];
            BytesWritten = (long)items[7];
            IoStallWriteMS = (long)items[8];
            IoStallMS = (long)items[9];
            BytesOnDisk = (long)items[10];
            FileHandle = (Byte[])items[11];
        }
    }

    [SqlTableFunction("sys", "fn_virtualfilestats")]
    public partial class fn_virtualfilestats : SqlTableFunctionProxy<fn_virtualfilestats, fn_virtualfilestatsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)]
        public int? FileId
        {
            get;
            set;
        }

        public fn_virtualfilestats()
        {
        }

        public fn_virtualfilestats(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }

        public fn_virtualfilestats(int? DatabaseId, int? FileId)
        {
            this.DatabaseId = DatabaseId;
            this.FileId = FileId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, FileId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logpoolmgr_respoolsize")]
    public partial class dm_logpoolmgr_respoolsizeResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("resource_pool_id", 2), SqlTypeFacets("int", false)]
        public int resource_pool_id
        {
            get;
            set;
        }

        [SqlColumn("size", 3), SqlTypeFacets("bigint", false)]
        public long size
        {
            get;
            set;
        }

        public dm_logpoolmgr_respoolsizeResult()
        {
        }

        public dm_logpoolmgr_respoolsizeResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            resource_pool_id = (int)items[2];
            size = (long)items[3];
        }

        public dm_logpoolmgr_respoolsizeResult(int database_id, int recovery_unit_id, int resource_pool_id, long size)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.resource_pool_id = resource_pool_id;
            this.size = size;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, resource_pool_id, size };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            resource_pool_id = (int)items[2];
            size = (long)items[3];
        }
    }

    [SqlTableFunction("sys", "dm_logpoolmgr_respoolsize")]
    public partial class dm_logpoolmgr_respoolsize : SqlTableFunctionProxy<dm_logpoolmgr_respoolsize, dm_logpoolmgr_respoolsizeResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        public dm_logpoolmgr_respoolsize()
        {
        }

        public dm_logpoolmgr_respoolsize(object[] items)
        {
            DatabaseId = (int?)items[0];
        }

        public dm_logpoolmgr_respoolsize(int? DatabaseId)
        {
            this.DatabaseId = DatabaseId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_builtin_permissions")]
    public partial class fn_builtin_permissionsResult : SqlTabularProxy
    {
        [SqlColumn("class_desc", 0), SqlTypeFacets("nvarchar", true, 120)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 1), SqlTypeFacets("nvarchar", true, 120)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("type", 2), SqlTypeFacets("varchar", true, 4)]
        public string type
        {
            get;
            set;
        }

        [SqlColumn("covering_permission_name", 3), SqlTypeFacets("nvarchar", true, 120)]
        public string covering_permission_name
        {
            get;
            set;
        }

        [SqlColumn("parent_class_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_class_desc
        {
            get;
            set;
        }

        [SqlColumn("parent_covering_permission_name", 5), SqlTypeFacets("nvarchar", true, 120)]
        public string parent_covering_permission_name
        {
            get;
            set;
        }

        public fn_builtin_permissionsResult()
        {
        }

        public fn_builtin_permissionsResult(object[] items)
        {
            class_desc = (string)items[0];
            permission_name = (string)items[1];
            type = (string)items[2];
            covering_permission_name = (string)items[3];
            parent_class_desc = (string)items[4];
            parent_covering_permission_name = (string)items[5];
        }

        public fn_builtin_permissionsResult(string class_desc, string permission_name, string type, string covering_permission_name, string parent_class_desc, string parent_covering_permission_name)
        {
            this.class_desc = class_desc;
            this.permission_name = permission_name;
            this.type = type;
            this.covering_permission_name = covering_permission_name;
            this.parent_class_desc = parent_class_desc;
            this.parent_covering_permission_name = parent_covering_permission_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { class_desc, permission_name, type, covering_permission_name, parent_class_desc, parent_covering_permission_name };
        }

        public override void SetItemArray(object[] items)
        {
            class_desc = (string)items[0];
            permission_name = (string)items[1];
            type = (string)items[2];
            covering_permission_name = (string)items[3];
            parent_class_desc = (string)items[4];
            parent_covering_permission_name = (string)items[5];
        }
    }

    [SqlTableFunction("sys", "fn_builtin_permissions")]
    public partial class fn_builtin_permissions : SqlTableFunctionProxy<fn_builtin_permissions, fn_builtin_permissionsResult>
    {
        [SqlParameter("@level", 0, false, false), SqlTypeFacets("nvarchar", true, 120)]
        public string level
        {
            get;
            set;
        }

        public fn_builtin_permissions()
        {
        }

        public fn_builtin_permissions(object[] items)
        {
            level = (string)items[0];
        }

        public fn_builtin_permissions(string level)
        {
            this.level = level;
        }

        public override object[] GetItemArray()
        {
            return new object[] { level };
        }

        public override void SetItemArray(object[] items)
        {
            level = (string)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_query_plan")]
    public partial class dm_exec_query_planResult : SqlTabularProxy
    {
        [SqlColumn("dbid", 0), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("objectid", 1), SqlTypeFacets("int", true)]
        public int? objectid
        {
            get;
            set;
        }

        [SqlColumn("number", 2), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("encrypted", 3), SqlTypeFacets("bit", false)]
        public bool encrypted
        {
            get;
            set;
        }

        [SqlColumn("query_plan", 4), SqlTypeFacets("xml", true)]
        public string query_plan
        {
            get;
            set;
        }

        public dm_exec_query_planResult()
        {
        }

        public dm_exec_query_planResult(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            query_plan = (string)items[4];
        }

        public dm_exec_query_planResult(short? dbid, int? objectid, short? number, bool encrypted, string query_plan)
        {
            this.dbid = dbid;
            this.objectid = objectid;
            this.number = number;
            this.encrypted = encrypted;
            this.query_plan = query_plan;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objectid, number, encrypted, query_plan };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            query_plan = (string)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_exec_query_plan")]
    public partial class dm_exec_query_plan : SqlTableFunctionProxy<dm_exec_query_plan, dm_exec_query_planResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] handle
        {
            get;
            set;
        }

        public dm_exec_query_plan()
        {
        }

        public dm_exec_query_plan(object[] items)
        {
            handle = (Byte[])items[0];
        }

        public dm_exec_query_plan(Byte[] handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_get_sql")]
    public partial class fn_get_sqlResult : SqlTabularProxy
    {
        [SqlColumn("dbid", 0), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("objectid", 1), SqlTypeFacets("int", true)]
        public int? objectid
        {
            get;
            set;
        }

        [SqlColumn("number", 2), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("encrypted", 3), SqlTypeFacets("bit", false)]
        public bool encrypted
        {
            get;
            set;
        }

        [SqlColumn("text", 4), SqlTypeFacets("text", true)]
        public string text
        {
            get;
            set;
        }

        public fn_get_sqlResult()
        {
        }

        public fn_get_sqlResult(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            text = (string)items[4];
        }

        public fn_get_sqlResult(short? dbid, int? objectid, short? number, bool encrypted, string text)
        {
            this.dbid = dbid;
            this.objectid = objectid;
            this.number = number;
            this.encrypted = encrypted;
            this.text = text;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objectid, number, encrypted, text };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            text = (string)items[4];
        }
    }

    [SqlTableFunction("sys", "fn_get_sql")]
    public partial class fn_get_sql : SqlTableFunctionProxy<fn_get_sql, fn_get_sqlResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] handle
        {
            get;
            set;
        }

        public fn_get_sql()
        {
        }

        public fn_get_sql(object[] items)
        {
            handle = (Byte[])items[0];
        }

        public fn_get_sql(Byte[] handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_describe_first_result_set")]
    public partial class dm_exec_describe_first_result_setResult : SqlTabularProxy
    {
        [SqlColumn("error_number", 35), SqlTypeFacets("int", true)]
        public int? error_number
        {
            get;
            set;
        }

        [SqlColumn("error_severity", 36), SqlTypeFacets("int", true)]
        public int? error_severity
        {
            get;
            set;
        }

        [SqlColumn("error_state", 37), SqlTypeFacets("int", true)]
        public int? error_state
        {
            get;
            set;
        }

        [SqlColumn("error_message", 38), SqlTypeFacets("nvarchar", true, 4096)]
        public string error_message
        {
            get;
            set;
        }

        [SqlColumn("error_type", 39), SqlTypeFacets("int", true)]
        public int? error_type
        {
            get;
            set;
        }

        [SqlColumn("error_type_desc", 40), SqlTypeFacets("nvarchar", true, 60)]
        public string error_type_desc
        {
            get;
            set;
        }

        [SqlColumn("is_hidden", 0), SqlTypeFacets("bit", true)]
        public bool? is_hidden
        {
            get;
            set;
        }

        [SqlColumn("column_ordinal", 1), SqlTypeFacets("int", true)]
        public int? column_ordinal
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 3), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 4), SqlTypeFacets("int", true)]
        public int? system_type_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_name", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string system_type_name
        {
            get;
            set;
        }

        [SqlColumn("max_length", 6), SqlTypeFacets("smallint", true)]
        public short? max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 7), SqlTypeFacets("tinyint", true)]
        public byte? precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 8), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 9), SqlTypeFacets("nvarchar", true, 256)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 10), SqlTypeFacets("int", true)]
        public int? user_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_database", 11), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_database
        {
            get;
            set;
        }

        [SqlColumn("user_type_schema", 12), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_schema
        {
            get;
            set;
        }

        [SqlColumn("user_type_name", 13), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_name
        {
            get;
            set;
        }

        [SqlColumn("assembly_qualified_type_name", 14), SqlTypeFacets("nvarchar", true, 8000)]
        public string assembly_qualified_type_name
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 15), SqlTypeFacets("int", true)]
        public int? xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_database", 16), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_database
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_schema", 17), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_schema
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_name", 18), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_name
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", true)]
        public bool? is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("is_case_sensitive", 20), SqlTypeFacets("bit", true)]
        public bool? is_case_sensitive
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_length_clr_type", 21), SqlTypeFacets("bit", true)]
        public bool? is_fixed_length_clr_type
        {
            get;
            set;
        }

        [SqlColumn("source_server", 22), SqlTypeFacets("nvarchar", true, 256)]
        public string source_server
        {
            get;
            set;
        }

        [SqlColumn("source_database", 23), SqlTypeFacets("nvarchar", true, 256)]
        public string source_database
        {
            get;
            set;
        }

        [SqlColumn("source_schema", 24), SqlTypeFacets("nvarchar", true, 256)]
        public string source_schema
        {
            get;
            set;
        }

        [SqlColumn("source_table", 25), SqlTypeFacets("nvarchar", true, 256)]
        public string source_table
        {
            get;
            set;
        }

        [SqlColumn("source_column", 26), SqlTypeFacets("nvarchar", true, 256)]
        public string source_column
        {
            get;
            set;
        }

        [SqlColumn("is_identity_column", 27), SqlTypeFacets("bit", true)]
        public bool? is_identity_column
        {
            get;
            set;
        }

        [SqlColumn("is_part_of_unique_key", 28), SqlTypeFacets("bit", true)]
        public bool? is_part_of_unique_key
        {
            get;
            set;
        }

        [SqlColumn("is_updateable", 29), SqlTypeFacets("bit", true)]
        public bool? is_updateable
        {
            get;
            set;
        }

        [SqlColumn("is_computed_column", 30), SqlTypeFacets("bit", true)]
        public bool? is_computed_column
        {
            get;
            set;
        }

        [SqlColumn("is_sparse_column_set", 31), SqlTypeFacets("bit", true)]
        public bool? is_sparse_column_set
        {
            get;
            set;
        }

        [SqlColumn("ordinal_in_order_by_list", 32), SqlTypeFacets("smallint", true)]
        public short? ordinal_in_order_by_list
        {
            get;
            set;
        }

        [SqlColumn("order_by_is_descending", 33), SqlTypeFacets("bit", true)]
        public bool? order_by_is_descending
        {
            get;
            set;
        }

        [SqlColumn("order_by_list_length", 34), SqlTypeFacets("smallint", true)]
        public short? order_by_list_length
        {
            get;
            set;
        }

        public dm_exec_describe_first_result_setResult()
        {
        }

        public dm_exec_describe_first_result_setResult(object[] items)
        {
            error_number = (int?)items[0];
            error_severity = (int?)items[1];
            error_state = (int?)items[2];
            error_message = (string)items[3];
            error_type = (int?)items[4];
            error_type_desc = (string)items[5];
            is_hidden = (bool?)items[6];
            column_ordinal = (int?)items[7];
            name = (string)items[8];
            is_nullable = (bool?)items[9];
            system_type_id = (int?)items[10];
            system_type_name = (string)items[11];
            max_length = (short?)items[12];
            precision = (byte?)items[13];
            scale = (byte?)items[14];
            collation_name = (string)items[15];
            user_type_id = (int?)items[16];
            user_type_database = (string)items[17];
            user_type_schema = (string)items[18];
            user_type_name = (string)items[19];
            assembly_qualified_type_name = (string)items[20];
            xml_collection_id = (int?)items[21];
            xml_collection_database = (string)items[22];
            xml_collection_schema = (string)items[23];
            xml_collection_name = (string)items[24];
            is_xml_document = (bool?)items[25];
            is_case_sensitive = (bool?)items[26];
            is_fixed_length_clr_type = (bool?)items[27];
            source_server = (string)items[28];
            source_database = (string)items[29];
            source_schema = (string)items[30];
            source_table = (string)items[31];
            source_column = (string)items[32];
            is_identity_column = (bool?)items[33];
            is_part_of_unique_key = (bool?)items[34];
            is_updateable = (bool?)items[35];
            is_computed_column = (bool?)items[36];
            is_sparse_column_set = (bool?)items[37];
            ordinal_in_order_by_list = (short?)items[38];
            order_by_is_descending = (bool?)items[39];
            order_by_list_length = (short?)items[40];
        }

        public dm_exec_describe_first_result_setResult(int? error_number, int? error_severity, int? error_state, string error_message, int? error_type, string error_type_desc, bool? is_hidden, int? column_ordinal, string name, bool? is_nullable, int? system_type_id, string system_type_name, short? max_length, byte? precision, byte? scale, string collation_name, int? user_type_id, string user_type_database, string user_type_schema, string user_type_name, string assembly_qualified_type_name, int? xml_collection_id, string xml_collection_database, string xml_collection_schema, string xml_collection_name, bool? is_xml_document, bool? is_case_sensitive, bool? is_fixed_length_clr_type, string source_server, string source_database, string source_schema, string source_table, string source_column, bool? is_identity_column, bool? is_part_of_unique_key, bool? is_updateable, bool? is_computed_column, bool? is_sparse_column_set, short? ordinal_in_order_by_list, bool? order_by_is_descending, short? order_by_list_length)
        {
            this.error_number = error_number;
            this.error_severity = error_severity;
            this.error_state = error_state;
            this.error_message = error_message;
            this.error_type = error_type;
            this.error_type_desc = error_type_desc;
            this.is_hidden = is_hidden;
            this.column_ordinal = column_ordinal;
            this.name = name;
            this.is_nullable = is_nullable;
            this.system_type_id = system_type_id;
            this.system_type_name = system_type_name;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.user_type_id = user_type_id;
            this.user_type_database = user_type_database;
            this.user_type_schema = user_type_schema;
            this.user_type_name = user_type_name;
            this.assembly_qualified_type_name = assembly_qualified_type_name;
            this.xml_collection_id = xml_collection_id;
            this.xml_collection_database = xml_collection_database;
            this.xml_collection_schema = xml_collection_schema;
            this.xml_collection_name = xml_collection_name;
            this.is_xml_document = is_xml_document;
            this.is_case_sensitive = is_case_sensitive;
            this.is_fixed_length_clr_type = is_fixed_length_clr_type;
            this.source_server = source_server;
            this.source_database = source_database;
            this.source_schema = source_schema;
            this.source_table = source_table;
            this.source_column = source_column;
            this.is_identity_column = is_identity_column;
            this.is_part_of_unique_key = is_part_of_unique_key;
            this.is_updateable = is_updateable;
            this.is_computed_column = is_computed_column;
            this.is_sparse_column_set = is_sparse_column_set;
            this.ordinal_in_order_by_list = ordinal_in_order_by_list;
            this.order_by_is_descending = order_by_is_descending;
            this.order_by_list_length = order_by_list_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { error_number, error_severity, error_state, error_message, error_type, error_type_desc, is_hidden, column_ordinal, name, is_nullable, system_type_id, system_type_name, max_length, precision, scale, collation_name, user_type_id, user_type_database, user_type_schema, user_type_name, assembly_qualified_type_name, xml_collection_id, xml_collection_database, xml_collection_schema, xml_collection_name, is_xml_document, is_case_sensitive, is_fixed_length_clr_type, source_server, source_database, source_schema, source_table, source_column, is_identity_column, is_part_of_unique_key, is_updateable, is_computed_column, is_sparse_column_set, ordinal_in_order_by_list, order_by_is_descending, order_by_list_length };
        }

        public override void SetItemArray(object[] items)
        {
            error_number = (int?)items[0];
            error_severity = (int?)items[1];
            error_state = (int?)items[2];
            error_message = (string)items[3];
            error_type = (int?)items[4];
            error_type_desc = (string)items[5];
            is_hidden = (bool?)items[6];
            column_ordinal = (int?)items[7];
            name = (string)items[8];
            is_nullable = (bool?)items[9];
            system_type_id = (int?)items[10];
            system_type_name = (string)items[11];
            max_length = (short?)items[12];
            precision = (byte?)items[13];
            scale = (byte?)items[14];
            collation_name = (string)items[15];
            user_type_id = (int?)items[16];
            user_type_database = (string)items[17];
            user_type_schema = (string)items[18];
            user_type_name = (string)items[19];
            assembly_qualified_type_name = (string)items[20];
            xml_collection_id = (int?)items[21];
            xml_collection_database = (string)items[22];
            xml_collection_schema = (string)items[23];
            xml_collection_name = (string)items[24];
            is_xml_document = (bool?)items[25];
            is_case_sensitive = (bool?)items[26];
            is_fixed_length_clr_type = (bool?)items[27];
            source_server = (string)items[28];
            source_database = (string)items[29];
            source_schema = (string)items[30];
            source_table = (string)items[31];
            source_column = (string)items[32];
            is_identity_column = (bool?)items[33];
            is_part_of_unique_key = (bool?)items[34];
            is_updateable = (bool?)items[35];
            is_computed_column = (bool?)items[36];
            is_sparse_column_set = (bool?)items[37];
            ordinal_in_order_by_list = (short?)items[38];
            order_by_is_descending = (bool?)items[39];
            order_by_list_length = (short?)items[40];
        }
    }

    [SqlTableFunction("sys", "dm_exec_describe_first_result_set")]
    public partial class dm_exec_describe_first_result_set : SqlTableFunctionProxy<dm_exec_describe_first_result_set, dm_exec_describe_first_result_setResult>
    {
        [SqlParameter("@tsql", 0, false, false), SqlTypeFacets("nvarchar", true, -1)]
        public string tsql
        {
            get;
            set;
        }

        [SqlParameter("@params", 1, false, false), SqlTypeFacets("nvarchar", true, -1)]
        public string @params
        {
            get;
            set;
        }

        [SqlParameter("@browse_information_mode", 2, false, false), SqlTypeFacets("tinyint", true)]
        public byte? browse_information_mode
        {
            get;
            set;
        }

        public dm_exec_describe_first_result_set()
        {
        }

        public dm_exec_describe_first_result_set(object[] items)
        {
            tsql = (string)items[0];
            @params = (string)items[1];
            browse_information_mode = (byte?)items[2];
        }

        public dm_exec_describe_first_result_set(string tsql, string @params, byte? browse_information_mode)
        {
            this.tsql = tsql;
            this.@params = @params;
            this.browse_information_mode = browse_information_mode;
        }

        public override object[] GetItemArray()
        {
            return new object[] { tsql, @params, browse_information_mode };
        }

        public override void SetItemArray(object[] items)
        {
            tsql = (string)items[0];
            @params = (string)items[1];
            browse_information_mode = (byte?)items[2];
        }
    }

    [SqlTableFunctionResult("sys", "fn_my_permissions")]
    public partial class fn_my_permissionsResult : SqlTabularProxy
    {
        [SqlColumn("entity_name", 0), SqlTypeFacets("sysname", true)]
        public string entity_name
        {
            get;
            set;
        }

        [SqlColumn("subentity_name", 1), SqlTypeFacets("sysname", true)]
        public string subentity_name
        {
            get;
            set;
        }

        [SqlColumn("permission_name", 2), SqlTypeFacets("nvarchar", true, 120)]
        public string permission_name
        {
            get;
            set;
        }

        public fn_my_permissionsResult()
        {
        }

        public fn_my_permissionsResult(object[] items)
        {
            entity_name = (string)items[0];
            subentity_name = (string)items[1];
            permission_name = (string)items[2];
        }

        public fn_my_permissionsResult(string entity_name, string subentity_name, string permission_name)
        {
            this.entity_name = entity_name;
            this.subentity_name = subentity_name;
            this.permission_name = permission_name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { entity_name, subentity_name, permission_name };
        }

        public override void SetItemArray(object[] items)
        {
            entity_name = (string)items[0];
            subentity_name = (string)items[1];
            permission_name = (string)items[2];
        }
    }

    [SqlTableFunction("sys", "fn_my_permissions")]
    public partial class fn_my_permissions : SqlTableFunctionProxy<fn_my_permissions, fn_my_permissionsResult>
    {
        [SqlParameter("@entity", 0, false, false), SqlTypeFacets("sysname", true)]
        public string entity
        {
            get;
            set;
        }

        [SqlParameter("@class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)]
        public string @class
        {
            get;
            set;
        }

        public fn_my_permissions()
        {
        }

        public fn_my_permissions(object[] items)
        {
            entity = (string)items[0];
            @class = (string)items[1];
        }

        public fn_my_permissions(string entity, string @class)
        {
            this.entity = entity;
            this.@class = @class;
        }

        public override object[] GetItemArray()
        {
            return new object[] { entity, @class };
        }

        public override void SetItemArray(object[] items)
        {
            entity = (string)items[0];
            @class = (string)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_database_page_allocations")]
    public partial class dm_db_database_page_allocationsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", true)]
        public int? database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", true)]
        public int? index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_id", 3), SqlTypeFacets("int", true)]
        public int? partition_id
        {
            get;
            set;
        }

        [SqlColumn("rowset_id", 4), SqlTypeFacets("bigint", true)]
        public long? rowset_id
        {
            get;
            set;
        }

        [SqlColumn("allocation_unit_id", 5), SqlTypeFacets("bigint", true)]
        public long? allocation_unit_id
        {
            get;
            set;
        }

        [SqlColumn("allocation_unit_type", 6), SqlTypeFacets("int", true)]
        public int? allocation_unit_type
        {
            get;
            set;
        }

        [SqlColumn("allocation_unit_type_desc", 7), SqlTypeFacets("nvarchar", false, 120)]
        public string allocation_unit_type_desc
        {
            get;
            set;
        }

        [SqlColumn("data_clone_id", 8), SqlTypeFacets("int", true)]
        public int? data_clone_id
        {
            get;
            set;
        }

        [SqlColumn("clone_state", 9), SqlTypeFacets("int", true)]
        public int? clone_state
        {
            get;
            set;
        }

        [SqlColumn("clone_state_desc", 10), SqlTypeFacets("nvarchar", false, 18)]
        public string clone_state_desc
        {
            get;
            set;
        }

        [SqlColumn("extent_file_id", 11), SqlTypeFacets("smallint", true)]
        public short? extent_file_id
        {
            get;
            set;
        }

        [SqlColumn("extent_page_id", 12), SqlTypeFacets("int", true)]
        public int? extent_page_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_page_iam_file_id", 13), SqlTypeFacets("smallint", true)]
        public short? allocated_page_iam_file_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_page_iam_page_id", 14), SqlTypeFacets("int", true)]
        public int? allocated_page_iam_page_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_page_file_id", 15), SqlTypeFacets("smallint", true)]
        public short? allocated_page_file_id
        {
            get;
            set;
        }

        [SqlColumn("allocated_page_page_id", 16), SqlTypeFacets("int", true)]
        public int? allocated_page_page_id
        {
            get;
            set;
        }

        [SqlColumn("is_allocated", 17), SqlTypeFacets("tinyint", true)]
        public byte? is_allocated
        {
            get;
            set;
        }

        [SqlColumn("is_iam_page", 18), SqlTypeFacets("tinyint", true)]
        public byte? is_iam_page
        {
            get;
            set;
        }

        [SqlColumn("is_mixed_page_allocation", 19), SqlTypeFacets("tinyint", true)]
        public byte? is_mixed_page_allocation
        {
            get;
            set;
        }

        [SqlColumn("page_free_space_percent", 20), SqlTypeFacets("int", true)]
        public int? page_free_space_percent
        {
            get;
            set;
        }

        [SqlColumn("page_type", 21), SqlTypeFacets("int", true)]
        public int? page_type
        {
            get;
            set;
        }

        [SqlColumn("page_type_desc", 22), SqlTypeFacets("nvarchar", true, 512)]
        public string page_type_desc
        {
            get;
            set;
        }

        [SqlColumn("page_level", 23), SqlTypeFacets("tinyint", true)]
        public byte? page_level
        {
            get;
            set;
        }

        [SqlColumn("next_page_file_id", 24), SqlTypeFacets("smallint", true)]
        public short? next_page_file_id
        {
            get;
            set;
        }

        [SqlColumn("next_page_page_id", 25), SqlTypeFacets("int", true)]
        public int? next_page_page_id
        {
            get;
            set;
        }

        [SqlColumn("previous_page_file_id", 26), SqlTypeFacets("smallint", true)]
        public short? previous_page_file_id
        {
            get;
            set;
        }

        [SqlColumn("previous_page_page_id", 27), SqlTypeFacets("int", true)]
        public int? previous_page_page_id
        {
            get;
            set;
        }

        [SqlColumn("is_page_compressed", 28), SqlTypeFacets("tinyint", true)]
        public byte? is_page_compressed
        {
            get;
            set;
        }

        [SqlColumn("has_ghost_records", 29), SqlTypeFacets("tinyint", true)]
        public byte? has_ghost_records
        {
            get;
            set;
        }

        public dm_db_database_page_allocationsResult()
        {
        }

        public dm_db_database_page_allocationsResult(object[] items)
        {
            database_id = (int?)items[0];
            object_id = (int?)items[1];
            index_id = (int?)items[2];
            partition_id = (int?)items[3];
            rowset_id = (long?)items[4];
            allocation_unit_id = (long?)items[5];
            allocation_unit_type = (int?)items[6];
            allocation_unit_type_desc = (string)items[7];
            data_clone_id = (int?)items[8];
            clone_state = (int?)items[9];
            clone_state_desc = (string)items[10];
            extent_file_id = (short?)items[11];
            extent_page_id = (int?)items[12];
            allocated_page_iam_file_id = (short?)items[13];
            allocated_page_iam_page_id = (int?)items[14];
            allocated_page_file_id = (short?)items[15];
            allocated_page_page_id = (int?)items[16];
            is_allocated = (byte?)items[17];
            is_iam_page = (byte?)items[18];
            is_mixed_page_allocation = (byte?)items[19];
            page_free_space_percent = (int?)items[20];
            page_type = (int?)items[21];
            page_type_desc = (string)items[22];
            page_level = (byte?)items[23];
            next_page_file_id = (short?)items[24];
            next_page_page_id = (int?)items[25];
            previous_page_file_id = (short?)items[26];
            previous_page_page_id = (int?)items[27];
            is_page_compressed = (byte?)items[28];
            has_ghost_records = (byte?)items[29];
        }

        public dm_db_database_page_allocationsResult(int? database_id, int? object_id, int? index_id, int? partition_id, long? rowset_id, long? allocation_unit_id, int? allocation_unit_type, string allocation_unit_type_desc, int? data_clone_id, int? clone_state, string clone_state_desc, short? extent_file_id, int? extent_page_id, short? allocated_page_iam_file_id, int? allocated_page_iam_page_id, short? allocated_page_file_id, int? allocated_page_page_id, byte? is_allocated, byte? is_iam_page, byte? is_mixed_page_allocation, int? page_free_space_percent, int? page_type, string page_type_desc, byte? page_level, short? next_page_file_id, int? next_page_page_id, short? previous_page_file_id, int? previous_page_page_id, byte? is_page_compressed, byte? has_ghost_records)
        {
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_id = partition_id;
            this.rowset_id = rowset_id;
            this.allocation_unit_id = allocation_unit_id;
            this.allocation_unit_type = allocation_unit_type;
            this.allocation_unit_type_desc = allocation_unit_type_desc;
            this.data_clone_id = data_clone_id;
            this.clone_state = clone_state;
            this.clone_state_desc = clone_state_desc;
            this.extent_file_id = extent_file_id;
            this.extent_page_id = extent_page_id;
            this.allocated_page_iam_file_id = allocated_page_iam_file_id;
            this.allocated_page_iam_page_id = allocated_page_iam_page_id;
            this.allocated_page_file_id = allocated_page_file_id;
            this.allocated_page_page_id = allocated_page_page_id;
            this.is_allocated = is_allocated;
            this.is_iam_page = is_iam_page;
            this.is_mixed_page_allocation = is_mixed_page_allocation;
            this.page_free_space_percent = page_free_space_percent;
            this.page_type = page_type;
            this.page_type_desc = page_type_desc;
            this.page_level = page_level;
            this.next_page_file_id = next_page_file_id;
            this.next_page_page_id = next_page_page_id;
            this.previous_page_file_id = previous_page_file_id;
            this.previous_page_page_id = previous_page_page_id;
            this.is_page_compressed = is_page_compressed;
            this.has_ghost_records = has_ghost_records;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, object_id, index_id, partition_id, rowset_id, allocation_unit_id, allocation_unit_type, allocation_unit_type_desc, data_clone_id, clone_state, clone_state_desc, extent_file_id, extent_page_id, allocated_page_iam_file_id, allocated_page_iam_page_id, allocated_page_file_id, allocated_page_page_id, is_allocated, is_iam_page, is_mixed_page_allocation, page_free_space_percent, page_type, page_type_desc, page_level, next_page_file_id, next_page_page_id, previous_page_file_id, previous_page_page_id, is_page_compressed, has_ghost_records };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int?)items[0];
            object_id = (int?)items[1];
            index_id = (int?)items[2];
            partition_id = (int?)items[3];
            rowset_id = (long?)items[4];
            allocation_unit_id = (long?)items[5];
            allocation_unit_type = (int?)items[6];
            allocation_unit_type_desc = (string)items[7];
            data_clone_id = (int?)items[8];
            clone_state = (int?)items[9];
            clone_state_desc = (string)items[10];
            extent_file_id = (short?)items[11];
            extent_page_id = (int?)items[12];
            allocated_page_iam_file_id = (short?)items[13];
            allocated_page_iam_page_id = (int?)items[14];
            allocated_page_file_id = (short?)items[15];
            allocated_page_page_id = (int?)items[16];
            is_allocated = (byte?)items[17];
            is_iam_page = (byte?)items[18];
            is_mixed_page_allocation = (byte?)items[19];
            page_free_space_percent = (int?)items[20];
            page_type = (int?)items[21];
            page_type_desc = (string)items[22];
            page_level = (byte?)items[23];
            next_page_file_id = (short?)items[24];
            next_page_page_id = (int?)items[25];
            previous_page_file_id = (short?)items[26];
            previous_page_page_id = (int?)items[27];
            is_page_compressed = (byte?)items[28];
            has_ghost_records = (byte?)items[29];
        }
    }

    [SqlTableFunction("sys", "dm_db_database_page_allocations")]
    public partial class dm_db_database_page_allocations : SqlTableFunctionProxy<dm_db_database_page_allocations, dm_db_database_page_allocationsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)]
        public short? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@TableId", 1, false, false), SqlTypeFacets("int", true)]
        public int? TableId
        {
            get;
            set;
        }

        [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)]
        public int? IndexId
        {
            get;
            set;
        }

        [SqlParameter("@PartitionId", 3, false, false), SqlTypeFacets("bigint", true)]
        public long? PartitionId
        {
            get;
            set;
        }

        [SqlParameter("@Mode", 4, false, false), SqlTypeFacets("nvarchar", true, 128)]
        public string Mode
        {
            get;
            set;
        }

        public dm_db_database_page_allocations()
        {
        }

        public dm_db_database_page_allocations(object[] items)
        {
            DatabaseId = (short?)items[0];
            TableId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionId = (long?)items[3];
            Mode = (string)items[4];
        }

        public dm_db_database_page_allocations(short? DatabaseId, int? TableId, int? IndexId, long? PartitionId, string Mode)
        {
            this.DatabaseId = DatabaseId;
            this.TableId = TableId;
            this.IndexId = IndexId;
            this.PartitionId = PartitionId;
            this.Mode = Mode;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, TableId, IndexId, PartitionId, Mode };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (short?)items[0];
            TableId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionId = (long?)items[3];
            Mode = (string)items[4];
        }
    }

    [SqlTableFunctionResult("sys", "fn_sqlagent_jobsteps")]
    public partial class fn_sqlagent_jobstepsResult : SqlTabularProxy
    {
        [SqlColumn("job_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid job_id
        {
            get;
            set;
        }

        [SqlColumn("step_id", 1), SqlTypeFacets("int", false)]
        public int step_id
        {
            get;
            set;
        }

        [SqlColumn("step_name", 2), SqlTypeFacets("sysname", false)]
        public string step_name
        {
            get;
            set;
        }

        [SqlColumn("subsystem", 3), SqlTypeFacets("nvarchar", false, 80)]
        public string subsystem
        {
            get;
            set;
        }

        [SqlColumn("command", 4), SqlTypeFacets("nvarchar", true, -1)]
        public string command
        {
            get;
            set;
        }

        [SqlColumn("flags", 5), SqlTypeFacets("int", false)]
        public int flags
        {
            get;
            set;
        }

        [SqlColumn("additional_parameters", 6), SqlTypeFacets("nvarchar", true, -1)]
        public string additional_parameters
        {
            get;
            set;
        }

        [SqlColumn("cmdexec_success_code", 7), SqlTypeFacets("int", false)]
        public int cmdexec_success_code
        {
            get;
            set;
        }

        [SqlColumn("on_success_action", 8), SqlTypeFacets("tinyint", false)]
        public byte on_success_action
        {
            get;
            set;
        }

        [SqlColumn("on_success_step_id", 9), SqlTypeFacets("int", false)]
        public int on_success_step_id
        {
            get;
            set;
        }

        [SqlColumn("on_fail_action", 10), SqlTypeFacets("tinyint", false)]
        public byte on_fail_action
        {
            get;
            set;
        }

        [SqlColumn("on_fail_step_id", 11), SqlTypeFacets("int", false)]
        public int on_fail_step_id
        {
            get;
            set;
        }

        [SqlColumn("server", 12), SqlTypeFacets("sysname", true)]
        public string server
        {
            get;
            set;
        }

        [SqlColumn("database_name", 13), SqlTypeFacets("sysname", true)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("database_user_name", 14), SqlTypeFacets("sysname", true)]
        public string database_user_name
        {
            get;
            set;
        }

        [SqlColumn("retry_attempts", 15), SqlTypeFacets("int", false)]
        public int retry_attempts
        {
            get;
            set;
        }

        [SqlColumn("retry_interval", 16), SqlTypeFacets("int", false)]
        public int retry_interval
        {
            get;
            set;
        }

        [SqlColumn("os_run_priority", 17), SqlTypeFacets("int", false)]
        public int os_run_priority
        {
            get;
            set;
        }

        [SqlColumn("output_file_name", 18), SqlTypeFacets("nvarchar", true, 400)]
        public string output_file_name
        {
            get;
            set;
        }

        [SqlColumn("last_run_outcome", 19), SqlTypeFacets("int", false)]
        public int last_run_outcome
        {
            get;
            set;
        }

        [SqlColumn("last_run_duration", 20), SqlTypeFacets("int", false)]
        public int last_run_duration
        {
            get;
            set;
        }

        [SqlColumn("last_run_retries", 21), SqlTypeFacets("int", false)]
        public int last_run_retries
        {
            get;
            set;
        }

        [SqlColumn("last_run_date", 22), SqlTypeFacets("int", false)]
        public int last_run_date
        {
            get;
            set;
        }

        [SqlColumn("last_run_time", 23), SqlTypeFacets("int", false)]
        public int last_run_time
        {
            get;
            set;
        }

        [SqlColumn("step_uid", 24), SqlTypeFacets("uniqueidentifier", false)]
        public Guid step_uid
        {
            get;
            set;
        }

        public fn_sqlagent_jobstepsResult()
        {
        }

        public fn_sqlagent_jobstepsResult(object[] items)
        {
            job_id = (Guid)items[0];
            step_id = (int)items[1];
            step_name = (string)items[2];
            subsystem = (string)items[3];
            command = (string)items[4];
            flags = (int)items[5];
            additional_parameters = (string)items[6];
            cmdexec_success_code = (int)items[7];
            on_success_action = (byte)items[8];
            on_success_step_id = (int)items[9];
            on_fail_action = (byte)items[10];
            on_fail_step_id = (int)items[11];
            server = (string)items[12];
            database_name = (string)items[13];
            database_user_name = (string)items[14];
            retry_attempts = (int)items[15];
            retry_interval = (int)items[16];
            os_run_priority = (int)items[17];
            output_file_name = (string)items[18];
            last_run_outcome = (int)items[19];
            last_run_duration = (int)items[20];
            last_run_retries = (int)items[21];
            last_run_date = (int)items[22];
            last_run_time = (int)items[23];
            step_uid = (Guid)items[24];
        }

        public fn_sqlagent_jobstepsResult(Guid job_id, int step_id, string step_name, string subsystem, string command, int flags, string additional_parameters, int cmdexec_success_code, byte on_success_action, int on_success_step_id, byte on_fail_action, int on_fail_step_id, string server, string database_name, string database_user_name, int retry_attempts, int retry_interval, int os_run_priority, string output_file_name, int last_run_outcome, int last_run_duration, int last_run_retries, int last_run_date, int last_run_time, Guid step_uid)
        {
            this.job_id = job_id;
            this.step_id = step_id;
            this.step_name = step_name;
            this.subsystem = subsystem;
            this.command = command;
            this.flags = flags;
            this.additional_parameters = additional_parameters;
            this.cmdexec_success_code = cmdexec_success_code;
            this.on_success_action = on_success_action;
            this.on_success_step_id = on_success_step_id;
            this.on_fail_action = on_fail_action;
            this.on_fail_step_id = on_fail_step_id;
            this.server = server;
            this.database_name = database_name;
            this.database_user_name = database_user_name;
            this.retry_attempts = retry_attempts;
            this.retry_interval = retry_interval;
            this.os_run_priority = os_run_priority;
            this.output_file_name = output_file_name;
            this.last_run_outcome = last_run_outcome;
            this.last_run_duration = last_run_duration;
            this.last_run_retries = last_run_retries;
            this.last_run_date = last_run_date;
            this.last_run_time = last_run_time;
            this.step_uid = step_uid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { job_id, step_id, step_name, subsystem, command, flags, additional_parameters, cmdexec_success_code, on_success_action, on_success_step_id, on_fail_action, on_fail_step_id, server, database_name, database_user_name, retry_attempts, retry_interval, os_run_priority, output_file_name, last_run_outcome, last_run_duration, last_run_retries, last_run_date, last_run_time, step_uid };
        }

        public override void SetItemArray(object[] items)
        {
            job_id = (Guid)items[0];
            step_id = (int)items[1];
            step_name = (string)items[2];
            subsystem = (string)items[3];
            command = (string)items[4];
            flags = (int)items[5];
            additional_parameters = (string)items[6];
            cmdexec_success_code = (int)items[7];
            on_success_action = (byte)items[8];
            on_success_step_id = (int)items[9];
            on_fail_action = (byte)items[10];
            on_fail_step_id = (int)items[11];
            server = (string)items[12];
            database_name = (string)items[13];
            database_user_name = (string)items[14];
            retry_attempts = (int)items[15];
            retry_interval = (int)items[16];
            os_run_priority = (int)items[17];
            output_file_name = (string)items[18];
            last_run_outcome = (int)items[19];
            last_run_duration = (int)items[20];
            last_run_retries = (int)items[21];
            last_run_date = (int)items[22];
            last_run_time = (int)items[23];
            step_uid = (Guid)items[24];
        }
    }

    [SqlTableFunction("sys", "fn_sqlagent_jobsteps")]
    public partial class fn_sqlagent_jobsteps : SqlTableFunctionProxy<fn_sqlagent_jobsteps, fn_sqlagent_jobstepsResult>
    {
        [SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? job_id
        {
            get;
            set;
        }

        [SqlParameter("@step_id", 1, false, false), SqlTypeFacets("int", true)]
        public int? step_id
        {
            get;
            set;
        }

        public fn_sqlagent_jobsteps()
        {
        }

        public fn_sqlagent_jobsteps(object[] items)
        {
            job_id = (Guid?)items[0];
            step_id = (int?)items[1];
        }

        public fn_sqlagent_jobsteps(Guid? job_id, int? step_id)
        {
            this.job_id = job_id;
            this.step_id = step_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { job_id, step_id };
        }

        public override void SetItemArray(object[] items)
        {
            job_id = (Guid?)items[0];
            step_id = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_sql_referenced_entities")]
    public partial class dm_sql_referenced_entitiesResult : SqlTabularProxy
    {
        [SqlColumn("referencing_minor_id", 0), SqlTypeFacets("int", true)]
        public int? referencing_minor_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_server_name", 1), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_server_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_database_name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_database_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_schema_name", 3), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_schema_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_entity_name", 4), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_entity_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_name", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string referenced_minor_name
        {
            get;
            set;
        }

        [SqlColumn("referenced_id", 6), SqlTypeFacets("int", true)]
        public int? referenced_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_minor_id", 7), SqlTypeFacets("int", true)]
        public int? referenced_minor_id
        {
            get;
            set;
        }

        [SqlColumn("referenced_class", 8), SqlTypeFacets("tinyint", true)]
        public byte? referenced_class
        {
            get;
            set;
        }

        [SqlColumn("referenced_class_desc", 9), SqlTypeFacets("nvarchar", true, 120)]
        public string referenced_class_desc
        {
            get;
            set;
        }

        [SqlColumn("is_caller_dependent", 10), SqlTypeFacets("bit", false)]
        public bool is_caller_dependent
        {
            get;
            set;
        }

        [SqlColumn("is_ambiguous", 11), SqlTypeFacets("bit", false)]
        public bool is_ambiguous
        {
            get;
            set;
        }

        [SqlColumn("is_selected", 12), SqlTypeFacets("bit", false)]
        public bool is_selected
        {
            get;
            set;
        }

        [SqlColumn("is_updated", 13), SqlTypeFacets("bit", false)]
        public bool is_updated
        {
            get;
            set;
        }

        [SqlColumn("is_select_all", 14), SqlTypeFacets("bit", false)]
        public bool is_select_all
        {
            get;
            set;
        }

        [SqlColumn("is_all_columns_found", 15), SqlTypeFacets("bit", false)]
        public bool is_all_columns_found
        {
            get;
            set;
        }

        public dm_sql_referenced_entitiesResult()
        {
        }

        public dm_sql_referenced_entitiesResult(object[] items)
        {
            referencing_minor_id = (int?)items[0];
            referenced_server_name = (string)items[1];
            referenced_database_name = (string)items[2];
            referenced_schema_name = (string)items[3];
            referenced_entity_name = (string)items[4];
            referenced_minor_name = (string)items[5];
            referenced_id = (int?)items[6];
            referenced_minor_id = (int?)items[7];
            referenced_class = (byte?)items[8];
            referenced_class_desc = (string)items[9];
            is_caller_dependent = (bool)items[10];
            is_ambiguous = (bool)items[11];
            is_selected = (bool)items[12];
            is_updated = (bool)items[13];
            is_select_all = (bool)items[14];
            is_all_columns_found = (bool)items[15];
        }

        public dm_sql_referenced_entitiesResult(int? referencing_minor_id, string referenced_server_name, string referenced_database_name, string referenced_schema_name, string referenced_entity_name, string referenced_minor_name, int? referenced_id, int? referenced_minor_id, byte? referenced_class, string referenced_class_desc, bool is_caller_dependent, bool is_ambiguous, bool is_selected, bool is_updated, bool is_select_all, bool is_all_columns_found)
        {
            this.referencing_minor_id = referencing_minor_id;
            this.referenced_server_name = referenced_server_name;
            this.referenced_database_name = referenced_database_name;
            this.referenced_schema_name = referenced_schema_name;
            this.referenced_entity_name = referenced_entity_name;
            this.referenced_minor_name = referenced_minor_name;
            this.referenced_id = referenced_id;
            this.referenced_minor_id = referenced_minor_id;
            this.referenced_class = referenced_class;
            this.referenced_class_desc = referenced_class_desc;
            this.is_caller_dependent = is_caller_dependent;
            this.is_ambiguous = is_ambiguous;
            this.is_selected = is_selected;
            this.is_updated = is_updated;
            this.is_select_all = is_select_all;
            this.is_all_columns_found = is_all_columns_found;
        }

        public override object[] GetItemArray()
        {
            return new object[] { referencing_minor_id, referenced_server_name, referenced_database_name, referenced_schema_name, referenced_entity_name, referenced_minor_name, referenced_id, referenced_minor_id, referenced_class, referenced_class_desc, is_caller_dependent, is_ambiguous, is_selected, is_updated, is_select_all, is_all_columns_found };
        }

        public override void SetItemArray(object[] items)
        {
            referencing_minor_id = (int?)items[0];
            referenced_server_name = (string)items[1];
            referenced_database_name = (string)items[2];
            referenced_schema_name = (string)items[3];
            referenced_entity_name = (string)items[4];
            referenced_minor_name = (string)items[5];
            referenced_id = (int?)items[6];
            referenced_minor_id = (int?)items[7];
            referenced_class = (byte?)items[8];
            referenced_class_desc = (string)items[9];
            is_caller_dependent = (bool)items[10];
            is_ambiguous = (bool)items[11];
            is_selected = (bool)items[12];
            is_updated = (bool)items[13];
            is_select_all = (bool)items[14];
            is_all_columns_found = (bool)items[15];
        }
    }

    [SqlTableFunction("sys", "dm_sql_referenced_entities")]
    public partial class dm_sql_referenced_entities : SqlTableFunctionProxy<dm_sql_referenced_entities, dm_sql_referenced_entitiesResult>
    {
        [SqlParameter("@name", 0, false, false), SqlTypeFacets("nvarchar", true, 1034)]
        public string name
        {
            get;
            set;
        }

        [SqlParameter("@referencing_class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)]
        public string referencing_class
        {
            get;
            set;
        }

        public dm_sql_referenced_entities()
        {
        }

        public dm_sql_referenced_entities(object[] items)
        {
            name = (string)items[0];
            referencing_class = (string)items[1];
        }

        public dm_sql_referenced_entities(string name, string referencing_class)
        {
            this.name = name;
            this.referencing_class = referencing_class;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, referencing_class };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            referencing_class = (string)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_EnumCurrentPrincipals")]
    public partial class fn_EnumCurrentPrincipalsResult : SqlTabularProxy
    {
        [SqlColumn("db_name", 0), SqlTypeFacets("sysname", false)]
        public string db_name
        {
            get;
            set;
        }

        [SqlColumn("current_principal", 1), SqlTypeFacets("sysname", false)]
        public string current_principal
        {
            get;
            set;
        }

        [SqlColumn("mirroring_role", 2), SqlTypeFacets("int", true)]
        public int? mirroring_role
        {
            get;
            set;
        }

        [SqlColumn("mirroring_state", 3), SqlTypeFacets("int", true)]
        public int? mirroring_state
        {
            get;
            set;
        }

        public fn_EnumCurrentPrincipalsResult()
        {
        }

        public fn_EnumCurrentPrincipalsResult(object[] items)
        {
            db_name = (string)items[0];
            current_principal = (string)items[1];
            mirroring_role = (int?)items[2];
            mirroring_state = (int?)items[3];
        }

        public fn_EnumCurrentPrincipalsResult(string db_name, string current_principal, int? mirroring_role, int? mirroring_state)
        {
            this.db_name = db_name;
            this.current_principal = current_principal;
            this.mirroring_role = mirroring_role;
            this.mirroring_state = mirroring_state;
        }

        public override object[] GetItemArray()
        {
            return new object[] { db_name, current_principal, mirroring_role, mirroring_state };
        }

        public override void SetItemArray(object[] items)
        {
            db_name = (string)items[0];
            current_principal = (string)items[1];
            mirroring_role = (int?)items[2];
            mirroring_state = (int?)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_EnumCurrentPrincipals")]
    public partial class fn_EnumCurrentPrincipals : SqlTableFunctionProxy<fn_EnumCurrentPrincipals, fn_EnumCurrentPrincipalsResult>
    {
        public fn_EnumCurrentPrincipals()
        {
        }
    }

    [SqlTableFunctionResult("sys", "dm_cryptographic_provider_sessions")]
    public partial class dm_cryptographic_provider_sessionsResult : SqlTabularProxy
    {
        [SqlColumn("provider_id", 0), SqlTypeFacets("int", true)]
        public int? provider_id
        {
            get;
            set;
        }

        [SqlColumn("session_handle", 1), SqlTypeFacets("binary", true, 8)]
        public Byte[] session_handle
        {
            get;
            set;
        }

        [SqlColumn("identity", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string identity
        {
            get;
            set;
        }

        [SqlColumn("spid", 3), SqlTypeFacets("smallint", true)]
        public short? spid
        {
            get;
            set;
        }

        public dm_cryptographic_provider_sessionsResult()
        {
        }

        public dm_cryptographic_provider_sessionsResult(object[] items)
        {
            provider_id = (int?)items[0];
            session_handle = (Byte[])items[1];
            identity = (string)items[2];
            spid = (short?)items[3];
        }

        public dm_cryptographic_provider_sessionsResult(int? provider_id, Byte[] session_handle, string identity, short? spid)
        {
            this.provider_id = provider_id;
            this.session_handle = session_handle;
            this.identity = identity;
            this.spid = spid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { provider_id, session_handle, identity, spid };
        }

        public override void SetItemArray(object[] items)
        {
            provider_id = (int?)items[0];
            session_handle = (Byte[])items[1];
            identity = (string)items[2];
            spid = (short?)items[3];
        }
    }

    [SqlTableFunction("sys", "dm_cryptographic_provider_sessions")]
    public partial class dm_cryptographic_provider_sessions : SqlTableFunctionProxy<dm_cryptographic_provider_sessions, dm_cryptographic_provider_sessionsResult>
    {
        [SqlParameter("@all", 0, false, false), SqlTypeFacets("int", true)]
        public int? all
        {
            get;
            set;
        }

        public dm_cryptographic_provider_sessions()
        {
        }

        public dm_cryptographic_provider_sessions(object[] items)
        {
            all = (int?)items[0];
        }

        public dm_cryptographic_provider_sessions(int? all)
        {
            this.all = all;
        }

        public override object[] GetItemArray()
        {
            return new object[] { all };
        }

        public override void SetItemArray(object[] items)
        {
            all = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_validate_plan_guide")]
    public partial class fn_validate_plan_guideResult : SqlTabularProxy
    {
        [SqlColumn("msgnum", 0), SqlTypeFacets("int", false)]
        public int msgnum
        {
            get;
            set;
        }

        [SqlColumn("severity", 1), SqlTypeFacets("tinyint", false)]
        public byte severity
        {
            get;
            set;
        }

        [SqlColumn("state", 2), SqlTypeFacets("smallint", true)]
        public short? state
        {
            get;
            set;
        }

        [SqlColumn("message", 3), SqlTypeFacets("nvarchar", false, 2048)]
        public string message
        {
            get;
            set;
        }

        public fn_validate_plan_guideResult()
        {
        }

        public fn_validate_plan_guideResult(object[] items)
        {
            msgnum = (int)items[0];
            severity = (byte)items[1];
            state = (short?)items[2];
            message = (string)items[3];
        }

        public fn_validate_plan_guideResult(int msgnum, byte severity, short? state, string message)
        {
            this.msgnum = msgnum;
            this.severity = severity;
            this.state = state;
            this.message = message;
        }

        public override object[] GetItemArray()
        {
            return new object[] { msgnum, severity, state, message };
        }

        public override void SetItemArray(object[] items)
        {
            msgnum = (int)items[0];
            severity = (byte)items[1];
            state = (short?)items[2];
            message = (string)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_validate_plan_guide")]
    public partial class fn_validate_plan_guide : SqlTableFunctionProxy<fn_validate_plan_guide, fn_validate_plan_guideResult>
    {
        [SqlParameter("@plan_guide_id", 0, false, false), SqlTypeFacets("int", true)]
        public int? plan_guide_id
        {
            get;
            set;
        }

        public fn_validate_plan_guide()
        {
        }

        public fn_validate_plan_guide(object[] items)
        {
            plan_guide_id = (int?)items[0];
        }

        public fn_validate_plan_guide(int? plan_guide_id)
        {
            this.plan_guide_id = plan_guide_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { plan_guide_id };
        }

        public override void SetItemArray(object[] items)
        {
            plan_guide_id = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_index_operational_stats")]
    public partial class dm_db_index_operational_statsResult : SqlTabularProxy
    {
        [SqlColumn("tree_page_latch_wait_in_ms", 39), SqlTypeFacets("bigint", false)]
        public long tree_page_latch_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("tree_page_io_latch_wait_count", 40), SqlTypeFacets("bigint", false)]
        public long tree_page_io_latch_wait_count
        {
            get;
            set;
        }

        [SqlColumn("tree_page_io_latch_wait_in_ms", 41), SqlTypeFacets("bigint", false)]
        public long tree_page_io_latch_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("page_compression_attempt_count", 42), SqlTypeFacets("bigint", false)]
        public long page_compression_attempt_count
        {
            get;
            set;
        }

        [SqlColumn("page_compression_success_count", 43), SqlTypeFacets("bigint", false)]
        public long page_compression_success_count
        {
            get;
            set;
        }

        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 1), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("index_id", 2), SqlTypeFacets("int", false)]
        public int index_id
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 3), SqlTypeFacets("int", false)]
        public int partition_number
        {
            get;
            set;
        }

        [SqlColumn("leaf_insert_count", 4), SqlTypeFacets("bigint", false)]
        public long leaf_insert_count
        {
            get;
            set;
        }

        [SqlColumn("leaf_delete_count", 5), SqlTypeFacets("bigint", false)]
        public long leaf_delete_count
        {
            get;
            set;
        }

        [SqlColumn("leaf_update_count", 6), SqlTypeFacets("bigint", false)]
        public long leaf_update_count
        {
            get;
            set;
        }

        [SqlColumn("leaf_ghost_count", 7), SqlTypeFacets("bigint", false)]
        public long leaf_ghost_count
        {
            get;
            set;
        }

        [SqlColumn("nonleaf_insert_count", 8), SqlTypeFacets("bigint", false)]
        public long nonleaf_insert_count
        {
            get;
            set;
        }

        [SqlColumn("nonleaf_delete_count", 9), SqlTypeFacets("bigint", false)]
        public long nonleaf_delete_count
        {
            get;
            set;
        }

        [SqlColumn("nonleaf_update_count", 10), SqlTypeFacets("bigint", false)]
        public long nonleaf_update_count
        {
            get;
            set;
        }

        [SqlColumn("leaf_allocation_count", 11), SqlTypeFacets("bigint", false)]
        public long leaf_allocation_count
        {
            get;
            set;
        }

        [SqlColumn("nonleaf_allocation_count", 12), SqlTypeFacets("bigint", false)]
        public long nonleaf_allocation_count
        {
            get;
            set;
        }

        [SqlColumn("leaf_page_merge_count", 13), SqlTypeFacets("bigint", false)]
        public long leaf_page_merge_count
        {
            get;
            set;
        }

        [SqlColumn("nonleaf_page_merge_count", 14), SqlTypeFacets("bigint", false)]
        public long nonleaf_page_merge_count
        {
            get;
            set;
        }

        [SqlColumn("range_scan_count", 15), SqlTypeFacets("bigint", false)]
        public long range_scan_count
        {
            get;
            set;
        }

        [SqlColumn("singleton_lookup_count", 16), SqlTypeFacets("bigint", false)]
        public long singleton_lookup_count
        {
            get;
            set;
        }

        [SqlColumn("forwarded_fetch_count", 17), SqlTypeFacets("bigint", false)]
        public long forwarded_fetch_count
        {
            get;
            set;
        }

        [SqlColumn("lob_fetch_in_pages", 18), SqlTypeFacets("bigint", false)]
        public long lob_fetch_in_pages
        {
            get;
            set;
        }

        [SqlColumn("lob_fetch_in_bytes", 19), SqlTypeFacets("bigint", false)]
        public long lob_fetch_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("lob_orphan_create_count", 20), SqlTypeFacets("bigint", false)]
        public long lob_orphan_create_count
        {
            get;
            set;
        }

        [SqlColumn("lob_orphan_insert_count", 21), SqlTypeFacets("bigint", false)]
        public long lob_orphan_insert_count
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_fetch_in_pages", 22), SqlTypeFacets("bigint", false)]
        public long row_overflow_fetch_in_pages
        {
            get;
            set;
        }

        [SqlColumn("row_overflow_fetch_in_bytes", 23), SqlTypeFacets("bigint", false)]
        public long row_overflow_fetch_in_bytes
        {
            get;
            set;
        }

        [SqlColumn("column_value_push_off_row_count", 24), SqlTypeFacets("bigint", false)]
        public long column_value_push_off_row_count
        {
            get;
            set;
        }

        [SqlColumn("column_value_pull_in_row_count", 25), SqlTypeFacets("bigint", false)]
        public long column_value_pull_in_row_count
        {
            get;
            set;
        }

        [SqlColumn("row_lock_count", 26), SqlTypeFacets("bigint", false)]
        public long row_lock_count
        {
            get;
            set;
        }

        [SqlColumn("row_lock_wait_count", 27), SqlTypeFacets("bigint", false)]
        public long row_lock_wait_count
        {
            get;
            set;
        }

        [SqlColumn("row_lock_wait_in_ms", 28), SqlTypeFacets("bigint", false)]
        public long row_lock_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("page_lock_count", 29), SqlTypeFacets("bigint", false)]
        public long page_lock_count
        {
            get;
            set;
        }

        [SqlColumn("page_lock_wait_count", 30), SqlTypeFacets("bigint", false)]
        public long page_lock_wait_count
        {
            get;
            set;
        }

        [SqlColumn("page_lock_wait_in_ms", 31), SqlTypeFacets("bigint", false)]
        public long page_lock_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("index_lock_promotion_attempt_count", 32), SqlTypeFacets("bigint", false)]
        public long index_lock_promotion_attempt_count
        {
            get;
            set;
        }

        [SqlColumn("index_lock_promotion_count", 33), SqlTypeFacets("bigint", false)]
        public long index_lock_promotion_count
        {
            get;
            set;
        }

        [SqlColumn("page_latch_wait_count", 34), SqlTypeFacets("bigint", false)]
        public long page_latch_wait_count
        {
            get;
            set;
        }

        [SqlColumn("page_latch_wait_in_ms", 35), SqlTypeFacets("bigint", false)]
        public long page_latch_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("page_io_latch_wait_count", 36), SqlTypeFacets("bigint", false)]
        public long page_io_latch_wait_count
        {
            get;
            set;
        }

        [SqlColumn("page_io_latch_wait_in_ms", 37), SqlTypeFacets("bigint", false)]
        public long page_io_latch_wait_in_ms
        {
            get;
            set;
        }

        [SqlColumn("tree_page_latch_wait_count", 38), SqlTypeFacets("bigint", false)]
        public long tree_page_latch_wait_count
        {
            get;
            set;
        }

        public dm_db_index_operational_statsResult()
        {
        }

        public dm_db_index_operational_statsResult(object[] items)
        {
            tree_page_latch_wait_in_ms = (long)items[0];
            tree_page_io_latch_wait_count = (long)items[1];
            tree_page_io_latch_wait_in_ms = (long)items[2];
            page_compression_attempt_count = (long)items[3];
            page_compression_success_count = (long)items[4];
            database_id = (short)items[5];
            object_id = (int)items[6];
            index_id = (int)items[7];
            partition_number = (int)items[8];
            leaf_insert_count = (long)items[9];
            leaf_delete_count = (long)items[10];
            leaf_update_count = (long)items[11];
            leaf_ghost_count = (long)items[12];
            nonleaf_insert_count = (long)items[13];
            nonleaf_delete_count = (long)items[14];
            nonleaf_update_count = (long)items[15];
            leaf_allocation_count = (long)items[16];
            nonleaf_allocation_count = (long)items[17];
            leaf_page_merge_count = (long)items[18];
            nonleaf_page_merge_count = (long)items[19];
            range_scan_count = (long)items[20];
            singleton_lookup_count = (long)items[21];
            forwarded_fetch_count = (long)items[22];
            lob_fetch_in_pages = (long)items[23];
            lob_fetch_in_bytes = (long)items[24];
            lob_orphan_create_count = (long)items[25];
            lob_orphan_insert_count = (long)items[26];
            row_overflow_fetch_in_pages = (long)items[27];
            row_overflow_fetch_in_bytes = (long)items[28];
            column_value_push_off_row_count = (long)items[29];
            column_value_pull_in_row_count = (long)items[30];
            row_lock_count = (long)items[31];
            row_lock_wait_count = (long)items[32];
            row_lock_wait_in_ms = (long)items[33];
            page_lock_count = (long)items[34];
            page_lock_wait_count = (long)items[35];
            page_lock_wait_in_ms = (long)items[36];
            index_lock_promotion_attempt_count = (long)items[37];
            index_lock_promotion_count = (long)items[38];
            page_latch_wait_count = (long)items[39];
            page_latch_wait_in_ms = (long)items[40];
            page_io_latch_wait_count = (long)items[41];
            page_io_latch_wait_in_ms = (long)items[42];
            tree_page_latch_wait_count = (long)items[43];
        }

        public dm_db_index_operational_statsResult(long tree_page_latch_wait_in_ms, long tree_page_io_latch_wait_count, long tree_page_io_latch_wait_in_ms, long page_compression_attempt_count, long page_compression_success_count, short database_id, int object_id, int index_id, int partition_number, long leaf_insert_count, long leaf_delete_count, long leaf_update_count, long leaf_ghost_count, long nonleaf_insert_count, long nonleaf_delete_count, long nonleaf_update_count, long leaf_allocation_count, long nonleaf_allocation_count, long leaf_page_merge_count, long nonleaf_page_merge_count, long range_scan_count, long singleton_lookup_count, long forwarded_fetch_count, long lob_fetch_in_pages, long lob_fetch_in_bytes, long lob_orphan_create_count, long lob_orphan_insert_count, long row_overflow_fetch_in_pages, long row_overflow_fetch_in_bytes, long column_value_push_off_row_count, long column_value_pull_in_row_count, long row_lock_count, long row_lock_wait_count, long row_lock_wait_in_ms, long page_lock_count, long page_lock_wait_count, long page_lock_wait_in_ms, long index_lock_promotion_attempt_count, long index_lock_promotion_count, long page_latch_wait_count, long page_latch_wait_in_ms, long page_io_latch_wait_count, long page_io_latch_wait_in_ms, long tree_page_latch_wait_count)
        {
            this.tree_page_latch_wait_in_ms = tree_page_latch_wait_in_ms;
            this.tree_page_io_latch_wait_count = tree_page_io_latch_wait_count;
            this.tree_page_io_latch_wait_in_ms = tree_page_io_latch_wait_in_ms;
            this.page_compression_attempt_count = page_compression_attempt_count;
            this.page_compression_success_count = page_compression_success_count;
            this.database_id = database_id;
            this.object_id = object_id;
            this.index_id = index_id;
            this.partition_number = partition_number;
            this.leaf_insert_count = leaf_insert_count;
            this.leaf_delete_count = leaf_delete_count;
            this.leaf_update_count = leaf_update_count;
            this.leaf_ghost_count = leaf_ghost_count;
            this.nonleaf_insert_count = nonleaf_insert_count;
            this.nonleaf_delete_count = nonleaf_delete_count;
            this.nonleaf_update_count = nonleaf_update_count;
            this.leaf_allocation_count = leaf_allocation_count;
            this.nonleaf_allocation_count = nonleaf_allocation_count;
            this.leaf_page_merge_count = leaf_page_merge_count;
            this.nonleaf_page_merge_count = nonleaf_page_merge_count;
            this.range_scan_count = range_scan_count;
            this.singleton_lookup_count = singleton_lookup_count;
            this.forwarded_fetch_count = forwarded_fetch_count;
            this.lob_fetch_in_pages = lob_fetch_in_pages;
            this.lob_fetch_in_bytes = lob_fetch_in_bytes;
            this.lob_orphan_create_count = lob_orphan_create_count;
            this.lob_orphan_insert_count = lob_orphan_insert_count;
            this.row_overflow_fetch_in_pages = row_overflow_fetch_in_pages;
            this.row_overflow_fetch_in_bytes = row_overflow_fetch_in_bytes;
            this.column_value_push_off_row_count = column_value_push_off_row_count;
            this.column_value_pull_in_row_count = column_value_pull_in_row_count;
            this.row_lock_count = row_lock_count;
            this.row_lock_wait_count = row_lock_wait_count;
            this.row_lock_wait_in_ms = row_lock_wait_in_ms;
            this.page_lock_count = page_lock_count;
            this.page_lock_wait_count = page_lock_wait_count;
            this.page_lock_wait_in_ms = page_lock_wait_in_ms;
            this.index_lock_promotion_attempt_count = index_lock_promotion_attempt_count;
            this.index_lock_promotion_count = index_lock_promotion_count;
            this.page_latch_wait_count = page_latch_wait_count;
            this.page_latch_wait_in_ms = page_latch_wait_in_ms;
            this.page_io_latch_wait_count = page_io_latch_wait_count;
            this.page_io_latch_wait_in_ms = page_io_latch_wait_in_ms;
            this.tree_page_latch_wait_count = tree_page_latch_wait_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { tree_page_latch_wait_in_ms, tree_page_io_latch_wait_count, tree_page_io_latch_wait_in_ms, page_compression_attempt_count, page_compression_success_count, database_id, object_id, index_id, partition_number, leaf_insert_count, leaf_delete_count, leaf_update_count, leaf_ghost_count, nonleaf_insert_count, nonleaf_delete_count, nonleaf_update_count, leaf_allocation_count, nonleaf_allocation_count, leaf_page_merge_count, nonleaf_page_merge_count, range_scan_count, singleton_lookup_count, forwarded_fetch_count, lob_fetch_in_pages, lob_fetch_in_bytes, lob_orphan_create_count, lob_orphan_insert_count, row_overflow_fetch_in_pages, row_overflow_fetch_in_bytes, column_value_push_off_row_count, column_value_pull_in_row_count, row_lock_count, row_lock_wait_count, row_lock_wait_in_ms, page_lock_count, page_lock_wait_count, page_lock_wait_in_ms, index_lock_promotion_attempt_count, index_lock_promotion_count, page_latch_wait_count, page_latch_wait_in_ms, page_io_latch_wait_count, page_io_latch_wait_in_ms, tree_page_latch_wait_count };
        }

        public override void SetItemArray(object[] items)
        {
            tree_page_latch_wait_in_ms = (long)items[0];
            tree_page_io_latch_wait_count = (long)items[1];
            tree_page_io_latch_wait_in_ms = (long)items[2];
            page_compression_attempt_count = (long)items[3];
            page_compression_success_count = (long)items[4];
            database_id = (short)items[5];
            object_id = (int)items[6];
            index_id = (int)items[7];
            partition_number = (int)items[8];
            leaf_insert_count = (long)items[9];
            leaf_delete_count = (long)items[10];
            leaf_update_count = (long)items[11];
            leaf_ghost_count = (long)items[12];
            nonleaf_insert_count = (long)items[13];
            nonleaf_delete_count = (long)items[14];
            nonleaf_update_count = (long)items[15];
            leaf_allocation_count = (long)items[16];
            nonleaf_allocation_count = (long)items[17];
            leaf_page_merge_count = (long)items[18];
            nonleaf_page_merge_count = (long)items[19];
            range_scan_count = (long)items[20];
            singleton_lookup_count = (long)items[21];
            forwarded_fetch_count = (long)items[22];
            lob_fetch_in_pages = (long)items[23];
            lob_fetch_in_bytes = (long)items[24];
            lob_orphan_create_count = (long)items[25];
            lob_orphan_insert_count = (long)items[26];
            row_overflow_fetch_in_pages = (long)items[27];
            row_overflow_fetch_in_bytes = (long)items[28];
            column_value_push_off_row_count = (long)items[29];
            column_value_pull_in_row_count = (long)items[30];
            row_lock_count = (long)items[31];
            row_lock_wait_count = (long)items[32];
            row_lock_wait_in_ms = (long)items[33];
            page_lock_count = (long)items[34];
            page_lock_wait_count = (long)items[35];
            page_lock_wait_in_ms = (long)items[36];
            index_lock_promotion_attempt_count = (long)items[37];
            index_lock_promotion_count = (long)items[38];
            page_latch_wait_count = (long)items[39];
            page_latch_wait_in_ms = (long)items[40];
            page_io_latch_wait_count = (long)items[41];
            page_io_latch_wait_in_ms = (long)items[42];
            tree_page_latch_wait_count = (long)items[43];
        }
    }

    [SqlTableFunction("sys", "dm_db_index_operational_stats")]
    public partial class dm_db_index_operational_stats : SqlTableFunctionProxy<dm_db_index_operational_stats, dm_db_index_operational_statsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)]
        public short? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@TableId", 1, false, false), SqlTypeFacets("int", true)]
        public int? TableId
        {
            get;
            set;
        }

        [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)]
        public int? IndexId
        {
            get;
            set;
        }

        [SqlParameter("@PartitionNumber", 3, false, false), SqlTypeFacets("int", true)]
        public int? PartitionNumber
        {
            get;
            set;
        }

        public dm_db_index_operational_stats()
        {
        }

        public dm_db_index_operational_stats(object[] items)
        {
            DatabaseId = (short?)items[0];
            TableId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionNumber = (int?)items[3];
        }

        public dm_db_index_operational_stats(short? DatabaseId, int? TableId, int? IndexId, int? PartitionNumber)
        {
            this.DatabaseId = DatabaseId;
            this.TableId = TableId;
            this.IndexId = IndexId;
            this.PartitionNumber = PartitionNumber;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, TableId, IndexId, PartitionNumber };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (short?)items[0];
            TableId = (int?)items[1];
            IndexId = (int?)items[2];
            PartitionNumber = (int?)items[3];
        }
    }

    [SqlTableFunctionResult("sys", "fn_listextendedproperty")]
    public partial class fn_listextendedpropertyResult : SqlTabularProxy
    {
        [SqlColumn("objtype", 0), SqlTypeFacets("varchar", true, 128)]
        public string objtype
        {
            get;
            set;
        }

        [SqlColumn("objname", 1), SqlTypeFacets("sysname", true)]
        public string objname
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("value", 3), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public fn_listextendedpropertyResult()
        {
        }

        public fn_listextendedpropertyResult(object[] items)
        {
            objtype = (string)items[0];
            objname = (string)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }

        public fn_listextendedpropertyResult(string objtype, string objname, string name, Object value)
        {
            this.objtype = objtype;
            this.objname = objname;
            this.name = name;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { objtype, objname, name, value };
        }

        public override void SetItemArray(object[] items)
        {
            objtype = (string)items[0];
            objname = (string)items[1];
            name = (string)items[2];
            value = (Object)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_listextendedproperty")]
    public partial class fn_listextendedproperty : SqlTableFunctionProxy<fn_listextendedproperty, fn_listextendedpropertyResult>
    {
        [SqlParameter("@name", 0, false, false), SqlTypeFacets("sysname", true)]
        public string name
        {
            get;
            set;
        }

        [SqlParameter("@level0type", 1, false, false), SqlTypeFacets("varchar", true, 128)]
        public string level0type
        {
            get;
            set;
        }

        [SqlParameter("@level0name", 2, false, false), SqlTypeFacets("sysname", true)]
        public string level0name
        {
            get;
            set;
        }

        [SqlParameter("@level1type", 3, false, false), SqlTypeFacets("varchar", true, 128)]
        public string level1type
        {
            get;
            set;
        }

        [SqlParameter("@level1name", 4, false, false), SqlTypeFacets("sysname", true)]
        public string level1name
        {
            get;
            set;
        }

        [SqlParameter("@level2type", 5, false, false), SqlTypeFacets("varchar", true, 128)]
        public string level2type
        {
            get;
            set;
        }

        [SqlParameter("@level2name", 6, false, false), SqlTypeFacets("sysname", true)]
        public string level2name
        {
            get;
            set;
        }

        public fn_listextendedproperty()
        {
        }

        public fn_listextendedproperty(object[] items)
        {
            name = (string)items[0];
            level0type = (string)items[1];
            level0name = (string)items[2];
            level1type = (string)items[3];
            level1name = (string)items[4];
            level2type = (string)items[5];
            level2name = (string)items[6];
        }

        public fn_listextendedproperty(string name, string level0type, string level0name, string level1type, string level1name, string level2type, string level2name)
        {
            this.name = name;
            this.level0type = level0type;
            this.level0name = level0name;
            this.level1type = level1type;
            this.level1name = level1name;
            this.level2type = level2type;
            this.level2name = level2name;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, level0type, level0name, level1type, level1name, level2type, level2name };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            level0type = (string)items[1];
            level0name = (string)items[2];
            level1type = (string)items[3];
            level1name = (string)items[4];
            level2type = (string)items[5];
            level2name = (string)items[6];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logpoolmgr_freepools")]
    public partial class dm_logpoolmgr_freepoolsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("buffer_size", 2), SqlTypeFacets("int", false)]
        public int buffer_size
        {
            get;
            set;
        }

        [SqlColumn("occurrences", 3), SqlTypeFacets("bigint", false)]
        public long occurrences
        {
            get;
            set;
        }

        [SqlColumn("frequent", 4), SqlTypeFacets("tinyint", false)]
        public byte frequent
        {
            get;
            set;
        }

        [SqlColumn("warm_count", 5), SqlTypeFacets("int", false)]
        public int warm_count
        {
            get;
            set;
        }

        [SqlColumn("cold_count", 6), SqlTypeFacets("int", false)]
        public int cold_count
        {
            get;
            set;
        }

        public dm_logpoolmgr_freepoolsResult()
        {
        }

        public dm_logpoolmgr_freepoolsResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            buffer_size = (int)items[2];
            occurrences = (long)items[3];
            frequent = (byte)items[4];
            warm_count = (int)items[5];
            cold_count = (int)items[6];
        }

        public dm_logpoolmgr_freepoolsResult(int database_id, int recovery_unit_id, int buffer_size, long occurrences, byte frequent, int warm_count, int cold_count)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.buffer_size = buffer_size;
            this.occurrences = occurrences;
            this.frequent = frequent;
            this.warm_count = warm_count;
            this.cold_count = cold_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, buffer_size, occurrences, frequent, warm_count, cold_count };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            buffer_size = (int)items[2];
            occurrences = (long)items[3];
            frequent = (byte)items[4];
            warm_count = (int)items[5];
            cold_count = (int)items[6];
        }
    }

    [SqlTableFunction("sys", "dm_logpoolmgr_freepools")]
    public partial class dm_logpoolmgr_freepools : SqlTableFunctionProxy<dm_logpoolmgr_freepools, dm_logpoolmgr_freepoolsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        public dm_logpoolmgr_freepools()
        {
        }

        public dm_logpoolmgr_freepools(object[] items)
        {
            DatabaseId = (int?)items[0];
        }

        public dm_logpoolmgr_freepools(int? DatabaseId)
        {
            this.DatabaseId = DatabaseId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_os_volume_stats")]
    public partial class dm_os_volume_statsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("volume_mount_point", 2), SqlTypeFacets("nvarchar", true, 512)]
        public string volume_mount_point
        {
            get;
            set;
        }

        [SqlColumn("volume_id", 3), SqlTypeFacets("nvarchar", true, 512)]
        public string volume_id
        {
            get;
            set;
        }

        [SqlColumn("logical_volume_name", 4), SqlTypeFacets("nvarchar", true, 512)]
        public string logical_volume_name
        {
            get;
            set;
        }

        [SqlColumn("file_system_type", 5), SqlTypeFacets("nvarchar", true, 512)]
        public string file_system_type
        {
            get;
            set;
        }

        [SqlColumn("total_bytes", 6), SqlTypeFacets("bigint", false)]
        public long total_bytes
        {
            get;
            set;
        }

        [SqlColumn("available_bytes", 7), SqlTypeFacets("bigint", false)]
        public long available_bytes
        {
            get;
            set;
        }

        [SqlColumn("supports_compression", 8), SqlTypeFacets("tinyint", true)]
        public byte? supports_compression
        {
            get;
            set;
        }

        [SqlColumn("supports_alternate_streams", 9), SqlTypeFacets("tinyint", true)]
        public byte? supports_alternate_streams
        {
            get;
            set;
        }

        [SqlColumn("supports_sparse_files", 10), SqlTypeFacets("tinyint", true)]
        public byte? supports_sparse_files
        {
            get;
            set;
        }

        [SqlColumn("is_read_only", 11), SqlTypeFacets("tinyint", true)]
        public byte? is_read_only
        {
            get;
            set;
        }

        [SqlColumn("is_compressed", 12), SqlTypeFacets("tinyint", true)]
        public byte? is_compressed
        {
            get;
            set;
        }

        public dm_os_volume_statsResult()
        {
        }

        public dm_os_volume_statsResult(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            volume_mount_point = (string)items[2];
            volume_id = (string)items[3];
            logical_volume_name = (string)items[4];
            file_system_type = (string)items[5];
            total_bytes = (long)items[6];
            available_bytes = (long)items[7];
            supports_compression = (byte?)items[8];
            supports_alternate_streams = (byte?)items[9];
            supports_sparse_files = (byte?)items[10];
            is_read_only = (byte?)items[11];
            is_compressed = (byte?)items[12];
        }

        public dm_os_volume_statsResult(int database_id, int file_id, string volume_mount_point, string volume_id, string logical_volume_name, string file_system_type, long total_bytes, long available_bytes, byte? supports_compression, byte? supports_alternate_streams, byte? supports_sparse_files, byte? is_read_only, byte? is_compressed)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.volume_mount_point = volume_mount_point;
            this.volume_id = volume_id;
            this.logical_volume_name = logical_volume_name;
            this.file_system_type = file_system_type;
            this.total_bytes = total_bytes;
            this.available_bytes = available_bytes;
            this.supports_compression = supports_compression;
            this.supports_alternate_streams = supports_alternate_streams;
            this.supports_sparse_files = supports_sparse_files;
            this.is_read_only = is_read_only;
            this.is_compressed = is_compressed;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, volume_mount_point, volume_id, logical_volume_name, file_system_type, total_bytes, available_bytes, supports_compression, supports_alternate_streams, supports_sparse_files, is_read_only, is_compressed };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            file_id = (int)items[1];
            volume_mount_point = (string)items[2];
            volume_id = (string)items[3];
            logical_volume_name = (string)items[4];
            file_system_type = (string)items[5];
            total_bytes = (long)items[6];
            available_bytes = (long)items[7];
            supports_compression = (byte?)items[8];
            supports_alternate_streams = (byte?)items[9];
            supports_sparse_files = (byte?)items[10];
            is_read_only = (byte?)items[11];
            is_compressed = (byte?)items[12];
        }
    }

    [SqlTableFunction("sys", "dm_os_volume_stats")]
    public partial class dm_os_volume_stats : SqlTableFunctionProxy<dm_os_volume_stats, dm_os_volume_statsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)]
        public int? FileId
        {
            get;
            set;
        }

        public dm_os_volume_stats()
        {
        }

        public dm_os_volume_stats(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }

        public dm_os_volume_stats(int? DatabaseId, int? FileId)
        {
            this.DatabaseId = DatabaseId;
            this.FileId = FileId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, FileId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_stats_properties")]
    public partial class dm_db_stats_propertiesResult : SqlTabularProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 1), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("last_updated", 2), SqlTypeFacets("datetime2", true, 7)]
        public DateTime? last_updated
        {
            get;
            set;
        }

        [SqlColumn("rows", 3), SqlTypeFacets("bigint", true)]
        public long? rows
        {
            get;
            set;
        }

        [SqlColumn("rows_sampled", 4), SqlTypeFacets("bigint", true)]
        public long? rows_sampled
        {
            get;
            set;
        }

        [SqlColumn("steps", 5), SqlTypeFacets("int", true)]
        public int? steps
        {
            get;
            set;
        }

        [SqlColumn("unfiltered_rows", 6), SqlTypeFacets("bigint", true)]
        public long? unfiltered_rows
        {
            get;
            set;
        }

        [SqlColumn("modification_counter", 7), SqlTypeFacets("bigint", true)]
        public long? modification_counter
        {
            get;
            set;
        }

        public dm_db_stats_propertiesResult()
        {
        }

        public dm_db_stats_propertiesResult(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            last_updated = (DateTime?)items[2];
            rows = (long?)items[3];
            rows_sampled = (long?)items[4];
            steps = (int?)items[5];
            unfiltered_rows = (long?)items[6];
            modification_counter = (long?)items[7];
        }

        public dm_db_stats_propertiesResult(int object_id, int stats_id, DateTime? last_updated, long? rows, long? rows_sampled, int? steps, long? unfiltered_rows, long? modification_counter)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
            this.last_updated = last_updated;
            this.rows = rows;
            this.rows_sampled = rows_sampled;
            this.steps = steps;
            this.unfiltered_rows = unfiltered_rows;
            this.modification_counter = modification_counter;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id, last_updated, rows, rows_sampled, steps, unfiltered_rows, modification_counter };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            last_updated = (DateTime?)items[2];
            rows = (long?)items[3];
            rows_sampled = (long?)items[4];
            steps = (int?)items[5];
            unfiltered_rows = (long?)items[6];
            modification_counter = (long?)items[7];
        }
    }

    [SqlTableFunction("sys", "dm_db_stats_properties")]
    public partial class dm_db_stats_properties : SqlTableFunctionProxy<dm_db_stats_properties, dm_db_stats_propertiesResult>
    {
        [SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlParameter("@stats_id", 1, false, false), SqlTypeFacets("int", true)]
        public int? stats_id
        {
            get;
            set;
        }

        public dm_db_stats_properties()
        {
        }

        public dm_db_stats_properties(object[] items)
        {
            object_id = (int?)items[0];
            stats_id = (int?)items[1];
        }

        public dm_db_stats_properties(int? object_id, int? stats_id)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            stats_id = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_get_audit_file")]
    public partial class fn_get_audit_fileResult : SqlTabularProxy
    {
        [SqlColumn("event_time", 0), SqlTypeFacets("datetime2", false, 7)]
        public DateTime event_time
        {
            get;
            set;
        }

        [SqlColumn("sequence_number", 1), SqlTypeFacets("int", false)]
        public int sequence_number
        {
            get;
            set;
        }

        [SqlColumn("action_id", 2), SqlTypeFacets("varchar", true, 4)]
        public string action_id
        {
            get;
            set;
        }

        [SqlColumn("succeeded", 3), SqlTypeFacets("bit", false)]
        public bool succeeded
        {
            get;
            set;
        }

        [SqlColumn("permission_bitmask", 4), SqlTypeFacets("varbinary", false, 16)]
        public Byte[] permission_bitmask
        {
            get;
            set;
        }

        [SqlColumn("is_column_permission", 5), SqlTypeFacets("bit", false)]
        public bool is_column_permission
        {
            get;
            set;
        }

        [SqlColumn("session_id", 6), SqlTypeFacets("smallint", false)]
        public short session_id
        {
            get;
            set;
        }

        [SqlColumn("server_principal_id", 7), SqlTypeFacets("int", false)]
        public int server_principal_id
        {
            get;
            set;
        }

        [SqlColumn("database_principal_id", 8), SqlTypeFacets("int", false)]
        public int database_principal_id
        {
            get;
            set;
        }

        [SqlColumn("target_server_principal_id", 9), SqlTypeFacets("int", false)]
        public int target_server_principal_id
        {
            get;
            set;
        }

        [SqlColumn("target_database_principal_id", 10), SqlTypeFacets("int", false)]
        public int target_database_principal_id
        {
            get;
            set;
        }

        [SqlColumn("object_id", 11), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("class_type", 12), SqlTypeFacets("varchar", true, 2)]
        public string class_type
        {
            get;
            set;
        }

        [SqlColumn("session_server_principal_name", 13), SqlTypeFacets("nvarchar", true, 256)]
        public string session_server_principal_name
        {
            get;
            set;
        }

        [SqlColumn("server_principal_name", 14), SqlTypeFacets("nvarchar", true, 256)]
        public string server_principal_name
        {
            get;
            set;
        }

        [SqlColumn("server_principal_sid", 15), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] server_principal_sid
        {
            get;
            set;
        }

        [SqlColumn("database_principal_name", 16), SqlTypeFacets("nvarchar", true, 256)]
        public string database_principal_name
        {
            get;
            set;
        }

        [SqlColumn("target_server_principal_name", 17), SqlTypeFacets("nvarchar", true, 256)]
        public string target_server_principal_name
        {
            get;
            set;
        }

        [SqlColumn("target_server_principal_sid", 18), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] target_server_principal_sid
        {
            get;
            set;
        }

        [SqlColumn("target_database_principal_name", 19), SqlTypeFacets("nvarchar", true, 256)]
        public string target_database_principal_name
        {
            get;
            set;
        }

        [SqlColumn("server_instance_name", 20), SqlTypeFacets("nvarchar", true, 256)]
        public string server_instance_name
        {
            get;
            set;
        }

        [SqlColumn("database_name", 21), SqlTypeFacets("nvarchar", true, 256)]
        public string database_name
        {
            get;
            set;
        }

        [SqlColumn("schema_name", 22), SqlTypeFacets("nvarchar", true, 256)]
        public string schema_name
        {
            get;
            set;
        }

        [SqlColumn("object_name", 23), SqlTypeFacets("nvarchar", true, 256)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("statement", 24), SqlTypeFacets("nvarchar", true, 8000)]
        public string statement
        {
            get;
            set;
        }

        [SqlColumn("additional_information", 25), SqlTypeFacets("nvarchar", true, 8000)]
        public string additional_information
        {
            get;
            set;
        }

        [SqlColumn("file_name", 26), SqlTypeFacets("nvarchar", false, 520)]
        public string file_name
        {
            get;
            set;
        }

        [SqlColumn("audit_file_offset", 27), SqlTypeFacets("bigint", false)]
        public long audit_file_offset
        {
            get;
            set;
        }

        [SqlColumn("user_defined_event_id", 28), SqlTypeFacets("smallint", false)]
        public short user_defined_event_id
        {
            get;
            set;
        }

        [SqlColumn("user_defined_information", 29), SqlTypeFacets("nvarchar", true, 8000)]
        public string user_defined_information
        {
            get;
            set;
        }

        [SqlColumn("audit_schema_version", 30), SqlTypeFacets("int", false)]
        public int audit_schema_version
        {
            get;
            set;
        }

        [SqlColumn("sequence_group_id", 31), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] sequence_group_id
        {
            get;
            set;
        }

        public fn_get_audit_fileResult()
        {
        }

        public fn_get_audit_fileResult(object[] items)
        {
            event_time = (DateTime)items[0];
            sequence_number = (int)items[1];
            action_id = (string)items[2];
            succeeded = (bool)items[3];
            permission_bitmask = (Byte[])items[4];
            is_column_permission = (bool)items[5];
            session_id = (short)items[6];
            server_principal_id = (int)items[7];
            database_principal_id = (int)items[8];
            target_server_principal_id = (int)items[9];
            target_database_principal_id = (int)items[10];
            object_id = (int)items[11];
            class_type = (string)items[12];
            session_server_principal_name = (string)items[13];
            server_principal_name = (string)items[14];
            server_principal_sid = (Byte[])items[15];
            database_principal_name = (string)items[16];
            target_server_principal_name = (string)items[17];
            target_server_principal_sid = (Byte[])items[18];
            target_database_principal_name = (string)items[19];
            server_instance_name = (string)items[20];
            database_name = (string)items[21];
            schema_name = (string)items[22];
            object_name = (string)items[23];
            statement = (string)items[24];
            additional_information = (string)items[25];
            file_name = (string)items[26];
            audit_file_offset = (long)items[27];
            user_defined_event_id = (short)items[28];
            user_defined_information = (string)items[29];
            audit_schema_version = (int)items[30];
            sequence_group_id = (Byte[])items[31];
        }

        public fn_get_audit_fileResult(DateTime event_time, int sequence_number, string action_id, bool succeeded, Byte[] permission_bitmask, bool is_column_permission, short session_id, int server_principal_id, int database_principal_id, int target_server_principal_id, int target_database_principal_id, int object_id, string class_type, string session_server_principal_name, string server_principal_name, Byte[] server_principal_sid, string database_principal_name, string target_server_principal_name, Byte[] target_server_principal_sid, string target_database_principal_name, string server_instance_name, string database_name, string schema_name, string object_name, string statement, string additional_information, string file_name, long audit_file_offset, short user_defined_event_id, string user_defined_information, int audit_schema_version, Byte[] sequence_group_id)
        {
            this.event_time = event_time;
            this.sequence_number = sequence_number;
            this.action_id = action_id;
            this.succeeded = succeeded;
            this.permission_bitmask = permission_bitmask;
            this.is_column_permission = is_column_permission;
            this.session_id = session_id;
            this.server_principal_id = server_principal_id;
            this.database_principal_id = database_principal_id;
            this.target_server_principal_id = target_server_principal_id;
            this.target_database_principal_id = target_database_principal_id;
            this.object_id = object_id;
            this.class_type = class_type;
            this.session_server_principal_name = session_server_principal_name;
            this.server_principal_name = server_principal_name;
            this.server_principal_sid = server_principal_sid;
            this.database_principal_name = database_principal_name;
            this.target_server_principal_name = target_server_principal_name;
            this.target_server_principal_sid = target_server_principal_sid;
            this.target_database_principal_name = target_database_principal_name;
            this.server_instance_name = server_instance_name;
            this.database_name = database_name;
            this.schema_name = schema_name;
            this.object_name = object_name;
            this.statement = statement;
            this.additional_information = additional_information;
            this.file_name = file_name;
            this.audit_file_offset = audit_file_offset;
            this.user_defined_event_id = user_defined_event_id;
            this.user_defined_information = user_defined_information;
            this.audit_schema_version = audit_schema_version;
            this.sequence_group_id = sequence_group_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { event_time, sequence_number, action_id, succeeded, permission_bitmask, is_column_permission, session_id, server_principal_id, database_principal_id, target_server_principal_id, target_database_principal_id, object_id, class_type, session_server_principal_name, server_principal_name, server_principal_sid, database_principal_name, target_server_principal_name, target_server_principal_sid, target_database_principal_name, server_instance_name, database_name, schema_name, object_name, statement, additional_information, file_name, audit_file_offset, user_defined_event_id, user_defined_information, audit_schema_version, sequence_group_id };
        }

        public override void SetItemArray(object[] items)
        {
            event_time = (DateTime)items[0];
            sequence_number = (int)items[1];
            action_id = (string)items[2];
            succeeded = (bool)items[3];
            permission_bitmask = (Byte[])items[4];
            is_column_permission = (bool)items[5];
            session_id = (short)items[6];
            server_principal_id = (int)items[7];
            database_principal_id = (int)items[8];
            target_server_principal_id = (int)items[9];
            target_database_principal_id = (int)items[10];
            object_id = (int)items[11];
            class_type = (string)items[12];
            session_server_principal_name = (string)items[13];
            server_principal_name = (string)items[14];
            server_principal_sid = (Byte[])items[15];
            database_principal_name = (string)items[16];
            target_server_principal_name = (string)items[17];
            target_server_principal_sid = (Byte[])items[18];
            target_database_principal_name = (string)items[19];
            server_instance_name = (string)items[20];
            database_name = (string)items[21];
            schema_name = (string)items[22];
            object_name = (string)items[23];
            statement = (string)items[24];
            additional_information = (string)items[25];
            file_name = (string)items[26];
            audit_file_offset = (long)items[27];
            user_defined_event_id = (short)items[28];
            user_defined_information = (string)items[29];
            audit_schema_version = (int)items[30];
            sequence_group_id = (Byte[])items[31];
        }
    }

    [SqlTableFunction("sys", "fn_get_audit_file")]
    public partial class fn_get_audit_file : SqlTableFunctionProxy<fn_get_audit_file, fn_get_audit_fileResult>
    {
        [SqlParameter("@file_pattern", 0, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string file_pattern
        {
            get;
            set;
        }

        [SqlParameter("@initial_file_name", 1, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string initial_file_name
        {
            get;
            set;
        }

        [SqlParameter("@audit_record_offset", 2, false, false), SqlTypeFacets("bigint", true)]
        public long? audit_record_offset
        {
            get;
            set;
        }

        public fn_get_audit_file()
        {
        }

        public fn_get_audit_file(object[] items)
        {
            file_pattern = (string)items[0];
            initial_file_name = (string)items[1];
            audit_record_offset = (long?)items[2];
        }

        public fn_get_audit_file(string file_pattern, string initial_file_name, long? audit_record_offset)
        {
            this.file_pattern = file_pattern;
            this.initial_file_name = initial_file_name;
            this.audit_record_offset = audit_record_offset;
        }

        public override object[] GetItemArray()
        {
            return new object[] { file_pattern, initial_file_name, audit_record_offset };
        }

        public override void SetItemArray(object[] items)
        {
            file_pattern = (string)items[0];
            initial_file_name = (string)items[1];
            audit_record_offset = (long?)items[2];
        }
    }

    [SqlTableFunctionResult("sys", "dm_sql_referencing_entities")]
    public partial class dm_sql_referencing_entitiesResult : SqlTabularProxy
    {
        [SqlColumn("referencing_schema_name", 0), SqlTypeFacets("sysname", true)]
        public string referencing_schema_name
        {
            get;
            set;
        }

        [SqlColumn("referencing_entity_name", 1), SqlTypeFacets("sysname", true)]
        public string referencing_entity_name
        {
            get;
            set;
        }

        [SqlColumn("referencing_id", 2), SqlTypeFacets("int", false)]
        public int referencing_id
        {
            get;
            set;
        }

        [SqlColumn("referencing_class", 3), SqlTypeFacets("tinyint", true)]
        public byte? referencing_class
        {
            get;
            set;
        }

        [SqlColumn("referencing_class_desc", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string referencing_class_desc
        {
            get;
            set;
        }

        [SqlColumn("is_caller_dependent", 5), SqlTypeFacets("bit", false)]
        public bool is_caller_dependent
        {
            get;
            set;
        }

        public dm_sql_referencing_entitiesResult()
        {
        }

        public dm_sql_referencing_entitiesResult(object[] items)
        {
            referencing_schema_name = (string)items[0];
            referencing_entity_name = (string)items[1];
            referencing_id = (int)items[2];
            referencing_class = (byte?)items[3];
            referencing_class_desc = (string)items[4];
            is_caller_dependent = (bool)items[5];
        }

        public dm_sql_referencing_entitiesResult(string referencing_schema_name, string referencing_entity_name, int referencing_id, byte? referencing_class, string referencing_class_desc, bool is_caller_dependent)
        {
            this.referencing_schema_name = referencing_schema_name;
            this.referencing_entity_name = referencing_entity_name;
            this.referencing_id = referencing_id;
            this.referencing_class = referencing_class;
            this.referencing_class_desc = referencing_class_desc;
            this.is_caller_dependent = is_caller_dependent;
        }

        public override object[] GetItemArray()
        {
            return new object[] { referencing_schema_name, referencing_entity_name, referencing_id, referencing_class, referencing_class_desc, is_caller_dependent };
        }

        public override void SetItemArray(object[] items)
        {
            referencing_schema_name = (string)items[0];
            referencing_entity_name = (string)items[1];
            referencing_id = (int)items[2];
            referencing_class = (byte?)items[3];
            referencing_class_desc = (string)items[4];
            is_caller_dependent = (bool)items[5];
        }
    }

    [SqlTableFunction("sys", "dm_sql_referencing_entities")]
    public partial class dm_sql_referencing_entities : SqlTableFunctionProxy<dm_sql_referencing_entities, dm_sql_referencing_entitiesResult>
    {
        [SqlParameter("@name", 0, false, false), SqlTypeFacets("nvarchar", true, 1034)]
        public string name
        {
            get;
            set;
        }

        [SqlParameter("@referenced_class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)]
        public string referenced_class
        {
            get;
            set;
        }

        public dm_sql_referencing_entities()
        {
        }

        public dm_sql_referencing_entities(object[] items)
        {
            name = (string)items[0];
            referenced_class = (string)items[1];
        }

        public dm_sql_referencing_entities(string name, string referenced_class)
        {
            this.name = name;
            this.referenced_class = referenced_class;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, referenced_class };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            referenced_class = (string)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_helpdatatypemap")]
    public partial class fn_helpdatatypemapResult : SqlTabularProxy
    {
        [SqlColumn("mapping_id", 0), SqlTypeFacets("int", true)]
        public int? mapping_id
        {
            get;
            set;
        }

        [SqlColumn("source_dbms", 1), SqlTypeFacets("sysname", false)]
        public string source_dbms
        {
            get;
            set;
        }

        [SqlColumn("source_version", 2), SqlTypeFacets("sysname", true)]
        public string source_version
        {
            get;
            set;
        }

        [SqlColumn("source_type", 3), SqlTypeFacets("sysname", false)]
        public string source_type
        {
            get;
            set;
        }

        [SqlColumn("source_length_min", 4), SqlTypeFacets("bigint", true)]
        public long? source_length_min
        {
            get;
            set;
        }

        [SqlColumn("source_length_max", 5), SqlTypeFacets("bigint", true)]
        public long? source_length_max
        {
            get;
            set;
        }

        [SqlColumn("source_precision_min", 6), SqlTypeFacets("bigint", true)]
        public long? source_precision_min
        {
            get;
            set;
        }

        [SqlColumn("source_precision_max", 7), SqlTypeFacets("bigint", true)]
        public long? source_precision_max
        {
            get;
            set;
        }

        [SqlColumn("source_scale_min", 8), SqlTypeFacets("int", true)]
        public int? source_scale_min
        {
            get;
            set;
        }

        [SqlColumn("source_scale_max", 9), SqlTypeFacets("int", true)]
        public int? source_scale_max
        {
            get;
            set;
        }

        [SqlColumn("source_nullable", 10), SqlTypeFacets("bit", true)]
        public bool? source_nullable
        {
            get;
            set;
        }

        [SqlColumn("source_createparams", 11), SqlTypeFacets("int", true)]
        public int? source_createparams
        {
            get;
            set;
        }

        [SqlColumn("destination_dbms", 12), SqlTypeFacets("sysname", false)]
        public string destination_dbms
        {
            get;
            set;
        }

        [SqlColumn("destination_version", 13), SqlTypeFacets("sysname", true)]
        public string destination_version
        {
            get;
            set;
        }

        [SqlColumn("destination_type", 14), SqlTypeFacets("sysname", false)]
        public string destination_type
        {
            get;
            set;
        }

        [SqlColumn("destination_length", 15), SqlTypeFacets("bigint", true)]
        public long? destination_length
        {
            get;
            set;
        }

        [SqlColumn("destination_precision", 16), SqlTypeFacets("bigint", true)]
        public long? destination_precision
        {
            get;
            set;
        }

        [SqlColumn("destination_scale", 17), SqlTypeFacets("int", true)]
        public int? destination_scale
        {
            get;
            set;
        }

        [SqlColumn("destination_nullable", 18), SqlTypeFacets("bit", true)]
        public bool? destination_nullable
        {
            get;
            set;
        }

        [SqlColumn("destination_createparams", 19), SqlTypeFacets("int", true)]
        public int? destination_createparams
        {
            get;
            set;
        }

        [SqlColumn("dataloss", 20), SqlTypeFacets("bit", true)]
        public bool? dataloss
        {
            get;
            set;
        }

        [SqlColumn("is_default", 21), SqlTypeFacets("bit", true)]
        public bool? is_default
        {
            get;
            set;
        }

        public fn_helpdatatypemapResult()
        {
        }

        public fn_helpdatatypemapResult(object[] items)
        {
            mapping_id = (int?)items[0];
            source_dbms = (string)items[1];
            source_version = (string)items[2];
            source_type = (string)items[3];
            source_length_min = (long?)items[4];
            source_length_max = (long?)items[5];
            source_precision_min = (long?)items[6];
            source_precision_max = (long?)items[7];
            source_scale_min = (int?)items[8];
            source_scale_max = (int?)items[9];
            source_nullable = (bool?)items[10];
            source_createparams = (int?)items[11];
            destination_dbms = (string)items[12];
            destination_version = (string)items[13];
            destination_type = (string)items[14];
            destination_length = (long?)items[15];
            destination_precision = (long?)items[16];
            destination_scale = (int?)items[17];
            destination_nullable = (bool?)items[18];
            destination_createparams = (int?)items[19];
            dataloss = (bool?)items[20];
            is_default = (bool?)items[21];
        }

        public fn_helpdatatypemapResult(int? mapping_id, string source_dbms, string source_version, string source_type, long? source_length_min, long? source_length_max, long? source_precision_min, long? source_precision_max, int? source_scale_min, int? source_scale_max, bool? source_nullable, int? source_createparams, string destination_dbms, string destination_version, string destination_type, long? destination_length, long? destination_precision, int? destination_scale, bool? destination_nullable, int? destination_createparams, bool? dataloss, bool? is_default)
        {
            this.mapping_id = mapping_id;
            this.source_dbms = source_dbms;
            this.source_version = source_version;
            this.source_type = source_type;
            this.source_length_min = source_length_min;
            this.source_length_max = source_length_max;
            this.source_precision_min = source_precision_min;
            this.source_precision_max = source_precision_max;
            this.source_scale_min = source_scale_min;
            this.source_scale_max = source_scale_max;
            this.source_nullable = source_nullable;
            this.source_createparams = source_createparams;
            this.destination_dbms = destination_dbms;
            this.destination_version = destination_version;
            this.destination_type = destination_type;
            this.destination_length = destination_length;
            this.destination_precision = destination_precision;
            this.destination_scale = destination_scale;
            this.destination_nullable = destination_nullable;
            this.destination_createparams = destination_createparams;
            this.dataloss = dataloss;
            this.is_default = is_default;
        }

        public override object[] GetItemArray()
        {
            return new object[] { mapping_id, source_dbms, source_version, source_type, source_length_min, source_length_max, source_precision_min, source_precision_max, source_scale_min, source_scale_max, source_nullable, source_createparams, destination_dbms, destination_version, destination_type, destination_length, destination_precision, destination_scale, destination_nullable, destination_createparams, dataloss, is_default };
        }

        public override void SetItemArray(object[] items)
        {
            mapping_id = (int?)items[0];
            source_dbms = (string)items[1];
            source_version = (string)items[2];
            source_type = (string)items[3];
            source_length_min = (long?)items[4];
            source_length_max = (long?)items[5];
            source_precision_min = (long?)items[6];
            source_precision_max = (long?)items[7];
            source_scale_min = (int?)items[8];
            source_scale_max = (int?)items[9];
            source_nullable = (bool?)items[10];
            source_createparams = (int?)items[11];
            destination_dbms = (string)items[12];
            destination_version = (string)items[13];
            destination_type = (string)items[14];
            destination_length = (long?)items[15];
            destination_precision = (long?)items[16];
            destination_scale = (int?)items[17];
            destination_nullable = (bool?)items[18];
            destination_createparams = (int?)items[19];
            dataloss = (bool?)items[20];
            is_default = (bool?)items[21];
        }
    }

    [SqlTableFunction("sys", "fn_helpdatatypemap")]
    public partial class fn_helpdatatypemap : SqlTableFunctionProxy<fn_helpdatatypemap, fn_helpdatatypemapResult>
    {
        [SqlParameter("@source_dbms", 0, false, false), SqlTypeFacets("sysname", true)]
        public string source_dbms
        {
            get;
            set;
        }

        [SqlParameter("@source_version", 1, false, false), SqlTypeFacets("sysname", true)]
        public string source_version
        {
            get;
            set;
        }

        [SqlParameter("@source_type", 2, false, false), SqlTypeFacets("sysname", true)]
        public string source_type
        {
            get;
            set;
        }

        [SqlParameter("@destination_dbms", 3, false, false), SqlTypeFacets("sysname", true)]
        public string destination_dbms
        {
            get;
            set;
        }

        [SqlParameter("@destination_version", 4, false, false), SqlTypeFacets("sysname", true)]
        public string destination_version
        {
            get;
            set;
        }

        [SqlParameter("@destination_type", 5, false, false), SqlTypeFacets("sysname", true)]
        public string destination_type
        {
            get;
            set;
        }

        [SqlParameter("@defaults_only", 6, false, false), SqlTypeFacets("bit", true)]
        public bool? defaults_only
        {
            get;
            set;
        }

        public fn_helpdatatypemap()
        {
        }

        public fn_helpdatatypemap(object[] items)
        {
            source_dbms = (string)items[0];
            source_version = (string)items[1];
            source_type = (string)items[2];
            destination_dbms = (string)items[3];
            destination_version = (string)items[4];
            destination_type = (string)items[5];
            defaults_only = (bool?)items[6];
        }

        public fn_helpdatatypemap(string source_dbms, string source_version, string source_type, string destination_dbms, string destination_version, string destination_type, bool? defaults_only)
        {
            this.source_dbms = source_dbms;
            this.source_version = source_version;
            this.source_type = source_type;
            this.destination_dbms = destination_dbms;
            this.destination_version = destination_version;
            this.destination_type = destination_type;
            this.defaults_only = defaults_only;
        }

        public override object[] GetItemArray()
        {
            return new object[] { source_dbms, source_version, source_type, destination_dbms, destination_version, destination_type, defaults_only };
        }

        public override void SetItemArray(object[] items)
        {
            source_dbms = (string)items[0];
            source_version = (string)items[1];
            source_type = (string)items[2];
            destination_dbms = (string)items[3];
            destination_version = (string)items[4];
            destination_type = (string)items[5];
            defaults_only = (bool?)items[6];
        }
    }

    [SqlTableFunctionResult("sys", "dm_fts_index_keywords_position_by_document")]
    public partial class dm_fts_index_keywords_position_by_documentResult : SqlTabularProxy
    {
        [SqlColumn("keyword", 0), SqlTypeFacets("varbinary", false, 128)]
        public Byte[] keyword
        {
            get;
            set;
        }

        [SqlColumn("display_term", 1), SqlTypeFacets("nvarchar", false, 8000)]
        public string display_term
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("document_id", 3), SqlTypeFacets("bigint", true)]
        public long? document_id
        {
            get;
            set;
        }

        [SqlColumn("position", 4), SqlTypeFacets("int", true)]
        public int? position
        {
            get;
            set;
        }

        public dm_fts_index_keywords_position_by_documentResult()
        {
        }

        public dm_fts_index_keywords_position_by_documentResult(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            position = (int?)items[4];
        }

        public dm_fts_index_keywords_position_by_documentResult(Byte[] keyword, string display_term, int column_id, long? document_id, int? position)
        {
            this.keyword = keyword;
            this.display_term = display_term;
            this.column_id = column_id;
            this.document_id = document_id;
            this.position = position;
        }

        public override object[] GetItemArray()
        {
            return new object[] { keyword, display_term, column_id, document_id, position };
        }

        public override void SetItemArray(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_id = (long?)items[3];
            position = (int?)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_fts_index_keywords_position_by_document")]
    public partial class dm_fts_index_keywords_position_by_document : SqlTableFunctionProxy<dm_fts_index_keywords_position_by_document, dm_fts_index_keywords_position_by_documentResult>
    {
        [SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)]
        public int? dbid
        {
            get;
            set;
        }

        [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)]
        public int? objid
        {
            get;
            set;
        }

        public dm_fts_index_keywords_position_by_document()
        {
        }

        public dm_fts_index_keywords_position_by_document(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }

        public dm_fts_index_keywords_position_by_document(int? dbid, int? objid)
        {
            this.dbid = dbid;
            this.objid = objid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objid };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_trace_gettable")]
    public partial class fn_trace_gettableResult : SqlTabularProxy
    {
        [SqlColumn("LinkedServerName", 44), SqlTypeFacets("nvarchar", true, 512)]
        public string LinkedServerName
        {
            get;
            set;
        }

        [SqlColumn("ProviderName", 45), SqlTypeFacets("nvarchar", true, 512)]
        public string ProviderName
        {
            get;
            set;
        }

        [SqlColumn("MethodName", 46), SqlTypeFacets("nvarchar", true, 512)]
        public string MethodName
        {
            get;
            set;
        }

        [SqlColumn("RowCounts", 47), SqlTypeFacets("bigint", true)]
        public long? RowCounts
        {
            get;
            set;
        }

        [SqlColumn("RequestID", 48), SqlTypeFacets("int", true)]
        public int? RequestID
        {
            get;
            set;
        }

        [SqlColumn("XactSequence", 49), SqlTypeFacets("bigint", true)]
        public long? XactSequence
        {
            get;
            set;
        }

        [SqlColumn("EventSequence", 50), SqlTypeFacets("bigint", true)]
        public long? EventSequence
        {
            get;
            set;
        }

        [SqlColumn("BigintData1", 51), SqlTypeFacets("bigint", true)]
        public long? BigintData1
        {
            get;
            set;
        }

        [SqlColumn("BigintData2", 52), SqlTypeFacets("bigint", true)]
        public long? BigintData2
        {
            get;
            set;
        }

        [SqlColumn("GUID", 53), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? GUID
        {
            get;
            set;
        }

        [SqlColumn("IntegerData2", 54), SqlTypeFacets("int", true)]
        public int? IntegerData2
        {
            get;
            set;
        }

        [SqlColumn("ObjectID2", 55), SqlTypeFacets("bigint", true)]
        public long? ObjectID2
        {
            get;
            set;
        }

        [SqlColumn("Type", 56), SqlTypeFacets("int", true)]
        public int? Type
        {
            get;
            set;
        }

        [SqlColumn("OwnerID", 57), SqlTypeFacets("int", true)]
        public int? OwnerID
        {
            get;
            set;
        }

        [SqlColumn("ParentName", 58), SqlTypeFacets("nvarchar", true, 512)]
        public string ParentName
        {
            get;
            set;
        }

        [SqlColumn("IsSystem", 59), SqlTypeFacets("int", true)]
        public int? IsSystem
        {
            get;
            set;
        }

        [SqlColumn("Offset", 60), SqlTypeFacets("int", true)]
        public int? Offset
        {
            get;
            set;
        }

        [SqlColumn("SourceDatabaseID", 61), SqlTypeFacets("int", true)]
        public int? SourceDatabaseID
        {
            get;
            set;
        }

        [SqlColumn("SqlHandle", 62), SqlTypeFacets("image", true, 16)]
        public Byte[] SqlHandle
        {
            get;
            set;
        }

        [SqlColumn("SessionLoginName", 63), SqlTypeFacets("nvarchar", true, 512)]
        public string SessionLoginName
        {
            get;
            set;
        }

        [SqlColumn("PlanHandle", 64), SqlTypeFacets("image", true, 16)]
        public Byte[] PlanHandle
        {
            get;
            set;
        }

        [SqlColumn("GroupID", 65), SqlTypeFacets("int", true)]
        public int? GroupID
        {
            get;
            set;
        }

        [SqlColumn("TextData", 0), SqlTypeFacets("ntext", true)]
        public string TextData
        {
            get;
            set;
        }

        [SqlColumn("BinaryData", 1), SqlTypeFacets("image", true, 16)]
        public Byte[] BinaryData
        {
            get;
            set;
        }

        [SqlColumn("DatabaseID", 2), SqlTypeFacets("int", true)]
        public int? DatabaseID
        {
            get;
            set;
        }

        [SqlColumn("TransactionID", 3), SqlTypeFacets("bigint", true)]
        public long? TransactionID
        {
            get;
            set;
        }

        [SqlColumn("LineNumber", 4), SqlTypeFacets("int", true)]
        public int? LineNumber
        {
            get;
            set;
        }

        [SqlColumn("NTUserName", 5), SqlTypeFacets("nvarchar", true, 512)]
        public string NTUserName
        {
            get;
            set;
        }

        [SqlColumn("NTDomainName", 6), SqlTypeFacets("nvarchar", true, 512)]
        public string NTDomainName
        {
            get;
            set;
        }

        [SqlColumn("HostName", 7), SqlTypeFacets("nvarchar", true, 512)]
        public string HostName
        {
            get;
            set;
        }

        [SqlColumn("ClientProcessID", 8), SqlTypeFacets("int", true)]
        public int? ClientProcessID
        {
            get;
            set;
        }

        [SqlColumn("ApplicationName", 9), SqlTypeFacets("nvarchar", true, 512)]
        public string ApplicationName
        {
            get;
            set;
        }

        [SqlColumn("LoginName", 10), SqlTypeFacets("nvarchar", true, 512)]
        public string LoginName
        {
            get;
            set;
        }

        [SqlColumn("SPID", 11), SqlTypeFacets("int", true)]
        public int? SPID
        {
            get;
            set;
        }

        [SqlColumn("Duration", 12), SqlTypeFacets("bigint", true)]
        public long? Duration
        {
            get;
            set;
        }

        [SqlColumn("StartTime", 13), SqlTypeFacets("datetime", true)]
        public DateTime? StartTime
        {
            get;
            set;
        }

        [SqlColumn("EndTime", 14), SqlTypeFacets("datetime", true)]
        public DateTime? EndTime
        {
            get;
            set;
        }

        [SqlColumn("Reads", 15), SqlTypeFacets("bigint", true)]
        public long? Reads
        {
            get;
            set;
        }

        [SqlColumn("Writes", 16), SqlTypeFacets("bigint", true)]
        public long? Writes
        {
            get;
            set;
        }

        [SqlColumn("CPU", 17), SqlTypeFacets("int", true)]
        public int? CPU
        {
            get;
            set;
        }

        [SqlColumn("Permissions", 18), SqlTypeFacets("bigint", true)]
        public long? Permissions
        {
            get;
            set;
        }

        [SqlColumn("Severity", 19), SqlTypeFacets("int", true)]
        public int? Severity
        {
            get;
            set;
        }

        [SqlColumn("EventSubClass", 20), SqlTypeFacets("int", true)]
        public int? EventSubClass
        {
            get;
            set;
        }

        [SqlColumn("ObjectID", 21), SqlTypeFacets("int", true)]
        public int? ObjectID
        {
            get;
            set;
        }

        [SqlColumn("Success", 22), SqlTypeFacets("int", true)]
        public int? Success
        {
            get;
            set;
        }

        [SqlColumn("IndexID", 23), SqlTypeFacets("int", true)]
        public int? IndexID
        {
            get;
            set;
        }

        [SqlColumn("IntegerData", 24), SqlTypeFacets("int", true)]
        public int? IntegerData
        {
            get;
            set;
        }

        [SqlColumn("ServerName", 25), SqlTypeFacets("nvarchar", true, 512)]
        public string ServerName
        {
            get;
            set;
        }

        [SqlColumn("EventClass", 26), SqlTypeFacets("int", true)]
        public int? EventClass
        {
            get;
            set;
        }

        [SqlColumn("ObjectType", 27), SqlTypeFacets("int", true)]
        public int? ObjectType
        {
            get;
            set;
        }

        [SqlColumn("NestLevel", 28), SqlTypeFacets("int", true)]
        public int? NestLevel
        {
            get;
            set;
        }

        [SqlColumn("State", 29), SqlTypeFacets("int", true)]
        public int? State
        {
            get;
            set;
        }

        [SqlColumn("Error", 30), SqlTypeFacets("int", true)]
        public int? Error
        {
            get;
            set;
        }

        [SqlColumn("Mode", 31), SqlTypeFacets("int", true)]
        public int? Mode
        {
            get;
            set;
        }

        [SqlColumn("Handle", 32), SqlTypeFacets("int", true)]
        public int? Handle
        {
            get;
            set;
        }

        [SqlColumn("ObjectName", 33), SqlTypeFacets("nvarchar", true, 512)]
        public string ObjectName
        {
            get;
            set;
        }

        [SqlColumn("DatabaseName", 34), SqlTypeFacets("nvarchar", true, 512)]
        public string DatabaseName
        {
            get;
            set;
        }

        [SqlColumn("FileName", 35), SqlTypeFacets("nvarchar", true, 512)]
        public string FileName
        {
            get;
            set;
        }

        [SqlColumn("OwnerName", 36), SqlTypeFacets("nvarchar", true, 512)]
        public string OwnerName
        {
            get;
            set;
        }

        [SqlColumn("RoleName", 37), SqlTypeFacets("nvarchar", true, 512)]
        public string RoleName
        {
            get;
            set;
        }

        [SqlColumn("TargetUserName", 38), SqlTypeFacets("nvarchar", true, 512)]
        public string TargetUserName
        {
            get;
            set;
        }

        [SqlColumn("DBUserName", 39), SqlTypeFacets("nvarchar", true, 512)]
        public string DBUserName
        {
            get;
            set;
        }

        [SqlColumn("LoginSid", 40), SqlTypeFacets("image", true, 16)]
        public Byte[] LoginSid
        {
            get;
            set;
        }

        [SqlColumn("TargetLoginName", 41), SqlTypeFacets("nvarchar", true, 512)]
        public string TargetLoginName
        {
            get;
            set;
        }

        [SqlColumn("TargetLoginSid", 42), SqlTypeFacets("image", true, 16)]
        public Byte[] TargetLoginSid
        {
            get;
            set;
        }

        [SqlColumn("ColumnPermissions", 43), SqlTypeFacets("int", true)]
        public int? ColumnPermissions
        {
            get;
            set;
        }

        public fn_trace_gettableResult()
        {
        }

        public fn_trace_gettableResult(object[] items)
        {
            LinkedServerName = (string)items[0];
            ProviderName = (string)items[1];
            MethodName = (string)items[2];
            RowCounts = (long?)items[3];
            RequestID = (int?)items[4];
            XactSequence = (long?)items[5];
            EventSequence = (long?)items[6];
            BigintData1 = (long?)items[7];
            BigintData2 = (long?)items[8];
            GUID = (Guid?)items[9];
            IntegerData2 = (int?)items[10];
            ObjectID2 = (long?)items[11];
            Type = (int?)items[12];
            OwnerID = (int?)items[13];
            ParentName = (string)items[14];
            IsSystem = (int?)items[15];
            Offset = (int?)items[16];
            SourceDatabaseID = (int?)items[17];
            SqlHandle = (Byte[])items[18];
            SessionLoginName = (string)items[19];
            PlanHandle = (Byte[])items[20];
            GroupID = (int?)items[21];
            TextData = (string)items[22];
            BinaryData = (Byte[])items[23];
            DatabaseID = (int?)items[24];
            TransactionID = (long?)items[25];
            LineNumber = (int?)items[26];
            NTUserName = (string)items[27];
            NTDomainName = (string)items[28];
            HostName = (string)items[29];
            ClientProcessID = (int?)items[30];
            ApplicationName = (string)items[31];
            LoginName = (string)items[32];
            SPID = (int?)items[33];
            Duration = (long?)items[34];
            StartTime = (DateTime?)items[35];
            EndTime = (DateTime?)items[36];
            Reads = (long?)items[37];
            Writes = (long?)items[38];
            CPU = (int?)items[39];
            Permissions = (long?)items[40];
            Severity = (int?)items[41];
            EventSubClass = (int?)items[42];
            ObjectID = (int?)items[43];
            Success = (int?)items[44];
            IndexID = (int?)items[45];
            IntegerData = (int?)items[46];
            ServerName = (string)items[47];
            EventClass = (int?)items[48];
            ObjectType = (int?)items[49];
            NestLevel = (int?)items[50];
            State = (int?)items[51];
            Error = (int?)items[52];
            Mode = (int?)items[53];
            Handle = (int?)items[54];
            ObjectName = (string)items[55];
            DatabaseName = (string)items[56];
            FileName = (string)items[57];
            OwnerName = (string)items[58];
            RoleName = (string)items[59];
            TargetUserName = (string)items[60];
            DBUserName = (string)items[61];
            LoginSid = (Byte[])items[62];
            TargetLoginName = (string)items[63];
            TargetLoginSid = (Byte[])items[64];
            ColumnPermissions = (int?)items[65];
        }

        public fn_trace_gettableResult(string LinkedServerName, string ProviderName, string MethodName, long? RowCounts, int? RequestID, long? XactSequence, long? EventSequence, long? BigintData1, long? BigintData2, Guid? GUID, int? IntegerData2, long? ObjectID2, int? Type, int? OwnerID, string ParentName, int? IsSystem, int? Offset, int? SourceDatabaseID, Byte[] SqlHandle, string SessionLoginName, Byte[] PlanHandle, int? GroupID, string TextData, Byte[] BinaryData, int? DatabaseID, long? TransactionID, int? LineNumber, string NTUserName, string NTDomainName, string HostName, int? ClientProcessID, string ApplicationName, string LoginName, int? SPID, long? Duration, DateTime? StartTime, DateTime? EndTime, long? Reads, long? Writes, int? CPU, long? Permissions, int? Severity, int? EventSubClass, int? ObjectID, int? Success, int? IndexID, int? IntegerData, string ServerName, int? EventClass, int? ObjectType, int? NestLevel, int? State, int? Error, int? Mode, int? Handle, string ObjectName, string DatabaseName, string FileName, string OwnerName, string RoleName, string TargetUserName, string DBUserName, Byte[] LoginSid, string TargetLoginName, Byte[] TargetLoginSid, int? ColumnPermissions)
        {
            this.LinkedServerName = LinkedServerName;
            this.ProviderName = ProviderName;
            this.MethodName = MethodName;
            this.RowCounts = RowCounts;
            this.RequestID = RequestID;
            this.XactSequence = XactSequence;
            this.EventSequence = EventSequence;
            this.BigintData1 = BigintData1;
            this.BigintData2 = BigintData2;
            this.GUID = GUID;
            this.IntegerData2 = IntegerData2;
            this.ObjectID2 = ObjectID2;
            this.Type = Type;
            this.OwnerID = OwnerID;
            this.ParentName = ParentName;
            this.IsSystem = IsSystem;
            this.Offset = Offset;
            this.SourceDatabaseID = SourceDatabaseID;
            this.SqlHandle = SqlHandle;
            this.SessionLoginName = SessionLoginName;
            this.PlanHandle = PlanHandle;
            this.GroupID = GroupID;
            this.TextData = TextData;
            this.BinaryData = BinaryData;
            this.DatabaseID = DatabaseID;
            this.TransactionID = TransactionID;
            this.LineNumber = LineNumber;
            this.NTUserName = NTUserName;
            this.NTDomainName = NTDomainName;
            this.HostName = HostName;
            this.ClientProcessID = ClientProcessID;
            this.ApplicationName = ApplicationName;
            this.LoginName = LoginName;
            this.SPID = SPID;
            this.Duration = Duration;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.Reads = Reads;
            this.Writes = Writes;
            this.CPU = CPU;
            this.Permissions = Permissions;
            this.Severity = Severity;
            this.EventSubClass = EventSubClass;
            this.ObjectID = ObjectID;
            this.Success = Success;
            this.IndexID = IndexID;
            this.IntegerData = IntegerData;
            this.ServerName = ServerName;
            this.EventClass = EventClass;
            this.ObjectType = ObjectType;
            this.NestLevel = NestLevel;
            this.State = State;
            this.Error = Error;
            this.Mode = Mode;
            this.Handle = Handle;
            this.ObjectName = ObjectName;
            this.DatabaseName = DatabaseName;
            this.FileName = FileName;
            this.OwnerName = OwnerName;
            this.RoleName = RoleName;
            this.TargetUserName = TargetUserName;
            this.DBUserName = DBUserName;
            this.LoginSid = LoginSid;
            this.TargetLoginName = TargetLoginName;
            this.TargetLoginSid = TargetLoginSid;
            this.ColumnPermissions = ColumnPermissions;
        }

        public override object[] GetItemArray()
        {
            return new object[] { LinkedServerName, ProviderName, MethodName, RowCounts, RequestID, XactSequence, EventSequence, BigintData1, BigintData2, GUID, IntegerData2, ObjectID2, Type, OwnerID, ParentName, IsSystem, Offset, SourceDatabaseID, SqlHandle, SessionLoginName, PlanHandle, GroupID, TextData, BinaryData, DatabaseID, TransactionID, LineNumber, NTUserName, NTDomainName, HostName, ClientProcessID, ApplicationName, LoginName, SPID, Duration, StartTime, EndTime, Reads, Writes, CPU, Permissions, Severity, EventSubClass, ObjectID, Success, IndexID, IntegerData, ServerName, EventClass, ObjectType, NestLevel, State, Error, Mode, Handle, ObjectName, DatabaseName, FileName, OwnerName, RoleName, TargetUserName, DBUserName, LoginSid, TargetLoginName, TargetLoginSid, ColumnPermissions };
        }

        public override void SetItemArray(object[] items)
        {
            LinkedServerName = (string)items[0];
            ProviderName = (string)items[1];
            MethodName = (string)items[2];
            RowCounts = (long?)items[3];
            RequestID = (int?)items[4];
            XactSequence = (long?)items[5];
            EventSequence = (long?)items[6];
            BigintData1 = (long?)items[7];
            BigintData2 = (long?)items[8];
            GUID = (Guid?)items[9];
            IntegerData2 = (int?)items[10];
            ObjectID2 = (long?)items[11];
            Type = (int?)items[12];
            OwnerID = (int?)items[13];
            ParentName = (string)items[14];
            IsSystem = (int?)items[15];
            Offset = (int?)items[16];
            SourceDatabaseID = (int?)items[17];
            SqlHandle = (Byte[])items[18];
            SessionLoginName = (string)items[19];
            PlanHandle = (Byte[])items[20];
            GroupID = (int?)items[21];
            TextData = (string)items[22];
            BinaryData = (Byte[])items[23];
            DatabaseID = (int?)items[24];
            TransactionID = (long?)items[25];
            LineNumber = (int?)items[26];
            NTUserName = (string)items[27];
            NTDomainName = (string)items[28];
            HostName = (string)items[29];
            ClientProcessID = (int?)items[30];
            ApplicationName = (string)items[31];
            LoginName = (string)items[32];
            SPID = (int?)items[33];
            Duration = (long?)items[34];
            StartTime = (DateTime?)items[35];
            EndTime = (DateTime?)items[36];
            Reads = (long?)items[37];
            Writes = (long?)items[38];
            CPU = (int?)items[39];
            Permissions = (long?)items[40];
            Severity = (int?)items[41];
            EventSubClass = (int?)items[42];
            ObjectID = (int?)items[43];
            Success = (int?)items[44];
            IndexID = (int?)items[45];
            IntegerData = (int?)items[46];
            ServerName = (string)items[47];
            EventClass = (int?)items[48];
            ObjectType = (int?)items[49];
            NestLevel = (int?)items[50];
            State = (int?)items[51];
            Error = (int?)items[52];
            Mode = (int?)items[53];
            Handle = (int?)items[54];
            ObjectName = (string)items[55];
            DatabaseName = (string)items[56];
            FileName = (string)items[57];
            OwnerName = (string)items[58];
            RoleName = (string)items[59];
            TargetUserName = (string)items[60];
            DBUserName = (string)items[61];
            LoginSid = (Byte[])items[62];
            TargetLoginName = (string)items[63];
            TargetLoginSid = (Byte[])items[64];
            ColumnPermissions = (int?)items[65];
        }
    }

    [SqlTableFunction("sys", "fn_trace_gettable")]
    public partial class fn_trace_gettable : SqlTableFunctionProxy<fn_trace_gettable, fn_trace_gettableResult>
    {
        [SqlParameter("@filename", 0, false, false), SqlTypeFacets("nvarchar", true, 8000)]
        public string filename
        {
            get;
            set;
        }

        [SqlParameter("@numfiles", 1, false, false), SqlTypeFacets("int", true)]
        public int? numfiles
        {
            get;
            set;
        }

        public fn_trace_gettable()
        {
        }

        public fn_trace_gettable(object[] items)
        {
            filename = (string)items[0];
            numfiles = (int?)items[1];
        }

        public fn_trace_gettable(string filename, int? numfiles)
        {
            this.filename = filename;
            this.numfiles = numfiles;
        }

        public override object[] GetItemArray()
        {
            return new object[] { filename, numfiles };
        }

        public override void SetItemArray(object[] items)
        {
            filename = (string)items[0];
            numfiles = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_describe_first_result_set_for_object")]
    public partial class dm_exec_describe_first_result_set_for_objectResult : SqlTabularProxy
    {
        [SqlColumn("is_hidden", 0), SqlTypeFacets("bit", true)]
        public bool? is_hidden
        {
            get;
            set;
        }

        [SqlColumn("column_ordinal", 1), SqlTypeFacets("int", true)]
        public int? column_ordinal
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("is_nullable", 3), SqlTypeFacets("bit", true)]
        public bool? is_nullable
        {
            get;
            set;
        }

        [SqlColumn("system_type_id", 4), SqlTypeFacets("int", true)]
        public int? system_type_id
        {
            get;
            set;
        }

        [SqlColumn("system_type_name", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string system_type_name
        {
            get;
            set;
        }

        [SqlColumn("max_length", 6), SqlTypeFacets("smallint", true)]
        public short? max_length
        {
            get;
            set;
        }

        [SqlColumn("precision", 7), SqlTypeFacets("tinyint", true)]
        public byte? precision
        {
            get;
            set;
        }

        [SqlColumn("scale", 8), SqlTypeFacets("tinyint", true)]
        public byte? scale
        {
            get;
            set;
        }

        [SqlColumn("collation_name", 9), SqlTypeFacets("nvarchar", true, 256)]
        public string collation_name
        {
            get;
            set;
        }

        [SqlColumn("user_type_id", 10), SqlTypeFacets("int", true)]
        public int? user_type_id
        {
            get;
            set;
        }

        [SqlColumn("user_type_database", 11), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_database
        {
            get;
            set;
        }

        [SqlColumn("user_type_schema", 12), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_schema
        {
            get;
            set;
        }

        [SqlColumn("user_type_name", 13), SqlTypeFacets("nvarchar", true, 256)]
        public string user_type_name
        {
            get;
            set;
        }

        [SqlColumn("assembly_qualified_type_name", 14), SqlTypeFacets("nvarchar", true, 8000)]
        public string assembly_qualified_type_name
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_id", 15), SqlTypeFacets("int", true)]
        public int? xml_collection_id
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_database", 16), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_database
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_schema", 17), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_schema
        {
            get;
            set;
        }

        [SqlColumn("xml_collection_name", 18), SqlTypeFacets("nvarchar", true, 256)]
        public string xml_collection_name
        {
            get;
            set;
        }

        [SqlColumn("is_xml_document", 19), SqlTypeFacets("bit", true)]
        public bool? is_xml_document
        {
            get;
            set;
        }

        [SqlColumn("is_case_sensitive", 20), SqlTypeFacets("bit", true)]
        public bool? is_case_sensitive
        {
            get;
            set;
        }

        [SqlColumn("is_fixed_length_clr_type", 21), SqlTypeFacets("bit", true)]
        public bool? is_fixed_length_clr_type
        {
            get;
            set;
        }

        [SqlColumn("source_server", 22), SqlTypeFacets("nvarchar", true, 256)]
        public string source_server
        {
            get;
            set;
        }

        [SqlColumn("source_database", 23), SqlTypeFacets("nvarchar", true, 256)]
        public string source_database
        {
            get;
            set;
        }

        [SqlColumn("source_schema", 24), SqlTypeFacets("nvarchar", true, 256)]
        public string source_schema
        {
            get;
            set;
        }

        [SqlColumn("source_table", 25), SqlTypeFacets("nvarchar", true, 256)]
        public string source_table
        {
            get;
            set;
        }

        [SqlColumn("source_column", 26), SqlTypeFacets("nvarchar", true, 256)]
        public string source_column
        {
            get;
            set;
        }

        [SqlColumn("is_identity_column", 27), SqlTypeFacets("bit", true)]
        public bool? is_identity_column
        {
            get;
            set;
        }

        [SqlColumn("is_part_of_unique_key", 28), SqlTypeFacets("bit", true)]
        public bool? is_part_of_unique_key
        {
            get;
            set;
        }

        [SqlColumn("is_updateable", 29), SqlTypeFacets("bit", true)]
        public bool? is_updateable
        {
            get;
            set;
        }

        [SqlColumn("is_computed_column", 30), SqlTypeFacets("bit", true)]
        public bool? is_computed_column
        {
            get;
            set;
        }

        [SqlColumn("is_sparse_column_set", 31), SqlTypeFacets("bit", true)]
        public bool? is_sparse_column_set
        {
            get;
            set;
        }

        [SqlColumn("ordinal_in_order_by_list", 32), SqlTypeFacets("smallint", true)]
        public short? ordinal_in_order_by_list
        {
            get;
            set;
        }

        [SqlColumn("order_by_is_descending", 33), SqlTypeFacets("bit", true)]
        public bool? order_by_is_descending
        {
            get;
            set;
        }

        [SqlColumn("order_by_list_length", 34), SqlTypeFacets("smallint", true)]
        public short? order_by_list_length
        {
            get;
            set;
        }

        [SqlColumn("error_number", 35), SqlTypeFacets("int", true)]
        public int? error_number
        {
            get;
            set;
        }

        [SqlColumn("error_severity", 36), SqlTypeFacets("int", true)]
        public int? error_severity
        {
            get;
            set;
        }

        [SqlColumn("error_state", 37), SqlTypeFacets("int", true)]
        public int? error_state
        {
            get;
            set;
        }

        [SqlColumn("error_message", 38), SqlTypeFacets("nvarchar", true, 4096)]
        public string error_message
        {
            get;
            set;
        }

        [SqlColumn("error_type", 39), SqlTypeFacets("int", true)]
        public int? error_type
        {
            get;
            set;
        }

        [SqlColumn("error_type_desc", 40), SqlTypeFacets("nvarchar", true, 60)]
        public string error_type_desc
        {
            get;
            set;
        }

        public dm_exec_describe_first_result_set_for_objectResult()
        {
        }

        public dm_exec_describe_first_result_set_for_objectResult(object[] items)
        {
            is_hidden = (bool?)items[0];
            column_ordinal = (int?)items[1];
            name = (string)items[2];
            is_nullable = (bool?)items[3];
            system_type_id = (int?)items[4];
            system_type_name = (string)items[5];
            max_length = (short?)items[6];
            precision = (byte?)items[7];
            scale = (byte?)items[8];
            collation_name = (string)items[9];
            user_type_id = (int?)items[10];
            user_type_database = (string)items[11];
            user_type_schema = (string)items[12];
            user_type_name = (string)items[13];
            assembly_qualified_type_name = (string)items[14];
            xml_collection_id = (int?)items[15];
            xml_collection_database = (string)items[16];
            xml_collection_schema = (string)items[17];
            xml_collection_name = (string)items[18];
            is_xml_document = (bool?)items[19];
            is_case_sensitive = (bool?)items[20];
            is_fixed_length_clr_type = (bool?)items[21];
            source_server = (string)items[22];
            source_database = (string)items[23];
            source_schema = (string)items[24];
            source_table = (string)items[25];
            source_column = (string)items[26];
            is_identity_column = (bool?)items[27];
            is_part_of_unique_key = (bool?)items[28];
            is_updateable = (bool?)items[29];
            is_computed_column = (bool?)items[30];
            is_sparse_column_set = (bool?)items[31];
            ordinal_in_order_by_list = (short?)items[32];
            order_by_is_descending = (bool?)items[33];
            order_by_list_length = (short?)items[34];
            error_number = (int?)items[35];
            error_severity = (int?)items[36];
            error_state = (int?)items[37];
            error_message = (string)items[38];
            error_type = (int?)items[39];
            error_type_desc = (string)items[40];
        }

        public dm_exec_describe_first_result_set_for_objectResult(bool? is_hidden, int? column_ordinal, string name, bool? is_nullable, int? system_type_id, string system_type_name, short? max_length, byte? precision, byte? scale, string collation_name, int? user_type_id, string user_type_database, string user_type_schema, string user_type_name, string assembly_qualified_type_name, int? xml_collection_id, string xml_collection_database, string xml_collection_schema, string xml_collection_name, bool? is_xml_document, bool? is_case_sensitive, bool? is_fixed_length_clr_type, string source_server, string source_database, string source_schema, string source_table, string source_column, bool? is_identity_column, bool? is_part_of_unique_key, bool? is_updateable, bool? is_computed_column, bool? is_sparse_column_set, short? ordinal_in_order_by_list, bool? order_by_is_descending, short? order_by_list_length, int? error_number, int? error_severity, int? error_state, string error_message, int? error_type, string error_type_desc)
        {
            this.is_hidden = is_hidden;
            this.column_ordinal = column_ordinal;
            this.name = name;
            this.is_nullable = is_nullable;
            this.system_type_id = system_type_id;
            this.system_type_name = system_type_name;
            this.max_length = max_length;
            this.precision = precision;
            this.scale = scale;
            this.collation_name = collation_name;
            this.user_type_id = user_type_id;
            this.user_type_database = user_type_database;
            this.user_type_schema = user_type_schema;
            this.user_type_name = user_type_name;
            this.assembly_qualified_type_name = assembly_qualified_type_name;
            this.xml_collection_id = xml_collection_id;
            this.xml_collection_database = xml_collection_database;
            this.xml_collection_schema = xml_collection_schema;
            this.xml_collection_name = xml_collection_name;
            this.is_xml_document = is_xml_document;
            this.is_case_sensitive = is_case_sensitive;
            this.is_fixed_length_clr_type = is_fixed_length_clr_type;
            this.source_server = source_server;
            this.source_database = source_database;
            this.source_schema = source_schema;
            this.source_table = source_table;
            this.source_column = source_column;
            this.is_identity_column = is_identity_column;
            this.is_part_of_unique_key = is_part_of_unique_key;
            this.is_updateable = is_updateable;
            this.is_computed_column = is_computed_column;
            this.is_sparse_column_set = is_sparse_column_set;
            this.ordinal_in_order_by_list = ordinal_in_order_by_list;
            this.order_by_is_descending = order_by_is_descending;
            this.order_by_list_length = order_by_list_length;
            this.error_number = error_number;
            this.error_severity = error_severity;
            this.error_state = error_state;
            this.error_message = error_message;
            this.error_type = error_type;
            this.error_type_desc = error_type_desc;
        }

        public override object[] GetItemArray()
        {
            return new object[] { is_hidden, column_ordinal, name, is_nullable, system_type_id, system_type_name, max_length, precision, scale, collation_name, user_type_id, user_type_database, user_type_schema, user_type_name, assembly_qualified_type_name, xml_collection_id, xml_collection_database, xml_collection_schema, xml_collection_name, is_xml_document, is_case_sensitive, is_fixed_length_clr_type, source_server, source_database, source_schema, source_table, source_column, is_identity_column, is_part_of_unique_key, is_updateable, is_computed_column, is_sparse_column_set, ordinal_in_order_by_list, order_by_is_descending, order_by_list_length, error_number, error_severity, error_state, error_message, error_type, error_type_desc };
        }

        public override void SetItemArray(object[] items)
        {
            is_hidden = (bool?)items[0];
            column_ordinal = (int?)items[1];
            name = (string)items[2];
            is_nullable = (bool?)items[3];
            system_type_id = (int?)items[4];
            system_type_name = (string)items[5];
            max_length = (short?)items[6];
            precision = (byte?)items[7];
            scale = (byte?)items[8];
            collation_name = (string)items[9];
            user_type_id = (int?)items[10];
            user_type_database = (string)items[11];
            user_type_schema = (string)items[12];
            user_type_name = (string)items[13];
            assembly_qualified_type_name = (string)items[14];
            xml_collection_id = (int?)items[15];
            xml_collection_database = (string)items[16];
            xml_collection_schema = (string)items[17];
            xml_collection_name = (string)items[18];
            is_xml_document = (bool?)items[19];
            is_case_sensitive = (bool?)items[20];
            is_fixed_length_clr_type = (bool?)items[21];
            source_server = (string)items[22];
            source_database = (string)items[23];
            source_schema = (string)items[24];
            source_table = (string)items[25];
            source_column = (string)items[26];
            is_identity_column = (bool?)items[27];
            is_part_of_unique_key = (bool?)items[28];
            is_updateable = (bool?)items[29];
            is_computed_column = (bool?)items[30];
            is_sparse_column_set = (bool?)items[31];
            ordinal_in_order_by_list = (short?)items[32];
            order_by_is_descending = (bool?)items[33];
            order_by_list_length = (short?)items[34];
            error_number = (int?)items[35];
            error_severity = (int?)items[36];
            error_state = (int?)items[37];
            error_message = (string)items[38];
            error_type = (int?)items[39];
            error_type_desc = (string)items[40];
        }
    }

    [SqlTableFunction("sys", "dm_exec_describe_first_result_set_for_object")]
    public partial class dm_exec_describe_first_result_set_for_object : SqlTableFunctionProxy<dm_exec_describe_first_result_set_for_object, dm_exec_describe_first_result_set_for_objectResult>
    {
        [SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlParameter("@browse_information_mode", 1, false, false), SqlTypeFacets("tinyint", true)]
        public byte? browse_information_mode
        {
            get;
            set;
        }

        public dm_exec_describe_first_result_set_for_object()
        {
        }

        public dm_exec_describe_first_result_set_for_object(object[] items)
        {
            object_id = (int?)items[0];
            browse_information_mode = (byte?)items[1];
        }

        public dm_exec_describe_first_result_set_for_object(int? object_id, byte? browse_information_mode)
        {
            this.object_id = object_id;
            this.browse_information_mode = browse_information_mode;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, browse_information_mode };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            browse_information_mode = (byte?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logpool_consumers")]
    public partial class dm_logpool_consumersResult : SqlTabularProxy
    {
        [SqlColumn("progress_category", 7), SqlTypeFacets("int", false)]
        public int progress_category
        {
            get;
            set;
        }

        [SqlColumn("persistent_only", 8), SqlTypeFacets("tinyint", false)]
        public byte persistent_only
        {
            get;
            set;
        }

        [SqlColumn("full_block_only", 9), SqlTypeFacets("tinyint", false)]
        public byte full_block_only
        {
            get;
            set;
        }

        [SqlColumn("share_intention", 10), SqlTypeFacets("int", false)]
        public int share_intention
        {
            get;
            set;
        }

        [SqlColumn("scan_direction", 11), SqlTypeFacets("int", false)]
        public int scan_direction
        {
            get;
            set;
        }

        [SqlColumn("read_ahead_target", 12), SqlTypeFacets("int", false)]
        public int read_ahead_target
        {
            get;
            set;
        }

        [SqlColumn("stats_enabled", 13), SqlTypeFacets("tinyint", false)]
        public byte stats_enabled
        {
            get;
            set;
        }

        [SqlColumn("start_lsn", 14), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? start_lsn
        {
            get;
            set;
        }

        [SqlColumn("current_lsn", 15), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? current_lsn
        {
            get;
            set;
        }

        [SqlColumn("end_log_block_id", 16), SqlTypeFacets("bigint", false)]
        public long end_log_block_id
        {
            get;
            set;
        }

        [SqlColumn("current_cache_buffer", 17), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] current_cache_buffer
        {
            get;
            set;
        }

        [SqlColumn("incomplete_cache_buffer", 18), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] incomplete_cache_buffer
        {
            get;
            set;
        }

        [SqlColumn("reached_end", 19), SqlTypeFacets("tinyint", false)]
        public byte reached_end
        {
            get;
            set;
        }

        [SqlColumn("outstanding_read", 20), SqlTypeFacets("tinyint", false)]
        public byte outstanding_read
        {
            get;
            set;
        }

        [SqlColumn("read_ahead_done", 21), SqlTypeFacets("tinyint", false)]
        public byte read_ahead_done
        {
            get;
            set;
        }

        [SqlColumn("next_read_ahead_lsn", 22), SqlTypeFacets("numeric", true, 25, 0)]
        public decimal? next_read_ahead_lsn
        {
            get;
            set;
        }

        [SqlColumn("read_ahead_distance", 23), SqlTypeFacets("int", false)]
        public int read_ahead_distance
        {
            get;
            set;
        }

        [SqlColumn("private_pool_size", 24), SqlTypeFacets("bigint", false)]
        public long private_pool_size
        {
            get;
            set;
        }

        [SqlColumn("private_pool_pages", 25), SqlTypeFacets("bigint", false)]
        public long private_pool_pages
        {
            get;
            set;
        }

        [SqlColumn("private_pool_last_access_point", 26), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] private_pool_last_access_point
        {
            get;
            set;
        }

        [SqlColumn("private_pool_last_RA_access_point", 27), SqlTypeFacets("varbinary", true, 8)]
        public Byte[] private_pool_last_RA_access_point
        {
            get;
            set;
        }

        [SqlColumn("private_pool_hits", 28), SqlTypeFacets("bigint", false)]
        public long private_pool_hits
        {
            get;
            set;
        }

        [SqlColumn("private_pool_misses", 29), SqlTypeFacets("bigint", false)]
        public long private_pool_misses
        {
            get;
            set;
        }

        [SqlColumn("private_pool_hits_RA", 30), SqlTypeFacets("bigint", false)]
        public long private_pool_hits_RA
        {
            get;
            set;
        }

        [SqlColumn("private_pool_misses_RA", 31), SqlTypeFacets("bigint", false)]
        public long private_pool_misses_RA
        {
            get;
            set;
        }

        [SqlColumn("private_pool_hit_search_length", 32), SqlTypeFacets("bigint", false)]
        public long private_pool_hit_search_length
        {
            get;
            set;
        }

        [SqlColumn("private_pool_miss_search_length", 33), SqlTypeFacets("bigint", false)]
        public long private_pool_miss_search_length
        {
            get;
            set;
        }

        [SqlColumn("private_pool_hits_search_length_RA", 34), SqlTypeFacets("bigint", false)]
        public long private_pool_hits_search_length_RA
        {
            get;
            set;
        }

        [SqlColumn("private_pool_miss_search_length_RA", 35), SqlTypeFacets("bigint", false)]
        public long private_pool_miss_search_length_RA
        {
            get;
            set;
        }

        [SqlColumn("reference_count", 36), SqlTypeFacets("int", false)]
        public int reference_count
        {
            get;
            set;
        }

        [SqlColumn("free_ref_slot_occupied", 37), SqlTypeFacets("tinyint", false)]
        public byte free_ref_slot_occupied
        {
            get;
            set;
        }

        [SqlColumn("target_private_pool_size", 38), SqlTypeFacets("bigint", false)]
        public long target_private_pool_size
        {
            get;
            set;
        }

        [SqlColumn("truncate_point", 39), SqlTypeFacets("bigint", false)]
        public long truncate_point
        {
            get;
            set;
        }

        [SqlColumn("mem_status", 40), SqlTypeFacets("int", false)]
        public int mem_status
        {
            get;
            set;
        }

        [SqlColumn("scan_status", 41), SqlTypeFacets("int", false)]
        public int scan_status
        {
            get;
            set;
        }

        [SqlColumn("consumed_block_count", 42), SqlTypeFacets("bigint", false)]
        public long consumed_block_count
        {
            get;
            set;
        }

        [SqlColumn("cache_misses", 43), SqlTypeFacets("bigint", false)]
        public long cache_misses
        {
            get;
            set;
        }

        [SqlColumn("sigma_blocks_ahead", 44), SqlTypeFacets("bigint", false)]
        public long sigma_blocks_ahead
        {
            get;
            set;
        }

        [SqlColumn("blocks_from_LC", 45), SqlTypeFacets("bigint", false)]
        public long blocks_from_LC
        {
            get;
            set;
        }

        [SqlColumn("blocks_from_LogPool", 46), SqlTypeFacets("bigint", false)]
        public long blocks_from_LogPool
        {
            get;
            set;
        }

        [SqlColumn("blocks_from_disk", 47), SqlTypeFacets("bigint", false)]
        public long blocks_from_disk
        {
            get;
            set;
        }

        [SqlColumn("log_consumer_deleting", 48), SqlTypeFacets("tinyint", false)]
        public byte log_consumer_deleting
        {
            get;
            set;
        }

        [SqlColumn("log_consumer_ref_counter", 49), SqlTypeFacets("int", false)]
        public int log_consumer_ref_counter
        {
            get;
            set;
        }

        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("consumer_id", 2), SqlTypeFacets("bigint", false)]
        public long consumer_id
        {
            get;
            set;
        }

        [SqlColumn("consumer_name", 3), SqlTypeFacets("nvarchar", true, 258)]
        public string consumer_name
        {
            get;
            set;
        }

        [SqlColumn("resource_pool_id", 4), SqlTypeFacets("int", false)]
        public int resource_pool_id
        {
            get;
            set;
        }

        [SqlColumn("is_idle", 5), SqlTypeFacets("tinyint", false)]
        public byte is_idle
        {
            get;
            set;
        }

        [SqlColumn("wait_time_before_idle", 6), SqlTypeFacets("int", false)]
        public int wait_time_before_idle
        {
            get;
            set;
        }

        public dm_logpool_consumersResult()
        {
        }

        public dm_logpool_consumersResult(object[] items)
        {
            progress_category = (int)items[0];
            persistent_only = (byte)items[1];
            full_block_only = (byte)items[2];
            share_intention = (int)items[3];
            scan_direction = (int)items[4];
            read_ahead_target = (int)items[5];
            stats_enabled = (byte)items[6];
            start_lsn = (decimal?)items[7];
            current_lsn = (decimal?)items[8];
            end_log_block_id = (long)items[9];
            current_cache_buffer = (Byte[])items[10];
            incomplete_cache_buffer = (Byte[])items[11];
            reached_end = (byte)items[12];
            outstanding_read = (byte)items[13];
            read_ahead_done = (byte)items[14];
            next_read_ahead_lsn = (decimal?)items[15];
            read_ahead_distance = (int)items[16];
            private_pool_size = (long)items[17];
            private_pool_pages = (long)items[18];
            private_pool_last_access_point = (Byte[])items[19];
            private_pool_last_RA_access_point = (Byte[])items[20];
            private_pool_hits = (long)items[21];
            private_pool_misses = (long)items[22];
            private_pool_hits_RA = (long)items[23];
            private_pool_misses_RA = (long)items[24];
            private_pool_hit_search_length = (long)items[25];
            private_pool_miss_search_length = (long)items[26];
            private_pool_hits_search_length_RA = (long)items[27];
            private_pool_miss_search_length_RA = (long)items[28];
            reference_count = (int)items[29];
            free_ref_slot_occupied = (byte)items[30];
            target_private_pool_size = (long)items[31];
            truncate_point = (long)items[32];
            mem_status = (int)items[33];
            scan_status = (int)items[34];
            consumed_block_count = (long)items[35];
            cache_misses = (long)items[36];
            sigma_blocks_ahead = (long)items[37];
            blocks_from_LC = (long)items[38];
            blocks_from_LogPool = (long)items[39];
            blocks_from_disk = (long)items[40];
            log_consumer_deleting = (byte)items[41];
            log_consumer_ref_counter = (int)items[42];
            database_id = (int)items[43];
            recovery_unit_id = (int)items[44];
            consumer_id = (long)items[45];
            consumer_name = (string)items[46];
            resource_pool_id = (int)items[47];
            is_idle = (byte)items[48];
            wait_time_before_idle = (int)items[49];
        }

        public dm_logpool_consumersResult(int progress_category, byte persistent_only, byte full_block_only, int share_intention, int scan_direction, int read_ahead_target, byte stats_enabled, decimal? start_lsn, decimal? current_lsn, long end_log_block_id, Byte[] current_cache_buffer, Byte[] incomplete_cache_buffer, byte reached_end, byte outstanding_read, byte read_ahead_done, decimal? next_read_ahead_lsn, int read_ahead_distance, long private_pool_size, long private_pool_pages, Byte[] private_pool_last_access_point, Byte[] private_pool_last_RA_access_point, long private_pool_hits, long private_pool_misses, long private_pool_hits_RA, long private_pool_misses_RA, long private_pool_hit_search_length, long private_pool_miss_search_length, long private_pool_hits_search_length_RA, long private_pool_miss_search_length_RA, int reference_count, byte free_ref_slot_occupied, long target_private_pool_size, long truncate_point, int mem_status, int scan_status, long consumed_block_count, long cache_misses, long sigma_blocks_ahead, long blocks_from_LC, long blocks_from_LogPool, long blocks_from_disk, byte log_consumer_deleting, int log_consumer_ref_counter, int database_id, int recovery_unit_id, long consumer_id, string consumer_name, int resource_pool_id, byte is_idle, int wait_time_before_idle)
        {
            this.progress_category = progress_category;
            this.persistent_only = persistent_only;
            this.full_block_only = full_block_only;
            this.share_intention = share_intention;
            this.scan_direction = scan_direction;
            this.read_ahead_target = read_ahead_target;
            this.stats_enabled = stats_enabled;
            this.start_lsn = start_lsn;
            this.current_lsn = current_lsn;
            this.end_log_block_id = end_log_block_id;
            this.current_cache_buffer = current_cache_buffer;
            this.incomplete_cache_buffer = incomplete_cache_buffer;
            this.reached_end = reached_end;
            this.outstanding_read = outstanding_read;
            this.read_ahead_done = read_ahead_done;
            this.next_read_ahead_lsn = next_read_ahead_lsn;
            this.read_ahead_distance = read_ahead_distance;
            this.private_pool_size = private_pool_size;
            this.private_pool_pages = private_pool_pages;
            this.private_pool_last_access_point = private_pool_last_access_point;
            this.private_pool_last_RA_access_point = private_pool_last_RA_access_point;
            this.private_pool_hits = private_pool_hits;
            this.private_pool_misses = private_pool_misses;
            this.private_pool_hits_RA = private_pool_hits_RA;
            this.private_pool_misses_RA = private_pool_misses_RA;
            this.private_pool_hit_search_length = private_pool_hit_search_length;
            this.private_pool_miss_search_length = private_pool_miss_search_length;
            this.private_pool_hits_search_length_RA = private_pool_hits_search_length_RA;
            this.private_pool_miss_search_length_RA = private_pool_miss_search_length_RA;
            this.reference_count = reference_count;
            this.free_ref_slot_occupied = free_ref_slot_occupied;
            this.target_private_pool_size = target_private_pool_size;
            this.truncate_point = truncate_point;
            this.mem_status = mem_status;
            this.scan_status = scan_status;
            this.consumed_block_count = consumed_block_count;
            this.cache_misses = cache_misses;
            this.sigma_blocks_ahead = sigma_blocks_ahead;
            this.blocks_from_LC = blocks_from_LC;
            this.blocks_from_LogPool = blocks_from_LogPool;
            this.blocks_from_disk = blocks_from_disk;
            this.log_consumer_deleting = log_consumer_deleting;
            this.log_consumer_ref_counter = log_consumer_ref_counter;
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.consumer_id = consumer_id;
            this.consumer_name = consumer_name;
            this.resource_pool_id = resource_pool_id;
            this.is_idle = is_idle;
            this.wait_time_before_idle = wait_time_before_idle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { progress_category, persistent_only, full_block_only, share_intention, scan_direction, read_ahead_target, stats_enabled, start_lsn, current_lsn, end_log_block_id, current_cache_buffer, incomplete_cache_buffer, reached_end, outstanding_read, read_ahead_done, next_read_ahead_lsn, read_ahead_distance, private_pool_size, private_pool_pages, private_pool_last_access_point, private_pool_last_RA_access_point, private_pool_hits, private_pool_misses, private_pool_hits_RA, private_pool_misses_RA, private_pool_hit_search_length, private_pool_miss_search_length, private_pool_hits_search_length_RA, private_pool_miss_search_length_RA, reference_count, free_ref_slot_occupied, target_private_pool_size, truncate_point, mem_status, scan_status, consumed_block_count, cache_misses, sigma_blocks_ahead, blocks_from_LC, blocks_from_LogPool, blocks_from_disk, log_consumer_deleting, log_consumer_ref_counter, database_id, recovery_unit_id, consumer_id, consumer_name, resource_pool_id, is_idle, wait_time_before_idle };
        }

        public override void SetItemArray(object[] items)
        {
            progress_category = (int)items[0];
            persistent_only = (byte)items[1];
            full_block_only = (byte)items[2];
            share_intention = (int)items[3];
            scan_direction = (int)items[4];
            read_ahead_target = (int)items[5];
            stats_enabled = (byte)items[6];
            start_lsn = (decimal?)items[7];
            current_lsn = (decimal?)items[8];
            end_log_block_id = (long)items[9];
            current_cache_buffer = (Byte[])items[10];
            incomplete_cache_buffer = (Byte[])items[11];
            reached_end = (byte)items[12];
            outstanding_read = (byte)items[13];
            read_ahead_done = (byte)items[14];
            next_read_ahead_lsn = (decimal?)items[15];
            read_ahead_distance = (int)items[16];
            private_pool_size = (long)items[17];
            private_pool_pages = (long)items[18];
            private_pool_last_access_point = (Byte[])items[19];
            private_pool_last_RA_access_point = (Byte[])items[20];
            private_pool_hits = (long)items[21];
            private_pool_misses = (long)items[22];
            private_pool_hits_RA = (long)items[23];
            private_pool_misses_RA = (long)items[24];
            private_pool_hit_search_length = (long)items[25];
            private_pool_miss_search_length = (long)items[26];
            private_pool_hits_search_length_RA = (long)items[27];
            private_pool_miss_search_length_RA = (long)items[28];
            reference_count = (int)items[29];
            free_ref_slot_occupied = (byte)items[30];
            target_private_pool_size = (long)items[31];
            truncate_point = (long)items[32];
            mem_status = (int)items[33];
            scan_status = (int)items[34];
            consumed_block_count = (long)items[35];
            cache_misses = (long)items[36];
            sigma_blocks_ahead = (long)items[37];
            blocks_from_LC = (long)items[38];
            blocks_from_LogPool = (long)items[39];
            blocks_from_disk = (long)items[40];
            log_consumer_deleting = (byte)items[41];
            log_consumer_ref_counter = (int)items[42];
            database_id = (int)items[43];
            recovery_unit_id = (int)items[44];
            consumer_id = (long)items[45];
            consumer_name = (string)items[46];
            resource_pool_id = (int)items[47];
            is_idle = (byte)items[48];
            wait_time_before_idle = (int)items[49];
        }
    }

    [SqlTableFunction("sys", "dm_logpool_consumers")]
    public partial class dm_logpool_consumers : SqlTableFunctionProxy<dm_logpool_consumers, dm_logpool_consumersResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        public dm_logpool_consumers()
        {
        }

        public dm_logpool_consumers(object[] items)
        {
            DatabaseId = (int?)items[0];
        }

        public dm_logpool_consumers(int? DatabaseId)
        {
            this.DatabaseId = DatabaseId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_text_query_plan")]
    public partial class dm_exec_text_query_planResult : SqlTabularProxy
    {
        [SqlColumn("dbid", 0), SqlTypeFacets("smallint", true)]
        public short? dbid
        {
            get;
            set;
        }

        [SqlColumn("objectid", 1), SqlTypeFacets("int", true)]
        public int? objectid
        {
            get;
            set;
        }

        [SqlColumn("number", 2), SqlTypeFacets("smallint", true)]
        public short? number
        {
            get;
            set;
        }

        [SqlColumn("encrypted", 3), SqlTypeFacets("bit", false)]
        public bool encrypted
        {
            get;
            set;
        }

        [SqlColumn("query_plan", 4), SqlTypeFacets("nvarchar", true, -1)]
        public string query_plan
        {
            get;
            set;
        }

        public dm_exec_text_query_planResult()
        {
        }

        public dm_exec_text_query_planResult(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            query_plan = (string)items[4];
        }

        public dm_exec_text_query_planResult(short? dbid, int? objectid, short? number, bool encrypted, string query_plan)
        {
            this.dbid = dbid;
            this.objectid = objectid;
            this.number = number;
            this.encrypted = encrypted;
            this.query_plan = query_plan;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objectid, number, encrypted, query_plan };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (short?)items[0];
            objectid = (int?)items[1];
            number = (short?)items[2];
            encrypted = (bool)items[3];
            query_plan = (string)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_exec_text_query_plan")]
    public partial class dm_exec_text_query_plan : SqlTableFunctionProxy<dm_exec_text_query_plan, dm_exec_text_query_planResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] handle
        {
            get;
            set;
        }

        [SqlParameter("@stmt_start_offset", 1, false, false), SqlTypeFacets("int", true)]
        public int? stmt_start_offset
        {
            get;
            set;
        }

        [SqlParameter("@stmt_end_offset", 2, false, false), SqlTypeFacets("int", true)]
        public int? stmt_end_offset
        {
            get;
            set;
        }

        public dm_exec_text_query_plan()
        {
        }

        public dm_exec_text_query_plan(object[] items)
        {
            handle = (Byte[])items[0];
            stmt_start_offset = (int?)items[1];
            stmt_end_offset = (int?)items[2];
        }

        public dm_exec_text_query_plan(Byte[] handle, int? stmt_start_offset, int? stmt_end_offset)
        {
            this.handle = handle;
            this.stmt_start_offset = stmt_start_offset;
            this.stmt_end_offset = stmt_end_offset;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle, stmt_start_offset, stmt_end_offset };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (Byte[])items[0];
            stmt_start_offset = (int?)items[1];
            stmt_end_offset = (int?)items[2];
        }
    }

    [SqlTableFunctionResult("sys", "fn_translate_permissions")]
    public partial class fn_translate_permissionsResult : SqlTabularProxy
    {
        [SqlColumn("permission_name", 0), SqlTypeFacets("nvarchar", true, 120)]
        public string permission_name
        {
            get;
            set;
        }

        [SqlColumn("type", 1), SqlTypeFacets("varchar", true, 4)]
        public string type
        {
            get;
            set;
        }

        public fn_translate_permissionsResult()
        {
        }

        public fn_translate_permissionsResult(object[] items)
        {
            permission_name = (string)items[0];
            type = (string)items[1];
        }

        public fn_translate_permissionsResult(string permission_name, string type)
        {
            this.permission_name = permission_name;
            this.type = type;
        }

        public override object[] GetItemArray()
        {
            return new object[] { permission_name, type };
        }

        public override void SetItemArray(object[] items)
        {
            permission_name = (string)items[0];
            type = (string)items[1];
        }
    }

    [SqlTableFunction("sys", "fn_translate_permissions")]
    public partial class fn_translate_permissions : SqlTableFunctionProxy<fn_translate_permissions, fn_translate_permissionsResult>
    {
        [SqlParameter("@level", 0, false, false), SqlTypeFacets("nvarchar", true, 120)]
        public string level
        {
            get;
            set;
        }

        [SqlParameter("@perms", 1, false, false), SqlTypeFacets("varbinary", true, 16)]
        public Byte[] perms
        {
            get;
            set;
        }

        public fn_translate_permissions()
        {
        }

        public fn_translate_permissions(object[] items)
        {
            level = (string)items[0];
            perms = (Byte[])items[1];
        }

        public fn_translate_permissions(string level, Byte[] perms)
        {
            this.level = level;
            this.perms = perms;
        }

        public override object[] GetItemArray()
        {
            return new object[] { level, perms };
        }

        public override void SetItemArray(object[] items)
        {
            level = (string)items[0];
            perms = (Byte[])items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_PhysLocCracker")]
    public partial class fn_PhysLocCrackerResult : SqlTabularProxy
    {
        [SqlColumn("file_id", 0), SqlTypeFacets("int", false)]
        public int file_id
        {
            get;
            set;
        }

        [SqlColumn("page_id", 1), SqlTypeFacets("int", false)]
        public int page_id
        {
            get;
            set;
        }

        [SqlColumn("slot_id", 2), SqlTypeFacets("int", false)]
        public int slot_id
        {
            get;
            set;
        }

        public fn_PhysLocCrackerResult()
        {
        }

        public fn_PhysLocCrackerResult(object[] items)
        {
            file_id = (int)items[0];
            page_id = (int)items[1];
            slot_id = (int)items[2];
        }

        public fn_PhysLocCrackerResult(int file_id, int page_id, int slot_id)
        {
            this.file_id = file_id;
            this.page_id = page_id;
            this.slot_id = slot_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { file_id, page_id, slot_id };
        }

        public override void SetItemArray(object[] items)
        {
            file_id = (int)items[0];
            page_id = (int)items[1];
            slot_id = (int)items[2];
        }
    }

    [SqlTableFunction("sys", "fn_PhysLocCracker")]
    public partial class fn_PhysLocCracker : SqlTableFunctionProxy<fn_PhysLocCracker, fn_PhysLocCrackerResult>
    {
        [SqlParameter("@physical_locator", 0, false, false), SqlTypeFacets("binary", true, 8)]
        public Byte[] physical_locator
        {
            get;
            set;
        }

        public fn_PhysLocCracker()
        {
        }

        public fn_PhysLocCracker(object[] items)
        {
            physical_locator = (Byte[])items[0];
        }

        public fn_PhysLocCracker(Byte[] physical_locator)
        {
            this.physical_locator = physical_locator;
        }

        public override object[] GetItemArray()
        {
            return new object[] { physical_locator };
        }

        public override void SetItemArray(object[] items)
        {
            physical_locator = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_xml_handles")]
    public partial class dm_exec_xml_handlesResult : SqlTabularProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", false)]
        public int session_id
        {
            get;
            set;
        }

        [SqlColumn("document_id", 1), SqlTypeFacets("int", false)]
        public int document_id
        {
            get;
            set;
        }

        [SqlColumn("namespace_document_id", 2), SqlTypeFacets("int", true)]
        public int? namespace_document_id
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 3), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_start_offset", 4), SqlTypeFacets("int", false)]
        public int statement_start_offset
        {
            get;
            set;
        }

        [SqlColumn("statement_end_offset", 5), SqlTypeFacets("int", false)]
        public int statement_end_offset
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 6), SqlTypeFacets("datetime", false)]
        public DateTime creation_time
        {
            get;
            set;
        }

        [SqlColumn("original_document_size_bytes", 7), SqlTypeFacets("bigint", false)]
        public long original_document_size_bytes
        {
            get;
            set;
        }

        [SqlColumn("original_namespace_document_size_bytes", 8), SqlTypeFacets("bigint", true)]
        public long? original_namespace_document_size_bytes
        {
            get;
            set;
        }

        [SqlColumn("num_openxml_calls", 9), SqlTypeFacets("bigint", false)]
        public long num_openxml_calls
        {
            get;
            set;
        }

        [SqlColumn("dormant_duration_ms", 10), SqlTypeFacets("bigint", false)]
        public long dormant_duration_ms
        {
            get;
            set;
        }

        [SqlColumn("row_count", 11), SqlTypeFacets("bigint", false)]
        public long row_count
        {
            get;
            set;
        }

        public dm_exec_xml_handlesResult()
        {
        }

        public dm_exec_xml_handlesResult(object[] items)
        {
            session_id = (int)items[0];
            document_id = (int)items[1];
            namespace_document_id = (int?)items[2];
            sql_handle = (Byte[])items[3];
            statement_start_offset = (int)items[4];
            statement_end_offset = (int)items[5];
            creation_time = (DateTime)items[6];
            original_document_size_bytes = (long)items[7];
            original_namespace_document_size_bytes = (long?)items[8];
            num_openxml_calls = (long)items[9];
            dormant_duration_ms = (long)items[10];
            row_count = (long)items[11];
        }

        public dm_exec_xml_handlesResult(int session_id, int document_id, int? namespace_document_id, Byte[] sql_handle, int statement_start_offset, int statement_end_offset, DateTime creation_time, long original_document_size_bytes, long? original_namespace_document_size_bytes, long num_openxml_calls, long dormant_duration_ms, long row_count)
        {
            this.session_id = session_id;
            this.document_id = document_id;
            this.namespace_document_id = namespace_document_id;
            this.sql_handle = sql_handle;
            this.statement_start_offset = statement_start_offset;
            this.statement_end_offset = statement_end_offset;
            this.creation_time = creation_time;
            this.original_document_size_bytes = original_document_size_bytes;
            this.original_namespace_document_size_bytes = original_namespace_document_size_bytes;
            this.num_openxml_calls = num_openxml_calls;
            this.dormant_duration_ms = dormant_duration_ms;
            this.row_count = row_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, document_id, namespace_document_id, sql_handle, statement_start_offset, statement_end_offset, creation_time, original_document_size_bytes, original_namespace_document_size_bytes, num_openxml_calls, dormant_duration_ms, row_count };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int)items[0];
            document_id = (int)items[1];
            namespace_document_id = (int?)items[2];
            sql_handle = (Byte[])items[3];
            statement_start_offset = (int)items[4];
            statement_end_offset = (int)items[5];
            creation_time = (DateTime)items[6];
            original_document_size_bytes = (long)items[7];
            original_namespace_document_size_bytes = (long?)items[8];
            num_openxml_calls = (long)items[9];
            dormant_duration_ms = (long)items[10];
            row_count = (long)items[11];
        }
    }

    [SqlTableFunction("sys", "dm_exec_xml_handles")]
    public partial class dm_exec_xml_handles : SqlTableFunctionProxy<dm_exec_xml_handles, dm_exec_xml_handlesResult>
    {
        [SqlParameter("@spid", 0, false, false), SqlTypeFacets("int", true)]
        public int? spid
        {
            get;
            set;
        }

        public dm_exec_xml_handles()
        {
        }

        public dm_exec_xml_handles(object[] items)
        {
            spid = (int?)items[0];
        }

        public dm_exec_xml_handles(int? spid)
        {
            this.spid = spid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spid };
        }

        public override void SetItemArray(object[] items)
        {
            spid = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_io_virtual_file_stats")]
    public partial class dm_io_virtual_file_statsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("smallint", false)]
        public short database_id
        {
            get;
            set;
        }

        [SqlColumn("file_id", 1), SqlTypeFacets("smallint", false)]
        public short file_id
        {
            get;
            set;
        }

        [SqlColumn("sample_ms", 2), SqlTypeFacets("int", false)]
        public int sample_ms
        {
            get;
            set;
        }

        [SqlColumn("num_of_reads", 3), SqlTypeFacets("bigint", false)]
        public long num_of_reads
        {
            get;
            set;
        }

        [SqlColumn("num_of_bytes_read", 4), SqlTypeFacets("bigint", false)]
        public long num_of_bytes_read
        {
            get;
            set;
        }

        [SqlColumn("io_stall_read_ms", 5), SqlTypeFacets("bigint", false)]
        public long io_stall_read_ms
        {
            get;
            set;
        }

        [SqlColumn("io_stall_queued_read_ms", 6), SqlTypeFacets("bigint", false)]
        public long io_stall_queued_read_ms
        {
            get;
            set;
        }

        [SqlColumn("num_of_writes", 7), SqlTypeFacets("bigint", false)]
        public long num_of_writes
        {
            get;
            set;
        }

        [SqlColumn("num_of_bytes_written", 8), SqlTypeFacets("bigint", false)]
        public long num_of_bytes_written
        {
            get;
            set;
        }

        [SqlColumn("io_stall_write_ms", 9), SqlTypeFacets("bigint", false)]
        public long io_stall_write_ms
        {
            get;
            set;
        }

        [SqlColumn("io_stall_queued_write_ms", 10), SqlTypeFacets("bigint", false)]
        public long io_stall_queued_write_ms
        {
            get;
            set;
        }

        [SqlColumn("io_stall", 11), SqlTypeFacets("bigint", false)]
        public long io_stall
        {
            get;
            set;
        }

        [SqlColumn("size_on_disk_bytes", 12), SqlTypeFacets("bigint", false)]
        public long size_on_disk_bytes
        {
            get;
            set;
        }

        [SqlColumn("file_handle", 13), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] file_handle
        {
            get;
            set;
        }

        public dm_io_virtual_file_statsResult()
        {
        }

        public dm_io_virtual_file_statsResult(object[] items)
        {
            database_id = (short)items[0];
            file_id = (short)items[1];
            sample_ms = (int)items[2];
            num_of_reads = (long)items[3];
            num_of_bytes_read = (long)items[4];
            io_stall_read_ms = (long)items[5];
            io_stall_queued_read_ms = (long)items[6];
            num_of_writes = (long)items[7];
            num_of_bytes_written = (long)items[8];
            io_stall_write_ms = (long)items[9];
            io_stall_queued_write_ms = (long)items[10];
            io_stall = (long)items[11];
            size_on_disk_bytes = (long)items[12];
            file_handle = (Byte[])items[13];
        }

        public dm_io_virtual_file_statsResult(short database_id, short file_id, int sample_ms, long num_of_reads, long num_of_bytes_read, long io_stall_read_ms, long io_stall_queued_read_ms, long num_of_writes, long num_of_bytes_written, long io_stall_write_ms, long io_stall_queued_write_ms, long io_stall, long size_on_disk_bytes, Byte[] file_handle)
        {
            this.database_id = database_id;
            this.file_id = file_id;
            this.sample_ms = sample_ms;
            this.num_of_reads = num_of_reads;
            this.num_of_bytes_read = num_of_bytes_read;
            this.io_stall_read_ms = io_stall_read_ms;
            this.io_stall_queued_read_ms = io_stall_queued_read_ms;
            this.num_of_writes = num_of_writes;
            this.num_of_bytes_written = num_of_bytes_written;
            this.io_stall_write_ms = io_stall_write_ms;
            this.io_stall_queued_write_ms = io_stall_queued_write_ms;
            this.io_stall = io_stall;
            this.size_on_disk_bytes = size_on_disk_bytes;
            this.file_handle = file_handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, file_id, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, io_stall_queued_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms, io_stall_queued_write_ms, io_stall, size_on_disk_bytes, file_handle };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (short)items[0];
            file_id = (short)items[1];
            sample_ms = (int)items[2];
            num_of_reads = (long)items[3];
            num_of_bytes_read = (long)items[4];
            io_stall_read_ms = (long)items[5];
            io_stall_queued_read_ms = (long)items[6];
            num_of_writes = (long)items[7];
            num_of_bytes_written = (long)items[8];
            io_stall_write_ms = (long)items[9];
            io_stall_queued_write_ms = (long)items[10];
            io_stall = (long)items[11];
            size_on_disk_bytes = (long)items[12];
            file_handle = (Byte[])items[13];
        }
    }

    [SqlTableFunction("sys", "dm_io_virtual_file_stats")]
    public partial class dm_io_virtual_file_stats : SqlTableFunctionProxy<dm_io_virtual_file_stats, dm_io_virtual_file_statsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)]
        public int? FileId
        {
            get;
            set;
        }

        public dm_io_virtual_file_stats()
        {
        }

        public dm_io_virtual_file_stats(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }

        public dm_io_virtual_file_stats(int? DatabaseId, int? FileId)
        {
            this.DatabaseId = DatabaseId;
            this.FileId = FileId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, FileId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
            FileId = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logconsumer_cachebufferrefs")]
    public partial class dm_logconsumer_cachebufferrefsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("consumer_id", 2), SqlTypeFacets("bigint", false)]
        public long consumer_id
        {
            get;
            set;
        }

        [SqlColumn("start_log_block_id", 3), SqlTypeFacets("bigint", false)]
        public long start_log_block_id
        {
            get;
            set;
        }

        [SqlColumn("last_log_block_id", 4), SqlTypeFacets("bigint", false)]
        public long last_log_block_id
        {
            get;
            set;
        }

        [SqlColumn("shared", 5), SqlTypeFacets("tinyint", false)]
        public byte shared
        {
            get;
            set;
        }

        [SqlColumn("ref_counter", 6), SqlTypeFacets("smallint", false)]
        public short ref_counter
        {
            get;
            set;
        }

        [SqlColumn("cache_buffer", 7), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] cache_buffer
        {
            get;
            set;
        }

        public dm_logconsumer_cachebufferrefsResult()
        {
        }

        public dm_logconsumer_cachebufferrefsResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            consumer_id = (long)items[2];
            start_log_block_id = (long)items[3];
            last_log_block_id = (long)items[4];
            shared = (byte)items[5];
            ref_counter = (short)items[6];
            cache_buffer = (Byte[])items[7];
        }

        public dm_logconsumer_cachebufferrefsResult(int database_id, int recovery_unit_id, long consumer_id, long start_log_block_id, long last_log_block_id, byte shared, short ref_counter, Byte[] cache_buffer)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.consumer_id = consumer_id;
            this.start_log_block_id = start_log_block_id;
            this.last_log_block_id = last_log_block_id;
            this.shared = shared;
            this.ref_counter = ref_counter;
            this.cache_buffer = cache_buffer;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, consumer_id, start_log_block_id, last_log_block_id, shared, ref_counter, cache_buffer };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            consumer_id = (long)items[2];
            start_log_block_id = (long)items[3];
            last_log_block_id = (long)items[4];
            shared = (byte)items[5];
            ref_counter = (short)items[6];
            cache_buffer = (Byte[])items[7];
        }
    }

    [SqlTableFunction("sys", "dm_logconsumer_cachebufferrefs")]
    public partial class dm_logconsumer_cachebufferrefs : SqlTableFunctionProxy<dm_logconsumer_cachebufferrefs, dm_logconsumer_cachebufferrefsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        [SqlParameter("@ConsumerId", 1, false, false), SqlTypeFacets("bigint", true)]
        public long? ConsumerId
        {
            get;
            set;
        }

        public dm_logconsumer_cachebufferrefs()
        {
        }

        public dm_logconsumer_cachebufferrefs(object[] items)
        {
            DatabaseId = (int?)items[0];
            ConsumerId = (long?)items[1];
        }

        public dm_logconsumer_cachebufferrefs(int? DatabaseId, long? ConsumerId)
        {
            this.DatabaseId = DatabaseId;
            this.ConsumerId = ConsumerId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId, ConsumerId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
            ConsumerId = (long?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_fts_index_keywords")]
    public partial class dm_fts_index_keywordsResult : SqlTabularProxy
    {
        [SqlColumn("keyword", 0), SqlTypeFacets("varbinary", false, 128)]
        public Byte[] keyword
        {
            get;
            set;
        }

        [SqlColumn("display_term", 1), SqlTypeFacets("nvarchar", false, 8000)]
        public string display_term
        {
            get;
            set;
        }

        [SqlColumn("column_id", 2), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("document_count", 3), SqlTypeFacets("bigint", true)]
        public long? document_count
        {
            get;
            set;
        }

        public dm_fts_index_keywordsResult()
        {
        }

        public dm_fts_index_keywordsResult(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_count = (long?)items[3];
        }

        public dm_fts_index_keywordsResult(Byte[] keyword, string display_term, int column_id, long? document_count)
        {
            this.keyword = keyword;
            this.display_term = display_term;
            this.column_id = column_id;
            this.document_count = document_count;
        }

        public override object[] GetItemArray()
        {
            return new object[] { keyword, display_term, column_id, document_count };
        }

        public override void SetItemArray(object[] items)
        {
            keyword = (Byte[])items[0];
            display_term = (string)items[1];
            column_id = (int)items[2];
            document_count = (long?)items[3];
        }
    }

    [SqlTableFunction("sys", "dm_fts_index_keywords")]
    public partial class dm_fts_index_keywords : SqlTableFunctionProxy<dm_fts_index_keywords, dm_fts_index_keywordsResult>
    {
        [SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)]
        public int? dbid
        {
            get;
            set;
        }

        [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)]
        public int? objid
        {
            get;
            set;
        }

        public dm_fts_index_keywords()
        {
        }

        public dm_fts_index_keywords(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }

        public dm_fts_index_keywords(int? dbid, int? objid)
        {
            this.dbid = dbid;
            this.objid = objid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { dbid, objid };
        }

        public override void SetItemArray(object[] items)
        {
            dbid = (int?)items[0];
            objid = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_sqlagent_jobs")]
    public partial class fn_sqlagent_jobsResult : SqlTabularProxy
    {
        [SqlColumn("job_id", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid job_id
        {
            get;
            set;
        }

        [SqlColumn("name", 1), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("enabled", 2), SqlTypeFacets("bit", false)]
        public bool enabled
        {
            get;
            set;
        }

        [SqlColumn("description", 3), SqlTypeFacets("nvarchar", true, 1024)]
        public string description
        {
            get;
            set;
        }

        [SqlColumn("start_step_id", 4), SqlTypeFacets("int", false)]
        public int start_step_id
        {
            get;
            set;
        }

        [SqlColumn("notify_level_eventlog", 5), SqlTypeFacets("bit", false)]
        public bool notify_level_eventlog
        {
            get;
            set;
        }

        [SqlColumn("delete_level", 6), SqlTypeFacets("int", false)]
        public int delete_level
        {
            get;
            set;
        }

        [SqlColumn("date_created", 7), SqlTypeFacets("datetime", false)]
        public DateTime date_created
        {
            get;
            set;
        }

        [SqlColumn("date_modified", 8), SqlTypeFacets("datetime", false)]
        public DateTime date_modified
        {
            get;
            set;
        }

        public fn_sqlagent_jobsResult()
        {
        }

        public fn_sqlagent_jobsResult(object[] items)
        {
            job_id = (Guid)items[0];
            name = (string)items[1];
            enabled = (bool)items[2];
            description = (string)items[3];
            start_step_id = (int)items[4];
            notify_level_eventlog = (bool)items[5];
            delete_level = (int)items[6];
            date_created = (DateTime)items[7];
            date_modified = (DateTime)items[8];
        }

        public fn_sqlagent_jobsResult(Guid job_id, string name, bool enabled, string description, int start_step_id, bool notify_level_eventlog, int delete_level, DateTime date_created, DateTime date_modified)
        {
            this.job_id = job_id;
            this.name = name;
            this.enabled = enabled;
            this.description = description;
            this.start_step_id = start_step_id;
            this.notify_level_eventlog = notify_level_eventlog;
            this.delete_level = delete_level;
            this.date_created = date_created;
            this.date_modified = date_modified;
        }

        public override object[] GetItemArray()
        {
            return new object[] { job_id, name, enabled, description, start_step_id, notify_level_eventlog, delete_level, date_created, date_modified };
        }

        public override void SetItemArray(object[] items)
        {
            job_id = (Guid)items[0];
            name = (string)items[1];
            enabled = (bool)items[2];
            description = (string)items[3];
            start_step_id = (int)items[4];
            notify_level_eventlog = (bool)items[5];
            delete_level = (int)items[6];
            date_created = (DateTime)items[7];
            date_modified = (DateTime)items[8];
        }
    }

    [SqlTableFunction("sys", "fn_sqlagent_jobs")]
    public partial class fn_sqlagent_jobs : SqlTableFunctionProxy<fn_sqlagent_jobs, fn_sqlagent_jobsResult>
    {
        [SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? job_id
        {
            get;
            set;
        }

        public fn_sqlagent_jobs()
        {
        }

        public fn_sqlagent_jobs(object[] items)
        {
            job_id = (Guid?)items[0];
        }

        public fn_sqlagent_jobs(Guid? job_id)
        {
            this.job_id = job_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { job_id };
        }

        public override void SetItemArray(object[] items)
        {
            job_id = (Guid?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_cursors")]
    public partial class dm_exec_cursorsResult : SqlTabularProxy
    {
        [SqlColumn("session_id", 0), SqlTypeFacets("int", false)]
        public int session_id
        {
            get;
            set;
        }

        [SqlColumn("cursor_id", 1), SqlTypeFacets("int", false)]
        public int cursor_id
        {
            get;
            set;
        }

        [SqlColumn("name", 2), SqlTypeFacets("nvarchar", true, 256)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("properties", 3), SqlTypeFacets("nvarchar", false, 256)]
        public string properties
        {
            get;
            set;
        }

        [SqlColumn("sql_handle", 4), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_start_offset", 5), SqlTypeFacets("int", false)]
        public int statement_start_offset
        {
            get;
            set;
        }

        [SqlColumn("statement_end_offset", 6), SqlTypeFacets("int", false)]
        public int statement_end_offset
        {
            get;
            set;
        }

        [SqlColumn("plan_generation_num", 7), SqlTypeFacets("bigint", false)]
        public long plan_generation_num
        {
            get;
            set;
        }

        [SqlColumn("creation_time", 8), SqlTypeFacets("datetime", false)]
        public DateTime creation_time
        {
            get;
            set;
        }

        [SqlColumn("is_open", 9), SqlTypeFacets("bit", false)]
        public bool is_open
        {
            get;
            set;
        }

        [SqlColumn("is_async_population", 10), SqlTypeFacets("bit", false)]
        public bool is_async_population
        {
            get;
            set;
        }

        [SqlColumn("is_close_on_commit", 11), SqlTypeFacets("bit", false)]
        public bool is_close_on_commit
        {
            get;
            set;
        }

        [SqlColumn("fetch_status", 12), SqlTypeFacets("int", false)]
        public int fetch_status
        {
            get;
            set;
        }

        [SqlColumn("fetch_buffer_size", 13), SqlTypeFacets("int", false)]
        public int fetch_buffer_size
        {
            get;
            set;
        }

        [SqlColumn("fetch_buffer_start", 14), SqlTypeFacets("int", false)]
        public int fetch_buffer_start
        {
            get;
            set;
        }

        [SqlColumn("ansi_position", 15), SqlTypeFacets("int", false)]
        public int ansi_position
        {
            get;
            set;
        }

        [SqlColumn("worker_time", 16), SqlTypeFacets("bigint", false)]
        public long worker_time
        {
            get;
            set;
        }

        [SqlColumn("reads", 17), SqlTypeFacets("bigint", false)]
        public long reads
        {
            get;
            set;
        }

        [SqlColumn("writes", 18), SqlTypeFacets("bigint", false)]
        public long writes
        {
            get;
            set;
        }

        [SqlColumn("dormant_duration", 19), SqlTypeFacets("bigint", false)]
        public long dormant_duration
        {
            get;
            set;
        }

        [SqlColumn("statement_sql_handle", 20), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] statement_sql_handle
        {
            get;
            set;
        }

        [SqlColumn("statement_context_id", 21), SqlTypeFacets("bigint", true)]
        public long? statement_context_id
        {
            get;
            set;
        }

        public dm_exec_cursorsResult()
        {
        }

        public dm_exec_cursorsResult(object[] items)
        {
            session_id = (int)items[0];
            cursor_id = (int)items[1];
            name = (string)items[2];
            properties = (string)items[3];
            sql_handle = (Byte[])items[4];
            statement_start_offset = (int)items[5];
            statement_end_offset = (int)items[6];
            plan_generation_num = (long)items[7];
            creation_time = (DateTime)items[8];
            is_open = (bool)items[9];
            is_async_population = (bool)items[10];
            is_close_on_commit = (bool)items[11];
            fetch_status = (int)items[12];
            fetch_buffer_size = (int)items[13];
            fetch_buffer_start = (int)items[14];
            ansi_position = (int)items[15];
            worker_time = (long)items[16];
            reads = (long)items[17];
            writes = (long)items[18];
            dormant_duration = (long)items[19];
            statement_sql_handle = (Byte[])items[20];
            statement_context_id = (long?)items[21];
        }

        public dm_exec_cursorsResult(int session_id, int cursor_id, string name, string properties, Byte[] sql_handle, int statement_start_offset, int statement_end_offset, long plan_generation_num, DateTime creation_time, bool is_open, bool is_async_population, bool is_close_on_commit, int fetch_status, int fetch_buffer_size, int fetch_buffer_start, int ansi_position, long worker_time, long reads, long writes, long dormant_duration, Byte[] statement_sql_handle, long? statement_context_id)
        {
            this.session_id = session_id;
            this.cursor_id = cursor_id;
            this.name = name;
            this.properties = properties;
            this.sql_handle = sql_handle;
            this.statement_start_offset = statement_start_offset;
            this.statement_end_offset = statement_end_offset;
            this.plan_generation_num = plan_generation_num;
            this.creation_time = creation_time;
            this.is_open = is_open;
            this.is_async_population = is_async_population;
            this.is_close_on_commit = is_close_on_commit;
            this.fetch_status = fetch_status;
            this.fetch_buffer_size = fetch_buffer_size;
            this.fetch_buffer_start = fetch_buffer_start;
            this.ansi_position = ansi_position;
            this.worker_time = worker_time;
            this.reads = reads;
            this.writes = writes;
            this.dormant_duration = dormant_duration;
            this.statement_sql_handle = statement_sql_handle;
            this.statement_context_id = statement_context_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { session_id, cursor_id, name, properties, sql_handle, statement_start_offset, statement_end_offset, plan_generation_num, creation_time, is_open, is_async_population, is_close_on_commit, fetch_status, fetch_buffer_size, fetch_buffer_start, ansi_position, worker_time, reads, writes, dormant_duration, statement_sql_handle, statement_context_id };
        }

        public override void SetItemArray(object[] items)
        {
            session_id = (int)items[0];
            cursor_id = (int)items[1];
            name = (string)items[2];
            properties = (string)items[3];
            sql_handle = (Byte[])items[4];
            statement_start_offset = (int)items[5];
            statement_end_offset = (int)items[6];
            plan_generation_num = (long)items[7];
            creation_time = (DateTime)items[8];
            is_open = (bool)items[9];
            is_async_population = (bool)items[10];
            is_close_on_commit = (bool)items[11];
            fetch_status = (int)items[12];
            fetch_buffer_size = (int)items[13];
            fetch_buffer_start = (int)items[14];
            ansi_position = (int)items[15];
            worker_time = (long)items[16];
            reads = (long)items[17];
            writes = (long)items[18];
            dormant_duration = (long)items[19];
            statement_sql_handle = (Byte[])items[20];
            statement_context_id = (long?)items[21];
        }
    }

    [SqlTableFunction("sys", "dm_exec_cursors")]
    public partial class dm_exec_cursors : SqlTableFunctionProxy<dm_exec_cursors, dm_exec_cursorsResult>
    {
        [SqlParameter("@spid", 0, false, false), SqlTypeFacets("int", true)]
        public int? spid
        {
            get;
            set;
        }

        public dm_exec_cursors()
        {
        }

        public dm_exec_cursors(object[] items)
        {
            spid = (int?)items[0];
        }

        public dm_exec_cursors(int? spid)
        {
            this.spid = spid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { spid };
        }

        public override void SetItemArray(object[] items)
        {
            spid = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_helpcollations")]
    public partial class fn_helpcollationsResult : SqlTabularProxy
    {
        [SqlColumn("name", 0), SqlTypeFacets("sysname", false)]
        public string name
        {
            get;
            set;
        }

        [SqlColumn("description", 1), SqlTypeFacets("nvarchar", false, 2000)]
        public string description
        {
            get;
            set;
        }

        public fn_helpcollationsResult()
        {
        }

        public fn_helpcollationsResult(object[] items)
        {
            name = (string)items[0];
            description = (string)items[1];
        }

        public fn_helpcollationsResult(string name, string description)
        {
            this.name = name;
            this.description = description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { name, description };
        }

        public override void SetItemArray(object[] items)
        {
            name = (string)items[0];
            description = (string)items[1];
        }
    }

    [SqlTableFunction("sys", "fn_helpcollations")]
    public partial class fn_helpcollations : SqlTableFunctionProxy<fn_helpcollations, fn_helpcollationsResult>
    {
        public fn_helpcollations()
        {
        }
    }

    [SqlTableFunctionResult("sys", "fn_dblog")]
    public partial class fn_dblogResult : SqlTabularProxy
    {
        [SqlColumn("Num Elements", 18), SqlTypeFacets("smallint", true)]
        public short? Num_Elements
        {
            get;
            set;
        }

        [SqlColumn("Offset in Row", 19), SqlTypeFacets("smallint", true)]
        public short? Offset_in_Row
        {
            get;
            set;
        }

        [SqlColumn("Modify Size", 20), SqlTypeFacets("smallint", true)]
        public short? Modify_Size
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint Begin", 21), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_Begin
        {
            get;
            set;
        }

        [SqlColumn("CHKPT Begin DB Version", 22), SqlTypeFacets("smallint", true)]
        public short? CHKPT_Begin_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Max XDESID", 23), SqlTypeFacets("nvarchar", true, 28)]
        public string Max_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Num Transactions", 24), SqlTypeFacets("smallint", true)]
        public short? Num_Transactions
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint End", 25), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_End
        {
            get;
            set;
        }

        [SqlColumn("CHKPT End DB Version", 26), SqlTypeFacets("smallint", true)]
        public short? CHKPT_End_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Minimum LSN", 27), SqlTypeFacets("nvarchar", true, 46)]
        public string Minimum_LSN
        {
            get;
            set;
        }

        [SqlColumn("Dirty Pages", 28), SqlTypeFacets("int", true)]
        public int? Dirty_Pages
        {
            get;
            set;
        }

        [SqlColumn("Oldest Replicated Begin LSN", 29), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Replicated_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Next Replicated End LSN", 30), SqlTypeFacets("nvarchar", true, 46)]
        public string Next_Replicated_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed Backup End LSN", 31), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_Backup_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed End LSN", 32), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Min Hold LSN", 33), SqlTypeFacets("nvarchar", true, 46)]
        public string Repl_Min_Hold_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server UID", 34), SqlTypeFacets("int", true)]
        public int? Server_UID
        {
            get;
            set;
        }

        [SqlColumn("SPID", 35), SqlTypeFacets("int", true)]
        public int? SPID
        {
            get;
            set;
        }

        [SqlColumn("Beginlog Status", 36), SqlTypeFacets("binary", true, 4)]
        public Byte[] Beginlog_Status
        {
            get;
            set;
        }

        [SqlColumn("Xact Type", 37), SqlTypeFacets("int", true)]
        public int? Xact_Type
        {
            get;
            set;
        }

        [SqlColumn("Begin Time", 38), SqlTypeFacets("nvarchar", true, 48)]
        public string Begin_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Name", 39), SqlTypeFacets("nvarchar", true, 66)]
        public string Transaction_Name
        {
            get;
            set;
        }

        [SqlColumn("Transaction SID", 40), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] Transaction_SID
        {
            get;
            set;
        }

        [SqlColumn("Parent Transaction ID", 41), SqlTypeFacets("nvarchar", true, 28)]
        public string Parent_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active Transaction ID", 42), SqlTypeFacets("nvarchar", true, 28)]
        public string Oldest_Active_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact ID", 43), SqlTypeFacets("bigint", true)]
        public long? Xact_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node ID", 44), SqlTypeFacets("int", true)]
        public int? Xact_Node_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node Local ID", 45), SqlTypeFacets("int", true)]
        public int? Xact_Node_Local_ID
        {
            get;
            set;
        }

        [SqlColumn("End AGE", 46), SqlTypeFacets("bigint", true)]
        public long? End_AGE
        {
            get;
            set;
        }

        [SqlColumn("End Time", 47), SqlTypeFacets("nvarchar", true, 48)]
        public string End_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Begin", 48), SqlTypeFacets("nvarchar", true, 46)]
        public string Transaction_Begin
        {
            get;
            set;
        }

        [SqlColumn("Replicated Records", 49), SqlTypeFacets("bigint", true)]
        public long? Replicated_Records
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active LSN", 50), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Active_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server Name", 51), SqlTypeFacets("nvarchar", true, 258)]
        public string Server_Name
        {
            get;
            set;
        }

        [SqlColumn("Database Name", 52), SqlTypeFacets("nvarchar", true, 258)]
        public string Database_Name
        {
            get;
            set;
        }

        [SqlColumn("Mark Name", 53), SqlTypeFacets("nvarchar", true, 66)]
        public string Mark_Name
        {
            get;
            set;
        }

        [SqlColumn("Repl Partition ID", 54), SqlTypeFacets("int", true)]
        public int? Repl_Partition_ID
        {
            get;
            set;
        }

        [SqlColumn("Repl Epoch", 55), SqlTypeFacets("int", true)]
        public int? Repl_Epoch
        {
            get;
            set;
        }

        [SqlColumn("Repl CSN", 56), SqlTypeFacets("bigint", true)]
        public long? Repl_CSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Flags", 57), SqlTypeFacets("int", true)]
        public int? Repl_Flags
        {
            get;
            set;
        }

        [SqlColumn("Repl Msg", 58), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Repl_Msg
        {
            get;
            set;
        }

        [SqlColumn("Repl Source Commit Time", 59), SqlTypeFacets("nvarchar", true, 48)]
        public string Repl_Source_Commit_Time
        {
            get;
            set;
        }

        [SqlColumn("Master XDESID", 60), SqlTypeFacets("nvarchar", true, 28)]
        public string Master_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Master DBID", 61), SqlTypeFacets("int", true)]
        public int? Master_DBID
        {
            get;
            set;
        }

        [SqlColumn("Preplog Begin LSN", 62), SqlTypeFacets("nvarchar", true, 46)]
        public string Preplog_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Prepare Time", 63), SqlTypeFacets("nvarchar", true, 48)]
        public string Prepare_Time
        {
            get;
            set;
        }

        [SqlColumn("Virtual Clock", 64), SqlTypeFacets("bigint", true)]
        public long? Virtual_Clock
        {
            get;
            set;
        }

        [SqlColumn("Previous Savepoint", 65), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Savepoint
        {
            get;
            set;
        }

        [SqlColumn("Savepoint Name", 66), SqlTypeFacets("nvarchar", true, 66)]
        public string Savepoint_Name
        {
            get;
            set;
        }

        [SqlColumn("Rowbits First Bit", 67), SqlTypeFacets("smallint", true)]
        public short? Rowbits_First_Bit
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Count", 68), SqlTypeFacets("smallint", true)]
        public short? Rowbits_Bit_Count
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Value", 69), SqlTypeFacets("binary", true, 1)]
        public Byte[] Rowbits_Bit_Value
        {
            get;
            set;
        }

        [SqlColumn("Number of Locks", 70), SqlTypeFacets("smallint", true)]
        public short? Number_of_Locks
        {
            get;
            set;
        }

        [SqlColumn("Lock Information", 71), SqlTypeFacets("nvarchar", true, 512)]
        public string Lock_Information
        {
            get;
            set;
        }

        [SqlColumn("LSN before writes", 72), SqlTypeFacets("nvarchar", true, 46)]
        public string LSN_before_writes
        {
            get;
            set;
        }

        [SqlColumn("Pages Written", 73), SqlTypeFacets("smallint", true)]
        public short? Pages_Written
        {
            get;
            set;
        }

        [SqlColumn("Command Type", 74), SqlTypeFacets("int", true)]
        public int? Command_Type
        {
            get;
            set;
        }

        [SqlColumn("Publication ID", 75), SqlTypeFacets("int", true)]
        public int? Publication_ID
        {
            get;
            set;
        }

        [SqlColumn("Article ID", 76), SqlTypeFacets("int", true)]
        public int? Article_ID
        {
            get;
            set;
        }

        [SqlColumn("Partial Status", 77), SqlTypeFacets("int", true)]
        public int? Partial_Status
        {
            get;
            set;
        }

        [SqlColumn("Command", 78), SqlTypeFacets("nvarchar", true, 52)]
        public string Command
        {
            get;
            set;
        }

        [SqlColumn("Byte Offset", 79), SqlTypeFacets("smallint", true)]
        public short? Byte_Offset
        {
            get;
            set;
        }

        [SqlColumn("New Value", 80), SqlTypeFacets("binary", true, 1)]
        public Byte[] New_Value
        {
            get;
            set;
        }

        [SqlColumn("Old Value", 81), SqlTypeFacets("binary", true, 1)]
        public Byte[] Old_Value
        {
            get;
            set;
        }

        [SqlColumn("New Split Page", 82), SqlTypeFacets("nvarchar", true, 28)]
        public string New_Split_Page
        {
            get;
            set;
        }

        [SqlColumn("Rows Deleted", 83), SqlTypeFacets("smallint", true)]
        public short? Rows_Deleted
        {
            get;
            set;
        }

        [SqlColumn("Bytes Freed", 84), SqlTypeFacets("smallint", true)]
        public short? Bytes_Freed
        {
            get;
            set;
        }

        [SqlColumn("CI Table Id", 85), SqlTypeFacets("int", true)]
        public int? CI_Table_Id
        {
            get;
            set;
        }

        [SqlColumn("CI Index Id", 86), SqlTypeFacets("smallint", true)]
        public short? CI_Index_Id
        {
            get;
            set;
        }

        [SqlColumn("NewAllocUnitId", 87), SqlTypeFacets("bigint", true)]
        public long? NewAllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("FileGroup ID", 88), SqlTypeFacets("smallint", true)]
        public short? FileGroup_ID
        {
            get;
            set;
        }

        [SqlColumn("Meta Status", 89), SqlTypeFacets("binary", true, 4)]
        public Byte[] Meta_Status
        {
            get;
            set;
        }

        [SqlColumn("File Status", 90), SqlTypeFacets("binary", true, 4)]
        public Byte[] File_Status
        {
            get;
            set;
        }

        [SqlColumn("File ID", 91), SqlTypeFacets("smallint", true)]
        public short? File_ID
        {
            get;
            set;
        }

        [SqlColumn("Physical Name", 92), SqlTypeFacets("nvarchar", true, 522)]
        public string Physical_Name
        {
            get;
            set;
        }

        [SqlColumn("Logical Name", 93), SqlTypeFacets("nvarchar", true, 258)]
        public string Logical_Name
        {
            get;
            set;
        }

        [SqlColumn("Format LSN", 94), SqlTypeFacets("nvarchar", true, 46)]
        public string Format_LSN
        {
            get;
            set;
        }

        [SqlColumn("RowsetId", 95), SqlTypeFacets("bigint", true)]
        public long? RowsetId
        {
            get;
            set;
        }

        [SqlColumn("TextPtr", 96), SqlTypeFacets("binary", true, 16)]
        public Byte[] TextPtr
        {
            get;
            set;
        }

        [SqlColumn("Column Offset", 97), SqlTypeFacets("int", true)]
        public int? Column_Offset
        {
            get;
            set;
        }

        [SqlColumn("Flags", 98), SqlTypeFacets("int", true)]
        public int? Flags
        {
            get;
            set;
        }

        [SqlColumn("Text Size", 99), SqlTypeFacets("bigint", true)]
        public long? Text_Size
        {
            get;
            set;
        }

        [SqlColumn("Offset", 100), SqlTypeFacets("bigint", true)]
        public long? Offset
        {
            get;
            set;
        }

        [SqlColumn("Old Size", 101), SqlTypeFacets("bigint", true)]
        public long? Old_Size
        {
            get;
            set;
        }

        [SqlColumn("New Size", 102), SqlTypeFacets("bigint", true)]
        public long? New_Size
        {
            get;
            set;
        }

        [SqlColumn("Description", 103), SqlTypeFacets("nvarchar", false, 512)]
        public string Description
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent count", 104), SqlTypeFacets("int", true)]
        public int? Bulk_allocated_extent_count
        {
            get;
            set;
        }

        [SqlColumn("Bulk RowsetId", 105), SqlTypeFacets("bigint", true)]
        public long? Bulk_RowsetId
        {
            get;
            set;
        }

        [SqlColumn("Bulk AllocUnitId", 106), SqlTypeFacets("bigint", true)]
        public long? Bulk_AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocation first IAM Page ID", 107), SqlTypeFacets("nvarchar", true, 28)]
        public string Bulk_allocation_first_IAM_Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent ids", 108), SqlTypeFacets("nvarchar", true, 1922)]
        public string Bulk_allocated_extent_ids
        {
            get;
            set;
        }

        [SqlColumn("VLFs added", 109), SqlTypeFacets("nvarchar", true, 1376)]
        public string VLFs_added
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache Id", 110), SqlTypeFacets("int", true)]
        public int? InvalidateCache_Id
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache keys", 111), SqlTypeFacets("nvarchar", true, 512)]
        public string InvalidateCache_keys
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page Id", 112), SqlTypeFacets("nvarchar", true, 28)]
        public string CopyVerionInfo_Source_Page_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page LSN", 113), SqlTypeFacets("nvarchar", true, 46)]
        public string CopyVerionInfo_Source_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Id", 114), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Count", 115), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Count
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 0", 116), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_0
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 1", 117), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_1
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 2", 118), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_2
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 3", 119), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_3
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 4", 120), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_4
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 5", 121), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_5
        {
            get;
            set;
        }

        [SqlColumn("Compression Log Type", 122), SqlTypeFacets("smallint", true)]
        public short? Compression_Log_Type
        {
            get;
            set;
        }

        [SqlColumn("Compression Info", 123), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Compression_Info
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageType", 124), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageType
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageFlags", 125), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageFlags
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageLevel", 126), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageLevel
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageStat", 127), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageStat
        {
            get;
            set;
        }

        [SqlColumn("PageFormat FormatOption", 128), SqlTypeFacets("smallint", true)]
        public short? PageFormat_FormatOption
        {
            get;
            set;
        }

        [SqlColumn("Log Record", 129), SqlTypeFacets("varbinary", false, 8000)]
        public Byte[] Log_Record
        {
            get;
            set;
        }

        [SqlColumn("Current LSN", 0), SqlTypeFacets("nvarchar", false, 46)]
        public string Current_LSN
        {
            get;
            set;
        }

        [SqlColumn("Operation", 1), SqlTypeFacets("nvarchar", false, 62)]
        public string Operation
        {
            get;
            set;
        }

        [SqlColumn("Context", 2), SqlTypeFacets("nvarchar", false, 62)]
        public string Context
        {
            get;
            set;
        }

        [SqlColumn("Transaction ID", 3), SqlTypeFacets("nvarchar", false, 28)]
        public string Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("LogBlockGeneration", 4), SqlTypeFacets("bigint", false)]
        public long LogBlockGeneration
        {
            get;
            set;
        }

        [SqlColumn("Tag Bits", 5), SqlTypeFacets("binary", false, 2)]
        public Byte[] Tag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Record Fixed Length", 6), SqlTypeFacets("smallint", false)]
        public short Log_Record_Fixed_Length
        {
            get;
            set;
        }

        [SqlColumn("Log Record Length", 7), SqlTypeFacets("smallint", false)]
        public short Log_Record_Length
        {
            get;
            set;
        }

        [SqlColumn("Previous LSN", 8), SqlTypeFacets("nvarchar", false, 46)]
        public string Previous_LSN
        {
            get;
            set;
        }

        [SqlColumn("Flag Bits", 9), SqlTypeFacets("binary", false, 2)]
        public Byte[] Flag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Reserve", 10), SqlTypeFacets("int", false)]
        public int Log_Reserve
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitId", 11), SqlTypeFacets("bigint", true)]
        public long? AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitName", 12), SqlTypeFacets("nvarchar", true, 774)]
        public string AllocUnitName
        {
            get;
            set;
        }

        [SqlColumn("Page ID", 13), SqlTypeFacets("nvarchar", true, 28)]
        public string Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Slot ID", 14), SqlTypeFacets("int", true)]
        public int? Slot_ID
        {
            get;
            set;
        }

        [SqlColumn("Previous Page LSN", 15), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("PartitionId", 16), SqlTypeFacets("bigint", true)]
        public long? PartitionId
        {
            get;
            set;
        }

        [SqlColumn("RowFlags", 17), SqlTypeFacets("smallint", true)]
        public short? RowFlags
        {
            get;
            set;
        }

        public fn_dblogResult()
        {
        }

        public fn_dblogResult(object[] items)
        {
            Num_Elements = (short?)items[0];
            Offset_in_Row = (short?)items[1];
            Modify_Size = (short?)items[2];
            Checkpoint_Begin = (string)items[3];
            CHKPT_Begin_DB_Version = (short?)items[4];
            Max_XDESID = (string)items[5];
            Num_Transactions = (short?)items[6];
            Checkpoint_End = (string)items[7];
            CHKPT_End_DB_Version = (short?)items[8];
            Minimum_LSN = (string)items[9];
            Dirty_Pages = (int?)items[10];
            Oldest_Replicated_Begin_LSN = (string)items[11];
            Next_Replicated_End_LSN = (string)items[12];
            Last_Distributed_Backup_End_LSN = (string)items[13];
            Last_Distributed_End_LSN = (string)items[14];
            Repl_Min_Hold_LSN = (string)items[15];
            Server_UID = (int?)items[16];
            SPID = (int?)items[17];
            Beginlog_Status = (Byte[])items[18];
            Xact_Type = (int?)items[19];
            Begin_Time = (string)items[20];
            Transaction_Name = (string)items[21];
            Transaction_SID = (Byte[])items[22];
            Parent_Transaction_ID = (string)items[23];
            Oldest_Active_Transaction_ID = (string)items[24];
            Xact_ID = (long?)items[25];
            Xact_Node_ID = (int?)items[26];
            Xact_Node_Local_ID = (int?)items[27];
            End_AGE = (long?)items[28];
            End_Time = (string)items[29];
            Transaction_Begin = (string)items[30];
            Replicated_Records = (long?)items[31];
            Oldest_Active_LSN = (string)items[32];
            Server_Name = (string)items[33];
            Database_Name = (string)items[34];
            Mark_Name = (string)items[35];
            Repl_Partition_ID = (int?)items[36];
            Repl_Epoch = (int?)items[37];
            Repl_CSN = (long?)items[38];
            Repl_Flags = (int?)items[39];
            Repl_Msg = (Byte[])items[40];
            Repl_Source_Commit_Time = (string)items[41];
            Master_XDESID = (string)items[42];
            Master_DBID = (int?)items[43];
            Preplog_Begin_LSN = (string)items[44];
            Prepare_Time = (string)items[45];
            Virtual_Clock = (long?)items[46];
            Previous_Savepoint = (string)items[47];
            Savepoint_Name = (string)items[48];
            Rowbits_First_Bit = (short?)items[49];
            Rowbits_Bit_Count = (short?)items[50];
            Rowbits_Bit_Value = (Byte[])items[51];
            Number_of_Locks = (short?)items[52];
            Lock_Information = (string)items[53];
            LSN_before_writes = (string)items[54];
            Pages_Written = (short?)items[55];
            Command_Type = (int?)items[56];
            Publication_ID = (int?)items[57];
            Article_ID = (int?)items[58];
            Partial_Status = (int?)items[59];
            Command = (string)items[60];
            Byte_Offset = (short?)items[61];
            New_Value = (Byte[])items[62];
            Old_Value = (Byte[])items[63];
            New_Split_Page = (string)items[64];
            Rows_Deleted = (short?)items[65];
            Bytes_Freed = (short?)items[66];
            CI_Table_Id = (int?)items[67];
            CI_Index_Id = (short?)items[68];
            NewAllocUnitId = (long?)items[69];
            FileGroup_ID = (short?)items[70];
            Meta_Status = (Byte[])items[71];
            File_Status = (Byte[])items[72];
            File_ID = (short?)items[73];
            Physical_Name = (string)items[74];
            Logical_Name = (string)items[75];
            Format_LSN = (string)items[76];
            RowsetId = (long?)items[77];
            TextPtr = (Byte[])items[78];
            Column_Offset = (int?)items[79];
            Flags = (int?)items[80];
            Text_Size = (long?)items[81];
            Offset = (long?)items[82];
            Old_Size = (long?)items[83];
            New_Size = (long?)items[84];
            Description = (string)items[85];
            Bulk_allocated_extent_count = (int?)items[86];
            Bulk_RowsetId = (long?)items[87];
            Bulk_AllocUnitId = (long?)items[88];
            Bulk_allocation_first_IAM_Page_ID = (string)items[89];
            Bulk_allocated_extent_ids = (string)items[90];
            VLFs_added = (string)items[91];
            InvalidateCache_Id = (int?)items[92];
            InvalidateCache_keys = (string)items[93];
            CopyVerionInfo_Source_Page_Id = (string)items[94];
            CopyVerionInfo_Source_Page_LSN = (string)items[95];
            CopyVerionInfo_Source_Slot_Id = (int?)items[96];
            CopyVerionInfo_Source_Slot_Count = (int?)items[97];
            RowLog_Contents_0 = (Byte[])items[98];
            RowLog_Contents_1 = (Byte[])items[99];
            RowLog_Contents_2 = (Byte[])items[100];
            RowLog_Contents_3 = (Byte[])items[101];
            RowLog_Contents_4 = (Byte[])items[102];
            RowLog_Contents_5 = (Byte[])items[103];
            Compression_Log_Type = (short?)items[104];
            Compression_Info = (Byte[])items[105];
            PageFormat_PageType = (short?)items[106];
            PageFormat_PageFlags = (short?)items[107];
            PageFormat_PageLevel = (short?)items[108];
            PageFormat_PageStat = (short?)items[109];
            PageFormat_FormatOption = (short?)items[110];
            Log_Record = (Byte[])items[111];
            Current_LSN = (string)items[112];
            Operation = (string)items[113];
            Context = (string)items[114];
            Transaction_ID = (string)items[115];
            LogBlockGeneration = (long)items[116];
            Tag_Bits = (Byte[])items[117];
            Log_Record_Fixed_Length = (short)items[118];
            Log_Record_Length = (short)items[119];
            Previous_LSN = (string)items[120];
            Flag_Bits = (Byte[])items[121];
            Log_Reserve = (int)items[122];
            AllocUnitId = (long?)items[123];
            AllocUnitName = (string)items[124];
            Page_ID = (string)items[125];
            Slot_ID = (int?)items[126];
            Previous_Page_LSN = (string)items[127];
            PartitionId = (long?)items[128];
            RowFlags = (short?)items[129];
        }

        public fn_dblogResult(short? Num_Elements, short? Offset_in_Row, short? Modify_Size, string Checkpoint_Begin, short? CHKPT_Begin_DB_Version, string Max_XDESID, short? Num_Transactions, string Checkpoint_End, short? CHKPT_End_DB_Version, string Minimum_LSN, int? Dirty_Pages, string Oldest_Replicated_Begin_LSN, string Next_Replicated_End_LSN, string Last_Distributed_Backup_End_LSN, string Last_Distributed_End_LSN, string Repl_Min_Hold_LSN, int? Server_UID, int? SPID, Byte[] Beginlog_Status, int? Xact_Type, string Begin_Time, string Transaction_Name, Byte[] Transaction_SID, string Parent_Transaction_ID, string Oldest_Active_Transaction_ID, long? Xact_ID, int? Xact_Node_ID, int? Xact_Node_Local_ID, long? End_AGE, string End_Time, string Transaction_Begin, long? Replicated_Records, string Oldest_Active_LSN, string Server_Name, string Database_Name, string Mark_Name, int? Repl_Partition_ID, int? Repl_Epoch, long? Repl_CSN, int? Repl_Flags, Byte[] Repl_Msg, string Repl_Source_Commit_Time, string Master_XDESID, int? Master_DBID, string Preplog_Begin_LSN, string Prepare_Time, long? Virtual_Clock, string Previous_Savepoint, string Savepoint_Name, short? Rowbits_First_Bit, short? Rowbits_Bit_Count, Byte[] Rowbits_Bit_Value, short? Number_of_Locks, string Lock_Information, string LSN_before_writes, short? Pages_Written, int? Command_Type, int? Publication_ID, int? Article_ID, int? Partial_Status, string Command, short? Byte_Offset, Byte[] New_Value, Byte[] Old_Value, string New_Split_Page, short? Rows_Deleted, short? Bytes_Freed, int? CI_Table_Id, short? CI_Index_Id, long? NewAllocUnitId, short? FileGroup_ID, Byte[] Meta_Status, Byte[] File_Status, short? File_ID, string Physical_Name, string Logical_Name, string Format_LSN, long? RowsetId, Byte[] TextPtr, int? Column_Offset, int? Flags, long? Text_Size, long? Offset, long? Old_Size, long? New_Size, string Description, int? Bulk_allocated_extent_count, long? Bulk_RowsetId, long? Bulk_AllocUnitId, string Bulk_allocation_first_IAM_Page_ID, string Bulk_allocated_extent_ids, string VLFs_added, int? InvalidateCache_Id, string InvalidateCache_keys, string CopyVerionInfo_Source_Page_Id, string CopyVerionInfo_Source_Page_LSN, int? CopyVerionInfo_Source_Slot_Id, int? CopyVerionInfo_Source_Slot_Count, Byte[] RowLog_Contents_0, Byte[] RowLog_Contents_1, Byte[] RowLog_Contents_2, Byte[] RowLog_Contents_3, Byte[] RowLog_Contents_4, Byte[] RowLog_Contents_5, short? Compression_Log_Type, Byte[] Compression_Info, short? PageFormat_PageType, short? PageFormat_PageFlags, short? PageFormat_PageLevel, short? PageFormat_PageStat, short? PageFormat_FormatOption, Byte[] Log_Record, string Current_LSN, string Operation, string Context, string Transaction_ID, long LogBlockGeneration, Byte[] Tag_Bits, short Log_Record_Fixed_Length, short Log_Record_Length, string Previous_LSN, Byte[] Flag_Bits, int Log_Reserve, long? AllocUnitId, string AllocUnitName, string Page_ID, int? Slot_ID, string Previous_Page_LSN, long? PartitionId, short? RowFlags)
        {
            this.Num_Elements = Num_Elements;
            this.Offset_in_Row = Offset_in_Row;
            this.Modify_Size = Modify_Size;
            this.Checkpoint_Begin = Checkpoint_Begin;
            this.CHKPT_Begin_DB_Version = CHKPT_Begin_DB_Version;
            this.Max_XDESID = Max_XDESID;
            this.Num_Transactions = Num_Transactions;
            this.Checkpoint_End = Checkpoint_End;
            this.CHKPT_End_DB_Version = CHKPT_End_DB_Version;
            this.Minimum_LSN = Minimum_LSN;
            this.Dirty_Pages = Dirty_Pages;
            this.Oldest_Replicated_Begin_LSN = Oldest_Replicated_Begin_LSN;
            this.Next_Replicated_End_LSN = Next_Replicated_End_LSN;
            this.Last_Distributed_Backup_End_LSN = Last_Distributed_Backup_End_LSN;
            this.Last_Distributed_End_LSN = Last_Distributed_End_LSN;
            this.Repl_Min_Hold_LSN = Repl_Min_Hold_LSN;
            this.Server_UID = Server_UID;
            this.SPID = SPID;
            this.Beginlog_Status = Beginlog_Status;
            this.Xact_Type = Xact_Type;
            this.Begin_Time = Begin_Time;
            this.Transaction_Name = Transaction_Name;
            this.Transaction_SID = Transaction_SID;
            this.Parent_Transaction_ID = Parent_Transaction_ID;
            this.Oldest_Active_Transaction_ID = Oldest_Active_Transaction_ID;
            this.Xact_ID = Xact_ID;
            this.Xact_Node_ID = Xact_Node_ID;
            this.Xact_Node_Local_ID = Xact_Node_Local_ID;
            this.End_AGE = End_AGE;
            this.End_Time = End_Time;
            this.Transaction_Begin = Transaction_Begin;
            this.Replicated_Records = Replicated_Records;
            this.Oldest_Active_LSN = Oldest_Active_LSN;
            this.Server_Name = Server_Name;
            this.Database_Name = Database_Name;
            this.Mark_Name = Mark_Name;
            this.Repl_Partition_ID = Repl_Partition_ID;
            this.Repl_Epoch = Repl_Epoch;
            this.Repl_CSN = Repl_CSN;
            this.Repl_Flags = Repl_Flags;
            this.Repl_Msg = Repl_Msg;
            this.Repl_Source_Commit_Time = Repl_Source_Commit_Time;
            this.Master_XDESID = Master_XDESID;
            this.Master_DBID = Master_DBID;
            this.Preplog_Begin_LSN = Preplog_Begin_LSN;
            this.Prepare_Time = Prepare_Time;
            this.Virtual_Clock = Virtual_Clock;
            this.Previous_Savepoint = Previous_Savepoint;
            this.Savepoint_Name = Savepoint_Name;
            this.Rowbits_First_Bit = Rowbits_First_Bit;
            this.Rowbits_Bit_Count = Rowbits_Bit_Count;
            this.Rowbits_Bit_Value = Rowbits_Bit_Value;
            this.Number_of_Locks = Number_of_Locks;
            this.Lock_Information = Lock_Information;
            this.LSN_before_writes = LSN_before_writes;
            this.Pages_Written = Pages_Written;
            this.Command_Type = Command_Type;
            this.Publication_ID = Publication_ID;
            this.Article_ID = Article_ID;
            this.Partial_Status = Partial_Status;
            this.Command = Command;
            this.Byte_Offset = Byte_Offset;
            this.New_Value = New_Value;
            this.Old_Value = Old_Value;
            this.New_Split_Page = New_Split_Page;
            this.Rows_Deleted = Rows_Deleted;
            this.Bytes_Freed = Bytes_Freed;
            this.CI_Table_Id = CI_Table_Id;
            this.CI_Index_Id = CI_Index_Id;
            this.NewAllocUnitId = NewAllocUnitId;
            this.FileGroup_ID = FileGroup_ID;
            this.Meta_Status = Meta_Status;
            this.File_Status = File_Status;
            this.File_ID = File_ID;
            this.Physical_Name = Physical_Name;
            this.Logical_Name = Logical_Name;
            this.Format_LSN = Format_LSN;
            this.RowsetId = RowsetId;
            this.TextPtr = TextPtr;
            this.Column_Offset = Column_Offset;
            this.Flags = Flags;
            this.Text_Size = Text_Size;
            this.Offset = Offset;
            this.Old_Size = Old_Size;
            this.New_Size = New_Size;
            this.Description = Description;
            this.Bulk_allocated_extent_count = Bulk_allocated_extent_count;
            this.Bulk_RowsetId = Bulk_RowsetId;
            this.Bulk_AllocUnitId = Bulk_AllocUnitId;
            this.Bulk_allocation_first_IAM_Page_ID = Bulk_allocation_first_IAM_Page_ID;
            this.Bulk_allocated_extent_ids = Bulk_allocated_extent_ids;
            this.VLFs_added = VLFs_added;
            this.InvalidateCache_Id = InvalidateCache_Id;
            this.InvalidateCache_keys = InvalidateCache_keys;
            this.CopyVerionInfo_Source_Page_Id = CopyVerionInfo_Source_Page_Id;
            this.CopyVerionInfo_Source_Page_LSN = CopyVerionInfo_Source_Page_LSN;
            this.CopyVerionInfo_Source_Slot_Id = CopyVerionInfo_Source_Slot_Id;
            this.CopyVerionInfo_Source_Slot_Count = CopyVerionInfo_Source_Slot_Count;
            this.RowLog_Contents_0 = RowLog_Contents_0;
            this.RowLog_Contents_1 = RowLog_Contents_1;
            this.RowLog_Contents_2 = RowLog_Contents_2;
            this.RowLog_Contents_3 = RowLog_Contents_3;
            this.RowLog_Contents_4 = RowLog_Contents_4;
            this.RowLog_Contents_5 = RowLog_Contents_5;
            this.Compression_Log_Type = Compression_Log_Type;
            this.Compression_Info = Compression_Info;
            this.PageFormat_PageType = PageFormat_PageType;
            this.PageFormat_PageFlags = PageFormat_PageFlags;
            this.PageFormat_PageLevel = PageFormat_PageLevel;
            this.PageFormat_PageStat = PageFormat_PageStat;
            this.PageFormat_FormatOption = PageFormat_FormatOption;
            this.Log_Record = Log_Record;
            this.Current_LSN = Current_LSN;
            this.Operation = Operation;
            this.Context = Context;
            this.Transaction_ID = Transaction_ID;
            this.LogBlockGeneration = LogBlockGeneration;
            this.Tag_Bits = Tag_Bits;
            this.Log_Record_Fixed_Length = Log_Record_Fixed_Length;
            this.Log_Record_Length = Log_Record_Length;
            this.Previous_LSN = Previous_LSN;
            this.Flag_Bits = Flag_Bits;
            this.Log_Reserve = Log_Reserve;
            this.AllocUnitId = AllocUnitId;
            this.AllocUnitName = AllocUnitName;
            this.Page_ID = Page_ID;
            this.Slot_ID = Slot_ID;
            this.Previous_Page_LSN = Previous_Page_LSN;
            this.PartitionId = PartitionId;
            this.RowFlags = RowFlags;
        }

        public override object[] GetItemArray()
        {
            return new object[] { Num_Elements, Offset_in_Row, Modify_Size, Checkpoint_Begin, CHKPT_Begin_DB_Version, Max_XDESID, Num_Transactions, Checkpoint_End, CHKPT_End_DB_Version, Minimum_LSN, Dirty_Pages, Oldest_Replicated_Begin_LSN, Next_Replicated_End_LSN, Last_Distributed_Backup_End_LSN, Last_Distributed_End_LSN, Repl_Min_Hold_LSN, Server_UID, SPID, Beginlog_Status, Xact_Type, Begin_Time, Transaction_Name, Transaction_SID, Parent_Transaction_ID, Oldest_Active_Transaction_ID, Xact_ID, Xact_Node_ID, Xact_Node_Local_ID, End_AGE, End_Time, Transaction_Begin, Replicated_Records, Oldest_Active_LSN, Server_Name, Database_Name, Mark_Name, Repl_Partition_ID, Repl_Epoch, Repl_CSN, Repl_Flags, Repl_Msg, Repl_Source_Commit_Time, Master_XDESID, Master_DBID, Preplog_Begin_LSN, Prepare_Time, Virtual_Clock, Previous_Savepoint, Savepoint_Name, Rowbits_First_Bit, Rowbits_Bit_Count, Rowbits_Bit_Value, Number_of_Locks, Lock_Information, LSN_before_writes, Pages_Written, Command_Type, Publication_ID, Article_ID, Partial_Status, Command, Byte_Offset, New_Value, Old_Value, New_Split_Page, Rows_Deleted, Bytes_Freed, CI_Table_Id, CI_Index_Id, NewAllocUnitId, FileGroup_ID, Meta_Status, File_Status, File_ID, Physical_Name, Logical_Name, Format_LSN, RowsetId, TextPtr, Column_Offset, Flags, Text_Size, Offset, Old_Size, New_Size, Description, Bulk_allocated_extent_count, Bulk_RowsetId, Bulk_AllocUnitId, Bulk_allocation_first_IAM_Page_ID, Bulk_allocated_extent_ids, VLFs_added, InvalidateCache_Id, InvalidateCache_keys, CopyVerionInfo_Source_Page_Id, CopyVerionInfo_Source_Page_LSN, CopyVerionInfo_Source_Slot_Id, CopyVerionInfo_Source_Slot_Count, RowLog_Contents_0, RowLog_Contents_1, RowLog_Contents_2, RowLog_Contents_3, RowLog_Contents_4, RowLog_Contents_5, Compression_Log_Type, Compression_Info, PageFormat_PageType, PageFormat_PageFlags, PageFormat_PageLevel, PageFormat_PageStat, PageFormat_FormatOption, Log_Record, Current_LSN, Operation, Context, Transaction_ID, LogBlockGeneration, Tag_Bits, Log_Record_Fixed_Length, Log_Record_Length, Previous_LSN, Flag_Bits, Log_Reserve, AllocUnitId, AllocUnitName, Page_ID, Slot_ID, Previous_Page_LSN, PartitionId, RowFlags };
        }

        public override void SetItemArray(object[] items)
        {
            Num_Elements = (short?)items[0];
            Offset_in_Row = (short?)items[1];
            Modify_Size = (short?)items[2];
            Checkpoint_Begin = (string)items[3];
            CHKPT_Begin_DB_Version = (short?)items[4];
            Max_XDESID = (string)items[5];
            Num_Transactions = (short?)items[6];
            Checkpoint_End = (string)items[7];
            CHKPT_End_DB_Version = (short?)items[8];
            Minimum_LSN = (string)items[9];
            Dirty_Pages = (int?)items[10];
            Oldest_Replicated_Begin_LSN = (string)items[11];
            Next_Replicated_End_LSN = (string)items[12];
            Last_Distributed_Backup_End_LSN = (string)items[13];
            Last_Distributed_End_LSN = (string)items[14];
            Repl_Min_Hold_LSN = (string)items[15];
            Server_UID = (int?)items[16];
            SPID = (int?)items[17];
            Beginlog_Status = (Byte[])items[18];
            Xact_Type = (int?)items[19];
            Begin_Time = (string)items[20];
            Transaction_Name = (string)items[21];
            Transaction_SID = (Byte[])items[22];
            Parent_Transaction_ID = (string)items[23];
            Oldest_Active_Transaction_ID = (string)items[24];
            Xact_ID = (long?)items[25];
            Xact_Node_ID = (int?)items[26];
            Xact_Node_Local_ID = (int?)items[27];
            End_AGE = (long?)items[28];
            End_Time = (string)items[29];
            Transaction_Begin = (string)items[30];
            Replicated_Records = (long?)items[31];
            Oldest_Active_LSN = (string)items[32];
            Server_Name = (string)items[33];
            Database_Name = (string)items[34];
            Mark_Name = (string)items[35];
            Repl_Partition_ID = (int?)items[36];
            Repl_Epoch = (int?)items[37];
            Repl_CSN = (long?)items[38];
            Repl_Flags = (int?)items[39];
            Repl_Msg = (Byte[])items[40];
            Repl_Source_Commit_Time = (string)items[41];
            Master_XDESID = (string)items[42];
            Master_DBID = (int?)items[43];
            Preplog_Begin_LSN = (string)items[44];
            Prepare_Time = (string)items[45];
            Virtual_Clock = (long?)items[46];
            Previous_Savepoint = (string)items[47];
            Savepoint_Name = (string)items[48];
            Rowbits_First_Bit = (short?)items[49];
            Rowbits_Bit_Count = (short?)items[50];
            Rowbits_Bit_Value = (Byte[])items[51];
            Number_of_Locks = (short?)items[52];
            Lock_Information = (string)items[53];
            LSN_before_writes = (string)items[54];
            Pages_Written = (short?)items[55];
            Command_Type = (int?)items[56];
            Publication_ID = (int?)items[57];
            Article_ID = (int?)items[58];
            Partial_Status = (int?)items[59];
            Command = (string)items[60];
            Byte_Offset = (short?)items[61];
            New_Value = (Byte[])items[62];
            Old_Value = (Byte[])items[63];
            New_Split_Page = (string)items[64];
            Rows_Deleted = (short?)items[65];
            Bytes_Freed = (short?)items[66];
            CI_Table_Id = (int?)items[67];
            CI_Index_Id = (short?)items[68];
            NewAllocUnitId = (long?)items[69];
            FileGroup_ID = (short?)items[70];
            Meta_Status = (Byte[])items[71];
            File_Status = (Byte[])items[72];
            File_ID = (short?)items[73];
            Physical_Name = (string)items[74];
            Logical_Name = (string)items[75];
            Format_LSN = (string)items[76];
            RowsetId = (long?)items[77];
            TextPtr = (Byte[])items[78];
            Column_Offset = (int?)items[79];
            Flags = (int?)items[80];
            Text_Size = (long?)items[81];
            Offset = (long?)items[82];
            Old_Size = (long?)items[83];
            New_Size = (long?)items[84];
            Description = (string)items[85];
            Bulk_allocated_extent_count = (int?)items[86];
            Bulk_RowsetId = (long?)items[87];
            Bulk_AllocUnitId = (long?)items[88];
            Bulk_allocation_first_IAM_Page_ID = (string)items[89];
            Bulk_allocated_extent_ids = (string)items[90];
            VLFs_added = (string)items[91];
            InvalidateCache_Id = (int?)items[92];
            InvalidateCache_keys = (string)items[93];
            CopyVerionInfo_Source_Page_Id = (string)items[94];
            CopyVerionInfo_Source_Page_LSN = (string)items[95];
            CopyVerionInfo_Source_Slot_Id = (int?)items[96];
            CopyVerionInfo_Source_Slot_Count = (int?)items[97];
            RowLog_Contents_0 = (Byte[])items[98];
            RowLog_Contents_1 = (Byte[])items[99];
            RowLog_Contents_2 = (Byte[])items[100];
            RowLog_Contents_3 = (Byte[])items[101];
            RowLog_Contents_4 = (Byte[])items[102];
            RowLog_Contents_5 = (Byte[])items[103];
            Compression_Log_Type = (short?)items[104];
            Compression_Info = (Byte[])items[105];
            PageFormat_PageType = (short?)items[106];
            PageFormat_PageFlags = (short?)items[107];
            PageFormat_PageLevel = (short?)items[108];
            PageFormat_PageStat = (short?)items[109];
            PageFormat_FormatOption = (short?)items[110];
            Log_Record = (Byte[])items[111];
            Current_LSN = (string)items[112];
            Operation = (string)items[113];
            Context = (string)items[114];
            Transaction_ID = (string)items[115];
            LogBlockGeneration = (long)items[116];
            Tag_Bits = (Byte[])items[117];
            Log_Record_Fixed_Length = (short)items[118];
            Log_Record_Length = (short)items[119];
            Previous_LSN = (string)items[120];
            Flag_Bits = (Byte[])items[121];
            Log_Reserve = (int)items[122];
            AllocUnitId = (long?)items[123];
            AllocUnitName = (string)items[124];
            Page_ID = (string)items[125];
            Slot_ID = (int?)items[126];
            Previous_Page_LSN = (string)items[127];
            PartitionId = (long?)items[128];
            RowFlags = (short?)items[129];
        }
    }

    [SqlTableFunction("sys", "fn_dblog")]
    public partial class fn_dblog : SqlTableFunctionProxy<fn_dblog, fn_dblogResult>
    {
        [SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string start
        {
            get;
            set;
        }

        [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string end
        {
            get;
            set;
        }

        public fn_dblog()
        {
        }

        public fn_dblog(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
        }

        public fn_dblog(string start, string end)
        {
            this.start = start;
            this.end = end;
        }

        public override object[] GetItemArray()
        {
            return new object[] { start, end };
        }

        public override void SetItemArray(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_RowDumpCracker")]
    public partial class fn_RowDumpCrackerResult : SqlTabularProxy
    {
        [SqlColumn("partition_id", 0), SqlTypeFacets("bigint", false)]
        public long partition_id
        {
            get;
            set;
        }

        [SqlColumn("colName", 1), SqlTypeFacets("sysname", true)]
        public string colName
        {
            get;
            set;
        }

        [SqlColumn("IsInrow", 2), SqlTypeFacets("bit", false)]
        public bool IsInrow
        {
            get;
            set;
        }

        [SqlColumn("IsSparse", 3), SqlTypeFacets("bit", false)]
        public bool IsSparse
        {
            get;
            set;
        }

        [SqlColumn("IsRecordPrefixCompressed", 4), SqlTypeFacets("bit", false)]
        public bool IsRecordPrefixCompressed
        {
            get;
            set;
        }

        [SqlColumn("IsSymbol", 5), SqlTypeFacets("bit", false)]
        public bool IsSymbol
        {
            get;
            set;
        }

        [SqlColumn("PrefixBytes", 6), SqlTypeFacets("int", false)]
        public int PrefixBytes
        {
            get;
            set;
        }

        [SqlColumn("InRowLength", 7), SqlTypeFacets("int", false)]
        public int InRowLength
        {
            get;
            set;
        }

        public fn_RowDumpCrackerResult()
        {
        }

        public fn_RowDumpCrackerResult(object[] items)
        {
            partition_id = (long)items[0];
            colName = (string)items[1];
            IsInrow = (bool)items[2];
            IsSparse = (bool)items[3];
            IsRecordPrefixCompressed = (bool)items[4];
            IsSymbol = (bool)items[5];
            PrefixBytes = (int)items[6];
            InRowLength = (int)items[7];
        }

        public fn_RowDumpCrackerResult(long partition_id, string colName, bool IsInrow, bool IsSparse, bool IsRecordPrefixCompressed, bool IsSymbol, int PrefixBytes, int InRowLength)
        {
            this.partition_id = partition_id;
            this.colName = colName;
            this.IsInrow = IsInrow;
            this.IsSparse = IsSparse;
            this.IsRecordPrefixCompressed = IsRecordPrefixCompressed;
            this.IsSymbol = IsSymbol;
            this.PrefixBytes = PrefixBytes;
            this.InRowLength = InRowLength;
        }

        public override object[] GetItemArray()
        {
            return new object[] { partition_id, colName, IsInrow, IsSparse, IsRecordPrefixCompressed, IsSymbol, PrefixBytes, InRowLength };
        }

        public override void SetItemArray(object[] items)
        {
            partition_id = (long)items[0];
            colName = (string)items[1];
            IsInrow = (bool)items[2];
            IsSparse = (bool)items[3];
            IsRecordPrefixCompressed = (bool)items[4];
            IsSymbol = (bool)items[5];
            PrefixBytes = (int)items[6];
            InRowLength = (int)items[7];
        }
    }

    [SqlTableFunction("sys", "fn_RowDumpCracker")]
    public partial class fn_RowDumpCracker : SqlTableFunctionProxy<fn_RowDumpCracker, fn_RowDumpCrackerResult>
    {
        [SqlParameter("@rowdump", 0, false, false), SqlTypeFacets("varbinary", true, -1)]
        public Byte[] rowdump
        {
            get;
            set;
        }

        public fn_RowDumpCracker()
        {
        }

        public fn_RowDumpCracker(object[] items)
        {
            rowdump = (Byte[])items[0];
        }

        public fn_RowDumpCracker(Byte[] rowdump)
        {
            this.rowdump = rowdump;
        }

        public override object[] GetItemArray()
        {
            return new object[] { rowdump };
        }

        public override void SetItemArray(object[] items)
        {
            rowdump = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_trace_getinfo")]
    public partial class fn_trace_getinfoResult : SqlTabularProxy
    {
        [SqlColumn("traceid", 0), SqlTypeFacets("int", false)]
        public int traceid
        {
            get;
            set;
        }

        [SqlColumn("property", 1), SqlTypeFacets("int", false)]
        public int property
        {
            get;
            set;
        }

        [SqlColumn("value", 2), SqlTypeFacets("sql_variant", true)]
        public Object value
        {
            get;
            set;
        }

        public fn_trace_getinfoResult()
        {
        }

        public fn_trace_getinfoResult(object[] items)
        {
            traceid = (int)items[0];
            property = (int)items[1];
            value = (Object)items[2];
        }

        public fn_trace_getinfoResult(int traceid, int property, Object value)
        {
            this.traceid = traceid;
            this.property = property;
            this.value = value;
        }

        public override object[] GetItemArray()
        {
            return new object[] { traceid, property, value };
        }

        public override void SetItemArray(object[] items)
        {
            traceid = (int)items[0];
            property = (int)items[1];
            value = (Object)items[2];
        }
    }

    [SqlTableFunction("sys", "fn_trace_getinfo")]
    public partial class fn_trace_getinfo : SqlTableFunctionProxy<fn_trace_getinfo, fn_trace_getinfoResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)]
        public int? handle
        {
            get;
            set;
        }

        public fn_trace_getinfo()
        {
        }

        public fn_trace_getinfo(object[] items)
        {
            handle = (int?)items[0];
        }

        public fn_trace_getinfo(int? handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_sqlagent_jobsteps_logs")]
    public partial class fn_sqlagent_jobsteps_logsResult : SqlTabularProxy
    {
        [SqlColumn("log_id", 0), SqlTypeFacets("int", false)]
        public int log_id
        {
            get;
            set;
        }

        [SqlColumn("log_text", 1), SqlTypeFacets("nvarchar", false, -1)]
        public string log_text
        {
            get;
            set;
        }

        [SqlColumn("date_created", 2), SqlTypeFacets("datetime", false)]
        public DateTime date_created
        {
            get;
            set;
        }

        [SqlColumn("step_uid", 3), SqlTypeFacets("uniqueidentifier", false)]
        public Guid step_uid
        {
            get;
            set;
        }

        public fn_sqlagent_jobsteps_logsResult()
        {
        }

        public fn_sqlagent_jobsteps_logsResult(object[] items)
        {
            log_id = (int)items[0];
            log_text = (string)items[1];
            date_created = (DateTime)items[2];
            step_uid = (Guid)items[3];
        }

        public fn_sqlagent_jobsteps_logsResult(int log_id, string log_text, DateTime date_created, Guid step_uid)
        {
            this.log_id = log_id;
            this.log_text = log_text;
            this.date_created = date_created;
            this.step_uid = step_uid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { log_id, log_text, date_created, step_uid };
        }

        public override void SetItemArray(object[] items)
        {
            log_id = (int)items[0];
            log_text = (string)items[1];
            date_created = (DateTime)items[2];
            step_uid = (Guid)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_sqlagent_jobsteps_logs")]
    public partial class fn_sqlagent_jobsteps_logs : SqlTableFunctionProxy<fn_sqlagent_jobsteps_logs, fn_sqlagent_jobsteps_logsResult>
    {
        [SqlParameter("@step_uid", 0, false, false), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? step_uid
        {
            get;
            set;
        }

        public fn_sqlagent_jobsteps_logs()
        {
        }

        public fn_sqlagent_jobsteps_logs(object[] items)
        {
            step_uid = (Guid?)items[0];
        }

        public fn_sqlagent_jobsteps_logs(Guid? step_uid)
        {
            this.step_uid = step_uid;
        }

        public override object[] GetItemArray()
        {
            return new object[] { step_uid };
        }

        public override void SetItemArray(object[] items)
        {
            step_uid = (Guid?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_xe_file_target_read_file")]
    public partial class fn_xe_file_target_read_fileResult : SqlTabularProxy
    {
        [SqlColumn("module_guid", 0), SqlTypeFacets("uniqueidentifier", false)]
        public Guid module_guid
        {
            get;
            set;
        }

        [SqlColumn("package_guid", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid package_guid
        {
            get;
            set;
        }

        [SqlColumn("object_name", 2), SqlTypeFacets("nvarchar", false, 120)]
        public string object_name
        {
            get;
            set;
        }

        [SqlColumn("event_data", 3), SqlTypeFacets("nvarchar", true, -1)]
        public string event_data
        {
            get;
            set;
        }

        [SqlColumn("file_name", 4), SqlTypeFacets("nvarchar", false, 520)]
        public string file_name
        {
            get;
            set;
        }

        [SqlColumn("file_offset", 5), SqlTypeFacets("bigint", false)]
        public long file_offset
        {
            get;
            set;
        }

        public fn_xe_file_target_read_fileResult()
        {
        }

        public fn_xe_file_target_read_fileResult(object[] items)
        {
            module_guid = (Guid)items[0];
            package_guid = (Guid)items[1];
            object_name = (string)items[2];
            event_data = (string)items[3];
            file_name = (string)items[4];
            file_offset = (long)items[5];
        }

        public fn_xe_file_target_read_fileResult(Guid module_guid, Guid package_guid, string object_name, string event_data, string file_name, long file_offset)
        {
            this.module_guid = module_guid;
            this.package_guid = package_guid;
            this.object_name = object_name;
            this.event_data = event_data;
            this.file_name = file_name;
            this.file_offset = file_offset;
        }

        public override object[] GetItemArray()
        {
            return new object[] { module_guid, package_guid, object_name, event_data, file_name, file_offset };
        }

        public override void SetItemArray(object[] items)
        {
            module_guid = (Guid)items[0];
            package_guid = (Guid)items[1];
            object_name = (string)items[2];
            event_data = (string)items[3];
            file_name = (string)items[4];
            file_offset = (long)items[5];
        }
    }

    [SqlTableFunction("sys", "fn_xe_file_target_read_file")]
    public partial class fn_xe_file_target_read_file : SqlTableFunctionProxy<fn_xe_file_target_read_file, fn_xe_file_target_read_fileResult>
    {
        [SqlParameter("@path", 0, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string path
        {
            get;
            set;
        }

        [SqlParameter("@mdpath", 1, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string mdpath
        {
            get;
            set;
        }

        [SqlParameter("@initial_file_name", 2, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string initial_file_name
        {
            get;
            set;
        }

        [SqlParameter("@initial_offset", 3, false, false), SqlTypeFacets("bigint", true)]
        public long? initial_offset
        {
            get;
            set;
        }

        public fn_xe_file_target_read_file()
        {
        }

        public fn_xe_file_target_read_file(object[] items)
        {
            path = (string)items[0];
            mdpath = (string)items[1];
            initial_file_name = (string)items[2];
            initial_offset = (long?)items[3];
        }

        public fn_xe_file_target_read_file(string path, string mdpath, string initial_file_name, long? initial_offset)
        {
            this.path = path;
            this.mdpath = mdpath;
            this.initial_file_name = initial_file_name;
            this.initial_offset = initial_offset;
        }

        public override object[] GetItemArray()
        {
            return new object[] { path, mdpath, initial_file_name, initial_offset };
        }

        public override void SetItemArray(object[] items)
        {
            path = (string)items[0];
            mdpath = (string)items[1];
            initial_file_name = (string)items[2];
            initial_offset = (long?)items[3];
        }
    }

    [SqlTableFunctionResult("sys", "fn_virtualservernodes")]
    public partial class fn_virtualservernodesResult : SqlTabularProxy
    {
        [SqlColumn("NodeName", 0), SqlTypeFacets("sysname", false)]
        public string NodeName
        {
            get;
            set;
        }

        [SqlColumn("status", 1), SqlTypeFacets("int", true)]
        public int? status
        {
            get;
            set;
        }

        [SqlColumn("status_description", 2), SqlTypeFacets("nvarchar", true, 64)]
        public string status_description
        {
            get;
            set;
        }

        [SqlColumn("is_current_owner", 3), SqlTypeFacets("bit", true)]
        public bool? is_current_owner
        {
            get;
            set;
        }

        public fn_virtualservernodesResult()
        {
        }

        public fn_virtualservernodesResult(object[] items)
        {
            NodeName = (string)items[0];
            status = (int?)items[1];
            status_description = (string)items[2];
            is_current_owner = (bool?)items[3];
        }

        public fn_virtualservernodesResult(string NodeName, int? status, string status_description, bool? is_current_owner)
        {
            this.NodeName = NodeName;
            this.status = status;
            this.status_description = status_description;
            this.is_current_owner = is_current_owner;
        }

        public override object[] GetItemArray()
        {
            return new object[] { NodeName, status, status_description, is_current_owner };
        }

        public override void SetItemArray(object[] items)
        {
            NodeName = (string)items[0];
            status = (int?)items[1];
            status_description = (string)items[2];
            is_current_owner = (bool?)items[3];
        }
    }

    [SqlTableFunction("sys", "fn_virtualservernodes")]
    public partial class fn_virtualservernodes : SqlTableFunctionProxy<fn_virtualservernodes, fn_virtualservernodesResult>
    {
        public fn_virtualservernodes()
        {
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_missing_index_columns")]
    public partial class dm_db_missing_index_columnsResult : SqlTabularProxy
    {
        [SqlColumn("column_id", 0), SqlTypeFacets("int", false)]
        public int column_id
        {
            get;
            set;
        }

        [SqlColumn("column_name", 1), SqlTypeFacets("nvarchar", true, 8000)]
        public string column_name
        {
            get;
            set;
        }

        [SqlColumn("column_usage", 2), SqlTypeFacets("nvarchar", true, 8000)]
        public string column_usage
        {
            get;
            set;
        }

        public dm_db_missing_index_columnsResult()
        {
        }

        public dm_db_missing_index_columnsResult(object[] items)
        {
            column_id = (int)items[0];
            column_name = (string)items[1];
            column_usage = (string)items[2];
        }

        public dm_db_missing_index_columnsResult(int column_id, string column_name, string column_usage)
        {
            this.column_id = column_id;
            this.column_name = column_name;
            this.column_usage = column_usage;
        }

        public override object[] GetItemArray()
        {
            return new object[] { column_id, column_name, column_usage };
        }

        public override void SetItemArray(object[] items)
        {
            column_id = (int)items[0];
            column_name = (string)items[1];
            column_usage = (string)items[2];
        }
    }

    [SqlTableFunction("sys", "dm_db_missing_index_columns")]
    public partial class dm_db_missing_index_columns : SqlTableFunctionProxy<dm_db_missing_index_columns, dm_db_missing_index_columnsResult>
    {
        [SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)]
        public int? handle
        {
            get;
            set;
        }

        public dm_db_missing_index_columns()
        {
        }

        public dm_db_missing_index_columns(object[] items)
        {
            handle = (int?)items[0];
        }

        public dm_db_missing_index_columns(int? handle)
        {
            this.handle = handle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { handle };
        }

        public override void SetItemArray(object[] items)
        {
            handle = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_MSxe_read_event_stream")]
    public partial class fn_MSxe_read_event_streamResult : SqlTabularProxy
    {
        [SqlColumn("type", 0), SqlTypeFacets("int", false)]
        public int type
        {
            get;
            set;
        }

        [SqlColumn("data", 1), SqlTypeFacets("image", true, 16)]
        public Byte[] data
        {
            get;
            set;
        }

        public fn_MSxe_read_event_streamResult()
        {
        }

        public fn_MSxe_read_event_streamResult(object[] items)
        {
            type = (int)items[0];
            data = (Byte[])items[1];
        }

        public fn_MSxe_read_event_streamResult(int type, Byte[] data)
        {
            this.type = type;
            this.data = data;
        }

        public override object[] GetItemArray()
        {
            return new object[] { type, data };
        }

        public override void SetItemArray(object[] items)
        {
            type = (int)items[0];
            data = (Byte[])items[1];
        }
    }

    [SqlTableFunction("sys", "fn_MSxe_read_event_stream")]
    public partial class fn_MSxe_read_event_stream : SqlTableFunctionProxy<fn_MSxe_read_event_stream, fn_MSxe_read_event_streamResult>
    {
        [SqlParameter("@source", 0, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string source
        {
            get;
            set;
        }

        [SqlParameter("@source_opt", 1, false, false), SqlTypeFacets("int", true)]
        public int? source_opt
        {
            get;
            set;
        }

        public fn_MSxe_read_event_stream()
        {
        }

        public fn_MSxe_read_event_stream(object[] items)
        {
            source = (string)items[0];
            source_opt = (int?)items[1];
        }

        public fn_MSxe_read_event_stream(string source, int? source_opt)
        {
            this.source = source;
            this.source_opt = source_opt;
        }

        public override object[] GetItemArray()
        {
            return new object[] { source, source_opt };
        }

        public override void SetItemArray(object[] items)
        {
            source = (string)items[0];
            source_opt = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "dm_cryptographic_provider_keys")]
    public partial class dm_cryptographic_provider_keysResult : SqlTabularProxy
    {
        [SqlColumn("key_id", 0), SqlTypeFacets("int", true)]
        public int? key_id
        {
            get;
            set;
        }

        [SqlColumn("key_name", 1), SqlTypeFacets("nvarchar", true, 512)]
        public string key_name
        {
            get;
            set;
        }

        [SqlColumn("key_thumbprint", 2), SqlTypeFacets("varbinary", true, 32)]
        public Byte[] key_thumbprint
        {
            get;
            set;
        }

        [SqlColumn("algorithm_id", 3), SqlTypeFacets("int", true)]
        public int? algorithm_id
        {
            get;
            set;
        }

        [SqlColumn("algorithm_tag", 4), SqlTypeFacets("nvarchar", true, 120)]
        public string algorithm_tag
        {
            get;
            set;
        }

        [SqlColumn("key_type", 5), SqlTypeFacets("nvarchar", true, 256)]
        public string key_type
        {
            get;
            set;
        }

        [SqlColumn("key_length", 6), SqlTypeFacets("int", true)]
        public int? key_length
        {
            get;
            set;
        }

        public dm_cryptographic_provider_keysResult()
        {
        }

        public dm_cryptographic_provider_keysResult(object[] items)
        {
            key_id = (int?)items[0];
            key_name = (string)items[1];
            key_thumbprint = (Byte[])items[2];
            algorithm_id = (int?)items[3];
            algorithm_tag = (string)items[4];
            key_type = (string)items[5];
            key_length = (int?)items[6];
        }

        public dm_cryptographic_provider_keysResult(int? key_id, string key_name, Byte[] key_thumbprint, int? algorithm_id, string algorithm_tag, string key_type, int? key_length)
        {
            this.key_id = key_id;
            this.key_name = key_name;
            this.key_thumbprint = key_thumbprint;
            this.algorithm_id = algorithm_id;
            this.algorithm_tag = algorithm_tag;
            this.key_type = key_type;
            this.key_length = key_length;
        }

        public override object[] GetItemArray()
        {
            return new object[] { key_id, key_name, key_thumbprint, algorithm_id, algorithm_tag, key_type, key_length };
        }

        public override void SetItemArray(object[] items)
        {
            key_id = (int?)items[0];
            key_name = (string)items[1];
            key_thumbprint = (Byte[])items[2];
            algorithm_id = (int?)items[3];
            algorithm_tag = (string)items[4];
            key_type = (string)items[5];
            key_length = (int?)items[6];
        }
    }

    [SqlTableFunction("sys", "dm_cryptographic_provider_keys")]
    public partial class dm_cryptographic_provider_keys : SqlTableFunctionProxy<dm_cryptographic_provider_keys, dm_cryptographic_provider_keysResult>
    {
        [SqlParameter("@ProviderId", 0, false, false), SqlTypeFacets("int", true)]
        public int? ProviderId
        {
            get;
            set;
        }

        public dm_cryptographic_provider_keys()
        {
        }

        public dm_cryptographic_provider_keys(object[] items)
        {
            ProviderId = (int?)items[0];
        }

        public dm_cryptographic_provider_keys(int? ProviderId)
        {
            this.ProviderId = ProviderId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { ProviderId };
        }

        public override void SetItemArray(object[] items)
        {
            ProviderId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_fts_parser")]
    public partial class dm_fts_parserResult : SqlTabularProxy
    {
        [SqlColumn("keyword", 0), SqlTypeFacets("varbinary", true, 128)]
        public Byte[] keyword
        {
            get;
            set;
        }

        [SqlColumn("group_id", 1), SqlTypeFacets("int", false)]
        public int group_id
        {
            get;
            set;
        }

        [SqlColumn("phrase_id", 2), SqlTypeFacets("int", false)]
        public int phrase_id
        {
            get;
            set;
        }

        [SqlColumn("occurrence", 3), SqlTypeFacets("int", false)]
        public int occurrence
        {
            get;
            set;
        }

        [SqlColumn("special_term", 4), SqlTypeFacets("nvarchar", false, 32)]
        public string special_term
        {
            get;
            set;
        }

        [SqlColumn("display_term", 5), SqlTypeFacets("nvarchar", false, 8000)]
        public string display_term
        {
            get;
            set;
        }

        [SqlColumn("expansion_type", 6), SqlTypeFacets("int", false)]
        public int expansion_type
        {
            get;
            set;
        }

        [SqlColumn("source_term", 7), SqlTypeFacets("nvarchar", true, 8000)]
        public string source_term
        {
            get;
            set;
        }

        public dm_fts_parserResult()
        {
        }

        public dm_fts_parserResult(object[] items)
        {
            keyword = (Byte[])items[0];
            group_id = (int)items[1];
            phrase_id = (int)items[2];
            occurrence = (int)items[3];
            special_term = (string)items[4];
            display_term = (string)items[5];
            expansion_type = (int)items[6];
            source_term = (string)items[7];
        }

        public dm_fts_parserResult(Byte[] keyword, int group_id, int phrase_id, int occurrence, string special_term, string display_term, int expansion_type, string source_term)
        {
            this.keyword = keyword;
            this.group_id = group_id;
            this.phrase_id = phrase_id;
            this.occurrence = occurrence;
            this.special_term = special_term;
            this.display_term = display_term;
            this.expansion_type = expansion_type;
            this.source_term = source_term;
        }

        public override object[] GetItemArray()
        {
            return new object[] { keyword, group_id, phrase_id, occurrence, special_term, display_term, expansion_type, source_term };
        }

        public override void SetItemArray(object[] items)
        {
            keyword = (Byte[])items[0];
            group_id = (int)items[1];
            phrase_id = (int)items[2];
            occurrence = (int)items[3];
            special_term = (string)items[4];
            display_term = (string)items[5];
            expansion_type = (int)items[6];
            source_term = (string)items[7];
        }
    }

    [SqlTableFunction("sys", "dm_fts_parser")]
    public partial class dm_fts_parser : SqlTableFunctionProxy<dm_fts_parser, dm_fts_parserResult>
    {
        [SqlParameter("@querystring", 0, false, false), SqlTypeFacets("nvarchar", true, 8000)]
        public string querystring
        {
            get;
            set;
        }

        [SqlParameter("@lcid", 1, false, false), SqlTypeFacets("int", true)]
        public int? lcid
        {
            get;
            set;
        }

        [SqlParameter("@stoplistid", 2, false, false), SqlTypeFacets("int", true)]
        public int? stoplistid
        {
            get;
            set;
        }

        [SqlParameter("@accentsensitive", 3, false, false), SqlTypeFacets("bit", true)]
        public bool? accentsensitive
        {
            get;
            set;
        }

        public dm_fts_parser()
        {
        }

        public dm_fts_parser(object[] items)
        {
            querystring = (string)items[0];
            lcid = (int?)items[1];
            stoplistid = (int?)items[2];
            accentsensitive = (bool?)items[3];
        }

        public dm_fts_parser(string querystring, int? lcid, int? stoplistid, bool? accentsensitive)
        {
            this.querystring = querystring;
            this.lcid = lcid;
            this.stoplistid = stoplistid;
            this.accentsensitive = accentsensitive;
        }

        public override object[] GetItemArray()
        {
            return new object[] { querystring, lcid, stoplistid, accentsensitive };
        }

        public override void SetItemArray(object[] items)
        {
            querystring = (string)items[0];
            lcid = (int?)items[1];
            stoplistid = (int?)items[2];
            accentsensitive = (bool?)items[3];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_objects_disabled_on_compatibility_level_change")]
    public partial class dm_db_objects_disabled_on_compatibility_level_changeResult : SqlTabularProxy
    {
        [SqlColumn("class", 0), SqlTypeFacets("int", false)]
        public int @class
        {
            get;
            set;
        }

        [SqlColumn("class_desc", 1), SqlTypeFacets("nvarchar", false, 60)]
        public string class_desc
        {
            get;
            set;
        }

        [SqlColumn("major_id", 2), SqlTypeFacets("int", false)]
        public int major_id
        {
            get;
            set;
        }

        [SqlColumn("minor_id", 3), SqlTypeFacets("int", true)]
        public int? minor_id
        {
            get;
            set;
        }

        [SqlColumn("dependency", 4), SqlTypeFacets("nvarchar", false, 60)]
        public string dependency
        {
            get;
            set;
        }

        public dm_db_objects_disabled_on_compatibility_level_changeResult()
        {
        }

        public dm_db_objects_disabled_on_compatibility_level_changeResult(object[] items)
        {
            @class = (int)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int?)items[3];
            dependency = (string)items[4];
        }

        public dm_db_objects_disabled_on_compatibility_level_changeResult(int @class, string class_desc, int major_id, int? minor_id, string dependency)
        {
            this.@class = @class;
            this.class_desc = class_desc;
            this.major_id = major_id;
            this.minor_id = minor_id;
            this.dependency = dependency;
        }

        public override object[] GetItemArray()
        {
            return new object[] { @class, class_desc, major_id, minor_id, dependency };
        }

        public override void SetItemArray(object[] items)
        {
            @class = (int)items[0];
            class_desc = (string)items[1];
            major_id = (int)items[2];
            minor_id = (int?)items[3];
            dependency = (string)items[4];
        }
    }

    [SqlTableFunction("sys", "dm_db_objects_disabled_on_compatibility_level_change")]
    public partial class dm_db_objects_disabled_on_compatibility_level_change : SqlTableFunctionProxy<dm_db_objects_disabled_on_compatibility_level_change, dm_db_objects_disabled_on_compatibility_level_changeResult>
    {
        [SqlParameter("@compatibility_level", 0, false, false), SqlTypeFacets("int", true)]
        public int? compatibility_level
        {
            get;
            set;
        }

        public dm_db_objects_disabled_on_compatibility_level_change()
        {
        }

        public dm_db_objects_disabled_on_compatibility_level_change(object[] items)
        {
            compatibility_level = (int?)items[0];
        }

        public dm_db_objects_disabled_on_compatibility_level_change(int? compatibility_level)
        {
            this.compatibility_level = compatibility_level;
        }

        public override object[] GetItemArray()
        {
            return new object[] { compatibility_level };
        }

        public override void SetItemArray(object[] items)
        {
            compatibility_level = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_sqlagent_job_history")]
    public partial class fn_sqlagent_job_historyResult : SqlTabularProxy
    {
        [SqlColumn("instance_id", 0), SqlTypeFacets("int", false)]
        public int instance_id
        {
            get;
            set;
        }

        [SqlColumn("job_id", 1), SqlTypeFacets("uniqueidentifier", false)]
        public Guid job_id
        {
            get;
            set;
        }

        [SqlColumn("step_id", 2), SqlTypeFacets("int", false)]
        public int step_id
        {
            get;
            set;
        }

        [SqlColumn("sql_message_id", 3), SqlTypeFacets("int", false)]
        public int sql_message_id
        {
            get;
            set;
        }

        [SqlColumn("sql_severity", 4), SqlTypeFacets("int", false)]
        public int sql_severity
        {
            get;
            set;
        }

        [SqlColumn("message", 5), SqlTypeFacets("nvarchar", true, 8000)]
        public string message
        {
            get;
            set;
        }

        [SqlColumn("run_status", 6), SqlTypeFacets("int", false)]
        public int run_status
        {
            get;
            set;
        }

        [SqlColumn("run_date", 7), SqlTypeFacets("int", false)]
        public int run_date
        {
            get;
            set;
        }

        [SqlColumn("run_time", 8), SqlTypeFacets("int", false)]
        public int run_time
        {
            get;
            set;
        }

        [SqlColumn("run_duration", 9), SqlTypeFacets("int", false)]
        public int run_duration
        {
            get;
            set;
        }

        [SqlColumn("operator_id_emailed", 10), SqlTypeFacets("int", false)]
        public int operator_id_emailed
        {
            get;
            set;
        }

        [SqlColumn("operator_id_paged", 11), SqlTypeFacets("int", false)]
        public int operator_id_paged
        {
            get;
            set;
        }

        [SqlColumn("retries_attempted", 12), SqlTypeFacets("int", false)]
        public int retries_attempted
        {
            get;
            set;
        }

        public fn_sqlagent_job_historyResult()
        {
        }

        public fn_sqlagent_job_historyResult(object[] items)
        {
            instance_id = (int)items[0];
            job_id = (Guid)items[1];
            step_id = (int)items[2];
            sql_message_id = (int)items[3];
            sql_severity = (int)items[4];
            message = (string)items[5];
            run_status = (int)items[6];
            run_date = (int)items[7];
            run_time = (int)items[8];
            run_duration = (int)items[9];
            operator_id_emailed = (int)items[10];
            operator_id_paged = (int)items[11];
            retries_attempted = (int)items[12];
        }

        public fn_sqlagent_job_historyResult(int instance_id, Guid job_id, int step_id, int sql_message_id, int sql_severity, string message, int run_status, int run_date, int run_time, int run_duration, int operator_id_emailed, int operator_id_paged, int retries_attempted)
        {
            this.instance_id = instance_id;
            this.job_id = job_id;
            this.step_id = step_id;
            this.sql_message_id = sql_message_id;
            this.sql_severity = sql_severity;
            this.message = message;
            this.run_status = run_status;
            this.run_date = run_date;
            this.run_time = run_time;
            this.run_duration = run_duration;
            this.operator_id_emailed = operator_id_emailed;
            this.operator_id_paged = operator_id_paged;
            this.retries_attempted = retries_attempted;
        }

        public override object[] GetItemArray()
        {
            return new object[] { instance_id, job_id, step_id, sql_message_id, sql_severity, message, run_status, run_date, run_time, run_duration, operator_id_emailed, operator_id_paged, retries_attempted };
        }

        public override void SetItemArray(object[] items)
        {
            instance_id = (int)items[0];
            job_id = (Guid)items[1];
            step_id = (int)items[2];
            sql_message_id = (int)items[3];
            sql_severity = (int)items[4];
            message = (string)items[5];
            run_status = (int)items[6];
            run_date = (int)items[7];
            run_time = (int)items[8];
            run_duration = (int)items[9];
            operator_id_emailed = (int)items[10];
            operator_id_paged = (int)items[11];
            retries_attempted = (int)items[12];
        }
    }

    [SqlTableFunction("sys", "fn_sqlagent_job_history")]
    public partial class fn_sqlagent_job_history : SqlTableFunctionProxy<fn_sqlagent_job_history, fn_sqlagent_job_historyResult>
    {
        [SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)]
        public Guid? job_id
        {
            get;
            set;
        }

        [SqlParameter("@step_id", 1, false, false), SqlTypeFacets("int", true)]
        public int? step_id
        {
            get;
            set;
        }

        public fn_sqlagent_job_history()
        {
        }

        public fn_sqlagent_job_history(object[] items)
        {
            job_id = (Guid?)items[0];
            step_id = (int?)items[1];
        }

        public fn_sqlagent_job_history(Guid? job_id, int? step_id)
        {
            this.job_id = job_id;
            this.step_id = step_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { job_id, step_id };
        }

        public override void SetItemArray(object[] items)
        {
            job_id = (Guid?)items[0];
            step_id = (int?)items[1];
        }
    }

    [SqlTableFunctionResult("sys", "fn_dump_dblog_xtp")]
    public partial class fn_dump_dblog_xtpResult : SqlTabularProxy
    {
        [SqlColumn("Current LSN", 0), SqlTypeFacets("nvarchar", false, 46)]
        public string Current_LSN
        {
            get;
            set;
        }

        [SqlColumn("Operation", 1), SqlTypeFacets("nvarchar", false, 62)]
        public string Operation
        {
            get;
            set;
        }

        [SqlColumn("Context", 2), SqlTypeFacets("nvarchar", false, 62)]
        public string Context
        {
            get;
            set;
        }

        [SqlColumn("Transaction ID", 3), SqlTypeFacets("nvarchar", false, 28)]
        public string Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("LogBlockGeneration", 4), SqlTypeFacets("bigint", false)]
        public long LogBlockGeneration
        {
            get;
            set;
        }

        [SqlColumn("Tag Bits", 5), SqlTypeFacets("binary", false, 2)]
        public Byte[] Tag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Record Fixed Length", 6), SqlTypeFacets("smallint", false)]
        public short Log_Record_Fixed_Length
        {
            get;
            set;
        }

        [SqlColumn("Log Record Length", 7), SqlTypeFacets("smallint", false)]
        public short Log_Record_Length
        {
            get;
            set;
        }

        [SqlColumn("Previous LSN", 8), SqlTypeFacets("nvarchar", false, 46)]
        public string Previous_LSN
        {
            get;
            set;
        }

        [SqlColumn("Flag Bits", 9), SqlTypeFacets("binary", false, 2)]
        public Byte[] Flag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Reserve", 10), SqlTypeFacets("int", false)]
        public int Log_Reserve
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitId", 11), SqlTypeFacets("bigint", true)]
        public long? AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitName", 12), SqlTypeFacets("nvarchar", true, 774)]
        public string AllocUnitName
        {
            get;
            set;
        }

        [SqlColumn("Page ID", 13), SqlTypeFacets("nvarchar", true, 28)]
        public string Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Slot ID", 14), SqlTypeFacets("int", true)]
        public int? Slot_ID
        {
            get;
            set;
        }

        [SqlColumn("Previous Page LSN", 15), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("PartitionId", 16), SqlTypeFacets("bigint", true)]
        public long? PartitionId
        {
            get;
            set;
        }

        [SqlColumn("RowFlags", 17), SqlTypeFacets("smallint", true)]
        public short? RowFlags
        {
            get;
            set;
        }

        [SqlColumn("Num Elements", 18), SqlTypeFacets("smallint", true)]
        public short? Num_Elements
        {
            get;
            set;
        }

        [SqlColumn("Offset in Row", 19), SqlTypeFacets("smallint", true)]
        public short? Offset_in_Row
        {
            get;
            set;
        }

        [SqlColumn("Modify Size", 20), SqlTypeFacets("smallint", true)]
        public short? Modify_Size
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint Begin", 21), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_Begin
        {
            get;
            set;
        }

        [SqlColumn("CHKPT Begin DB Version", 22), SqlTypeFacets("smallint", true)]
        public short? CHKPT_Begin_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Max XDESID", 23), SqlTypeFacets("nvarchar", true, 28)]
        public string Max_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Num Transactions", 24), SqlTypeFacets("smallint", true)]
        public short? Num_Transactions
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint End", 25), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_End
        {
            get;
            set;
        }

        [SqlColumn("CHKPT End DB Version", 26), SqlTypeFacets("smallint", true)]
        public short? CHKPT_End_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Minimum LSN", 27), SqlTypeFacets("nvarchar", true, 46)]
        public string Minimum_LSN
        {
            get;
            set;
        }

        [SqlColumn("Dirty Pages", 28), SqlTypeFacets("int", true)]
        public int? Dirty_Pages
        {
            get;
            set;
        }

        [SqlColumn("Oldest Replicated Begin LSN", 29), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Replicated_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Next Replicated End LSN", 30), SqlTypeFacets("nvarchar", true, 46)]
        public string Next_Replicated_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed Backup End LSN", 31), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_Backup_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed End LSN", 32), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Min Hold LSN", 33), SqlTypeFacets("nvarchar", true, 46)]
        public string Repl_Min_Hold_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server UID", 34), SqlTypeFacets("int", true)]
        public int? Server_UID
        {
            get;
            set;
        }

        [SqlColumn("SPID", 35), SqlTypeFacets("int", true)]
        public int? SPID
        {
            get;
            set;
        }

        [SqlColumn("Beginlog Status", 36), SqlTypeFacets("binary", true, 4)]
        public Byte[] Beginlog_Status
        {
            get;
            set;
        }

        [SqlColumn("Xact Type", 37), SqlTypeFacets("int", true)]
        public int? Xact_Type
        {
            get;
            set;
        }

        [SqlColumn("Begin Time", 38), SqlTypeFacets("nvarchar", true, 48)]
        public string Begin_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Name", 39), SqlTypeFacets("nvarchar", true, 66)]
        public string Transaction_Name
        {
            get;
            set;
        }

        [SqlColumn("Transaction SID", 40), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] Transaction_SID
        {
            get;
            set;
        }

        [SqlColumn("Parent Transaction ID", 41), SqlTypeFacets("nvarchar", true, 28)]
        public string Parent_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active Transaction ID", 42), SqlTypeFacets("nvarchar", true, 28)]
        public string Oldest_Active_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact ID", 43), SqlTypeFacets("bigint", true)]
        public long? Xact_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node ID", 44), SqlTypeFacets("int", true)]
        public int? Xact_Node_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node Local ID", 45), SqlTypeFacets("int", true)]
        public int? Xact_Node_Local_ID
        {
            get;
            set;
        }

        [SqlColumn("End AGE", 46), SqlTypeFacets("bigint", true)]
        public long? End_AGE
        {
            get;
            set;
        }

        [SqlColumn("End Time", 47), SqlTypeFacets("nvarchar", true, 48)]
        public string End_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Begin", 48), SqlTypeFacets("nvarchar", true, 46)]
        public string Transaction_Begin
        {
            get;
            set;
        }

        [SqlColumn("Replicated Records", 49), SqlTypeFacets("bigint", true)]
        public long? Replicated_Records
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active LSN", 50), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Active_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server Name", 51), SqlTypeFacets("nvarchar", true, 258)]
        public string Server_Name
        {
            get;
            set;
        }

        [SqlColumn("Database Name", 52), SqlTypeFacets("nvarchar", true, 258)]
        public string Database_Name
        {
            get;
            set;
        }

        [SqlColumn("Mark Name", 53), SqlTypeFacets("nvarchar", true, 66)]
        public string Mark_Name
        {
            get;
            set;
        }

        [SqlColumn("Repl Partition ID", 54), SqlTypeFacets("int", true)]
        public int? Repl_Partition_ID
        {
            get;
            set;
        }

        [SqlColumn("Repl Epoch", 55), SqlTypeFacets("int", true)]
        public int? Repl_Epoch
        {
            get;
            set;
        }

        [SqlColumn("Repl CSN", 56), SqlTypeFacets("bigint", true)]
        public long? Repl_CSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Flags", 57), SqlTypeFacets("int", true)]
        public int? Repl_Flags
        {
            get;
            set;
        }

        [SqlColumn("Repl Msg", 58), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Repl_Msg
        {
            get;
            set;
        }

        [SqlColumn("Repl Source Commit Time", 59), SqlTypeFacets("nvarchar", true, 48)]
        public string Repl_Source_Commit_Time
        {
            get;
            set;
        }

        [SqlColumn("Master XDESID", 60), SqlTypeFacets("nvarchar", true, 28)]
        public string Master_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Master DBID", 61), SqlTypeFacets("int", true)]
        public int? Master_DBID
        {
            get;
            set;
        }

        [SqlColumn("Preplog Begin LSN", 62), SqlTypeFacets("nvarchar", true, 46)]
        public string Preplog_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Prepare Time", 63), SqlTypeFacets("nvarchar", true, 48)]
        public string Prepare_Time
        {
            get;
            set;
        }

        [SqlColumn("Virtual Clock", 64), SqlTypeFacets("bigint", true)]
        public long? Virtual_Clock
        {
            get;
            set;
        }

        [SqlColumn("Previous Savepoint", 65), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Savepoint
        {
            get;
            set;
        }

        [SqlColumn("Savepoint Name", 66), SqlTypeFacets("nvarchar", true, 66)]
        public string Savepoint_Name
        {
            get;
            set;
        }

        [SqlColumn("Rowbits First Bit", 67), SqlTypeFacets("smallint", true)]
        public short? Rowbits_First_Bit
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Count", 68), SqlTypeFacets("smallint", true)]
        public short? Rowbits_Bit_Count
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Value", 69), SqlTypeFacets("binary", true, 1)]
        public Byte[] Rowbits_Bit_Value
        {
            get;
            set;
        }

        [SqlColumn("Number of Locks", 70), SqlTypeFacets("smallint", true)]
        public short? Number_of_Locks
        {
            get;
            set;
        }

        [SqlColumn("Lock Information", 71), SqlTypeFacets("nvarchar", true, 512)]
        public string Lock_Information
        {
            get;
            set;
        }

        [SqlColumn("LSN before writes", 72), SqlTypeFacets("nvarchar", true, 46)]
        public string LSN_before_writes
        {
            get;
            set;
        }

        [SqlColumn("Pages Written", 73), SqlTypeFacets("smallint", true)]
        public short? Pages_Written
        {
            get;
            set;
        }

        [SqlColumn("Command Type", 74), SqlTypeFacets("int", true)]
        public int? Command_Type
        {
            get;
            set;
        }

        [SqlColumn("Publication ID", 75), SqlTypeFacets("int", true)]
        public int? Publication_ID
        {
            get;
            set;
        }

        [SqlColumn("Article ID", 76), SqlTypeFacets("int", true)]
        public int? Article_ID
        {
            get;
            set;
        }

        [SqlColumn("Partial Status", 77), SqlTypeFacets("int", true)]
        public int? Partial_Status
        {
            get;
            set;
        }

        [SqlColumn("Command", 78), SqlTypeFacets("nvarchar", true, 52)]
        public string Command
        {
            get;
            set;
        }

        [SqlColumn("Byte Offset", 79), SqlTypeFacets("smallint", true)]
        public short? Byte_Offset
        {
            get;
            set;
        }

        [SqlColumn("New Value", 80), SqlTypeFacets("binary", true, 1)]
        public Byte[] New_Value
        {
            get;
            set;
        }

        [SqlColumn("Old Value", 81), SqlTypeFacets("binary", true, 1)]
        public Byte[] Old_Value
        {
            get;
            set;
        }

        [SqlColumn("New Split Page", 82), SqlTypeFacets("nvarchar", true, 28)]
        public string New_Split_Page
        {
            get;
            set;
        }

        [SqlColumn("Rows Deleted", 83), SqlTypeFacets("smallint", true)]
        public short? Rows_Deleted
        {
            get;
            set;
        }

        [SqlColumn("Bytes Freed", 84), SqlTypeFacets("smallint", true)]
        public short? Bytes_Freed
        {
            get;
            set;
        }

        [SqlColumn("CI Table Id", 85), SqlTypeFacets("int", true)]
        public int? CI_Table_Id
        {
            get;
            set;
        }

        [SqlColumn("CI Index Id", 86), SqlTypeFacets("smallint", true)]
        public short? CI_Index_Id
        {
            get;
            set;
        }

        [SqlColumn("NewAllocUnitId", 87), SqlTypeFacets("bigint", true)]
        public long? NewAllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("FileGroup ID", 88), SqlTypeFacets("smallint", true)]
        public short? FileGroup_ID
        {
            get;
            set;
        }

        [SqlColumn("Meta Status", 89), SqlTypeFacets("binary", true, 4)]
        public Byte[] Meta_Status
        {
            get;
            set;
        }

        [SqlColumn("File Status", 90), SqlTypeFacets("binary", true, 4)]
        public Byte[] File_Status
        {
            get;
            set;
        }

        [SqlColumn("File ID", 91), SqlTypeFacets("smallint", true)]
        public short? File_ID
        {
            get;
            set;
        }

        [SqlColumn("Physical Name", 92), SqlTypeFacets("nvarchar", true, 522)]
        public string Physical_Name
        {
            get;
            set;
        }

        [SqlColumn("Logical Name", 93), SqlTypeFacets("nvarchar", true, 258)]
        public string Logical_Name
        {
            get;
            set;
        }

        [SqlColumn("Format LSN", 94), SqlTypeFacets("nvarchar", true, 46)]
        public string Format_LSN
        {
            get;
            set;
        }

        [SqlColumn("RowsetId", 95), SqlTypeFacets("bigint", true)]
        public long? RowsetId
        {
            get;
            set;
        }

        [SqlColumn("TextPtr", 96), SqlTypeFacets("binary", true, 16)]
        public Byte[] TextPtr
        {
            get;
            set;
        }

        [SqlColumn("Column Offset", 97), SqlTypeFacets("int", true)]
        public int? Column_Offset
        {
            get;
            set;
        }

        [SqlColumn("Flags", 98), SqlTypeFacets("int", true)]
        public int? Flags
        {
            get;
            set;
        }

        [SqlColumn("Text Size", 99), SqlTypeFacets("bigint", true)]
        public long? Text_Size
        {
            get;
            set;
        }

        [SqlColumn("Offset", 100), SqlTypeFacets("bigint", true)]
        public long? Offset
        {
            get;
            set;
        }

        [SqlColumn("Old Size", 101), SqlTypeFacets("bigint", true)]
        public long? Old_Size
        {
            get;
            set;
        }

        [SqlColumn("New Size", 102), SqlTypeFacets("bigint", true)]
        public long? New_Size
        {
            get;
            set;
        }

        [SqlColumn("Description", 103), SqlTypeFacets("nvarchar", false, 512)]
        public string Description
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent count", 104), SqlTypeFacets("int", true)]
        public int? Bulk_allocated_extent_count
        {
            get;
            set;
        }

        [SqlColumn("Bulk RowsetId", 105), SqlTypeFacets("bigint", true)]
        public long? Bulk_RowsetId
        {
            get;
            set;
        }

        [SqlColumn("Bulk AllocUnitId", 106), SqlTypeFacets("bigint", true)]
        public long? Bulk_AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocation first IAM Page ID", 107), SqlTypeFacets("nvarchar", true, 28)]
        public string Bulk_allocation_first_IAM_Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent ids", 108), SqlTypeFacets("nvarchar", true, 1922)]
        public string Bulk_allocated_extent_ids
        {
            get;
            set;
        }

        [SqlColumn("VLFs added", 109), SqlTypeFacets("nvarchar", true, 1376)]
        public string VLFs_added
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache Id", 110), SqlTypeFacets("int", true)]
        public int? InvalidateCache_Id
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache keys", 111), SqlTypeFacets("nvarchar", true, 512)]
        public string InvalidateCache_keys
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page Id", 112), SqlTypeFacets("nvarchar", true, 28)]
        public string CopyVerionInfo_Source_Page_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page LSN", 113), SqlTypeFacets("nvarchar", true, 46)]
        public string CopyVerionInfo_Source_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Id", 114), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Count", 115), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Count
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 0", 116), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_0
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 1", 117), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_1
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 2", 118), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_2
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 3", 119), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_3
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 4", 120), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_4
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 5", 121), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_5
        {
            get;
            set;
        }

        [SqlColumn("Compression Log Type", 122), SqlTypeFacets("smallint", true)]
        public short? Compression_Log_Type
        {
            get;
            set;
        }

        [SqlColumn("Compression Info", 123), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Compression_Info
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageType", 124), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageType
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageFlags", 125), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageFlags
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageLevel", 126), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageLevel
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageStat", 127), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageStat
        {
            get;
            set;
        }

        [SqlColumn("PageFormat FormatOption", 128), SqlTypeFacets("smallint", true)]
        public short? PageFormat_FormatOption
        {
            get;
            set;
        }

        [SqlColumn("Log Record", 129), SqlTypeFacets("varbinary", false, 8000)]
        public Byte[] Log_Record
        {
            get;
            set;
        }

        [SqlColumn("operation_desc", 130), SqlTypeFacets("nvarchar", true, 60)]
        public string operation_desc
        {
            get;
            set;
        }

        [SqlColumn("tx_end_timestamp", 131), SqlTypeFacets("bigint", true)]
        public long? tx_end_timestamp
        {
            get;
            set;
        }

        [SqlColumn("total_size", 132), SqlTypeFacets("int", true)]
        public int? total_size
        {
            get;
            set;
        }

        [SqlColumn("table_id", 133), SqlTypeFacets("bigint", true)]
        public long? table_id
        {
            get;
            set;
        }

        [SqlColumn("newrow_identity", 134), SqlTypeFacets("bigint", true)]
        public long? newrow_identity
        {
            get;
            set;
        }

        [SqlColumn("newrow_data", 135), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] newrow_data
        {
            get;
            set;
        }

        [SqlColumn("newrow_datasize", 136), SqlTypeFacets("int", true)]
        public int? newrow_datasize
        {
            get;
            set;
        }

        [SqlColumn("oldrow_begin_timestamp", 137), SqlTypeFacets("bigint", true)]
        public long? oldrow_begin_timestamp
        {
            get;
            set;
        }

        [SqlColumn("oldrow_identity", 138), SqlTypeFacets("bigint", true)]
        public long? oldrow_identity
        {
            get;
            set;
        }

        [SqlColumn("oldrow_key_data", 139), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] oldrow_key_data
        {
            get;
            set;
        }

        [SqlColumn("oldrow_key_datasize", 140), SqlTypeFacets("int", true)]
        public int? oldrow_key_datasize
        {
            get;
            set;
        }

        [SqlColumn("xtp_description", 141), SqlTypeFacets("nvarchar", true, 2048)]
        public string xtp_description
        {
            get;
            set;
        }

        public fn_dump_dblog_xtpResult()
        {
        }

        public fn_dump_dblog_xtpResult(object[] items)
        {
            Current_LSN = (string)items[0];
            Operation = (string)items[1];
            Context = (string)items[2];
            Transaction_ID = (string)items[3];
            LogBlockGeneration = (long)items[4];
            Tag_Bits = (Byte[])items[5];
            Log_Record_Fixed_Length = (short)items[6];
            Log_Record_Length = (short)items[7];
            Previous_LSN = (string)items[8];
            Flag_Bits = (Byte[])items[9];
            Log_Reserve = (int)items[10];
            AllocUnitId = (long?)items[11];
            AllocUnitName = (string)items[12];
            Page_ID = (string)items[13];
            Slot_ID = (int?)items[14];
            Previous_Page_LSN = (string)items[15];
            PartitionId = (long?)items[16];
            RowFlags = (short?)items[17];
            Num_Elements = (short?)items[18];
            Offset_in_Row = (short?)items[19];
            Modify_Size = (short?)items[20];
            Checkpoint_Begin = (string)items[21];
            CHKPT_Begin_DB_Version = (short?)items[22];
            Max_XDESID = (string)items[23];
            Num_Transactions = (short?)items[24];
            Checkpoint_End = (string)items[25];
            CHKPT_End_DB_Version = (short?)items[26];
            Minimum_LSN = (string)items[27];
            Dirty_Pages = (int?)items[28];
            Oldest_Replicated_Begin_LSN = (string)items[29];
            Next_Replicated_End_LSN = (string)items[30];
            Last_Distributed_Backup_End_LSN = (string)items[31];
            Last_Distributed_End_LSN = (string)items[32];
            Repl_Min_Hold_LSN = (string)items[33];
            Server_UID = (int?)items[34];
            SPID = (int?)items[35];
            Beginlog_Status = (Byte[])items[36];
            Xact_Type = (int?)items[37];
            Begin_Time = (string)items[38];
            Transaction_Name = (string)items[39];
            Transaction_SID = (Byte[])items[40];
            Parent_Transaction_ID = (string)items[41];
            Oldest_Active_Transaction_ID = (string)items[42];
            Xact_ID = (long?)items[43];
            Xact_Node_ID = (int?)items[44];
            Xact_Node_Local_ID = (int?)items[45];
            End_AGE = (long?)items[46];
            End_Time = (string)items[47];
            Transaction_Begin = (string)items[48];
            Replicated_Records = (long?)items[49];
            Oldest_Active_LSN = (string)items[50];
            Server_Name = (string)items[51];
            Database_Name = (string)items[52];
            Mark_Name = (string)items[53];
            Repl_Partition_ID = (int?)items[54];
            Repl_Epoch = (int?)items[55];
            Repl_CSN = (long?)items[56];
            Repl_Flags = (int?)items[57];
            Repl_Msg = (Byte[])items[58];
            Repl_Source_Commit_Time = (string)items[59];
            Master_XDESID = (string)items[60];
            Master_DBID = (int?)items[61];
            Preplog_Begin_LSN = (string)items[62];
            Prepare_Time = (string)items[63];
            Virtual_Clock = (long?)items[64];
            Previous_Savepoint = (string)items[65];
            Savepoint_Name = (string)items[66];
            Rowbits_First_Bit = (short?)items[67];
            Rowbits_Bit_Count = (short?)items[68];
            Rowbits_Bit_Value = (Byte[])items[69];
            Number_of_Locks = (short?)items[70];
            Lock_Information = (string)items[71];
            LSN_before_writes = (string)items[72];
            Pages_Written = (short?)items[73];
            Command_Type = (int?)items[74];
            Publication_ID = (int?)items[75];
            Article_ID = (int?)items[76];
            Partial_Status = (int?)items[77];
            Command = (string)items[78];
            Byte_Offset = (short?)items[79];
            New_Value = (Byte[])items[80];
            Old_Value = (Byte[])items[81];
            New_Split_Page = (string)items[82];
            Rows_Deleted = (short?)items[83];
            Bytes_Freed = (short?)items[84];
            CI_Table_Id = (int?)items[85];
            CI_Index_Id = (short?)items[86];
            NewAllocUnitId = (long?)items[87];
            FileGroup_ID = (short?)items[88];
            Meta_Status = (Byte[])items[89];
            File_Status = (Byte[])items[90];
            File_ID = (short?)items[91];
            Physical_Name = (string)items[92];
            Logical_Name = (string)items[93];
            Format_LSN = (string)items[94];
            RowsetId = (long?)items[95];
            TextPtr = (Byte[])items[96];
            Column_Offset = (int?)items[97];
            Flags = (int?)items[98];
            Text_Size = (long?)items[99];
            Offset = (long?)items[100];
            Old_Size = (long?)items[101];
            New_Size = (long?)items[102];
            Description = (string)items[103];
            Bulk_allocated_extent_count = (int?)items[104];
            Bulk_RowsetId = (long?)items[105];
            Bulk_AllocUnitId = (long?)items[106];
            Bulk_allocation_first_IAM_Page_ID = (string)items[107];
            Bulk_allocated_extent_ids = (string)items[108];
            VLFs_added = (string)items[109];
            InvalidateCache_Id = (int?)items[110];
            InvalidateCache_keys = (string)items[111];
            CopyVerionInfo_Source_Page_Id = (string)items[112];
            CopyVerionInfo_Source_Page_LSN = (string)items[113];
            CopyVerionInfo_Source_Slot_Id = (int?)items[114];
            CopyVerionInfo_Source_Slot_Count = (int?)items[115];
            RowLog_Contents_0 = (Byte[])items[116];
            RowLog_Contents_1 = (Byte[])items[117];
            RowLog_Contents_2 = (Byte[])items[118];
            RowLog_Contents_3 = (Byte[])items[119];
            RowLog_Contents_4 = (Byte[])items[120];
            RowLog_Contents_5 = (Byte[])items[121];
            Compression_Log_Type = (short?)items[122];
            Compression_Info = (Byte[])items[123];
            PageFormat_PageType = (short?)items[124];
            PageFormat_PageFlags = (short?)items[125];
            PageFormat_PageLevel = (short?)items[126];
            PageFormat_PageStat = (short?)items[127];
            PageFormat_FormatOption = (short?)items[128];
            Log_Record = (Byte[])items[129];
            operation_desc = (string)items[130];
            tx_end_timestamp = (long?)items[131];
            total_size = (int?)items[132];
            table_id = (long?)items[133];
            newrow_identity = (long?)items[134];
            newrow_data = (Byte[])items[135];
            newrow_datasize = (int?)items[136];
            oldrow_begin_timestamp = (long?)items[137];
            oldrow_identity = (long?)items[138];
            oldrow_key_data = (Byte[])items[139];
            oldrow_key_datasize = (int?)items[140];
            xtp_description = (string)items[141];
        }

        public fn_dump_dblog_xtpResult(string Current_LSN, string Operation, string Context, string Transaction_ID, long LogBlockGeneration, Byte[] Tag_Bits, short Log_Record_Fixed_Length, short Log_Record_Length, string Previous_LSN, Byte[] Flag_Bits, int Log_Reserve, long? AllocUnitId, string AllocUnitName, string Page_ID, int? Slot_ID, string Previous_Page_LSN, long? PartitionId, short? RowFlags, short? Num_Elements, short? Offset_in_Row, short? Modify_Size, string Checkpoint_Begin, short? CHKPT_Begin_DB_Version, string Max_XDESID, short? Num_Transactions, string Checkpoint_End, short? CHKPT_End_DB_Version, string Minimum_LSN, int? Dirty_Pages, string Oldest_Replicated_Begin_LSN, string Next_Replicated_End_LSN, string Last_Distributed_Backup_End_LSN, string Last_Distributed_End_LSN, string Repl_Min_Hold_LSN, int? Server_UID, int? SPID, Byte[] Beginlog_Status, int? Xact_Type, string Begin_Time, string Transaction_Name, Byte[] Transaction_SID, string Parent_Transaction_ID, string Oldest_Active_Transaction_ID, long? Xact_ID, int? Xact_Node_ID, int? Xact_Node_Local_ID, long? End_AGE, string End_Time, string Transaction_Begin, long? Replicated_Records, string Oldest_Active_LSN, string Server_Name, string Database_Name, string Mark_Name, int? Repl_Partition_ID, int? Repl_Epoch, long? Repl_CSN, int? Repl_Flags, Byte[] Repl_Msg, string Repl_Source_Commit_Time, string Master_XDESID, int? Master_DBID, string Preplog_Begin_LSN, string Prepare_Time, long? Virtual_Clock, string Previous_Savepoint, string Savepoint_Name, short? Rowbits_First_Bit, short? Rowbits_Bit_Count, Byte[] Rowbits_Bit_Value, short? Number_of_Locks, string Lock_Information, string LSN_before_writes, short? Pages_Written, int? Command_Type, int? Publication_ID, int? Article_ID, int? Partial_Status, string Command, short? Byte_Offset, Byte[] New_Value, Byte[] Old_Value, string New_Split_Page, short? Rows_Deleted, short? Bytes_Freed, int? CI_Table_Id, short? CI_Index_Id, long? NewAllocUnitId, short? FileGroup_ID, Byte[] Meta_Status, Byte[] File_Status, short? File_ID, string Physical_Name, string Logical_Name, string Format_LSN, long? RowsetId, Byte[] TextPtr, int? Column_Offset, int? Flags, long? Text_Size, long? Offset, long? Old_Size, long? New_Size, string Description, int? Bulk_allocated_extent_count, long? Bulk_RowsetId, long? Bulk_AllocUnitId, string Bulk_allocation_first_IAM_Page_ID, string Bulk_allocated_extent_ids, string VLFs_added, int? InvalidateCache_Id, string InvalidateCache_keys, string CopyVerionInfo_Source_Page_Id, string CopyVerionInfo_Source_Page_LSN, int? CopyVerionInfo_Source_Slot_Id, int? CopyVerionInfo_Source_Slot_Count, Byte[] RowLog_Contents_0, Byte[] RowLog_Contents_1, Byte[] RowLog_Contents_2, Byte[] RowLog_Contents_3, Byte[] RowLog_Contents_4, Byte[] RowLog_Contents_5, short? Compression_Log_Type, Byte[] Compression_Info, short? PageFormat_PageType, short? PageFormat_PageFlags, short? PageFormat_PageLevel, short? PageFormat_PageStat, short? PageFormat_FormatOption, Byte[] Log_Record, string operation_desc, long? tx_end_timestamp, int? total_size, long? table_id, long? newrow_identity, Byte[] newrow_data, int? newrow_datasize, long? oldrow_begin_timestamp, long? oldrow_identity, Byte[] oldrow_key_data, int? oldrow_key_datasize, string xtp_description)
        {
            this.Current_LSN = Current_LSN;
            this.Operation = Operation;
            this.Context = Context;
            this.Transaction_ID = Transaction_ID;
            this.LogBlockGeneration = LogBlockGeneration;
            this.Tag_Bits = Tag_Bits;
            this.Log_Record_Fixed_Length = Log_Record_Fixed_Length;
            this.Log_Record_Length = Log_Record_Length;
            this.Previous_LSN = Previous_LSN;
            this.Flag_Bits = Flag_Bits;
            this.Log_Reserve = Log_Reserve;
            this.AllocUnitId = AllocUnitId;
            this.AllocUnitName = AllocUnitName;
            this.Page_ID = Page_ID;
            this.Slot_ID = Slot_ID;
            this.Previous_Page_LSN = Previous_Page_LSN;
            this.PartitionId = PartitionId;
            this.RowFlags = RowFlags;
            this.Num_Elements = Num_Elements;
            this.Offset_in_Row = Offset_in_Row;
            this.Modify_Size = Modify_Size;
            this.Checkpoint_Begin = Checkpoint_Begin;
            this.CHKPT_Begin_DB_Version = CHKPT_Begin_DB_Version;
            this.Max_XDESID = Max_XDESID;
            this.Num_Transactions = Num_Transactions;
            this.Checkpoint_End = Checkpoint_End;
            this.CHKPT_End_DB_Version = CHKPT_End_DB_Version;
            this.Minimum_LSN = Minimum_LSN;
            this.Dirty_Pages = Dirty_Pages;
            this.Oldest_Replicated_Begin_LSN = Oldest_Replicated_Begin_LSN;
            this.Next_Replicated_End_LSN = Next_Replicated_End_LSN;
            this.Last_Distributed_Backup_End_LSN = Last_Distributed_Backup_End_LSN;
            this.Last_Distributed_End_LSN = Last_Distributed_End_LSN;
            this.Repl_Min_Hold_LSN = Repl_Min_Hold_LSN;
            this.Server_UID = Server_UID;
            this.SPID = SPID;
            this.Beginlog_Status = Beginlog_Status;
            this.Xact_Type = Xact_Type;
            this.Begin_Time = Begin_Time;
            this.Transaction_Name = Transaction_Name;
            this.Transaction_SID = Transaction_SID;
            this.Parent_Transaction_ID = Parent_Transaction_ID;
            this.Oldest_Active_Transaction_ID = Oldest_Active_Transaction_ID;
            this.Xact_ID = Xact_ID;
            this.Xact_Node_ID = Xact_Node_ID;
            this.Xact_Node_Local_ID = Xact_Node_Local_ID;
            this.End_AGE = End_AGE;
            this.End_Time = End_Time;
            this.Transaction_Begin = Transaction_Begin;
            this.Replicated_Records = Replicated_Records;
            this.Oldest_Active_LSN = Oldest_Active_LSN;
            this.Server_Name = Server_Name;
            this.Database_Name = Database_Name;
            this.Mark_Name = Mark_Name;
            this.Repl_Partition_ID = Repl_Partition_ID;
            this.Repl_Epoch = Repl_Epoch;
            this.Repl_CSN = Repl_CSN;
            this.Repl_Flags = Repl_Flags;
            this.Repl_Msg = Repl_Msg;
            this.Repl_Source_Commit_Time = Repl_Source_Commit_Time;
            this.Master_XDESID = Master_XDESID;
            this.Master_DBID = Master_DBID;
            this.Preplog_Begin_LSN = Preplog_Begin_LSN;
            this.Prepare_Time = Prepare_Time;
            this.Virtual_Clock = Virtual_Clock;
            this.Previous_Savepoint = Previous_Savepoint;
            this.Savepoint_Name = Savepoint_Name;
            this.Rowbits_First_Bit = Rowbits_First_Bit;
            this.Rowbits_Bit_Count = Rowbits_Bit_Count;
            this.Rowbits_Bit_Value = Rowbits_Bit_Value;
            this.Number_of_Locks = Number_of_Locks;
            this.Lock_Information = Lock_Information;
            this.LSN_before_writes = LSN_before_writes;
            this.Pages_Written = Pages_Written;
            this.Command_Type = Command_Type;
            this.Publication_ID = Publication_ID;
            this.Article_ID = Article_ID;
            this.Partial_Status = Partial_Status;
            this.Command = Command;
            this.Byte_Offset = Byte_Offset;
            this.New_Value = New_Value;
            this.Old_Value = Old_Value;
            this.New_Split_Page = New_Split_Page;
            this.Rows_Deleted = Rows_Deleted;
            this.Bytes_Freed = Bytes_Freed;
            this.CI_Table_Id = CI_Table_Id;
            this.CI_Index_Id = CI_Index_Id;
            this.NewAllocUnitId = NewAllocUnitId;
            this.FileGroup_ID = FileGroup_ID;
            this.Meta_Status = Meta_Status;
            this.File_Status = File_Status;
            this.File_ID = File_ID;
            this.Physical_Name = Physical_Name;
            this.Logical_Name = Logical_Name;
            this.Format_LSN = Format_LSN;
            this.RowsetId = RowsetId;
            this.TextPtr = TextPtr;
            this.Column_Offset = Column_Offset;
            this.Flags = Flags;
            this.Text_Size = Text_Size;
            this.Offset = Offset;
            this.Old_Size = Old_Size;
            this.New_Size = New_Size;
            this.Description = Description;
            this.Bulk_allocated_extent_count = Bulk_allocated_extent_count;
            this.Bulk_RowsetId = Bulk_RowsetId;
            this.Bulk_AllocUnitId = Bulk_AllocUnitId;
            this.Bulk_allocation_first_IAM_Page_ID = Bulk_allocation_first_IAM_Page_ID;
            this.Bulk_allocated_extent_ids = Bulk_allocated_extent_ids;
            this.VLFs_added = VLFs_added;
            this.InvalidateCache_Id = InvalidateCache_Id;
            this.InvalidateCache_keys = InvalidateCache_keys;
            this.CopyVerionInfo_Source_Page_Id = CopyVerionInfo_Source_Page_Id;
            this.CopyVerionInfo_Source_Page_LSN = CopyVerionInfo_Source_Page_LSN;
            this.CopyVerionInfo_Source_Slot_Id = CopyVerionInfo_Source_Slot_Id;
            this.CopyVerionInfo_Source_Slot_Count = CopyVerionInfo_Source_Slot_Count;
            this.RowLog_Contents_0 = RowLog_Contents_0;
            this.RowLog_Contents_1 = RowLog_Contents_1;
            this.RowLog_Contents_2 = RowLog_Contents_2;
            this.RowLog_Contents_3 = RowLog_Contents_3;
            this.RowLog_Contents_4 = RowLog_Contents_4;
            this.RowLog_Contents_5 = RowLog_Contents_5;
            this.Compression_Log_Type = Compression_Log_Type;
            this.Compression_Info = Compression_Info;
            this.PageFormat_PageType = PageFormat_PageType;
            this.PageFormat_PageFlags = PageFormat_PageFlags;
            this.PageFormat_PageLevel = PageFormat_PageLevel;
            this.PageFormat_PageStat = PageFormat_PageStat;
            this.PageFormat_FormatOption = PageFormat_FormatOption;
            this.Log_Record = Log_Record;
            this.operation_desc = operation_desc;
            this.tx_end_timestamp = tx_end_timestamp;
            this.total_size = total_size;
            this.table_id = table_id;
            this.newrow_identity = newrow_identity;
            this.newrow_data = newrow_data;
            this.newrow_datasize = newrow_datasize;
            this.oldrow_begin_timestamp = oldrow_begin_timestamp;
            this.oldrow_identity = oldrow_identity;
            this.oldrow_key_data = oldrow_key_data;
            this.oldrow_key_datasize = oldrow_key_datasize;
            this.xtp_description = xtp_description;
        }

        public override object[] GetItemArray()
        {
            return new object[] { Current_LSN, Operation, Context, Transaction_ID, LogBlockGeneration, Tag_Bits, Log_Record_Fixed_Length, Log_Record_Length, Previous_LSN, Flag_Bits, Log_Reserve, AllocUnitId, AllocUnitName, Page_ID, Slot_ID, Previous_Page_LSN, PartitionId, RowFlags, Num_Elements, Offset_in_Row, Modify_Size, Checkpoint_Begin, CHKPT_Begin_DB_Version, Max_XDESID, Num_Transactions, Checkpoint_End, CHKPT_End_DB_Version, Minimum_LSN, Dirty_Pages, Oldest_Replicated_Begin_LSN, Next_Replicated_End_LSN, Last_Distributed_Backup_End_LSN, Last_Distributed_End_LSN, Repl_Min_Hold_LSN, Server_UID, SPID, Beginlog_Status, Xact_Type, Begin_Time, Transaction_Name, Transaction_SID, Parent_Transaction_ID, Oldest_Active_Transaction_ID, Xact_ID, Xact_Node_ID, Xact_Node_Local_ID, End_AGE, End_Time, Transaction_Begin, Replicated_Records, Oldest_Active_LSN, Server_Name, Database_Name, Mark_Name, Repl_Partition_ID, Repl_Epoch, Repl_CSN, Repl_Flags, Repl_Msg, Repl_Source_Commit_Time, Master_XDESID, Master_DBID, Preplog_Begin_LSN, Prepare_Time, Virtual_Clock, Previous_Savepoint, Savepoint_Name, Rowbits_First_Bit, Rowbits_Bit_Count, Rowbits_Bit_Value, Number_of_Locks, Lock_Information, LSN_before_writes, Pages_Written, Command_Type, Publication_ID, Article_ID, Partial_Status, Command, Byte_Offset, New_Value, Old_Value, New_Split_Page, Rows_Deleted, Bytes_Freed, CI_Table_Id, CI_Index_Id, NewAllocUnitId, FileGroup_ID, Meta_Status, File_Status, File_ID, Physical_Name, Logical_Name, Format_LSN, RowsetId, TextPtr, Column_Offset, Flags, Text_Size, Offset, Old_Size, New_Size, Description, Bulk_allocated_extent_count, Bulk_RowsetId, Bulk_AllocUnitId, Bulk_allocation_first_IAM_Page_ID, Bulk_allocated_extent_ids, VLFs_added, InvalidateCache_Id, InvalidateCache_keys, CopyVerionInfo_Source_Page_Id, CopyVerionInfo_Source_Page_LSN, CopyVerionInfo_Source_Slot_Id, CopyVerionInfo_Source_Slot_Count, RowLog_Contents_0, RowLog_Contents_1, RowLog_Contents_2, RowLog_Contents_3, RowLog_Contents_4, RowLog_Contents_5, Compression_Log_Type, Compression_Info, PageFormat_PageType, PageFormat_PageFlags, PageFormat_PageLevel, PageFormat_PageStat, PageFormat_FormatOption, Log_Record, operation_desc, tx_end_timestamp, total_size, table_id, newrow_identity, newrow_data, newrow_datasize, oldrow_begin_timestamp, oldrow_identity, oldrow_key_data, oldrow_key_datasize, xtp_description };
        }

        public override void SetItemArray(object[] items)
        {
            Current_LSN = (string)items[0];
            Operation = (string)items[1];
            Context = (string)items[2];
            Transaction_ID = (string)items[3];
            LogBlockGeneration = (long)items[4];
            Tag_Bits = (Byte[])items[5];
            Log_Record_Fixed_Length = (short)items[6];
            Log_Record_Length = (short)items[7];
            Previous_LSN = (string)items[8];
            Flag_Bits = (Byte[])items[9];
            Log_Reserve = (int)items[10];
            AllocUnitId = (long?)items[11];
            AllocUnitName = (string)items[12];
            Page_ID = (string)items[13];
            Slot_ID = (int?)items[14];
            Previous_Page_LSN = (string)items[15];
            PartitionId = (long?)items[16];
            RowFlags = (short?)items[17];
            Num_Elements = (short?)items[18];
            Offset_in_Row = (short?)items[19];
            Modify_Size = (short?)items[20];
            Checkpoint_Begin = (string)items[21];
            CHKPT_Begin_DB_Version = (short?)items[22];
            Max_XDESID = (string)items[23];
            Num_Transactions = (short?)items[24];
            Checkpoint_End = (string)items[25];
            CHKPT_End_DB_Version = (short?)items[26];
            Minimum_LSN = (string)items[27];
            Dirty_Pages = (int?)items[28];
            Oldest_Replicated_Begin_LSN = (string)items[29];
            Next_Replicated_End_LSN = (string)items[30];
            Last_Distributed_Backup_End_LSN = (string)items[31];
            Last_Distributed_End_LSN = (string)items[32];
            Repl_Min_Hold_LSN = (string)items[33];
            Server_UID = (int?)items[34];
            SPID = (int?)items[35];
            Beginlog_Status = (Byte[])items[36];
            Xact_Type = (int?)items[37];
            Begin_Time = (string)items[38];
            Transaction_Name = (string)items[39];
            Transaction_SID = (Byte[])items[40];
            Parent_Transaction_ID = (string)items[41];
            Oldest_Active_Transaction_ID = (string)items[42];
            Xact_ID = (long?)items[43];
            Xact_Node_ID = (int?)items[44];
            Xact_Node_Local_ID = (int?)items[45];
            End_AGE = (long?)items[46];
            End_Time = (string)items[47];
            Transaction_Begin = (string)items[48];
            Replicated_Records = (long?)items[49];
            Oldest_Active_LSN = (string)items[50];
            Server_Name = (string)items[51];
            Database_Name = (string)items[52];
            Mark_Name = (string)items[53];
            Repl_Partition_ID = (int?)items[54];
            Repl_Epoch = (int?)items[55];
            Repl_CSN = (long?)items[56];
            Repl_Flags = (int?)items[57];
            Repl_Msg = (Byte[])items[58];
            Repl_Source_Commit_Time = (string)items[59];
            Master_XDESID = (string)items[60];
            Master_DBID = (int?)items[61];
            Preplog_Begin_LSN = (string)items[62];
            Prepare_Time = (string)items[63];
            Virtual_Clock = (long?)items[64];
            Previous_Savepoint = (string)items[65];
            Savepoint_Name = (string)items[66];
            Rowbits_First_Bit = (short?)items[67];
            Rowbits_Bit_Count = (short?)items[68];
            Rowbits_Bit_Value = (Byte[])items[69];
            Number_of_Locks = (short?)items[70];
            Lock_Information = (string)items[71];
            LSN_before_writes = (string)items[72];
            Pages_Written = (short?)items[73];
            Command_Type = (int?)items[74];
            Publication_ID = (int?)items[75];
            Article_ID = (int?)items[76];
            Partial_Status = (int?)items[77];
            Command = (string)items[78];
            Byte_Offset = (short?)items[79];
            New_Value = (Byte[])items[80];
            Old_Value = (Byte[])items[81];
            New_Split_Page = (string)items[82];
            Rows_Deleted = (short?)items[83];
            Bytes_Freed = (short?)items[84];
            CI_Table_Id = (int?)items[85];
            CI_Index_Id = (short?)items[86];
            NewAllocUnitId = (long?)items[87];
            FileGroup_ID = (short?)items[88];
            Meta_Status = (Byte[])items[89];
            File_Status = (Byte[])items[90];
            File_ID = (short?)items[91];
            Physical_Name = (string)items[92];
            Logical_Name = (string)items[93];
            Format_LSN = (string)items[94];
            RowsetId = (long?)items[95];
            TextPtr = (Byte[])items[96];
            Column_Offset = (int?)items[97];
            Flags = (int?)items[98];
            Text_Size = (long?)items[99];
            Offset = (long?)items[100];
            Old_Size = (long?)items[101];
            New_Size = (long?)items[102];
            Description = (string)items[103];
            Bulk_allocated_extent_count = (int?)items[104];
            Bulk_RowsetId = (long?)items[105];
            Bulk_AllocUnitId = (long?)items[106];
            Bulk_allocation_first_IAM_Page_ID = (string)items[107];
            Bulk_allocated_extent_ids = (string)items[108];
            VLFs_added = (string)items[109];
            InvalidateCache_Id = (int?)items[110];
            InvalidateCache_keys = (string)items[111];
            CopyVerionInfo_Source_Page_Id = (string)items[112];
            CopyVerionInfo_Source_Page_LSN = (string)items[113];
            CopyVerionInfo_Source_Slot_Id = (int?)items[114];
            CopyVerionInfo_Source_Slot_Count = (int?)items[115];
            RowLog_Contents_0 = (Byte[])items[116];
            RowLog_Contents_1 = (Byte[])items[117];
            RowLog_Contents_2 = (Byte[])items[118];
            RowLog_Contents_3 = (Byte[])items[119];
            RowLog_Contents_4 = (Byte[])items[120];
            RowLog_Contents_5 = (Byte[])items[121];
            Compression_Log_Type = (short?)items[122];
            Compression_Info = (Byte[])items[123];
            PageFormat_PageType = (short?)items[124];
            PageFormat_PageFlags = (short?)items[125];
            PageFormat_PageLevel = (short?)items[126];
            PageFormat_PageStat = (short?)items[127];
            PageFormat_FormatOption = (short?)items[128];
            Log_Record = (Byte[])items[129];
            operation_desc = (string)items[130];
            tx_end_timestamp = (long?)items[131];
            total_size = (int?)items[132];
            table_id = (long?)items[133];
            newrow_identity = (long?)items[134];
            newrow_data = (Byte[])items[135];
            newrow_datasize = (int?)items[136];
            oldrow_begin_timestamp = (long?)items[137];
            oldrow_identity = (long?)items[138];
            oldrow_key_data = (Byte[])items[139];
            oldrow_key_datasize = (int?)items[140];
            xtp_description = (string)items[141];
        }
    }

    [SqlTableFunction("sys", "fn_dump_dblog_xtp")]
    public partial class fn_dump_dblog_xtp : SqlTableFunctionProxy<fn_dump_dblog_xtp, fn_dump_dblog_xtpResult>
    {
        [SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string start
        {
            get;
            set;
        }

        [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string end
        {
            get;
            set;
        }

        [SqlParameter("@devtype", 2, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string devtype
        {
            get;
            set;
        }

        [SqlParameter("@seqnum", 3, false, false), SqlTypeFacets("int", true)]
        public int? seqnum
        {
            get;
            set;
        }

        [SqlParameter("@fname1", 4, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname1
        {
            get;
            set;
        }

        [SqlParameter("@fname2", 5, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname2
        {
            get;
            set;
        }

        [SqlParameter("@fname3", 6, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname3
        {
            get;
            set;
        }

        [SqlParameter("@fname4", 7, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname4
        {
            get;
            set;
        }

        [SqlParameter("@fname5", 8, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname5
        {
            get;
            set;
        }

        [SqlParameter("@fname6", 9, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname6
        {
            get;
            set;
        }

        [SqlParameter("@fname7", 10, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname7
        {
            get;
            set;
        }

        [SqlParameter("@fname8", 11, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname8
        {
            get;
            set;
        }

        [SqlParameter("@fname9", 12, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname9
        {
            get;
            set;
        }

        [SqlParameter("@fname10", 13, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname10
        {
            get;
            set;
        }

        [SqlParameter("@fname11", 14, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname11
        {
            get;
            set;
        }

        [SqlParameter("@fname12", 15, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname12
        {
            get;
            set;
        }

        [SqlParameter("@fname13", 16, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname13
        {
            get;
            set;
        }

        [SqlParameter("@fname14", 17, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname14
        {
            get;
            set;
        }

        [SqlParameter("@fname15", 18, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname15
        {
            get;
            set;
        }

        [SqlParameter("@fname16", 19, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname16
        {
            get;
            set;
        }

        [SqlParameter("@fname17", 20, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname17
        {
            get;
            set;
        }

        [SqlParameter("@fname18", 21, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname18
        {
            get;
            set;
        }

        [SqlParameter("@fname19", 22, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname19
        {
            get;
            set;
        }

        [SqlParameter("@fname20", 23, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname20
        {
            get;
            set;
        }

        [SqlParameter("@fname21", 24, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname21
        {
            get;
            set;
        }

        [SqlParameter("@fname22", 25, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname22
        {
            get;
            set;
        }

        [SqlParameter("@fname23", 26, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname23
        {
            get;
            set;
        }

        [SqlParameter("@fname24", 27, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname24
        {
            get;
            set;
        }

        [SqlParameter("@fname25", 28, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname25
        {
            get;
            set;
        }

        [SqlParameter("@fname26", 29, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname26
        {
            get;
            set;
        }

        [SqlParameter("@fname27", 30, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname27
        {
            get;
            set;
        }

        [SqlParameter("@fname28", 31, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname28
        {
            get;
            set;
        }

        [SqlParameter("@fname29", 32, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname29
        {
            get;
            set;
        }

        [SqlParameter("@fname30", 33, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname30
        {
            get;
            set;
        }

        [SqlParameter("@fname31", 34, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname31
        {
            get;
            set;
        }

        [SqlParameter("@fname32", 35, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname32
        {
            get;
            set;
        }

        [SqlParameter("@fname33", 36, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname33
        {
            get;
            set;
        }

        [SqlParameter("@fname34", 37, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname34
        {
            get;
            set;
        }

        [SqlParameter("@fname35", 38, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname35
        {
            get;
            set;
        }

        [SqlParameter("@fname36", 39, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname36
        {
            get;
            set;
        }

        [SqlParameter("@fname37", 40, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname37
        {
            get;
            set;
        }

        [SqlParameter("@fname38", 41, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname38
        {
            get;
            set;
        }

        [SqlParameter("@fname39", 42, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname39
        {
            get;
            set;
        }

        [SqlParameter("@fname40", 43, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname40
        {
            get;
            set;
        }

        [SqlParameter("@fname41", 44, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname41
        {
            get;
            set;
        }

        [SqlParameter("@fname42", 45, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname42
        {
            get;
            set;
        }

        [SqlParameter("@fname43", 46, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname43
        {
            get;
            set;
        }

        [SqlParameter("@fname44", 47, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname44
        {
            get;
            set;
        }

        [SqlParameter("@fname45", 48, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname45
        {
            get;
            set;
        }

        [SqlParameter("@fname46", 49, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname46
        {
            get;
            set;
        }

        [SqlParameter("@fname47", 50, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname47
        {
            get;
            set;
        }

        [SqlParameter("@fname48", 51, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname48
        {
            get;
            set;
        }

        [SqlParameter("@fname49", 52, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname49
        {
            get;
            set;
        }

        [SqlParameter("@fname50", 53, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname50
        {
            get;
            set;
        }

        [SqlParameter("@fname51", 54, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname51
        {
            get;
            set;
        }

        [SqlParameter("@fname52", 55, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname52
        {
            get;
            set;
        }

        [SqlParameter("@fname53", 56, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname53
        {
            get;
            set;
        }

        [SqlParameter("@fname54", 57, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname54
        {
            get;
            set;
        }

        [SqlParameter("@fname55", 58, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname55
        {
            get;
            set;
        }

        [SqlParameter("@fname56", 59, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname56
        {
            get;
            set;
        }

        [SqlParameter("@fname57", 60, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname57
        {
            get;
            set;
        }

        [SqlParameter("@fname58", 61, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname58
        {
            get;
            set;
        }

        [SqlParameter("@fname59", 62, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname59
        {
            get;
            set;
        }

        [SqlParameter("@fname60", 63, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname60
        {
            get;
            set;
        }

        [SqlParameter("@fname61", 64, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname61
        {
            get;
            set;
        }

        [SqlParameter("@fname62", 65, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname62
        {
            get;
            set;
        }

        [SqlParameter("@fname63", 66, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname63
        {
            get;
            set;
        }

        [SqlParameter("@fname64", 67, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname64
        {
            get;
            set;
        }

        public fn_dump_dblog_xtp()
        {
        }

        public fn_dump_dblog_xtp(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
            devtype = (string)items[2];
            seqnum = (int?)items[3];
            fname1 = (string)items[4];
            fname2 = (string)items[5];
            fname3 = (string)items[6];
            fname4 = (string)items[7];
            fname5 = (string)items[8];
            fname6 = (string)items[9];
            fname7 = (string)items[10];
            fname8 = (string)items[11];
            fname9 = (string)items[12];
            fname10 = (string)items[13];
            fname11 = (string)items[14];
            fname12 = (string)items[15];
            fname13 = (string)items[16];
            fname14 = (string)items[17];
            fname15 = (string)items[18];
            fname16 = (string)items[19];
            fname17 = (string)items[20];
            fname18 = (string)items[21];
            fname19 = (string)items[22];
            fname20 = (string)items[23];
            fname21 = (string)items[24];
            fname22 = (string)items[25];
            fname23 = (string)items[26];
            fname24 = (string)items[27];
            fname25 = (string)items[28];
            fname26 = (string)items[29];
            fname27 = (string)items[30];
            fname28 = (string)items[31];
            fname29 = (string)items[32];
            fname30 = (string)items[33];
            fname31 = (string)items[34];
            fname32 = (string)items[35];
            fname33 = (string)items[36];
            fname34 = (string)items[37];
            fname35 = (string)items[38];
            fname36 = (string)items[39];
            fname37 = (string)items[40];
            fname38 = (string)items[41];
            fname39 = (string)items[42];
            fname40 = (string)items[43];
            fname41 = (string)items[44];
            fname42 = (string)items[45];
            fname43 = (string)items[46];
            fname44 = (string)items[47];
            fname45 = (string)items[48];
            fname46 = (string)items[49];
            fname47 = (string)items[50];
            fname48 = (string)items[51];
            fname49 = (string)items[52];
            fname50 = (string)items[53];
            fname51 = (string)items[54];
            fname52 = (string)items[55];
            fname53 = (string)items[56];
            fname54 = (string)items[57];
            fname55 = (string)items[58];
            fname56 = (string)items[59];
            fname57 = (string)items[60];
            fname58 = (string)items[61];
            fname59 = (string)items[62];
            fname60 = (string)items[63];
            fname61 = (string)items[64];
            fname62 = (string)items[65];
            fname63 = (string)items[66];
            fname64 = (string)items[67];
        }

        public fn_dump_dblog_xtp(string start, string end, string devtype, int? seqnum, string fname1, string fname2, string fname3, string fname4, string fname5, string fname6, string fname7, string fname8, string fname9, string fname10, string fname11, string fname12, string fname13, string fname14, string fname15, string fname16, string fname17, string fname18, string fname19, string fname20, string fname21, string fname22, string fname23, string fname24, string fname25, string fname26, string fname27, string fname28, string fname29, string fname30, string fname31, string fname32, string fname33, string fname34, string fname35, string fname36, string fname37, string fname38, string fname39, string fname40, string fname41, string fname42, string fname43, string fname44, string fname45, string fname46, string fname47, string fname48, string fname49, string fname50, string fname51, string fname52, string fname53, string fname54, string fname55, string fname56, string fname57, string fname58, string fname59, string fname60, string fname61, string fname62, string fname63, string fname64)
        {
            this.start = start;
            this.end = end;
            this.devtype = devtype;
            this.seqnum = seqnum;
            this.fname1 = fname1;
            this.fname2 = fname2;
            this.fname3 = fname3;
            this.fname4 = fname4;
            this.fname5 = fname5;
            this.fname6 = fname6;
            this.fname7 = fname7;
            this.fname8 = fname8;
            this.fname9 = fname9;
            this.fname10 = fname10;
            this.fname11 = fname11;
            this.fname12 = fname12;
            this.fname13 = fname13;
            this.fname14 = fname14;
            this.fname15 = fname15;
            this.fname16 = fname16;
            this.fname17 = fname17;
            this.fname18 = fname18;
            this.fname19 = fname19;
            this.fname20 = fname20;
            this.fname21 = fname21;
            this.fname22 = fname22;
            this.fname23 = fname23;
            this.fname24 = fname24;
            this.fname25 = fname25;
            this.fname26 = fname26;
            this.fname27 = fname27;
            this.fname28 = fname28;
            this.fname29 = fname29;
            this.fname30 = fname30;
            this.fname31 = fname31;
            this.fname32 = fname32;
            this.fname33 = fname33;
            this.fname34 = fname34;
            this.fname35 = fname35;
            this.fname36 = fname36;
            this.fname37 = fname37;
            this.fname38 = fname38;
            this.fname39 = fname39;
            this.fname40 = fname40;
            this.fname41 = fname41;
            this.fname42 = fname42;
            this.fname43 = fname43;
            this.fname44 = fname44;
            this.fname45 = fname45;
            this.fname46 = fname46;
            this.fname47 = fname47;
            this.fname48 = fname48;
            this.fname49 = fname49;
            this.fname50 = fname50;
            this.fname51 = fname51;
            this.fname52 = fname52;
            this.fname53 = fname53;
            this.fname54 = fname54;
            this.fname55 = fname55;
            this.fname56 = fname56;
            this.fname57 = fname57;
            this.fname58 = fname58;
            this.fname59 = fname59;
            this.fname60 = fname60;
            this.fname61 = fname61;
            this.fname62 = fname62;
            this.fname63 = fname63;
            this.fname64 = fname64;
        }

        public override object[] GetItemArray()
        {
            return new object[] { start, end, devtype, seqnum, fname1, fname2, fname3, fname4, fname5, fname6, fname7, fname8, fname9, fname10, fname11, fname12, fname13, fname14, fname15, fname16, fname17, fname18, fname19, fname20, fname21, fname22, fname23, fname24, fname25, fname26, fname27, fname28, fname29, fname30, fname31, fname32, fname33, fname34, fname35, fname36, fname37, fname38, fname39, fname40, fname41, fname42, fname43, fname44, fname45, fname46, fname47, fname48, fname49, fname50, fname51, fname52, fname53, fname54, fname55, fname56, fname57, fname58, fname59, fname60, fname61, fname62, fname63, fname64 };
        }

        public override void SetItemArray(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
            devtype = (string)items[2];
            seqnum = (int?)items[3];
            fname1 = (string)items[4];
            fname2 = (string)items[5];
            fname3 = (string)items[6];
            fname4 = (string)items[7];
            fname5 = (string)items[8];
            fname6 = (string)items[9];
            fname7 = (string)items[10];
            fname8 = (string)items[11];
            fname9 = (string)items[12];
            fname10 = (string)items[13];
            fname11 = (string)items[14];
            fname12 = (string)items[15];
            fname13 = (string)items[16];
            fname14 = (string)items[17];
            fname15 = (string)items[18];
            fname16 = (string)items[19];
            fname17 = (string)items[20];
            fname18 = (string)items[21];
            fname19 = (string)items[22];
            fname20 = (string)items[23];
            fname21 = (string)items[24];
            fname22 = (string)items[25];
            fname23 = (string)items[26];
            fname24 = (string)items[27];
            fname25 = (string)items[28];
            fname26 = (string)items[29];
            fname27 = (string)items[30];
            fname28 = (string)items[31];
            fname29 = (string)items[32];
            fname30 = (string)items[33];
            fname31 = (string)items[34];
            fname32 = (string)items[35];
            fname33 = (string)items[36];
            fname34 = (string)items[37];
            fname35 = (string)items[38];
            fname36 = (string)items[39];
            fname37 = (string)items[40];
            fname38 = (string)items[41];
            fname39 = (string)items[42];
            fname40 = (string)items[43];
            fname41 = (string)items[44];
            fname42 = (string)items[45];
            fname43 = (string)items[46];
            fname44 = (string)items[47];
            fname45 = (string)items[48];
            fname46 = (string)items[49];
            fname47 = (string)items[50];
            fname48 = (string)items[51];
            fname49 = (string)items[52];
            fname50 = (string)items[53];
            fname51 = (string)items[54];
            fname52 = (string)items[55];
            fname53 = (string)items[56];
            fname54 = (string)items[57];
            fname55 = (string)items[58];
            fname56 = (string)items[59];
            fname57 = (string)items[60];
            fname58 = (string)items[61];
            fname59 = (string)items[62];
            fname60 = (string)items[63];
            fname61 = (string)items[64];
            fname62 = (string)items[65];
            fname63 = (string)items[66];
            fname64 = (string)items[67];
        }
    }

    [SqlTableFunctionResult("sys", "dm_logpoolmgr_stats")]
    public partial class dm_logpoolmgr_statsResult : SqlTabularProxy
    {
        [SqlColumn("database_id", 0), SqlTypeFacets("int", false)]
        public int database_id
        {
            get;
            set;
        }

        [SqlColumn("recovery_unit_id", 1), SqlTypeFacets("int", false)]
        public int recovery_unit_id
        {
            get;
            set;
        }

        [SqlColumn("log_consumer_id_seed", 2), SqlTypeFacets("bigint", false)]
        public long log_consumer_id_seed
        {
            get;
            set;
        }

        [SqlColumn("log_consumer_count", 3), SqlTypeFacets("int", false)]
        public int log_consumer_count
        {
            get;
            set;
        }

        [SqlColumn("new_log_interesting", 4), SqlTypeFacets("tinyint", false)]
        public byte new_log_interesting
        {
            get;
            set;
        }

        [SqlColumn("log_consumption_deactivated", 5), SqlTypeFacets("tinyint", false)]
        public byte log_consumption_deactivated
        {
            get;
            set;
        }

        [SqlColumn("push_enabled", 6), SqlTypeFacets("tinyint", false)]
        public byte push_enabled
        {
            get;
            set;
        }

        [SqlColumn("mem_status_stamp", 7), SqlTypeFacets("bigint", false)]
        public long mem_status_stamp
        {
            get;
            set;
        }

        [SqlColumn("total_requests", 8), SqlTypeFacets("bigint", false)]
        public long total_requests
        {
            get;
            set;
        }

        [SqlColumn("total_cache_misses", 9), SqlTypeFacets("bigint", false)]
        public long total_cache_misses
        {
            get;
            set;
        }

        [SqlColumn("total_disk_reads", 10), SqlTypeFacets("bigint", false)]
        public long total_disk_reads
        {
            get;
            set;
        }

        [SqlColumn("low_weight_cache_buffer_count", 11), SqlTypeFacets("int", false)]
        public int low_weight_cache_buffer_count
        {
            get;
            set;
        }

        [SqlColumn("high_weight_cache_buffer_count", 12), SqlTypeFacets("int", false)]
        public int high_weight_cache_buffer_count
        {
            get;
            set;
        }

        [SqlColumn("mem_status", 13), SqlTypeFacets("int", false)]
        public int mem_status
        {
            get;
            set;
        }

        [SqlColumn("shared_pool_size", 14), SqlTypeFacets("bigint", false)]
        public long shared_pool_size
        {
            get;
            set;
        }

        [SqlColumn("frequency_check_ticks", 15), SqlTypeFacets("int", false)]
        public int frequency_check_ticks
        {
            get;
            set;
        }

        [SqlColumn("warm_cold_check_ticks", 16), SqlTypeFacets("int", false)]
        public int warm_cold_check_ticks
        {
            get;
            set;
        }

        [SqlColumn("truncate_point", 17), SqlTypeFacets("bigint", false)]
        public long truncate_point
        {
            get;
            set;
        }

        [SqlColumn("active_log_size", 18), SqlTypeFacets("bigint", false)]
        public long active_log_size
        {
            get;
            set;
        }

        [SqlColumn("logpoolmgr_deleting", 19), SqlTypeFacets("tinyint", false)]
        public byte logpoolmgr_deleting
        {
            get;
            set;
        }

        [SqlColumn("logpoolmgr_ref_counter", 20), SqlTypeFacets("int", false)]
        public int logpoolmgr_ref_counter
        {
            get;
            set;
        }

        public dm_logpoolmgr_statsResult()
        {
        }

        public dm_logpoolmgr_statsResult(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            log_consumer_id_seed = (long)items[2];
            log_consumer_count = (int)items[3];
            new_log_interesting = (byte)items[4];
            log_consumption_deactivated = (byte)items[5];
            push_enabled = (byte)items[6];
            mem_status_stamp = (long)items[7];
            total_requests = (long)items[8];
            total_cache_misses = (long)items[9];
            total_disk_reads = (long)items[10];
            low_weight_cache_buffer_count = (int)items[11];
            high_weight_cache_buffer_count = (int)items[12];
            mem_status = (int)items[13];
            shared_pool_size = (long)items[14];
            frequency_check_ticks = (int)items[15];
            warm_cold_check_ticks = (int)items[16];
            truncate_point = (long)items[17];
            active_log_size = (long)items[18];
            logpoolmgr_deleting = (byte)items[19];
            logpoolmgr_ref_counter = (int)items[20];
        }

        public dm_logpoolmgr_statsResult(int database_id, int recovery_unit_id, long log_consumer_id_seed, int log_consumer_count, byte new_log_interesting, byte log_consumption_deactivated, byte push_enabled, long mem_status_stamp, long total_requests, long total_cache_misses, long total_disk_reads, int low_weight_cache_buffer_count, int high_weight_cache_buffer_count, int mem_status, long shared_pool_size, int frequency_check_ticks, int warm_cold_check_ticks, long truncate_point, long active_log_size, byte logpoolmgr_deleting, int logpoolmgr_ref_counter)
        {
            this.database_id = database_id;
            this.recovery_unit_id = recovery_unit_id;
            this.log_consumer_id_seed = log_consumer_id_seed;
            this.log_consumer_count = log_consumer_count;
            this.new_log_interesting = new_log_interesting;
            this.log_consumption_deactivated = log_consumption_deactivated;
            this.push_enabled = push_enabled;
            this.mem_status_stamp = mem_status_stamp;
            this.total_requests = total_requests;
            this.total_cache_misses = total_cache_misses;
            this.total_disk_reads = total_disk_reads;
            this.low_weight_cache_buffer_count = low_weight_cache_buffer_count;
            this.high_weight_cache_buffer_count = high_weight_cache_buffer_count;
            this.mem_status = mem_status;
            this.shared_pool_size = shared_pool_size;
            this.frequency_check_ticks = frequency_check_ticks;
            this.warm_cold_check_ticks = warm_cold_check_ticks;
            this.truncate_point = truncate_point;
            this.active_log_size = active_log_size;
            this.logpoolmgr_deleting = logpoolmgr_deleting;
            this.logpoolmgr_ref_counter = logpoolmgr_ref_counter;
        }

        public override object[] GetItemArray()
        {
            return new object[] { database_id, recovery_unit_id, log_consumer_id_seed, log_consumer_count, new_log_interesting, log_consumption_deactivated, push_enabled, mem_status_stamp, total_requests, total_cache_misses, total_disk_reads, low_weight_cache_buffer_count, high_weight_cache_buffer_count, mem_status, shared_pool_size, frequency_check_ticks, warm_cold_check_ticks, truncate_point, active_log_size, logpoolmgr_deleting, logpoolmgr_ref_counter };
        }

        public override void SetItemArray(object[] items)
        {
            database_id = (int)items[0];
            recovery_unit_id = (int)items[1];
            log_consumer_id_seed = (long)items[2];
            log_consumer_count = (int)items[3];
            new_log_interesting = (byte)items[4];
            log_consumption_deactivated = (byte)items[5];
            push_enabled = (byte)items[6];
            mem_status_stamp = (long)items[7];
            total_requests = (long)items[8];
            total_cache_misses = (long)items[9];
            total_disk_reads = (long)items[10];
            low_weight_cache_buffer_count = (int)items[11];
            high_weight_cache_buffer_count = (int)items[12];
            mem_status = (int)items[13];
            shared_pool_size = (long)items[14];
            frequency_check_ticks = (int)items[15];
            warm_cold_check_ticks = (int)items[16];
            truncate_point = (long)items[17];
            active_log_size = (long)items[18];
            logpoolmgr_deleting = (byte)items[19];
            logpoolmgr_ref_counter = (int)items[20];
        }
    }

    [SqlTableFunction("sys", "dm_logpoolmgr_stats")]
    public partial class dm_logpoolmgr_stats : SqlTableFunctionProxy<dm_logpoolmgr_stats, dm_logpoolmgr_statsResult>
    {
        [SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)]
        public int? DatabaseId
        {
            get;
            set;
        }

        public dm_logpoolmgr_stats()
        {
        }

        public dm_logpoolmgr_stats(object[] items)
        {
            DatabaseId = (int?)items[0];
        }

        public dm_logpoolmgr_stats(int? DatabaseId)
        {
            this.DatabaseId = DatabaseId;
        }

        public override object[] GetItemArray()
        {
            return new object[] { DatabaseId };
        }

        public override void SetItemArray(object[] items)
        {
            DatabaseId = (int?)items[0];
        }
    }

    [SqlTableFunctionResult("sys", "fn_dump_dblog")]
    public partial class fn_dump_dblogResult : SqlTabularProxy
    {
        [SqlColumn("Command Type", 74), SqlTypeFacets("int", true)]
        public int? Command_Type
        {
            get;
            set;
        }

        [SqlColumn("Publication ID", 75), SqlTypeFacets("int", true)]
        public int? Publication_ID
        {
            get;
            set;
        }

        [SqlColumn("Article ID", 76), SqlTypeFacets("int", true)]
        public int? Article_ID
        {
            get;
            set;
        }

        [SqlColumn("Partial Status", 77), SqlTypeFacets("int", true)]
        public int? Partial_Status
        {
            get;
            set;
        }

        [SqlColumn("Command", 78), SqlTypeFacets("nvarchar", true, 52)]
        public string Command
        {
            get;
            set;
        }

        [SqlColumn("Byte Offset", 79), SqlTypeFacets("smallint", true)]
        public short? Byte_Offset
        {
            get;
            set;
        }

        [SqlColumn("New Value", 80), SqlTypeFacets("binary", true, 1)]
        public Byte[] New_Value
        {
            get;
            set;
        }

        [SqlColumn("Old Value", 81), SqlTypeFacets("binary", true, 1)]
        public Byte[] Old_Value
        {
            get;
            set;
        }

        [SqlColumn("New Split Page", 82), SqlTypeFacets("nvarchar", true, 28)]
        public string New_Split_Page
        {
            get;
            set;
        }

        [SqlColumn("Rows Deleted", 83), SqlTypeFacets("smallint", true)]
        public short? Rows_Deleted
        {
            get;
            set;
        }

        [SqlColumn("Bytes Freed", 84), SqlTypeFacets("smallint", true)]
        public short? Bytes_Freed
        {
            get;
            set;
        }

        [SqlColumn("CI Table Id", 85), SqlTypeFacets("int", true)]
        public int? CI_Table_Id
        {
            get;
            set;
        }

        [SqlColumn("CI Index Id", 86), SqlTypeFacets("smallint", true)]
        public short? CI_Index_Id
        {
            get;
            set;
        }

        [SqlColumn("NewAllocUnitId", 87), SqlTypeFacets("bigint", true)]
        public long? NewAllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("FileGroup ID", 88), SqlTypeFacets("smallint", true)]
        public short? FileGroup_ID
        {
            get;
            set;
        }

        [SqlColumn("Meta Status", 89), SqlTypeFacets("binary", true, 4)]
        public Byte[] Meta_Status
        {
            get;
            set;
        }

        [SqlColumn("File Status", 90), SqlTypeFacets("binary", true, 4)]
        public Byte[] File_Status
        {
            get;
            set;
        }

        [SqlColumn("File ID", 91), SqlTypeFacets("smallint", true)]
        public short? File_ID
        {
            get;
            set;
        }

        [SqlColumn("Physical Name", 92), SqlTypeFacets("nvarchar", true, 522)]
        public string Physical_Name
        {
            get;
            set;
        }

        [SqlColumn("Logical Name", 93), SqlTypeFacets("nvarchar", true, 258)]
        public string Logical_Name
        {
            get;
            set;
        }

        [SqlColumn("Format LSN", 94), SqlTypeFacets("nvarchar", true, 46)]
        public string Format_LSN
        {
            get;
            set;
        }

        [SqlColumn("RowsetId", 95), SqlTypeFacets("bigint", true)]
        public long? RowsetId
        {
            get;
            set;
        }

        [SqlColumn("TextPtr", 96), SqlTypeFacets("binary", true, 16)]
        public Byte[] TextPtr
        {
            get;
            set;
        }

        [SqlColumn("Column Offset", 97), SqlTypeFacets("int", true)]
        public int? Column_Offset
        {
            get;
            set;
        }

        [SqlColumn("Flags", 98), SqlTypeFacets("int", true)]
        public int? Flags
        {
            get;
            set;
        }

        [SqlColumn("Text Size", 99), SqlTypeFacets("bigint", true)]
        public long? Text_Size
        {
            get;
            set;
        }

        [SqlColumn("Offset", 100), SqlTypeFacets("bigint", true)]
        public long? Offset
        {
            get;
            set;
        }

        [SqlColumn("Old Size", 101), SqlTypeFacets("bigint", true)]
        public long? Old_Size
        {
            get;
            set;
        }

        [SqlColumn("New Size", 102), SqlTypeFacets("bigint", true)]
        public long? New_Size
        {
            get;
            set;
        }

        [SqlColumn("Description", 103), SqlTypeFacets("nvarchar", false, 512)]
        public string Description
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent count", 104), SqlTypeFacets("int", true)]
        public int? Bulk_allocated_extent_count
        {
            get;
            set;
        }

        [SqlColumn("Bulk RowsetId", 105), SqlTypeFacets("bigint", true)]
        public long? Bulk_RowsetId
        {
            get;
            set;
        }

        [SqlColumn("Bulk AllocUnitId", 106), SqlTypeFacets("bigint", true)]
        public long? Bulk_AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocation first IAM Page ID", 107), SqlTypeFacets("nvarchar", true, 28)]
        public string Bulk_allocation_first_IAM_Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Bulk allocated extent ids", 108), SqlTypeFacets("nvarchar", true, 1922)]
        public string Bulk_allocated_extent_ids
        {
            get;
            set;
        }

        [SqlColumn("VLFs added", 109), SqlTypeFacets("nvarchar", true, 1376)]
        public string VLFs_added
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache Id", 110), SqlTypeFacets("int", true)]
        public int? InvalidateCache_Id
        {
            get;
            set;
        }

        [SqlColumn("InvalidateCache keys", 111), SqlTypeFacets("nvarchar", true, 512)]
        public string InvalidateCache_keys
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page Id", 112), SqlTypeFacets("nvarchar", true, 28)]
        public string CopyVerionInfo_Source_Page_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Page LSN", 113), SqlTypeFacets("nvarchar", true, 46)]
        public string CopyVerionInfo_Source_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Id", 114), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Id
        {
            get;
            set;
        }

        [SqlColumn("CopyVerionInfo Source Slot Count", 115), SqlTypeFacets("int", true)]
        public int? CopyVerionInfo_Source_Slot_Count
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 0", 116), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_0
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 1", 117), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_1
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 2", 118), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_2
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 3", 119), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_3
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 4", 120), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_4
        {
            get;
            set;
        }

        [SqlColumn("RowLog Contents 5", 121), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] RowLog_Contents_5
        {
            get;
            set;
        }

        [SqlColumn("Compression Log Type", 122), SqlTypeFacets("smallint", true)]
        public short? Compression_Log_Type
        {
            get;
            set;
        }

        [SqlColumn("Compression Info", 123), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Compression_Info
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageType", 124), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageType
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageFlags", 125), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageFlags
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageLevel", 126), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageLevel
        {
            get;
            set;
        }

        [SqlColumn("PageFormat PageStat", 127), SqlTypeFacets("smallint", true)]
        public short? PageFormat_PageStat
        {
            get;
            set;
        }

        [SqlColumn("PageFormat FormatOption", 128), SqlTypeFacets("smallint", true)]
        public short? PageFormat_FormatOption
        {
            get;
            set;
        }

        [SqlColumn("Log Record", 129), SqlTypeFacets("varbinary", false, 8000)]
        public Byte[] Log_Record
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint End", 25), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_End
        {
            get;
            set;
        }

        [SqlColumn("CHKPT End DB Version", 26), SqlTypeFacets("smallint", true)]
        public short? CHKPT_End_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Minimum LSN", 27), SqlTypeFacets("nvarchar", true, 46)]
        public string Minimum_LSN
        {
            get;
            set;
        }

        [SqlColumn("Dirty Pages", 28), SqlTypeFacets("int", true)]
        public int? Dirty_Pages
        {
            get;
            set;
        }

        [SqlColumn("Oldest Replicated Begin LSN", 29), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Replicated_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Next Replicated End LSN", 30), SqlTypeFacets("nvarchar", true, 46)]
        public string Next_Replicated_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed Backup End LSN", 31), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_Backup_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Last Distributed End LSN", 32), SqlTypeFacets("nvarchar", true, 46)]
        public string Last_Distributed_End_LSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Min Hold LSN", 33), SqlTypeFacets("nvarchar", true, 46)]
        public string Repl_Min_Hold_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server UID", 34), SqlTypeFacets("int", true)]
        public int? Server_UID
        {
            get;
            set;
        }

        [SqlColumn("SPID", 35), SqlTypeFacets("int", true)]
        public int? SPID
        {
            get;
            set;
        }

        [SqlColumn("Beginlog Status", 36), SqlTypeFacets("binary", true, 4)]
        public Byte[] Beginlog_Status
        {
            get;
            set;
        }

        [SqlColumn("Xact Type", 37), SqlTypeFacets("int", true)]
        public int? Xact_Type
        {
            get;
            set;
        }

        [SqlColumn("Begin Time", 38), SqlTypeFacets("nvarchar", true, 48)]
        public string Begin_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Name", 39), SqlTypeFacets("nvarchar", true, 66)]
        public string Transaction_Name
        {
            get;
            set;
        }

        [SqlColumn("Transaction SID", 40), SqlTypeFacets("varbinary", true, 85)]
        public Byte[] Transaction_SID
        {
            get;
            set;
        }

        [SqlColumn("Parent Transaction ID", 41), SqlTypeFacets("nvarchar", true, 28)]
        public string Parent_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active Transaction ID", 42), SqlTypeFacets("nvarchar", true, 28)]
        public string Oldest_Active_Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact ID", 43), SqlTypeFacets("bigint", true)]
        public long? Xact_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node ID", 44), SqlTypeFacets("int", true)]
        public int? Xact_Node_ID
        {
            get;
            set;
        }

        [SqlColumn("Xact Node Local ID", 45), SqlTypeFacets("int", true)]
        public int? Xact_Node_Local_ID
        {
            get;
            set;
        }

        [SqlColumn("End AGE", 46), SqlTypeFacets("bigint", true)]
        public long? End_AGE
        {
            get;
            set;
        }

        [SqlColumn("End Time", 47), SqlTypeFacets("nvarchar", true, 48)]
        public string End_Time
        {
            get;
            set;
        }

        [SqlColumn("Transaction Begin", 48), SqlTypeFacets("nvarchar", true, 46)]
        public string Transaction_Begin
        {
            get;
            set;
        }

        [SqlColumn("Replicated Records", 49), SqlTypeFacets("bigint", true)]
        public long? Replicated_Records
        {
            get;
            set;
        }

        [SqlColumn("Oldest Active LSN", 50), SqlTypeFacets("nvarchar", true, 46)]
        public string Oldest_Active_LSN
        {
            get;
            set;
        }

        [SqlColumn("Server Name", 51), SqlTypeFacets("nvarchar", true, 258)]
        public string Server_Name
        {
            get;
            set;
        }

        [SqlColumn("Database Name", 52), SqlTypeFacets("nvarchar", true, 258)]
        public string Database_Name
        {
            get;
            set;
        }

        [SqlColumn("Mark Name", 53), SqlTypeFacets("nvarchar", true, 66)]
        public string Mark_Name
        {
            get;
            set;
        }

        [SqlColumn("Repl Partition ID", 54), SqlTypeFacets("int", true)]
        public int? Repl_Partition_ID
        {
            get;
            set;
        }

        [SqlColumn("Repl Epoch", 55), SqlTypeFacets("int", true)]
        public int? Repl_Epoch
        {
            get;
            set;
        }

        [SqlColumn("Repl CSN", 56), SqlTypeFacets("bigint", true)]
        public long? Repl_CSN
        {
            get;
            set;
        }

        [SqlColumn("Repl Flags", 57), SqlTypeFacets("int", true)]
        public int? Repl_Flags
        {
            get;
            set;
        }

        [SqlColumn("Repl Msg", 58), SqlTypeFacets("varbinary", true, 8000)]
        public Byte[] Repl_Msg
        {
            get;
            set;
        }

        [SqlColumn("Repl Source Commit Time", 59), SqlTypeFacets("nvarchar", true, 48)]
        public string Repl_Source_Commit_Time
        {
            get;
            set;
        }

        [SqlColumn("Master XDESID", 60), SqlTypeFacets("nvarchar", true, 28)]
        public string Master_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Master DBID", 61), SqlTypeFacets("int", true)]
        public int? Master_DBID
        {
            get;
            set;
        }

        [SqlColumn("Preplog Begin LSN", 62), SqlTypeFacets("nvarchar", true, 46)]
        public string Preplog_Begin_LSN
        {
            get;
            set;
        }

        [SqlColumn("Prepare Time", 63), SqlTypeFacets("nvarchar", true, 48)]
        public string Prepare_Time
        {
            get;
            set;
        }

        [SqlColumn("Virtual Clock", 64), SqlTypeFacets("bigint", true)]
        public long? Virtual_Clock
        {
            get;
            set;
        }

        [SqlColumn("Previous Savepoint", 65), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Savepoint
        {
            get;
            set;
        }

        [SqlColumn("Savepoint Name", 66), SqlTypeFacets("nvarchar", true, 66)]
        public string Savepoint_Name
        {
            get;
            set;
        }

        [SqlColumn("Rowbits First Bit", 67), SqlTypeFacets("smallint", true)]
        public short? Rowbits_First_Bit
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Count", 68), SqlTypeFacets("smallint", true)]
        public short? Rowbits_Bit_Count
        {
            get;
            set;
        }

        [SqlColumn("Rowbits Bit Value", 69), SqlTypeFacets("binary", true, 1)]
        public Byte[] Rowbits_Bit_Value
        {
            get;
            set;
        }

        [SqlColumn("Number of Locks", 70), SqlTypeFacets("smallint", true)]
        public short? Number_of_Locks
        {
            get;
            set;
        }

        [SqlColumn("Lock Information", 71), SqlTypeFacets("nvarchar", true, 512)]
        public string Lock_Information
        {
            get;
            set;
        }

        [SqlColumn("LSN before writes", 72), SqlTypeFacets("nvarchar", true, 46)]
        public string LSN_before_writes
        {
            get;
            set;
        }

        [SqlColumn("Pages Written", 73), SqlTypeFacets("smallint", true)]
        public short? Pages_Written
        {
            get;
            set;
        }

        [SqlColumn("Current LSN", 0), SqlTypeFacets("nvarchar", false, 46)]
        public string Current_LSN
        {
            get;
            set;
        }

        [SqlColumn("Operation", 1), SqlTypeFacets("nvarchar", false, 62)]
        public string Operation
        {
            get;
            set;
        }

        [SqlColumn("Context", 2), SqlTypeFacets("nvarchar", false, 62)]
        public string Context
        {
            get;
            set;
        }

        [SqlColumn("Transaction ID", 3), SqlTypeFacets("nvarchar", false, 28)]
        public string Transaction_ID
        {
            get;
            set;
        }

        [SqlColumn("LogBlockGeneration", 4), SqlTypeFacets("bigint", false)]
        public long LogBlockGeneration
        {
            get;
            set;
        }

        [SqlColumn("Tag Bits", 5), SqlTypeFacets("binary", false, 2)]
        public Byte[] Tag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Record Fixed Length", 6), SqlTypeFacets("smallint", false)]
        public short Log_Record_Fixed_Length
        {
            get;
            set;
        }

        [SqlColumn("Log Record Length", 7), SqlTypeFacets("smallint", false)]
        public short Log_Record_Length
        {
            get;
            set;
        }

        [SqlColumn("Previous LSN", 8), SqlTypeFacets("nvarchar", false, 46)]
        public string Previous_LSN
        {
            get;
            set;
        }

        [SqlColumn("Flag Bits", 9), SqlTypeFacets("binary", false, 2)]
        public Byte[] Flag_Bits
        {
            get;
            set;
        }

        [SqlColumn("Log Reserve", 10), SqlTypeFacets("int", false)]
        public int Log_Reserve
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitId", 11), SqlTypeFacets("bigint", true)]
        public long? AllocUnitId
        {
            get;
            set;
        }

        [SqlColumn("AllocUnitName", 12), SqlTypeFacets("nvarchar", true, 774)]
        public string AllocUnitName
        {
            get;
            set;
        }

        [SqlColumn("Page ID", 13), SqlTypeFacets("nvarchar", true, 28)]
        public string Page_ID
        {
            get;
            set;
        }

        [SqlColumn("Slot ID", 14), SqlTypeFacets("int", true)]
        public int? Slot_ID
        {
            get;
            set;
        }

        [SqlColumn("Previous Page LSN", 15), SqlTypeFacets("nvarchar", true, 46)]
        public string Previous_Page_LSN
        {
            get;
            set;
        }

        [SqlColumn("PartitionId", 16), SqlTypeFacets("bigint", true)]
        public long? PartitionId
        {
            get;
            set;
        }

        [SqlColumn("RowFlags", 17), SqlTypeFacets("smallint", true)]
        public short? RowFlags
        {
            get;
            set;
        }

        [SqlColumn("Num Elements", 18), SqlTypeFacets("smallint", true)]
        public short? Num_Elements
        {
            get;
            set;
        }

        [SqlColumn("Offset in Row", 19), SqlTypeFacets("smallint", true)]
        public short? Offset_in_Row
        {
            get;
            set;
        }

        [SqlColumn("Modify Size", 20), SqlTypeFacets("smallint", true)]
        public short? Modify_Size
        {
            get;
            set;
        }

        [SqlColumn("Checkpoint Begin", 21), SqlTypeFacets("nvarchar", true, 48)]
        public string Checkpoint_Begin
        {
            get;
            set;
        }

        [SqlColumn("CHKPT Begin DB Version", 22), SqlTypeFacets("smallint", true)]
        public short? CHKPT_Begin_DB_Version
        {
            get;
            set;
        }

        [SqlColumn("Max XDESID", 23), SqlTypeFacets("nvarchar", true, 28)]
        public string Max_XDESID
        {
            get;
            set;
        }

        [SqlColumn("Num Transactions", 24), SqlTypeFacets("smallint", true)]
        public short? Num_Transactions
        {
            get;
            set;
        }

        public fn_dump_dblogResult()
        {
        }

        public fn_dump_dblogResult(object[] items)
        {
            Command_Type = (int?)items[0];
            Publication_ID = (int?)items[1];
            Article_ID = (int?)items[2];
            Partial_Status = (int?)items[3];
            Command = (string)items[4];
            Byte_Offset = (short?)items[5];
            New_Value = (Byte[])items[6];
            Old_Value = (Byte[])items[7];
            New_Split_Page = (string)items[8];
            Rows_Deleted = (short?)items[9];
            Bytes_Freed = (short?)items[10];
            CI_Table_Id = (int?)items[11];
            CI_Index_Id = (short?)items[12];
            NewAllocUnitId = (long?)items[13];
            FileGroup_ID = (short?)items[14];
            Meta_Status = (Byte[])items[15];
            File_Status = (Byte[])items[16];
            File_ID = (short?)items[17];
            Physical_Name = (string)items[18];
            Logical_Name = (string)items[19];
            Format_LSN = (string)items[20];
            RowsetId = (long?)items[21];
            TextPtr = (Byte[])items[22];
            Column_Offset = (int?)items[23];
            Flags = (int?)items[24];
            Text_Size = (long?)items[25];
            Offset = (long?)items[26];
            Old_Size = (long?)items[27];
            New_Size = (long?)items[28];
            Description = (string)items[29];
            Bulk_allocated_extent_count = (int?)items[30];
            Bulk_RowsetId = (long?)items[31];
            Bulk_AllocUnitId = (long?)items[32];
            Bulk_allocation_first_IAM_Page_ID = (string)items[33];
            Bulk_allocated_extent_ids = (string)items[34];
            VLFs_added = (string)items[35];
            InvalidateCache_Id = (int?)items[36];
            InvalidateCache_keys = (string)items[37];
            CopyVerionInfo_Source_Page_Id = (string)items[38];
            CopyVerionInfo_Source_Page_LSN = (string)items[39];
            CopyVerionInfo_Source_Slot_Id = (int?)items[40];
            CopyVerionInfo_Source_Slot_Count = (int?)items[41];
            RowLog_Contents_0 = (Byte[])items[42];
            RowLog_Contents_1 = (Byte[])items[43];
            RowLog_Contents_2 = (Byte[])items[44];
            RowLog_Contents_3 = (Byte[])items[45];
            RowLog_Contents_4 = (Byte[])items[46];
            RowLog_Contents_5 = (Byte[])items[47];
            Compression_Log_Type = (short?)items[48];
            Compression_Info = (Byte[])items[49];
            PageFormat_PageType = (short?)items[50];
            PageFormat_PageFlags = (short?)items[51];
            PageFormat_PageLevel = (short?)items[52];
            PageFormat_PageStat = (short?)items[53];
            PageFormat_FormatOption = (short?)items[54];
            Log_Record = (Byte[])items[55];
            Checkpoint_End = (string)items[56];
            CHKPT_End_DB_Version = (short?)items[57];
            Minimum_LSN = (string)items[58];
            Dirty_Pages = (int?)items[59];
            Oldest_Replicated_Begin_LSN = (string)items[60];
            Next_Replicated_End_LSN = (string)items[61];
            Last_Distributed_Backup_End_LSN = (string)items[62];
            Last_Distributed_End_LSN = (string)items[63];
            Repl_Min_Hold_LSN = (string)items[64];
            Server_UID = (int?)items[65];
            SPID = (int?)items[66];
            Beginlog_Status = (Byte[])items[67];
            Xact_Type = (int?)items[68];
            Begin_Time = (string)items[69];
            Transaction_Name = (string)items[70];
            Transaction_SID = (Byte[])items[71];
            Parent_Transaction_ID = (string)items[72];
            Oldest_Active_Transaction_ID = (string)items[73];
            Xact_ID = (long?)items[74];
            Xact_Node_ID = (int?)items[75];
            Xact_Node_Local_ID = (int?)items[76];
            End_AGE = (long?)items[77];
            End_Time = (string)items[78];
            Transaction_Begin = (string)items[79];
            Replicated_Records = (long?)items[80];
            Oldest_Active_LSN = (string)items[81];
            Server_Name = (string)items[82];
            Database_Name = (string)items[83];
            Mark_Name = (string)items[84];
            Repl_Partition_ID = (int?)items[85];
            Repl_Epoch = (int?)items[86];
            Repl_CSN = (long?)items[87];
            Repl_Flags = (int?)items[88];
            Repl_Msg = (Byte[])items[89];
            Repl_Source_Commit_Time = (string)items[90];
            Master_XDESID = (string)items[91];
            Master_DBID = (int?)items[92];
            Preplog_Begin_LSN = (string)items[93];
            Prepare_Time = (string)items[94];
            Virtual_Clock = (long?)items[95];
            Previous_Savepoint = (string)items[96];
            Savepoint_Name = (string)items[97];
            Rowbits_First_Bit = (short?)items[98];
            Rowbits_Bit_Count = (short?)items[99];
            Rowbits_Bit_Value = (Byte[])items[100];
            Number_of_Locks = (short?)items[101];
            Lock_Information = (string)items[102];
            LSN_before_writes = (string)items[103];
            Pages_Written = (short?)items[104];
            Current_LSN = (string)items[105];
            Operation = (string)items[106];
            Context = (string)items[107];
            Transaction_ID = (string)items[108];
            LogBlockGeneration = (long)items[109];
            Tag_Bits = (Byte[])items[110];
            Log_Record_Fixed_Length = (short)items[111];
            Log_Record_Length = (short)items[112];
            Previous_LSN = (string)items[113];
            Flag_Bits = (Byte[])items[114];
            Log_Reserve = (int)items[115];
            AllocUnitId = (long?)items[116];
            AllocUnitName = (string)items[117];
            Page_ID = (string)items[118];
            Slot_ID = (int?)items[119];
            Previous_Page_LSN = (string)items[120];
            PartitionId = (long?)items[121];
            RowFlags = (short?)items[122];
            Num_Elements = (short?)items[123];
            Offset_in_Row = (short?)items[124];
            Modify_Size = (short?)items[125];
            Checkpoint_Begin = (string)items[126];
            CHKPT_Begin_DB_Version = (short?)items[127];
            Max_XDESID = (string)items[128];
            Num_Transactions = (short?)items[129];
        }

        public fn_dump_dblogResult(int? Command_Type, int? Publication_ID, int? Article_ID, int? Partial_Status, string Command, short? Byte_Offset, Byte[] New_Value, Byte[] Old_Value, string New_Split_Page, short? Rows_Deleted, short? Bytes_Freed, int? CI_Table_Id, short? CI_Index_Id, long? NewAllocUnitId, short? FileGroup_ID, Byte[] Meta_Status, Byte[] File_Status, short? File_ID, string Physical_Name, string Logical_Name, string Format_LSN, long? RowsetId, Byte[] TextPtr, int? Column_Offset, int? Flags, long? Text_Size, long? Offset, long? Old_Size, long? New_Size, string Description, int? Bulk_allocated_extent_count, long? Bulk_RowsetId, long? Bulk_AllocUnitId, string Bulk_allocation_first_IAM_Page_ID, string Bulk_allocated_extent_ids, string VLFs_added, int? InvalidateCache_Id, string InvalidateCache_keys, string CopyVerionInfo_Source_Page_Id, string CopyVerionInfo_Source_Page_LSN, int? CopyVerionInfo_Source_Slot_Id, int? CopyVerionInfo_Source_Slot_Count, Byte[] RowLog_Contents_0, Byte[] RowLog_Contents_1, Byte[] RowLog_Contents_2, Byte[] RowLog_Contents_3, Byte[] RowLog_Contents_4, Byte[] RowLog_Contents_5, short? Compression_Log_Type, Byte[] Compression_Info, short? PageFormat_PageType, short? PageFormat_PageFlags, short? PageFormat_PageLevel, short? PageFormat_PageStat, short? PageFormat_FormatOption, Byte[] Log_Record, string Checkpoint_End, short? CHKPT_End_DB_Version, string Minimum_LSN, int? Dirty_Pages, string Oldest_Replicated_Begin_LSN, string Next_Replicated_End_LSN, string Last_Distributed_Backup_End_LSN, string Last_Distributed_End_LSN, string Repl_Min_Hold_LSN, int? Server_UID, int? SPID, Byte[] Beginlog_Status, int? Xact_Type, string Begin_Time, string Transaction_Name, Byte[] Transaction_SID, string Parent_Transaction_ID, string Oldest_Active_Transaction_ID, long? Xact_ID, int? Xact_Node_ID, int? Xact_Node_Local_ID, long? End_AGE, string End_Time, string Transaction_Begin, long? Replicated_Records, string Oldest_Active_LSN, string Server_Name, string Database_Name, string Mark_Name, int? Repl_Partition_ID, int? Repl_Epoch, long? Repl_CSN, int? Repl_Flags, Byte[] Repl_Msg, string Repl_Source_Commit_Time, string Master_XDESID, int? Master_DBID, string Preplog_Begin_LSN, string Prepare_Time, long? Virtual_Clock, string Previous_Savepoint, string Savepoint_Name, short? Rowbits_First_Bit, short? Rowbits_Bit_Count, Byte[] Rowbits_Bit_Value, short? Number_of_Locks, string Lock_Information, string LSN_before_writes, short? Pages_Written, string Current_LSN, string Operation, string Context, string Transaction_ID, long LogBlockGeneration, Byte[] Tag_Bits, short Log_Record_Fixed_Length, short Log_Record_Length, string Previous_LSN, Byte[] Flag_Bits, int Log_Reserve, long? AllocUnitId, string AllocUnitName, string Page_ID, int? Slot_ID, string Previous_Page_LSN, long? PartitionId, short? RowFlags, short? Num_Elements, short? Offset_in_Row, short? Modify_Size, string Checkpoint_Begin, short? CHKPT_Begin_DB_Version, string Max_XDESID, short? Num_Transactions)
        {
            this.Command_Type = Command_Type;
            this.Publication_ID = Publication_ID;
            this.Article_ID = Article_ID;
            this.Partial_Status = Partial_Status;
            this.Command = Command;
            this.Byte_Offset = Byte_Offset;
            this.New_Value = New_Value;
            this.Old_Value = Old_Value;
            this.New_Split_Page = New_Split_Page;
            this.Rows_Deleted = Rows_Deleted;
            this.Bytes_Freed = Bytes_Freed;
            this.CI_Table_Id = CI_Table_Id;
            this.CI_Index_Id = CI_Index_Id;
            this.NewAllocUnitId = NewAllocUnitId;
            this.FileGroup_ID = FileGroup_ID;
            this.Meta_Status = Meta_Status;
            this.File_Status = File_Status;
            this.File_ID = File_ID;
            this.Physical_Name = Physical_Name;
            this.Logical_Name = Logical_Name;
            this.Format_LSN = Format_LSN;
            this.RowsetId = RowsetId;
            this.TextPtr = TextPtr;
            this.Column_Offset = Column_Offset;
            this.Flags = Flags;
            this.Text_Size = Text_Size;
            this.Offset = Offset;
            this.Old_Size = Old_Size;
            this.New_Size = New_Size;
            this.Description = Description;
            this.Bulk_allocated_extent_count = Bulk_allocated_extent_count;
            this.Bulk_RowsetId = Bulk_RowsetId;
            this.Bulk_AllocUnitId = Bulk_AllocUnitId;
            this.Bulk_allocation_first_IAM_Page_ID = Bulk_allocation_first_IAM_Page_ID;
            this.Bulk_allocated_extent_ids = Bulk_allocated_extent_ids;
            this.VLFs_added = VLFs_added;
            this.InvalidateCache_Id = InvalidateCache_Id;
            this.InvalidateCache_keys = InvalidateCache_keys;
            this.CopyVerionInfo_Source_Page_Id = CopyVerionInfo_Source_Page_Id;
            this.CopyVerionInfo_Source_Page_LSN = CopyVerionInfo_Source_Page_LSN;
            this.CopyVerionInfo_Source_Slot_Id = CopyVerionInfo_Source_Slot_Id;
            this.CopyVerionInfo_Source_Slot_Count = CopyVerionInfo_Source_Slot_Count;
            this.RowLog_Contents_0 = RowLog_Contents_0;
            this.RowLog_Contents_1 = RowLog_Contents_1;
            this.RowLog_Contents_2 = RowLog_Contents_2;
            this.RowLog_Contents_3 = RowLog_Contents_3;
            this.RowLog_Contents_4 = RowLog_Contents_4;
            this.RowLog_Contents_5 = RowLog_Contents_5;
            this.Compression_Log_Type = Compression_Log_Type;
            this.Compression_Info = Compression_Info;
            this.PageFormat_PageType = PageFormat_PageType;
            this.PageFormat_PageFlags = PageFormat_PageFlags;
            this.PageFormat_PageLevel = PageFormat_PageLevel;
            this.PageFormat_PageStat = PageFormat_PageStat;
            this.PageFormat_FormatOption = PageFormat_FormatOption;
            this.Log_Record = Log_Record;
            this.Checkpoint_End = Checkpoint_End;
            this.CHKPT_End_DB_Version = CHKPT_End_DB_Version;
            this.Minimum_LSN = Minimum_LSN;
            this.Dirty_Pages = Dirty_Pages;
            this.Oldest_Replicated_Begin_LSN = Oldest_Replicated_Begin_LSN;
            this.Next_Replicated_End_LSN = Next_Replicated_End_LSN;
            this.Last_Distributed_Backup_End_LSN = Last_Distributed_Backup_End_LSN;
            this.Last_Distributed_End_LSN = Last_Distributed_End_LSN;
            this.Repl_Min_Hold_LSN = Repl_Min_Hold_LSN;
            this.Server_UID = Server_UID;
            this.SPID = SPID;
            this.Beginlog_Status = Beginlog_Status;
            this.Xact_Type = Xact_Type;
            this.Begin_Time = Begin_Time;
            this.Transaction_Name = Transaction_Name;
            this.Transaction_SID = Transaction_SID;
            this.Parent_Transaction_ID = Parent_Transaction_ID;
            this.Oldest_Active_Transaction_ID = Oldest_Active_Transaction_ID;
            this.Xact_ID = Xact_ID;
            this.Xact_Node_ID = Xact_Node_ID;
            this.Xact_Node_Local_ID = Xact_Node_Local_ID;
            this.End_AGE = End_AGE;
            this.End_Time = End_Time;
            this.Transaction_Begin = Transaction_Begin;
            this.Replicated_Records = Replicated_Records;
            this.Oldest_Active_LSN = Oldest_Active_LSN;
            this.Server_Name = Server_Name;
            this.Database_Name = Database_Name;
            this.Mark_Name = Mark_Name;
            this.Repl_Partition_ID = Repl_Partition_ID;
            this.Repl_Epoch = Repl_Epoch;
            this.Repl_CSN = Repl_CSN;
            this.Repl_Flags = Repl_Flags;
            this.Repl_Msg = Repl_Msg;
            this.Repl_Source_Commit_Time = Repl_Source_Commit_Time;
            this.Master_XDESID = Master_XDESID;
            this.Master_DBID = Master_DBID;
            this.Preplog_Begin_LSN = Preplog_Begin_LSN;
            this.Prepare_Time = Prepare_Time;
            this.Virtual_Clock = Virtual_Clock;
            this.Previous_Savepoint = Previous_Savepoint;
            this.Savepoint_Name = Savepoint_Name;
            this.Rowbits_First_Bit = Rowbits_First_Bit;
            this.Rowbits_Bit_Count = Rowbits_Bit_Count;
            this.Rowbits_Bit_Value = Rowbits_Bit_Value;
            this.Number_of_Locks = Number_of_Locks;
            this.Lock_Information = Lock_Information;
            this.LSN_before_writes = LSN_before_writes;
            this.Pages_Written = Pages_Written;
            this.Current_LSN = Current_LSN;
            this.Operation = Operation;
            this.Context = Context;
            this.Transaction_ID = Transaction_ID;
            this.LogBlockGeneration = LogBlockGeneration;
            this.Tag_Bits = Tag_Bits;
            this.Log_Record_Fixed_Length = Log_Record_Fixed_Length;
            this.Log_Record_Length = Log_Record_Length;
            this.Previous_LSN = Previous_LSN;
            this.Flag_Bits = Flag_Bits;
            this.Log_Reserve = Log_Reserve;
            this.AllocUnitId = AllocUnitId;
            this.AllocUnitName = AllocUnitName;
            this.Page_ID = Page_ID;
            this.Slot_ID = Slot_ID;
            this.Previous_Page_LSN = Previous_Page_LSN;
            this.PartitionId = PartitionId;
            this.RowFlags = RowFlags;
            this.Num_Elements = Num_Elements;
            this.Offset_in_Row = Offset_in_Row;
            this.Modify_Size = Modify_Size;
            this.Checkpoint_Begin = Checkpoint_Begin;
            this.CHKPT_Begin_DB_Version = CHKPT_Begin_DB_Version;
            this.Max_XDESID = Max_XDESID;
            this.Num_Transactions = Num_Transactions;
        }

        public override object[] GetItemArray()
        {
            return new object[] { Command_Type, Publication_ID, Article_ID, Partial_Status, Command, Byte_Offset, New_Value, Old_Value, New_Split_Page, Rows_Deleted, Bytes_Freed, CI_Table_Id, CI_Index_Id, NewAllocUnitId, FileGroup_ID, Meta_Status, File_Status, File_ID, Physical_Name, Logical_Name, Format_LSN, RowsetId, TextPtr, Column_Offset, Flags, Text_Size, Offset, Old_Size, New_Size, Description, Bulk_allocated_extent_count, Bulk_RowsetId, Bulk_AllocUnitId, Bulk_allocation_first_IAM_Page_ID, Bulk_allocated_extent_ids, VLFs_added, InvalidateCache_Id, InvalidateCache_keys, CopyVerionInfo_Source_Page_Id, CopyVerionInfo_Source_Page_LSN, CopyVerionInfo_Source_Slot_Id, CopyVerionInfo_Source_Slot_Count, RowLog_Contents_0, RowLog_Contents_1, RowLog_Contents_2, RowLog_Contents_3, RowLog_Contents_4, RowLog_Contents_5, Compression_Log_Type, Compression_Info, PageFormat_PageType, PageFormat_PageFlags, PageFormat_PageLevel, PageFormat_PageStat, PageFormat_FormatOption, Log_Record, Checkpoint_End, CHKPT_End_DB_Version, Minimum_LSN, Dirty_Pages, Oldest_Replicated_Begin_LSN, Next_Replicated_End_LSN, Last_Distributed_Backup_End_LSN, Last_Distributed_End_LSN, Repl_Min_Hold_LSN, Server_UID, SPID, Beginlog_Status, Xact_Type, Begin_Time, Transaction_Name, Transaction_SID, Parent_Transaction_ID, Oldest_Active_Transaction_ID, Xact_ID, Xact_Node_ID, Xact_Node_Local_ID, End_AGE, End_Time, Transaction_Begin, Replicated_Records, Oldest_Active_LSN, Server_Name, Database_Name, Mark_Name, Repl_Partition_ID, Repl_Epoch, Repl_CSN, Repl_Flags, Repl_Msg, Repl_Source_Commit_Time, Master_XDESID, Master_DBID, Preplog_Begin_LSN, Prepare_Time, Virtual_Clock, Previous_Savepoint, Savepoint_Name, Rowbits_First_Bit, Rowbits_Bit_Count, Rowbits_Bit_Value, Number_of_Locks, Lock_Information, LSN_before_writes, Pages_Written, Current_LSN, Operation, Context, Transaction_ID, LogBlockGeneration, Tag_Bits, Log_Record_Fixed_Length, Log_Record_Length, Previous_LSN, Flag_Bits, Log_Reserve, AllocUnitId, AllocUnitName, Page_ID, Slot_ID, Previous_Page_LSN, PartitionId, RowFlags, Num_Elements, Offset_in_Row, Modify_Size, Checkpoint_Begin, CHKPT_Begin_DB_Version, Max_XDESID, Num_Transactions };
        }

        public override void SetItemArray(object[] items)
        {
            Command_Type = (int?)items[0];
            Publication_ID = (int?)items[1];
            Article_ID = (int?)items[2];
            Partial_Status = (int?)items[3];
            Command = (string)items[4];
            Byte_Offset = (short?)items[5];
            New_Value = (Byte[])items[6];
            Old_Value = (Byte[])items[7];
            New_Split_Page = (string)items[8];
            Rows_Deleted = (short?)items[9];
            Bytes_Freed = (short?)items[10];
            CI_Table_Id = (int?)items[11];
            CI_Index_Id = (short?)items[12];
            NewAllocUnitId = (long?)items[13];
            FileGroup_ID = (short?)items[14];
            Meta_Status = (Byte[])items[15];
            File_Status = (Byte[])items[16];
            File_ID = (short?)items[17];
            Physical_Name = (string)items[18];
            Logical_Name = (string)items[19];
            Format_LSN = (string)items[20];
            RowsetId = (long?)items[21];
            TextPtr = (Byte[])items[22];
            Column_Offset = (int?)items[23];
            Flags = (int?)items[24];
            Text_Size = (long?)items[25];
            Offset = (long?)items[26];
            Old_Size = (long?)items[27];
            New_Size = (long?)items[28];
            Description = (string)items[29];
            Bulk_allocated_extent_count = (int?)items[30];
            Bulk_RowsetId = (long?)items[31];
            Bulk_AllocUnitId = (long?)items[32];
            Bulk_allocation_first_IAM_Page_ID = (string)items[33];
            Bulk_allocated_extent_ids = (string)items[34];
            VLFs_added = (string)items[35];
            InvalidateCache_Id = (int?)items[36];
            InvalidateCache_keys = (string)items[37];
            CopyVerionInfo_Source_Page_Id = (string)items[38];
            CopyVerionInfo_Source_Page_LSN = (string)items[39];
            CopyVerionInfo_Source_Slot_Id = (int?)items[40];
            CopyVerionInfo_Source_Slot_Count = (int?)items[41];
            RowLog_Contents_0 = (Byte[])items[42];
            RowLog_Contents_1 = (Byte[])items[43];
            RowLog_Contents_2 = (Byte[])items[44];
            RowLog_Contents_3 = (Byte[])items[45];
            RowLog_Contents_4 = (Byte[])items[46];
            RowLog_Contents_5 = (Byte[])items[47];
            Compression_Log_Type = (short?)items[48];
            Compression_Info = (Byte[])items[49];
            PageFormat_PageType = (short?)items[50];
            PageFormat_PageFlags = (short?)items[51];
            PageFormat_PageLevel = (short?)items[52];
            PageFormat_PageStat = (short?)items[53];
            PageFormat_FormatOption = (short?)items[54];
            Log_Record = (Byte[])items[55];
            Checkpoint_End = (string)items[56];
            CHKPT_End_DB_Version = (short?)items[57];
            Minimum_LSN = (string)items[58];
            Dirty_Pages = (int?)items[59];
            Oldest_Replicated_Begin_LSN = (string)items[60];
            Next_Replicated_End_LSN = (string)items[61];
            Last_Distributed_Backup_End_LSN = (string)items[62];
            Last_Distributed_End_LSN = (string)items[63];
            Repl_Min_Hold_LSN = (string)items[64];
            Server_UID = (int?)items[65];
            SPID = (int?)items[66];
            Beginlog_Status = (Byte[])items[67];
            Xact_Type = (int?)items[68];
            Begin_Time = (string)items[69];
            Transaction_Name = (string)items[70];
            Transaction_SID = (Byte[])items[71];
            Parent_Transaction_ID = (string)items[72];
            Oldest_Active_Transaction_ID = (string)items[73];
            Xact_ID = (long?)items[74];
            Xact_Node_ID = (int?)items[75];
            Xact_Node_Local_ID = (int?)items[76];
            End_AGE = (long?)items[77];
            End_Time = (string)items[78];
            Transaction_Begin = (string)items[79];
            Replicated_Records = (long?)items[80];
            Oldest_Active_LSN = (string)items[81];
            Server_Name = (string)items[82];
            Database_Name = (string)items[83];
            Mark_Name = (string)items[84];
            Repl_Partition_ID = (int?)items[85];
            Repl_Epoch = (int?)items[86];
            Repl_CSN = (long?)items[87];
            Repl_Flags = (int?)items[88];
            Repl_Msg = (Byte[])items[89];
            Repl_Source_Commit_Time = (string)items[90];
            Master_XDESID = (string)items[91];
            Master_DBID = (int?)items[92];
            Preplog_Begin_LSN = (string)items[93];
            Prepare_Time = (string)items[94];
            Virtual_Clock = (long?)items[95];
            Previous_Savepoint = (string)items[96];
            Savepoint_Name = (string)items[97];
            Rowbits_First_Bit = (short?)items[98];
            Rowbits_Bit_Count = (short?)items[99];
            Rowbits_Bit_Value = (Byte[])items[100];
            Number_of_Locks = (short?)items[101];
            Lock_Information = (string)items[102];
            LSN_before_writes = (string)items[103];
            Pages_Written = (short?)items[104];
            Current_LSN = (string)items[105];
            Operation = (string)items[106];
            Context = (string)items[107];
            Transaction_ID = (string)items[108];
            LogBlockGeneration = (long)items[109];
            Tag_Bits = (Byte[])items[110];
            Log_Record_Fixed_Length = (short)items[111];
            Log_Record_Length = (short)items[112];
            Previous_LSN = (string)items[113];
            Flag_Bits = (Byte[])items[114];
            Log_Reserve = (int)items[115];
            AllocUnitId = (long?)items[116];
            AllocUnitName = (string)items[117];
            Page_ID = (string)items[118];
            Slot_ID = (int?)items[119];
            Previous_Page_LSN = (string)items[120];
            PartitionId = (long?)items[121];
            RowFlags = (short?)items[122];
            Num_Elements = (short?)items[123];
            Offset_in_Row = (short?)items[124];
            Modify_Size = (short?)items[125];
            Checkpoint_Begin = (string)items[126];
            CHKPT_Begin_DB_Version = (short?)items[127];
            Max_XDESID = (string)items[128];
            Num_Transactions = (short?)items[129];
        }
    }

    [SqlTableFunction("sys", "fn_dump_dblog")]
    public partial class fn_dump_dblog : SqlTableFunctionProxy<fn_dump_dblog, fn_dump_dblogResult>
    {
        [SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string start
        {
            get;
            set;
        }

        [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)]
        public string end
        {
            get;
            set;
        }

        [SqlParameter("@devtype", 2, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string devtype
        {
            get;
            set;
        }

        [SqlParameter("@seqnum", 3, false, false), SqlTypeFacets("int", true)]
        public int? seqnum
        {
            get;
            set;
        }

        [SqlParameter("@fname1", 4, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname1
        {
            get;
            set;
        }

        [SqlParameter("@fname2", 5, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname2
        {
            get;
            set;
        }

        [SqlParameter("@fname3", 6, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname3
        {
            get;
            set;
        }

        [SqlParameter("@fname4", 7, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname4
        {
            get;
            set;
        }

        [SqlParameter("@fname5", 8, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname5
        {
            get;
            set;
        }

        [SqlParameter("@fname6", 9, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname6
        {
            get;
            set;
        }

        [SqlParameter("@fname7", 10, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname7
        {
            get;
            set;
        }

        [SqlParameter("@fname8", 11, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname8
        {
            get;
            set;
        }

        [SqlParameter("@fname9", 12, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname9
        {
            get;
            set;
        }

        [SqlParameter("@fname10", 13, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname10
        {
            get;
            set;
        }

        [SqlParameter("@fname11", 14, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname11
        {
            get;
            set;
        }

        [SqlParameter("@fname12", 15, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname12
        {
            get;
            set;
        }

        [SqlParameter("@fname13", 16, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname13
        {
            get;
            set;
        }

        [SqlParameter("@fname14", 17, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname14
        {
            get;
            set;
        }

        [SqlParameter("@fname15", 18, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname15
        {
            get;
            set;
        }

        [SqlParameter("@fname16", 19, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname16
        {
            get;
            set;
        }

        [SqlParameter("@fname17", 20, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname17
        {
            get;
            set;
        }

        [SqlParameter("@fname18", 21, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname18
        {
            get;
            set;
        }

        [SqlParameter("@fname19", 22, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname19
        {
            get;
            set;
        }

        [SqlParameter("@fname20", 23, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname20
        {
            get;
            set;
        }

        [SqlParameter("@fname21", 24, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname21
        {
            get;
            set;
        }

        [SqlParameter("@fname22", 25, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname22
        {
            get;
            set;
        }

        [SqlParameter("@fname23", 26, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname23
        {
            get;
            set;
        }

        [SqlParameter("@fname24", 27, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname24
        {
            get;
            set;
        }

        [SqlParameter("@fname25", 28, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname25
        {
            get;
            set;
        }

        [SqlParameter("@fname26", 29, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname26
        {
            get;
            set;
        }

        [SqlParameter("@fname27", 30, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname27
        {
            get;
            set;
        }

        [SqlParameter("@fname28", 31, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname28
        {
            get;
            set;
        }

        [SqlParameter("@fname29", 32, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname29
        {
            get;
            set;
        }

        [SqlParameter("@fname30", 33, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname30
        {
            get;
            set;
        }

        [SqlParameter("@fname31", 34, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname31
        {
            get;
            set;
        }

        [SqlParameter("@fname32", 35, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname32
        {
            get;
            set;
        }

        [SqlParameter("@fname33", 36, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname33
        {
            get;
            set;
        }

        [SqlParameter("@fname34", 37, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname34
        {
            get;
            set;
        }

        [SqlParameter("@fname35", 38, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname35
        {
            get;
            set;
        }

        [SqlParameter("@fname36", 39, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname36
        {
            get;
            set;
        }

        [SqlParameter("@fname37", 40, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname37
        {
            get;
            set;
        }

        [SqlParameter("@fname38", 41, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname38
        {
            get;
            set;
        }

        [SqlParameter("@fname39", 42, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname39
        {
            get;
            set;
        }

        [SqlParameter("@fname40", 43, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname40
        {
            get;
            set;
        }

        [SqlParameter("@fname41", 44, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname41
        {
            get;
            set;
        }

        [SqlParameter("@fname42", 45, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname42
        {
            get;
            set;
        }

        [SqlParameter("@fname43", 46, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname43
        {
            get;
            set;
        }

        [SqlParameter("@fname44", 47, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname44
        {
            get;
            set;
        }

        [SqlParameter("@fname45", 48, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname45
        {
            get;
            set;
        }

        [SqlParameter("@fname46", 49, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname46
        {
            get;
            set;
        }

        [SqlParameter("@fname47", 50, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname47
        {
            get;
            set;
        }

        [SqlParameter("@fname48", 51, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname48
        {
            get;
            set;
        }

        [SqlParameter("@fname49", 52, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname49
        {
            get;
            set;
        }

        [SqlParameter("@fname50", 53, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname50
        {
            get;
            set;
        }

        [SqlParameter("@fname51", 54, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname51
        {
            get;
            set;
        }

        [SqlParameter("@fname52", 55, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname52
        {
            get;
            set;
        }

        [SqlParameter("@fname53", 56, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname53
        {
            get;
            set;
        }

        [SqlParameter("@fname54", 57, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname54
        {
            get;
            set;
        }

        [SqlParameter("@fname55", 58, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname55
        {
            get;
            set;
        }

        [SqlParameter("@fname56", 59, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname56
        {
            get;
            set;
        }

        [SqlParameter("@fname57", 60, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname57
        {
            get;
            set;
        }

        [SqlParameter("@fname58", 61, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname58
        {
            get;
            set;
        }

        [SqlParameter("@fname59", 62, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname59
        {
            get;
            set;
        }

        [SqlParameter("@fname60", 63, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname60
        {
            get;
            set;
        }

        [SqlParameter("@fname61", 64, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname61
        {
            get;
            set;
        }

        [SqlParameter("@fname62", 65, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname62
        {
            get;
            set;
        }

        [SqlParameter("@fname63", 66, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname63
        {
            get;
            set;
        }

        [SqlParameter("@fname64", 67, false, false), SqlTypeFacets("nvarchar", true, 520)]
        public string fname64
        {
            get;
            set;
        }

        public fn_dump_dblog()
        {
        }

        public fn_dump_dblog(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
            devtype = (string)items[2];
            seqnum = (int?)items[3];
            fname1 = (string)items[4];
            fname2 = (string)items[5];
            fname3 = (string)items[6];
            fname4 = (string)items[7];
            fname5 = (string)items[8];
            fname6 = (string)items[9];
            fname7 = (string)items[10];
            fname8 = (string)items[11];
            fname9 = (string)items[12];
            fname10 = (string)items[13];
            fname11 = (string)items[14];
            fname12 = (string)items[15];
            fname13 = (string)items[16];
            fname14 = (string)items[17];
            fname15 = (string)items[18];
            fname16 = (string)items[19];
            fname17 = (string)items[20];
            fname18 = (string)items[21];
            fname19 = (string)items[22];
            fname20 = (string)items[23];
            fname21 = (string)items[24];
            fname22 = (string)items[25];
            fname23 = (string)items[26];
            fname24 = (string)items[27];
            fname25 = (string)items[28];
            fname26 = (string)items[29];
            fname27 = (string)items[30];
            fname28 = (string)items[31];
            fname29 = (string)items[32];
            fname30 = (string)items[33];
            fname31 = (string)items[34];
            fname32 = (string)items[35];
            fname33 = (string)items[36];
            fname34 = (string)items[37];
            fname35 = (string)items[38];
            fname36 = (string)items[39];
            fname37 = (string)items[40];
            fname38 = (string)items[41];
            fname39 = (string)items[42];
            fname40 = (string)items[43];
            fname41 = (string)items[44];
            fname42 = (string)items[45];
            fname43 = (string)items[46];
            fname44 = (string)items[47];
            fname45 = (string)items[48];
            fname46 = (string)items[49];
            fname47 = (string)items[50];
            fname48 = (string)items[51];
            fname49 = (string)items[52];
            fname50 = (string)items[53];
            fname51 = (string)items[54];
            fname52 = (string)items[55];
            fname53 = (string)items[56];
            fname54 = (string)items[57];
            fname55 = (string)items[58];
            fname56 = (string)items[59];
            fname57 = (string)items[60];
            fname58 = (string)items[61];
            fname59 = (string)items[62];
            fname60 = (string)items[63];
            fname61 = (string)items[64];
            fname62 = (string)items[65];
            fname63 = (string)items[66];
            fname64 = (string)items[67];
        }

        public fn_dump_dblog(string start, string end, string devtype, int? seqnum, string fname1, string fname2, string fname3, string fname4, string fname5, string fname6, string fname7, string fname8, string fname9, string fname10, string fname11, string fname12, string fname13, string fname14, string fname15, string fname16, string fname17, string fname18, string fname19, string fname20, string fname21, string fname22, string fname23, string fname24, string fname25, string fname26, string fname27, string fname28, string fname29, string fname30, string fname31, string fname32, string fname33, string fname34, string fname35, string fname36, string fname37, string fname38, string fname39, string fname40, string fname41, string fname42, string fname43, string fname44, string fname45, string fname46, string fname47, string fname48, string fname49, string fname50, string fname51, string fname52, string fname53, string fname54, string fname55, string fname56, string fname57, string fname58, string fname59, string fname60, string fname61, string fname62, string fname63, string fname64)
        {
            this.start = start;
            this.end = end;
            this.devtype = devtype;
            this.seqnum = seqnum;
            this.fname1 = fname1;
            this.fname2 = fname2;
            this.fname3 = fname3;
            this.fname4 = fname4;
            this.fname5 = fname5;
            this.fname6 = fname6;
            this.fname7 = fname7;
            this.fname8 = fname8;
            this.fname9 = fname9;
            this.fname10 = fname10;
            this.fname11 = fname11;
            this.fname12 = fname12;
            this.fname13 = fname13;
            this.fname14 = fname14;
            this.fname15 = fname15;
            this.fname16 = fname16;
            this.fname17 = fname17;
            this.fname18 = fname18;
            this.fname19 = fname19;
            this.fname20 = fname20;
            this.fname21 = fname21;
            this.fname22 = fname22;
            this.fname23 = fname23;
            this.fname24 = fname24;
            this.fname25 = fname25;
            this.fname26 = fname26;
            this.fname27 = fname27;
            this.fname28 = fname28;
            this.fname29 = fname29;
            this.fname30 = fname30;
            this.fname31 = fname31;
            this.fname32 = fname32;
            this.fname33 = fname33;
            this.fname34 = fname34;
            this.fname35 = fname35;
            this.fname36 = fname36;
            this.fname37 = fname37;
            this.fname38 = fname38;
            this.fname39 = fname39;
            this.fname40 = fname40;
            this.fname41 = fname41;
            this.fname42 = fname42;
            this.fname43 = fname43;
            this.fname44 = fname44;
            this.fname45 = fname45;
            this.fname46 = fname46;
            this.fname47 = fname47;
            this.fname48 = fname48;
            this.fname49 = fname49;
            this.fname50 = fname50;
            this.fname51 = fname51;
            this.fname52 = fname52;
            this.fname53 = fname53;
            this.fname54 = fname54;
            this.fname55 = fname55;
            this.fname56 = fname56;
            this.fname57 = fname57;
            this.fname58 = fname58;
            this.fname59 = fname59;
            this.fname60 = fname60;
            this.fname61 = fname61;
            this.fname62 = fname62;
            this.fname63 = fname63;
            this.fname64 = fname64;
        }

        public override object[] GetItemArray()
        {
            return new object[] { start, end, devtype, seqnum, fname1, fname2, fname3, fname4, fname5, fname6, fname7, fname8, fname9, fname10, fname11, fname12, fname13, fname14, fname15, fname16, fname17, fname18, fname19, fname20, fname21, fname22, fname23, fname24, fname25, fname26, fname27, fname28, fname29, fname30, fname31, fname32, fname33, fname34, fname35, fname36, fname37, fname38, fname39, fname40, fname41, fname42, fname43, fname44, fname45, fname46, fname47, fname48, fname49, fname50, fname51, fname52, fname53, fname54, fname55, fname56, fname57, fname58, fname59, fname60, fname61, fname62, fname63, fname64 };
        }

        public override void SetItemArray(object[] items)
        {
            start = (string)items[0];
            end = (string)items[1];
            devtype = (string)items[2];
            seqnum = (int?)items[3];
            fname1 = (string)items[4];
            fname2 = (string)items[5];
            fname3 = (string)items[6];
            fname4 = (string)items[7];
            fname5 = (string)items[8];
            fname6 = (string)items[9];
            fname7 = (string)items[10];
            fname8 = (string)items[11];
            fname9 = (string)items[12];
            fname10 = (string)items[13];
            fname11 = (string)items[14];
            fname12 = (string)items[15];
            fname13 = (string)items[16];
            fname14 = (string)items[17];
            fname15 = (string)items[18];
            fname16 = (string)items[19];
            fname17 = (string)items[20];
            fname18 = (string)items[21];
            fname19 = (string)items[22];
            fname20 = (string)items[23];
            fname21 = (string)items[24];
            fname22 = (string)items[25];
            fname23 = (string)items[26];
            fname24 = (string)items[27];
            fname25 = (string)items[28];
            fname26 = (string)items[29];
            fname27 = (string)items[30];
            fname28 = (string)items[31];
            fname29 = (string)items[32];
            fname30 = (string)items[33];
            fname31 = (string)items[34];
            fname32 = (string)items[35];
            fname33 = (string)items[36];
            fname34 = (string)items[37];
            fname35 = (string)items[38];
            fname36 = (string)items[39];
            fname37 = (string)items[40];
            fname38 = (string)items[41];
            fname39 = (string)items[42];
            fname40 = (string)items[43];
            fname41 = (string)items[44];
            fname42 = (string)items[45];
            fname43 = (string)items[46];
            fname44 = (string)items[47];
            fname45 = (string)items[48];
            fname46 = (string)items[49];
            fname47 = (string)items[50];
            fname48 = (string)items[51];
            fname49 = (string)items[52];
            fname50 = (string)items[53];
            fname51 = (string)items[54];
            fname52 = (string)items[55];
            fname53 = (string)items[56];
            fname54 = (string)items[57];
            fname55 = (string)items[58];
            fname56 = (string)items[59];
            fname57 = (string)items[60];
            fname58 = (string)items[61];
            fname59 = (string)items[62];
            fname60 = (string)items[63];
            fname61 = (string)items[64];
            fname62 = (string)items[65];
            fname63 = (string)items[66];
            fname64 = (string)items[67];
        }
    }

    [SqlTableFunctionResult("sys", "dm_exec_cached_plan_dependent_objects")]
    public partial class dm_exec_cached_plan_dependent_objectsResult : SqlTabularProxy
    {
        [SqlColumn("usecounts", 0), SqlTypeFacets("int", false)]
        public int usecounts
        {
            get;
            set;
        }

        [SqlColumn("memory_object_address", 1), SqlTypeFacets("varbinary", false, 8)]
        public Byte[] memory_object_address
        {
            get;
            set;
        }

        [SqlColumn("cacheobjtype", 2), SqlTypeFacets("nvarchar", false, 100)]
        public string cacheobjtype
        {
            get;
            set;
        }

        public dm_exec_cached_plan_dependent_objectsResult()
        {
        }

        public dm_exec_cached_plan_dependent_objectsResult(object[] items)
        {
            usecounts = (int)items[0];
            memory_object_address = (Byte[])items[1];
            cacheobjtype = (string)items[2];
        }

        public dm_exec_cached_plan_dependent_objectsResult(int usecounts, Byte[] memory_object_address, string cacheobjtype)
        {
            this.usecounts = usecounts;
            this.memory_object_address = memory_object_address;
            this.cacheobjtype = cacheobjtype;
        }

        public override object[] GetItemArray()
        {
            return new object[] { usecounts, memory_object_address, cacheobjtype };
        }

        public override void SetItemArray(object[] items)
        {
            usecounts = (int)items[0];
            memory_object_address = (Byte[])items[1];
            cacheobjtype = (string)items[2];
        }
    }

    [SqlTableFunction("sys", "dm_exec_cached_plan_dependent_objects")]
    public partial class dm_exec_cached_plan_dependent_objects : SqlTableFunctionProxy<dm_exec_cached_plan_dependent_objects, dm_exec_cached_plan_dependent_objectsResult>
    {
        [SqlParameter("@planhandle", 0, false, false), SqlTypeFacets("varbinary", true, 64)]
        public Byte[] planhandle
        {
            get;
            set;
        }

        public dm_exec_cached_plan_dependent_objects()
        {
        }

        public dm_exec_cached_plan_dependent_objects(object[] items)
        {
            planhandle = (Byte[])items[0];
        }

        public dm_exec_cached_plan_dependent_objects(Byte[] planhandle)
        {
            this.planhandle = planhandle;
        }

        public override object[] GetItemArray()
        {
            return new object[] { planhandle };
        }

        public override void SetItemArray(object[] items)
        {
            planhandle = (Byte[])items[0];
        }
    }

    [SqlTableFunctionResult("sys", "dm_db_stats_properties_internal")]
    public partial class dm_db_stats_properties_internalResult : SqlTabularProxy
    {
        [SqlColumn("object_id", 0), SqlTypeFacets("int", false)]
        public int object_id
        {
            get;
            set;
        }

        [SqlColumn("stats_id", 1), SqlTypeFacets("int", false)]
        public int stats_id
        {
            get;
            set;
        }

        [SqlColumn("last_updated", 2), SqlTypeFacets("datetime2", true, 7)]
        public DateTime? last_updated
        {
            get;
            set;
        }

        [SqlColumn("rows", 3), SqlTypeFacets("bigint", true)]
        public long? rows
        {
            get;
            set;
        }

        [SqlColumn("rows_sampled", 4), SqlTypeFacets("bigint", true)]
        public long? rows_sampled
        {
            get;
            set;
        }

        [SqlColumn("steps", 5), SqlTypeFacets("int", true)]
        public int? steps
        {
            get;
            set;
        }

        [SqlColumn("unfiltered_rows", 6), SqlTypeFacets("bigint", true)]
        public long? unfiltered_rows
        {
            get;
            set;
        }

        [SqlColumn("modification_counter", 7), SqlTypeFacets("bigint", true)]
        public long? modification_counter
        {
            get;
            set;
        }

        [SqlColumn("node_id", 8), SqlTypeFacets("int", false)]
        public int node_id
        {
            get;
            set;
        }

        [SqlColumn("first_child", 9), SqlTypeFacets("int", false)]
        public int first_child
        {
            get;
            set;
        }

        [SqlColumn("next_sibling", 10), SqlTypeFacets("int", false)]
        public int next_sibling
        {
            get;
            set;
        }

        [SqlColumn("left_boundary", 11), SqlTypeFacets("sql_variant", true)]
        public Object left_boundary
        {
            get;
            set;
        }

        [SqlColumn("right_boundary", 12), SqlTypeFacets("sql_variant", true)]
        public Object right_boundary
        {
            get;
            set;
        }

        [SqlColumn("partition_number", 13), SqlTypeFacets("int", true)]
        public int? partition_number
        {
            get;
            set;
        }

        public dm_db_stats_properties_internalResult()
        {
        }

        public dm_db_stats_properties_internalResult(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            last_updated = (DateTime?)items[2];
            rows = (long?)items[3];
            rows_sampled = (long?)items[4];
            steps = (int?)items[5];
            unfiltered_rows = (long?)items[6];
            modification_counter = (long?)items[7];
            node_id = (int)items[8];
            first_child = (int)items[9];
            next_sibling = (int)items[10];
            left_boundary = (Object)items[11];
            right_boundary = (Object)items[12];
            partition_number = (int?)items[13];
        }

        public dm_db_stats_properties_internalResult(int object_id, int stats_id, DateTime? last_updated, long? rows, long? rows_sampled, int? steps, long? unfiltered_rows, long? modification_counter, int node_id, int first_child, int next_sibling, Object left_boundary, Object right_boundary, int? partition_number)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
            this.last_updated = last_updated;
            this.rows = rows;
            this.rows_sampled = rows_sampled;
            this.steps = steps;
            this.unfiltered_rows = unfiltered_rows;
            this.modification_counter = modification_counter;
            this.node_id = node_id;
            this.first_child = first_child;
            this.next_sibling = next_sibling;
            this.left_boundary = left_boundary;
            this.right_boundary = right_boundary;
            this.partition_number = partition_number;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id, last_updated, rows, rows_sampled, steps, unfiltered_rows, modification_counter, node_id, first_child, next_sibling, left_boundary, right_boundary, partition_number };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int)items[0];
            stats_id = (int)items[1];
            last_updated = (DateTime?)items[2];
            rows = (long?)items[3];
            rows_sampled = (long?)items[4];
            steps = (int?)items[5];
            unfiltered_rows = (long?)items[6];
            modification_counter = (long?)items[7];
            node_id = (int)items[8];
            first_child = (int)items[9];
            next_sibling = (int)items[10];
            left_boundary = (Object)items[11];
            right_boundary = (Object)items[12];
            partition_number = (int?)items[13];
        }
    }

    [SqlTableFunction("sys", "dm_db_stats_properties_internal")]
    public partial class dm_db_stats_properties_internal : SqlTableFunctionProxy<dm_db_stats_properties_internal, dm_db_stats_properties_internalResult>
    {
        [SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)]
        public int? object_id
        {
            get;
            set;
        }

        [SqlParameter("@stats_id", 1, false, false), SqlTypeFacets("int", true)]
        public int? stats_id
        {
            get;
            set;
        }

        public dm_db_stats_properties_internal()
        {
        }

        public dm_db_stats_properties_internal(object[] items)
        {
            object_id = (int?)items[0];
            stats_id = (int?)items[1];
        }

        public dm_db_stats_properties_internal(int? object_id, int? stats_id)
        {
            this.object_id = object_id;
            this.stats_id = stats_id;
        }

        public override object[] GetItemArray()
        {
            return new object[] { object_id, stats_id };
        }

        public override void SetItemArray(object[] items)
        {
            object_id = (int?)items[0];
            stats_id = (int?)items[1];
        }
    }

    /// <summary>
    /// Routines defined in the sys schema
    /// </summary>
    [SqlOperationContract()]
    public interface IsysOperations
    {
        [SqlTableFunction("sys", "dm_db_stats_properties_internal")]
        SqlOutcome<IReadOnlyList<dm_db_stats_properties_internalResult>> dm_db_stats_properties_internal([SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)] int? object_id, [SqlParameter("@stats_id", 1, false, false), SqlTypeFacets("int", true)] int? stats_id);
        [SqlTableFunction("sys", "dm_exec_cached_plan_dependent_objects")]
        SqlOutcome<IReadOnlyList<dm_exec_cached_plan_dependent_objectsResult>> dm_exec_cached_plan_dependent_objects([SqlParameter("@planhandle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] planhandle);
        [SqlTableFunction("sys", "fn_dump_dblog")]
        SqlOutcome<IReadOnlyList<fn_dump_dblogResult>> fn_dump_dblog([SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)] string start, [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)] string end, [SqlParameter("@devtype", 2, false, false), SqlTypeFacets("nvarchar", true, 520)] string devtype, [SqlParameter("@seqnum", 3, false, false), SqlTypeFacets("int", true)] int? seqnum, [SqlParameter("@fname1", 4, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname1, [SqlParameter("@fname2", 5, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname2, [SqlParameter("@fname3", 6, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname3, [SqlParameter("@fname4", 7, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname4, [SqlParameter("@fname5", 8, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname5, [SqlParameter("@fname6", 9, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname6, [SqlParameter("@fname7", 10, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname7, [SqlParameter("@fname8", 11, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname8, [SqlParameter("@fname9", 12, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname9, [SqlParameter("@fname10", 13, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname10, [SqlParameter("@fname11", 14, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname11, [SqlParameter("@fname12", 15, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname12, [SqlParameter("@fname13", 16, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname13, [SqlParameter("@fname14", 17, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname14, [SqlParameter("@fname15", 18, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname15, [SqlParameter("@fname16", 19, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname16, [SqlParameter("@fname17", 20, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname17, [SqlParameter("@fname18", 21, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname18, [SqlParameter("@fname19", 22, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname19, [SqlParameter("@fname20", 23, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname20, [SqlParameter("@fname21", 24, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname21, [SqlParameter("@fname22", 25, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname22, [SqlParameter("@fname23", 26, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname23, [SqlParameter("@fname24", 27, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname24, [SqlParameter("@fname25", 28, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname25, [SqlParameter("@fname26", 29, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname26, [SqlParameter("@fname27", 30, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname27, [SqlParameter("@fname28", 31, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname28, [SqlParameter("@fname29", 32, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname29, [SqlParameter("@fname30", 33, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname30, [SqlParameter("@fname31", 34, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname31, [SqlParameter("@fname32", 35, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname32, [SqlParameter("@fname33", 36, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname33, [SqlParameter("@fname34", 37, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname34, [SqlParameter("@fname35", 38, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname35, [SqlParameter("@fname36", 39, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname36, [SqlParameter("@fname37", 40, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname37, [SqlParameter("@fname38", 41, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname38, [SqlParameter("@fname39", 42, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname39, [SqlParameter("@fname40", 43, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname40, [SqlParameter("@fname41", 44, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname41, [SqlParameter("@fname42", 45, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname42, [SqlParameter("@fname43", 46, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname43, [SqlParameter("@fname44", 47, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname44, [SqlParameter("@fname45", 48, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname45, [SqlParameter("@fname46", 49, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname46, [SqlParameter("@fname47", 50, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname47, [SqlParameter("@fname48", 51, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname48, [SqlParameter("@fname49", 52, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname49, [SqlParameter("@fname50", 53, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname50, [SqlParameter("@fname51", 54, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname51, [SqlParameter("@fname52", 55, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname52, [SqlParameter("@fname53", 56, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname53, [SqlParameter("@fname54", 57, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname54, [SqlParameter("@fname55", 58, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname55, [SqlParameter("@fname56", 59, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname56, [SqlParameter("@fname57", 60, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname57, [SqlParameter("@fname58", 61, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname58, [SqlParameter("@fname59", 62, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname59, [SqlParameter("@fname60", 63, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname60, [SqlParameter("@fname61", 64, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname61, [SqlParameter("@fname62", 65, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname62, [SqlParameter("@fname63", 66, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname63, [SqlParameter("@fname64", 67, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname64);
        [SqlTableFunction("sys", "dm_logpoolmgr_stats")]
        SqlOutcome<IReadOnlyList<dm_logpoolmgr_statsResult>> dm_logpoolmgr_stats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId);
        [SqlTableFunction("sys", "fn_dump_dblog_xtp")]
        SqlOutcome<IReadOnlyList<fn_dump_dblog_xtpResult>> fn_dump_dblog_xtp([SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)] string start, [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)] string end, [SqlParameter("@devtype", 2, false, false), SqlTypeFacets("nvarchar", true, 520)] string devtype, [SqlParameter("@seqnum", 3, false, false), SqlTypeFacets("int", true)] int? seqnum, [SqlParameter("@fname1", 4, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname1, [SqlParameter("@fname2", 5, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname2, [SqlParameter("@fname3", 6, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname3, [SqlParameter("@fname4", 7, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname4, [SqlParameter("@fname5", 8, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname5, [SqlParameter("@fname6", 9, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname6, [SqlParameter("@fname7", 10, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname7, [SqlParameter("@fname8", 11, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname8, [SqlParameter("@fname9", 12, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname9, [SqlParameter("@fname10", 13, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname10, [SqlParameter("@fname11", 14, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname11, [SqlParameter("@fname12", 15, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname12, [SqlParameter("@fname13", 16, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname13, [SqlParameter("@fname14", 17, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname14, [SqlParameter("@fname15", 18, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname15, [SqlParameter("@fname16", 19, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname16, [SqlParameter("@fname17", 20, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname17, [SqlParameter("@fname18", 21, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname18, [SqlParameter("@fname19", 22, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname19, [SqlParameter("@fname20", 23, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname20, [SqlParameter("@fname21", 24, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname21, [SqlParameter("@fname22", 25, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname22, [SqlParameter("@fname23", 26, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname23, [SqlParameter("@fname24", 27, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname24, [SqlParameter("@fname25", 28, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname25, [SqlParameter("@fname26", 29, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname26, [SqlParameter("@fname27", 30, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname27, [SqlParameter("@fname28", 31, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname28, [SqlParameter("@fname29", 32, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname29, [SqlParameter("@fname30", 33, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname30, [SqlParameter("@fname31", 34, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname31, [SqlParameter("@fname32", 35, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname32, [SqlParameter("@fname33", 36, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname33, [SqlParameter("@fname34", 37, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname34, [SqlParameter("@fname35", 38, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname35, [SqlParameter("@fname36", 39, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname36, [SqlParameter("@fname37", 40, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname37, [SqlParameter("@fname38", 41, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname38, [SqlParameter("@fname39", 42, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname39, [SqlParameter("@fname40", 43, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname40, [SqlParameter("@fname41", 44, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname41, [SqlParameter("@fname42", 45, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname42, [SqlParameter("@fname43", 46, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname43, [SqlParameter("@fname44", 47, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname44, [SqlParameter("@fname45", 48, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname45, [SqlParameter("@fname46", 49, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname46, [SqlParameter("@fname47", 50, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname47, [SqlParameter("@fname48", 51, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname48, [SqlParameter("@fname49", 52, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname49, [SqlParameter("@fname50", 53, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname50, [SqlParameter("@fname51", 54, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname51, [SqlParameter("@fname52", 55, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname52, [SqlParameter("@fname53", 56, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname53, [SqlParameter("@fname54", 57, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname54, [SqlParameter("@fname55", 58, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname55, [SqlParameter("@fname56", 59, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname56, [SqlParameter("@fname57", 60, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname57, [SqlParameter("@fname58", 61, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname58, [SqlParameter("@fname59", 62, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname59, [SqlParameter("@fname60", 63, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname60, [SqlParameter("@fname61", 64, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname61, [SqlParameter("@fname62", 65, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname62, [SqlParameter("@fname63", 66, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname63, [SqlParameter("@fname64", 67, false, false), SqlTypeFacets("nvarchar", true, 520)] string fname64);
        [SqlTableFunction("sys", "fn_sqlagent_job_history")]
        SqlOutcome<IReadOnlyList<fn_sqlagent_job_historyResult>> fn_sqlagent_job_history([SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)] Guid? job_id, [SqlParameter("@step_id", 1, false, false), SqlTypeFacets("int", true)] int? step_id);
        [SqlTableFunction("sys", "dm_db_objects_disabled_on_compatibility_level_change")]
        SqlOutcome<IReadOnlyList<dm_db_objects_disabled_on_compatibility_level_changeResult>> dm_db_objects_disabled_on_compatibility_level_change([SqlParameter("@compatibility_level", 0, false, false), SqlTypeFacets("int", true)] int? compatibility_level);
        [SqlTableFunction("sys", "dm_fts_parser")]
        SqlOutcome<IReadOnlyList<dm_fts_parserResult>> dm_fts_parser([SqlParameter("@querystring", 0, false, false), SqlTypeFacets("nvarchar", true, 8000)] string querystring, [SqlParameter("@lcid", 1, false, false), SqlTypeFacets("int", true)] int? lcid, [SqlParameter("@stoplistid", 2, false, false), SqlTypeFacets("int", true)] int? stoplistid, [SqlParameter("@accentsensitive", 3, false, false), SqlTypeFacets("bit", true)] bool? accentsensitive);
        [SqlTableFunction("sys", "dm_cryptographic_provider_keys")]
        SqlOutcome<IReadOnlyList<dm_cryptographic_provider_keysResult>> dm_cryptographic_provider_keys([SqlParameter("@ProviderId", 0, false, false), SqlTypeFacets("int", true)] int? ProviderId);
        [SqlTableFunction("sys", "fn_MSxe_read_event_stream")]
        SqlOutcome<IReadOnlyList<fn_MSxe_read_event_streamResult>> fn_MSxe_read_event_stream([SqlParameter("@source", 0, false, false), SqlTypeFacets("nvarchar", true, 520)] string source, [SqlParameter("@source_opt", 1, false, false), SqlTypeFacets("int", true)] int? source_opt);
        [SqlTableFunction("sys", "dm_db_missing_index_columns")]
        SqlOutcome<IReadOnlyList<dm_db_missing_index_columnsResult>> dm_db_missing_index_columns([SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)] int? handle);
        [SqlTableFunction("sys", "fn_virtualservernodes")]
        SqlOutcome<IReadOnlyList<fn_virtualservernodesResult>> fn_virtualservernodes();
        [SqlTableFunction("sys", "fn_xe_file_target_read_file")]
        SqlOutcome<IReadOnlyList<fn_xe_file_target_read_fileResult>> fn_xe_file_target_read_file([SqlParameter("@path", 0, false, false), SqlTypeFacets("nvarchar", true, 520)] string path, [SqlParameter("@mdpath", 1, false, false), SqlTypeFacets("nvarchar", true, 520)] string mdpath, [SqlParameter("@initial_file_name", 2, false, false), SqlTypeFacets("nvarchar", true, 520)] string initial_file_name, [SqlParameter("@initial_offset", 3, false, false), SqlTypeFacets("bigint", true)] long? initial_offset);
        [SqlTableFunction("sys", "fn_sqlagent_jobsteps_logs")]
        SqlOutcome<IReadOnlyList<fn_sqlagent_jobsteps_logsResult>> fn_sqlagent_jobsteps_logs([SqlParameter("@step_uid", 0, false, false), SqlTypeFacets("uniqueidentifier", true)] Guid? step_uid);
        [SqlTableFunction("sys", "fn_trace_getinfo")]
        SqlOutcome<IReadOnlyList<fn_trace_getinfoResult>> fn_trace_getinfo([SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)] int? handle);
        [SqlTableFunction("sys", "fn_RowDumpCracker")]
        SqlOutcome<IReadOnlyList<fn_RowDumpCrackerResult>> fn_RowDumpCracker([SqlParameter("@rowdump", 0, false, false), SqlTypeFacets("varbinary", true, -1)] Byte[] rowdump);
        [SqlTableFunction("sys", "fn_dblog")]
        SqlOutcome<IReadOnlyList<fn_dblogResult>> fn_dblog([SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)] string start, [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)] string end);
        [SqlTableFunction("sys", "fn_helpcollations")]
        SqlOutcome<IReadOnlyList<fn_helpcollationsResult>> fn_helpcollations();
        [SqlTableFunction("sys", "dm_exec_cursors")]
        SqlOutcome<IReadOnlyList<dm_exec_cursorsResult>> dm_exec_cursors([SqlParameter("@spid", 0, false, false), SqlTypeFacets("int", true)] int? spid);
        [SqlTableFunction("sys", "fn_sqlagent_jobs")]
        SqlOutcome<IReadOnlyList<fn_sqlagent_jobsResult>> fn_sqlagent_jobs([SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)] Guid? job_id);
        [SqlTableFunction("sys", "dm_fts_index_keywords")]
        SqlOutcome<IReadOnlyList<dm_fts_index_keywordsResult>> dm_fts_index_keywords([SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)] int? dbid, [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)] int? objid);
        [SqlTableFunction("sys", "dm_logconsumer_cachebufferrefs")]
        SqlOutcome<IReadOnlyList<dm_logconsumer_cachebufferrefsResult>> dm_logconsumer_cachebufferrefs([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId, [SqlParameter("@ConsumerId", 1, false, false), SqlTypeFacets("bigint", true)] long? ConsumerId);
        [SqlTableFunction("sys", "dm_io_virtual_file_stats")]
        SqlOutcome<IReadOnlyList<dm_io_virtual_file_statsResult>> dm_io_virtual_file_stats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId, [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)] int? FileId);
        [SqlTableFunction("sys", "dm_exec_xml_handles")]
        SqlOutcome<IReadOnlyList<dm_exec_xml_handlesResult>> dm_exec_xml_handles([SqlParameter("@spid", 0, false, false), SqlTypeFacets("int", true)] int? spid);
        [SqlTableFunction("sys", "fn_PhysLocCracker")]
        SqlOutcome<IReadOnlyList<fn_PhysLocCrackerResult>> fn_PhysLocCracker([SqlParameter("@physical_locator", 0, false, false), SqlTypeFacets("binary", true, 8)] Byte[] physical_locator);
        [SqlTableFunction("sys", "fn_translate_permissions")]
        SqlOutcome<IReadOnlyList<fn_translate_permissionsResult>> fn_translate_permissions([SqlParameter("@level", 0, false, false), SqlTypeFacets("nvarchar", true, 120)] string level, [SqlParameter("@perms", 1, false, false), SqlTypeFacets("varbinary", true, 16)] Byte[] perms);
        [SqlTableFunction("sys", "dm_exec_text_query_plan")]
        SqlOutcome<IReadOnlyList<dm_exec_text_query_planResult>> dm_exec_text_query_plan([SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] handle, [SqlParameter("@stmt_start_offset", 1, false, false), SqlTypeFacets("int", true)] int? stmt_start_offset, [SqlParameter("@stmt_end_offset", 2, false, false), SqlTypeFacets("int", true)] int? stmt_end_offset);
        [SqlTableFunction("sys", "dm_logpool_consumers")]
        SqlOutcome<IReadOnlyList<dm_logpool_consumersResult>> dm_logpool_consumers([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId);
        [SqlTableFunction("sys", "dm_exec_describe_first_result_set_for_object")]
        SqlOutcome<IReadOnlyList<dm_exec_describe_first_result_set_for_objectResult>> dm_exec_describe_first_result_set_for_object([SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)] int? object_id, [SqlParameter("@browse_information_mode", 1, false, false), SqlTypeFacets("tinyint", true)] byte? browse_information_mode);
        [SqlTableFunction("sys", "fn_trace_gettable")]
        SqlOutcome<IReadOnlyList<fn_trace_gettableResult>> fn_trace_gettable([SqlParameter("@filename", 0, false, false), SqlTypeFacets("nvarchar", true, 8000)] string filename, [SqlParameter("@numfiles", 1, false, false), SqlTypeFacets("int", true)] int? numfiles);
        [SqlTableFunction("sys", "dm_fts_index_keywords_position_by_document")]
        SqlOutcome<IReadOnlyList<dm_fts_index_keywords_position_by_documentResult>> dm_fts_index_keywords_position_by_document([SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)] int? dbid, [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)] int? objid);
        [SqlTableFunction("sys", "fn_helpdatatypemap")]
        SqlOutcome<IReadOnlyList<fn_helpdatatypemapResult>> fn_helpdatatypemap([SqlParameter("@source_dbms", 0, false, false), SqlTypeFacets("sysname", true)] string source_dbms, [SqlParameter("@source_version", 1, false, false), SqlTypeFacets("sysname", true)] string source_version, [SqlParameter("@source_type", 2, false, false), SqlTypeFacets("sysname", true)] string source_type, [SqlParameter("@destination_dbms", 3, false, false), SqlTypeFacets("sysname", true)] string destination_dbms, [SqlParameter("@destination_version", 4, false, false), SqlTypeFacets("sysname", true)] string destination_version, [SqlParameter("@destination_type", 5, false, false), SqlTypeFacets("sysname", true)] string destination_type, [SqlParameter("@defaults_only", 6, false, false), SqlTypeFacets("bit", true)] bool? defaults_only);
        [SqlTableFunction("sys", "dm_sql_referencing_entities")]
        SqlOutcome<IReadOnlyList<dm_sql_referencing_entitiesResult>> dm_sql_referencing_entities([SqlParameter("@name", 0, false, false), SqlTypeFacets("nvarchar", true, 1034)] string name, [SqlParameter("@referenced_class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)] string referenced_class);
        [SqlTableFunction("sys", "fn_get_audit_file")]
        SqlOutcome<IReadOnlyList<fn_get_audit_fileResult>> fn_get_audit_file([SqlParameter("@file_pattern", 0, false, false), SqlTypeFacets("nvarchar", true, 520)] string file_pattern, [SqlParameter("@initial_file_name", 1, false, false), SqlTypeFacets("nvarchar", true, 520)] string initial_file_name, [SqlParameter("@audit_record_offset", 2, false, false), SqlTypeFacets("bigint", true)] long? audit_record_offset);
        [SqlTableFunction("sys", "dm_db_stats_properties")]
        SqlOutcome<IReadOnlyList<dm_db_stats_propertiesResult>> dm_db_stats_properties([SqlParameter("@object_id", 0, false, false), SqlTypeFacets("int", true)] int? object_id, [SqlParameter("@stats_id", 1, false, false), SqlTypeFacets("int", true)] int? stats_id);
        [SqlTableFunction("sys", "dm_os_volume_stats")]
        SqlOutcome<IReadOnlyList<dm_os_volume_statsResult>> dm_os_volume_stats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId, [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)] int? FileId);
        [SqlTableFunction("sys", "dm_logpoolmgr_freepools")]
        SqlOutcome<IReadOnlyList<dm_logpoolmgr_freepoolsResult>> dm_logpoolmgr_freepools([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId);
        [SqlTableFunction("sys", "fn_listextendedproperty")]
        SqlOutcome<IReadOnlyList<fn_listextendedpropertyResult>> fn_listextendedproperty([SqlParameter("@name", 0, false, false), SqlTypeFacets("sysname", true)] string name, [SqlParameter("@level0type", 1, false, false), SqlTypeFacets("varchar", true, 128)] string level0type, [SqlParameter("@level0name", 2, false, false), SqlTypeFacets("sysname", true)] string level0name, [SqlParameter("@level1type", 3, false, false), SqlTypeFacets("varchar", true, 128)] string level1type, [SqlParameter("@level1name", 4, false, false), SqlTypeFacets("sysname", true)] string level1name, [SqlParameter("@level2type", 5, false, false), SqlTypeFacets("varchar", true, 128)] string level2type, [SqlParameter("@level2name", 6, false, false), SqlTypeFacets("sysname", true)] string level2name);
        [SqlTableFunction("sys", "dm_db_index_operational_stats")]
        SqlOutcome<IReadOnlyList<dm_db_index_operational_statsResult>> dm_db_index_operational_stats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)] short? DatabaseId, [SqlParameter("@TableId", 1, false, false), SqlTypeFacets("int", true)] int? TableId, [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)] int? IndexId, [SqlParameter("@PartitionNumber", 3, false, false), SqlTypeFacets("int", true)] int? PartitionNumber);
        [SqlTableFunction("sys", "fn_validate_plan_guide")]
        SqlOutcome<IReadOnlyList<fn_validate_plan_guideResult>> fn_validate_plan_guide([SqlParameter("@plan_guide_id", 0, false, false), SqlTypeFacets("int", true)] int? plan_guide_id);
        [SqlTableFunction("sys", "dm_cryptographic_provider_sessions")]
        SqlOutcome<IReadOnlyList<dm_cryptographic_provider_sessionsResult>> dm_cryptographic_provider_sessions([SqlParameter("@all", 0, false, false), SqlTypeFacets("int", true)] int? all);
        [SqlTableFunction("sys", "fn_EnumCurrentPrincipals")]
        SqlOutcome<IReadOnlyList<fn_EnumCurrentPrincipalsResult>> fn_EnumCurrentPrincipals();
        [SqlTableFunction("sys", "dm_sql_referenced_entities")]
        SqlOutcome<IReadOnlyList<dm_sql_referenced_entitiesResult>> dm_sql_referenced_entities([SqlParameter("@name", 0, false, false), SqlTypeFacets("nvarchar", true, 1034)] string name, [SqlParameter("@referencing_class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)] string referencing_class);
        [SqlTableFunction("sys", "fn_sqlagent_jobsteps")]
        SqlOutcome<IReadOnlyList<fn_sqlagent_jobstepsResult>> fn_sqlagent_jobsteps([SqlParameter("@job_id", 0, false, false), SqlTypeFacets("uniqueidentifier", true)] Guid? job_id, [SqlParameter("@step_id", 1, false, false), SqlTypeFacets("int", true)] int? step_id);
        [SqlTableFunction("sys", "dm_db_database_page_allocations")]
        SqlOutcome<IReadOnlyList<dm_db_database_page_allocationsResult>> dm_db_database_page_allocations([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)] short? DatabaseId, [SqlParameter("@TableId", 1, false, false), SqlTypeFacets("int", true)] int? TableId, [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)] int? IndexId, [SqlParameter("@PartitionId", 3, false, false), SqlTypeFacets("bigint", true)] long? PartitionId, [SqlParameter("@Mode", 4, false, false), SqlTypeFacets("nvarchar", true, 128)] string Mode);
        [SqlTableFunction("sys", "fn_my_permissions")]
        SqlOutcome<IReadOnlyList<fn_my_permissionsResult>> fn_my_permissions([SqlParameter("@entity", 0, false, false), SqlTypeFacets("sysname", true)] string entity, [SqlParameter("@class", 1, false, false), SqlTypeFacets("nvarchar", true, 120)] string @class);
        [SqlTableFunction("sys", "dm_exec_describe_first_result_set")]
        SqlOutcome<IReadOnlyList<dm_exec_describe_first_result_setResult>> dm_exec_describe_first_result_set([SqlParameter("@tsql", 0, false, false), SqlTypeFacets("nvarchar", true, -1)] string tsql, [SqlParameter("@params", 1, false, false), SqlTypeFacets("nvarchar", true, -1)] string @params, [SqlParameter("@browse_information_mode", 2, false, false), SqlTypeFacets("tinyint", true)] byte? browse_information_mode);
        [SqlTableFunction("sys", "fn_get_sql")]
        SqlOutcome<IReadOnlyList<fn_get_sqlResult>> fn_get_sql([SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] handle);
        [SqlTableFunction("sys", "dm_exec_query_plan")]
        SqlOutcome<IReadOnlyList<dm_exec_query_planResult>> dm_exec_query_plan([SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] handle);
        [SqlTableFunction("sys", "fn_builtin_permissions")]
        SqlOutcome<IReadOnlyList<fn_builtin_permissionsResult>> fn_builtin_permissions([SqlParameter("@level", 0, false, false), SqlTypeFacets("nvarchar", true, 120)] string level);
        [SqlTableFunction("sys", "dm_logpoolmgr_respoolsize")]
        SqlOutcome<IReadOnlyList<dm_logpoolmgr_respoolsizeResult>> dm_logpoolmgr_respoolsize([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId);
        [SqlTableFunction("sys", "fn_virtualfilestats")]
        SqlOutcome<IReadOnlyList<fn_virtualfilestatsResult>> fn_virtualfilestats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId, [SqlParameter("@FileId", 1, false, false), SqlTypeFacets("int", true)] int? FileId);
        [SqlTableFunction("sys", "dm_db_index_physical_stats")]
        SqlOutcome<IReadOnlyList<dm_db_index_physical_statsResult>> dm_db_index_physical_stats([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("smallint", true)] short? DatabaseId, [SqlParameter("@ObjectId", 1, false, false), SqlTypeFacets("int", true)] int? ObjectId, [SqlParameter("@IndexId", 2, false, false), SqlTypeFacets("int", true)] int? IndexId, [SqlParameter("@PartitionNumber", 3, false, false), SqlTypeFacets("int", true)] int? PartitionNumber, [SqlParameter("@Mode", 4, false, false), SqlTypeFacets("nvarchar", true, 40)] string Mode);
        [SqlTableFunction("sys", "fn_dblog_xtp")]
        SqlOutcome<IReadOnlyList<fn_dblog_xtpResult>> fn_dblog_xtp([SqlParameter("@start", 0, false, false), SqlTypeFacets("nvarchar", true, 50)] string start, [SqlParameter("@end", 1, false, false), SqlTypeFacets("nvarchar", true, 50)] string end);
        [SqlTableFunction("sys", "dm_fts_index_keywords_by_document")]
        SqlOutcome<IReadOnlyList<dm_fts_index_keywords_by_documentResult>> dm_fts_index_keywords_by_document([SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)] int? dbid, [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)] int? objid);
        [SqlTableFunction("sys", "dm_logpool_sharedcachebuffers")]
        SqlOutcome<IReadOnlyList<dm_logpool_sharedcachebuffersResult>> dm_logpool_sharedcachebuffers([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId);
        [SqlTableFunction("sys", "fn_servershareddrives")]
        SqlOutcome<IReadOnlyList<fn_servershareddrivesResult>> fn_servershareddrives();
        [SqlTableFunction("sys", "dm_exec_sql_text")]
        SqlOutcome<IReadOnlyList<dm_exec_sql_textResult>> dm_exec_sql_text([SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] handle);
        [SqlTableFunction("sys", "dm_fts_index_keywords_by_property")]
        SqlOutcome<IReadOnlyList<dm_fts_index_keywords_by_propertyResult>> dm_fts_index_keywords_by_property([SqlParameter("@dbid", 0, false, false), SqlTypeFacets("int", true)] int? dbid, [SqlParameter("@objid", 1, false, false), SqlTypeFacets("int", true)] int? objid);
        [SqlTableFunction("sys", "fn_check_object_signatures")]
        SqlOutcome<IReadOnlyList<fn_check_object_signaturesResult>> fn_check_object_signatures([SqlParameter("@class", 0, false, false), SqlTypeFacets("sysname", true)] string @class, [SqlParameter("@thumbprint", 1, false, false), SqlTypeFacets("varbinary", true, 20)] Byte[] thumbprint);
        [SqlTableFunction("sys", "dm_cryptographic_provider_algorithms")]
        SqlOutcome<IReadOnlyList<dm_cryptographic_provider_algorithmsResult>> dm_cryptographic_provider_algorithms([SqlParameter("@ProviderId", 0, false, false), SqlTypeFacets("int", true)] int? ProviderId);
        [SqlTableFunction("sys", "dm_logconsumer_privatecachebuffers")]
        SqlOutcome<IReadOnlyList<dm_logconsumer_privatecachebuffersResult>> dm_logconsumer_privatecachebuffers([SqlParameter("@DatabaseId", 0, false, false), SqlTypeFacets("int", true)] int? DatabaseId, [SqlParameter("@ConsumerId", 1, false, false), SqlTypeFacets("bigint", true)] long? ConsumerId);
        [SqlTableFunction("sys", "fn_column_store_row_groups")]
        SqlOutcome<IReadOnlyList<fn_column_store_row_groupsResult>> fn_column_store_row_groups([SqlParameter("@obj_id", 0, false, false), SqlTypeFacets("bigint", true)] long? obj_id);
        [SqlTableFunction("sys", "fn_trace_getfilterinfo")]
        SqlOutcome<IReadOnlyList<fn_trace_getfilterinfoResult>> fn_trace_getfilterinfo([SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)] int? handle);
        [SqlTableFunction("sys", "fn_replgetcolidfrombitmap")]
        SqlOutcome<IReadOnlyList<fn_replgetcolidfrombitmapResult>> fn_replgetcolidfrombitmap([SqlParameter("@columns", 0, false, false), SqlTypeFacets("binary", true, 32)] Byte[] columns);
        [SqlTableFunction("sys", "fn_sqlagent_subsystems")]
        SqlOutcome<IReadOnlyList<fn_sqlagent_subsystemsResult>> fn_sqlagent_subsystems();
        [SqlTableFunction("sys", "fn_trace_geteventinfo")]
        SqlOutcome<IReadOnlyList<fn_trace_geteventinfoResult>> fn_trace_geteventinfo([SqlParameter("@handle", 0, false, false), SqlTypeFacets("int", true)] int? handle);
        [SqlTableFunction("sys", "dm_exec_plan_attributes")]
        SqlOutcome<IReadOnlyList<dm_exec_plan_attributesResult>> dm_exec_plan_attributes([SqlParameter("@handle", 0, false, false), SqlTypeFacets("varbinary", true, 64)] Byte[] handle);
    }

    public sealed class sysViewNames
    {
        public const string all_columns = "[sys].[all_columns]";
        public const string all_objects = "[sys].[all_objects]";
        public const string all_parameters = "[sys].[all_parameters]";
        public const string all_sql_modules = "[sys].[all_sql_modules]";
        public const string all_views = "[sys].[all_views]";
        public const string allocation_units = "[sys].[allocation_units]";
        public const string assemblies = "[sys].[assemblies]";
        public const string assembly_files = "[sys].[assembly_files]";
        public const string assembly_modules = "[sys].[assembly_modules]";
        public const string assembly_references = "[sys].[assembly_references]";
        public const string assembly_types = "[sys].[assembly_types]";
        public const string asymmetric_keys = "[sys].[asymmetric_keys]";
        public const string availability_databases_cluster = "[sys].[availability_databases_cluster]";
        public const string availability_group_listener_ip_addresses = "[sys].[availability_group_listener_ip_addresses]";
        public const string availability_group_listeners = "[sys].[availability_group_listeners]";
        public const string availability_groups = "[sys].[availability_groups]";
        public const string availability_groups_cluster = "[sys].[availability_groups_cluster]";
        public const string availability_read_only_routing_lists = "[sys].[availability_read_only_routing_lists]";
        public const string availability_replicas = "[sys].[availability_replicas]";
        public const string backup_devices = "[sys].[backup_devices]";
        public const string certificates = "[sys].[certificates]";
        public const string change_tracking_databases = "[sys].[change_tracking_databases]";
        public const string change_tracking_tables = "[sys].[change_tracking_tables]";
        public const string check_constraints = "[sys].[check_constraints]";
        public const string column_store_dictionaries = "[sys].[column_store_dictionaries]";
        public const string column_store_row_groups = "[sys].[column_store_row_groups]";
        public const string column_store_segments = "[sys].[column_store_segments]";
        public const string column_type_usages = "[sys].[column_type_usages]";
        public const string column_xml_schema_collection_usages = "[sys].[column_xml_schema_collection_usages]";
        public const string columns = "[sys].[columns]";
        public const string computed_columns = "[sys].[computed_columns]";
        public const string configurations = "[sys].[configurations]";
        public const string conversation_endpoints = "[sys].[conversation_endpoints]";
        public const string conversation_groups = "[sys].[conversation_groups]";
        public const string conversation_priorities = "[sys].[conversation_priorities]";
        public const string credentials = "[sys].[credentials]";
        public const string crypt_properties = "[sys].[crypt_properties]";
        public const string cryptographic_providers = "[sys].[cryptographic_providers]";
        public const string data_spaces = "[sys].[data_spaces]";
        public const string database_audit_specification_details = "[sys].[database_audit_specification_details]";
        public const string database_audit_specifications = "[sys].[database_audit_specifications]";
        public const string database_files = "[sys].[database_files]";
        public const string database_filestream_options = "[sys].[database_filestream_options]";
        public const string database_mirroring = "[sys].[database_mirroring]";
        public const string database_mirroring_endpoints = "[sys].[database_mirroring_endpoints]";
        public const string database_mirroring_witnesses = "[sys].[database_mirroring_witnesses]";
        public const string database_permissions = "[sys].[database_permissions]";
        public const string database_principals = "[sys].[database_principals]";
        public const string database_recovery_status = "[sys].[database_recovery_status]";
        public const string database_role_members = "[sys].[database_role_members]";
        public const string databases = "[sys].[databases]";
        public const string default_constraints = "[sys].[default_constraints]";
        public const string destination_data_spaces = "[sys].[destination_data_spaces]";
        public const string dm_audit_actions = "[sys].[dm_audit_actions]";
        public const string dm_audit_class_type_map = "[sys].[dm_audit_class_type_map]";
        public const string dm_broker_activated_tasks = "[sys].[dm_broker_activated_tasks]";
        public const string dm_broker_connections = "[sys].[dm_broker_connections]";
        public const string dm_broker_forwarded_messages = "[sys].[dm_broker_forwarded_messages]";
        public const string dm_broker_queue_monitors = "[sys].[dm_broker_queue_monitors]";
        public const string dm_cdc_errors = "[sys].[dm_cdc_errors]";
        public const string dm_cdc_log_scan_sessions = "[sys].[dm_cdc_log_scan_sessions]";
        public const string dm_clr_appdomains = "[sys].[dm_clr_appdomains]";
        public const string dm_clr_loaded_assemblies = "[sys].[dm_clr_loaded_assemblies]";
        public const string dm_clr_properties = "[sys].[dm_clr_properties]";
        public const string dm_clr_tasks = "[sys].[dm_clr_tasks]";
        public const string dm_cryptographic_provider_properties = "[sys].[dm_cryptographic_provider_properties]";
        public const string dm_database_encryption_keys = "[sys].[dm_database_encryption_keys]";
        public const string dm_db_file_space_usage = "[sys].[dm_db_file_space_usage]";
        public const string dm_db_fts_index_physical_stats = "[sys].[dm_db_fts_index_physical_stats]";
        public const string dm_db_index_usage_stats = "[sys].[dm_db_index_usage_stats]";
        public const string dm_db_log_space_usage = "[sys].[dm_db_log_space_usage]";
        public const string dm_db_mirroring_auto_page_repair = "[sys].[dm_db_mirroring_auto_page_repair]";
        public const string dm_db_mirroring_connections = "[sys].[dm_db_mirroring_connections]";
        public const string dm_db_mirroring_past_actions = "[sys].[dm_db_mirroring_past_actions]";
        public const string dm_db_missing_index_details = "[sys].[dm_db_missing_index_details]";
        public const string dm_db_missing_index_group_stats = "[sys].[dm_db_missing_index_group_stats]";
        public const string dm_db_missing_index_groups = "[sys].[dm_db_missing_index_groups]";
        public const string dm_db_partition_stats = "[sys].[dm_db_partition_stats]";
        public const string dm_db_persisted_sku_features = "[sys].[dm_db_persisted_sku_features]";
        public const string dm_db_script_level = "[sys].[dm_db_script_level]";
        public const string dm_db_session_space_usage = "[sys].[dm_db_session_space_usage]";
        public const string dm_db_task_space_usage = "[sys].[dm_db_task_space_usage]";
        public const string dm_db_uncontained_entities = "[sys].[dm_db_uncontained_entities]";
        public const string dm_db_xtp_checkpoint_files = "[sys].[dm_db_xtp_checkpoint_files]";
        public const string dm_db_xtp_checkpoint_stats = "[sys].[dm_db_xtp_checkpoint_stats]";
        public const string dm_db_xtp_gc_cycle_stats = "[sys].[dm_db_xtp_gc_cycle_stats]";
        public const string dm_db_xtp_hash_index_stats = "[sys].[dm_db_xtp_hash_index_stats]";
        public const string dm_db_xtp_index_stats = "[sys].[dm_db_xtp_index_stats]";
        public const string dm_db_xtp_memory_consumers = "[sys].[dm_db_xtp_memory_consumers]";
        public const string dm_db_xtp_merge_requests = "[sys].[dm_db_xtp_merge_requests]";
        public const string dm_db_xtp_nonclustered_index_stats = "[sys].[dm_db_xtp_nonclustered_index_stats]";
        public const string dm_db_xtp_object_stats = "[sys].[dm_db_xtp_object_stats]";
        public const string dm_db_xtp_table_memory_stats = "[sys].[dm_db_xtp_table_memory_stats]";
        public const string dm_db_xtp_transactions = "[sys].[dm_db_xtp_transactions]";
        public const string dm_exec_background_job_queue = "[sys].[dm_exec_background_job_queue]";
        public const string dm_exec_background_job_queue_stats = "[sys].[dm_exec_background_job_queue_stats]";
        public const string dm_exec_cached_plans = "[sys].[dm_exec_cached_plans]";
        public const string dm_exec_connections = "[sys].[dm_exec_connections]";
        public const string dm_exec_procedure_stats = "[sys].[dm_exec_procedure_stats]";
        public const string dm_exec_query_memory_grants = "[sys].[dm_exec_query_memory_grants]";
        public const string dm_exec_query_optimizer_info = "[sys].[dm_exec_query_optimizer_info]";
        public const string dm_exec_query_profiles = "[sys].[dm_exec_query_profiles]";
        public const string dm_exec_query_resource_semaphores = "[sys].[dm_exec_query_resource_semaphores]";
        public const string dm_exec_query_stats = "[sys].[dm_exec_query_stats]";
        public const string dm_exec_query_transformation_stats = "[sys].[dm_exec_query_transformation_stats]";
        public const string dm_exec_requests = "[sys].[dm_exec_requests]";
        public const string dm_exec_sessions = "[sys].[dm_exec_sessions]";
        public const string dm_exec_trigger_stats = "[sys].[dm_exec_trigger_stats]";
        public const string dm_filestream_file_io_handles = "[sys].[dm_filestream_file_io_handles]";
        public const string dm_filestream_file_io_requests = "[sys].[dm_filestream_file_io_requests]";
        public const string dm_filestream_non_transacted_handles = "[sys].[dm_filestream_non_transacted_handles]";
        public const string dm_fts_active_catalogs = "[sys].[dm_fts_active_catalogs]";
        public const string dm_fts_fdhosts = "[sys].[dm_fts_fdhosts]";
        public const string dm_fts_index_population = "[sys].[dm_fts_index_population]";
        public const string dm_fts_memory_buffers = "[sys].[dm_fts_memory_buffers]";
        public const string dm_fts_memory_pools = "[sys].[dm_fts_memory_pools]";
        public const string dm_fts_outstanding_batches = "[sys].[dm_fts_outstanding_batches]";
        public const string dm_fts_population_ranges = "[sys].[dm_fts_population_ranges]";
        public const string dm_fts_semantic_similarity_population = "[sys].[dm_fts_semantic_similarity_population]";
        public const string dm_hadr_auto_page_repair = "[sys].[dm_hadr_auto_page_repair]";
        public const string dm_hadr_availability_group_states = "[sys].[dm_hadr_availability_group_states]";
        public const string dm_hadr_availability_replica_cluster_nodes = "[sys].[dm_hadr_availability_replica_cluster_nodes]";
        public const string dm_hadr_availability_replica_cluster_states = "[sys].[dm_hadr_availability_replica_cluster_states]";
        public const string dm_hadr_availability_replica_states = "[sys].[dm_hadr_availability_replica_states]";
        public const string dm_hadr_cluster = "[sys].[dm_hadr_cluster]";
        public const string dm_hadr_cluster_members = "[sys].[dm_hadr_cluster_members]";
        public const string dm_hadr_cluster_networks = "[sys].[dm_hadr_cluster_networks]";
        public const string dm_hadr_database_replica_cluster_states = "[sys].[dm_hadr_database_replica_cluster_states]";
        public const string dm_hadr_database_replica_states = "[sys].[dm_hadr_database_replica_states]";
        public const string dm_hadr_instance_node_map = "[sys].[dm_hadr_instance_node_map]";
        public const string dm_hadr_name_id_map = "[sys].[dm_hadr_name_id_map]";
        public const string dm_io_backup_tapes = "[sys].[dm_io_backup_tapes]";
        public const string dm_io_cluster_shared_drives = "[sys].[dm_io_cluster_shared_drives]";
        public const string dm_io_cluster_valid_path_names = "[sys].[dm_io_cluster_valid_path_names]";
        public const string dm_io_pending_io_requests = "[sys].[dm_io_pending_io_requests]";
        public const string dm_logpool_hashentries = "[sys].[dm_logpool_hashentries]";
        public const string dm_logpool_stats = "[sys].[dm_logpool_stats]";
        public const string dm_os_buffer_descriptors = "[sys].[dm_os_buffer_descriptors]";
        public const string dm_os_buffer_pool_extension_configuration = "[sys].[dm_os_buffer_pool_extension_configuration]";
        public const string dm_os_child_instances = "[sys].[dm_os_child_instances]";
        public const string dm_os_cluster_nodes = "[sys].[dm_os_cluster_nodes]";
        public const string dm_os_cluster_properties = "[sys].[dm_os_cluster_properties]";
        public const string dm_os_dispatcher_pools = "[sys].[dm_os_dispatcher_pools]";
        public const string dm_os_dispatchers = "[sys].[dm_os_dispatchers]";
        public const string dm_os_hosts = "[sys].[dm_os_hosts]";
        public const string dm_os_latch_stats = "[sys].[dm_os_latch_stats]";
        public const string dm_os_loaded_modules = "[sys].[dm_os_loaded_modules]";
        public const string dm_os_memory_allocations = "[sys].[dm_os_memory_allocations]";
        public const string dm_os_memory_broker_clerks = "[sys].[dm_os_memory_broker_clerks]";
        public const string dm_os_memory_brokers = "[sys].[dm_os_memory_brokers]";
        public const string dm_os_memory_cache_clock_hands = "[sys].[dm_os_memory_cache_clock_hands]";
        public const string dm_os_memory_cache_counters = "[sys].[dm_os_memory_cache_counters]";
        public const string dm_os_memory_cache_entries = "[sys].[dm_os_memory_cache_entries]";
        public const string dm_os_memory_cache_hash_tables = "[sys].[dm_os_memory_cache_hash_tables]";
        public const string dm_os_memory_clerks = "[sys].[dm_os_memory_clerks]";
        public const string dm_os_memory_node_access_stats = "[sys].[dm_os_memory_node_access_stats]";
        public const string dm_os_memory_nodes = "[sys].[dm_os_memory_nodes]";
        public const string dm_os_memory_objects = "[sys].[dm_os_memory_objects]";
        public const string dm_os_memory_pools = "[sys].[dm_os_memory_pools]";
        public const string dm_os_nodes = "[sys].[dm_os_nodes]";
        public const string dm_os_performance_counters = "[sys].[dm_os_performance_counters]";
        public const string dm_os_process_memory = "[sys].[dm_os_process_memory]";
        public const string dm_os_ring_buffers = "[sys].[dm_os_ring_buffers]";
        public const string dm_os_schedulers = "[sys].[dm_os_schedulers]";
        public const string dm_os_server_diagnostics_log_configurations = "[sys].[dm_os_server_diagnostics_log_configurations]";
        public const string dm_os_spinlock_stats = "[sys].[dm_os_spinlock_stats]";
        public const string dm_os_stacks = "[sys].[dm_os_stacks]";
        public const string dm_os_sublatches = "[sys].[dm_os_sublatches]";
        public const string dm_os_sys_info = "[sys].[dm_os_sys_info]";
        public const string dm_os_sys_memory = "[sys].[dm_os_sys_memory]";
        public const string dm_os_tasks = "[sys].[dm_os_tasks]";
        public const string dm_os_threads = "[sys].[dm_os_threads]";
        public const string dm_os_virtual_address_dump = "[sys].[dm_os_virtual_address_dump]";
        public const string dm_os_wait_stats = "[sys].[dm_os_wait_stats]";
        public const string dm_os_waiting_tasks = "[sys].[dm_os_waiting_tasks]";
        public const string dm_os_windows_info = "[sys].[dm_os_windows_info]";
        public const string dm_os_worker_local_storage = "[sys].[dm_os_worker_local_storage]";
        public const string dm_os_workers = "[sys].[dm_os_workers]";
        public const string dm_qn_subscriptions = "[sys].[dm_qn_subscriptions]";
        public const string dm_repl_articles = "[sys].[dm_repl_articles]";
        public const string dm_repl_schemas = "[sys].[dm_repl_schemas]";
        public const string dm_repl_tranhash = "[sys].[dm_repl_tranhash]";
        public const string dm_repl_traninfo = "[sys].[dm_repl_traninfo]";
        public const string dm_resource_governor_configuration = "[sys].[dm_resource_governor_configuration]";
        public const string dm_resource_governor_resource_pool_affinity = "[sys].[dm_resource_governor_resource_pool_affinity]";
        public const string dm_resource_governor_resource_pool_volumes = "[sys].[dm_resource_governor_resource_pool_volumes]";
        public const string dm_resource_governor_resource_pools = "[sys].[dm_resource_governor_resource_pools]";
        public const string dm_resource_governor_workload_groups = "[sys].[dm_resource_governor_workload_groups]";
        public const string dm_server_audit_status = "[sys].[dm_server_audit_status]";
        public const string dm_server_memory_dumps = "[sys].[dm_server_memory_dumps]";
        public const string dm_server_registry = "[sys].[dm_server_registry]";
        public const string dm_server_services = "[sys].[dm_server_services]";
        public const string dm_tcp_listener_states = "[sys].[dm_tcp_listener_states]";
        public const string dm_tran_active_snapshot_database_transactions = "[sys].[dm_tran_active_snapshot_database_transactions]";
        public const string dm_tran_active_transactions = "[sys].[dm_tran_active_transactions]";
        public const string dm_tran_commit_table = "[sys].[dm_tran_commit_table]";
        public const string dm_tran_current_snapshot = "[sys].[dm_tran_current_snapshot]";
        public const string dm_tran_current_transaction = "[sys].[dm_tran_current_transaction]";
        public const string dm_tran_database_transactions = "[sys].[dm_tran_database_transactions]";
        public const string dm_tran_locks = "[sys].[dm_tran_locks]";
        public const string dm_tran_session_transactions = "[sys].[dm_tran_session_transactions]";
        public const string dm_tran_top_version_generators = "[sys].[dm_tran_top_version_generators]";
        public const string dm_tran_transactions_snapshot = "[sys].[dm_tran_transactions_snapshot]";
        public const string dm_tran_version_store = "[sys].[dm_tran_version_store]";
        public const string dm_xe_map_values = "[sys].[dm_xe_map_values]";
        public const string dm_xe_object_columns = "[sys].[dm_xe_object_columns]";
        public const string dm_xe_objects = "[sys].[dm_xe_objects]";
        public const string dm_xe_packages = "[sys].[dm_xe_packages]";
        public const string dm_xe_session_event_actions = "[sys].[dm_xe_session_event_actions]";
        public const string dm_xe_session_events = "[sys].[dm_xe_session_events]";
        public const string dm_xe_session_object_columns = "[sys].[dm_xe_session_object_columns]";
        public const string dm_xe_session_targets = "[sys].[dm_xe_session_targets]";
        public const string dm_xe_sessions = "[sys].[dm_xe_sessions]";
        public const string dm_xtp_gc_queue_stats = "[sys].[dm_xtp_gc_queue_stats]";
        public const string dm_xtp_gc_stats = "[sys].[dm_xtp_gc_stats]";
        public const string dm_xtp_system_memory_consumers = "[sys].[dm_xtp_system_memory_consumers]";
        public const string dm_xtp_threads = "[sys].[dm_xtp_threads]";
        public const string dm_xtp_transaction_recent_rows = "[sys].[dm_xtp_transaction_recent_rows]";
        public const string dm_xtp_transaction_stats = "[sys].[dm_xtp_transaction_stats]";
        public const string endpoint_webmethods = "[sys].[endpoint_webmethods]";
        public const string endpoints = "[sys].[endpoints]";
        public const string event_notification_event_types = "[sys].[event_notification_event_types]";
        public const string event_notifications = "[sys].[event_notifications]";
        public const string events = "[sys].[events]";
        public const string extended_procedures = "[sys].[extended_procedures]";
        public const string extended_properties = "[sys].[extended_properties]";
        public const string external_data_sources = "[sys].[external_data_sources]";
        public const string external_file_formats = "[sys].[external_file_formats]";
        public const string external_tables = "[sys].[external_tables]";
        public const string filegroups = "[sys].[filegroups]";
        public const string filetable_system_defined_objects = "[sys].[filetable_system_defined_objects]";
        public const string filetables = "[sys].[filetables]";
        public const string foreign_key_columns = "[sys].[foreign_key_columns]";
        public const string foreign_keys = "[sys].[foreign_keys]";
        public const string fulltext_catalogs = "[sys].[fulltext_catalogs]";
        public const string fulltext_document_types = "[sys].[fulltext_document_types]";
        public const string fulltext_index_catalog_usages = "[sys].[fulltext_index_catalog_usages]";
        public const string fulltext_index_columns = "[sys].[fulltext_index_columns]";
        public const string fulltext_index_fragments = "[sys].[fulltext_index_fragments]";
        public const string fulltext_indexes = "[sys].[fulltext_indexes]";
        public const string fulltext_languages = "[sys].[fulltext_languages]";
        public const string fulltext_semantic_language_statistics_database = "[sys].[fulltext_semantic_language_statistics_database]";
        public const string fulltext_semantic_languages = "[sys].[fulltext_semantic_languages]";
        public const string fulltext_stoplists = "[sys].[fulltext_stoplists]";
        public const string fulltext_stopwords = "[sys].[fulltext_stopwords]";
        public const string fulltext_system_stopwords = "[sys].[fulltext_system_stopwords]";
        public const string function_order_columns = "[sys].[function_order_columns]";
        public const string hash_indexes = "[sys].[hash_indexes]";
        public const string http_endpoints = "[sys].[http_endpoints]";
        public const string identity_columns = "[sys].[identity_columns]";
        public const string index_columns = "[sys].[index_columns]";
        public const string indexes = "[sys].[indexes]";
        public const string internal_tables = "[sys].[internal_tables]";
        public const string key_constraints = "[sys].[key_constraints]";
        public const string key_encryptions = "[sys].[key_encryptions]";
        public const string linked_logins = "[sys].[linked_logins]";
        public const string login_token = "[sys].[login_token]";
        public const string master_files = "[sys].[master_files]";
        public const string master_key_passwords = "[sys].[master_key_passwords]";
        public const string message_type_xml_schema_collection_usages = "[sys].[message_type_xml_schema_collection_usages]";
        public const string messages = "[sys].[messages]";
        public const string module_assembly_usages = "[sys].[module_assembly_usages]";
        public const string numbered_procedure_parameters = "[sys].[numbered_procedure_parameters]";
        public const string numbered_procedures = "[sys].[numbered_procedures]";
        public const string objects = "[sys].[objects]";
        public const string openkeys = "[sys].[openkeys]";
        public const string parameter_type_usages = "[sys].[parameter_type_usages]";
        public const string parameter_xml_schema_collection_usages = "[sys].[parameter_xml_schema_collection_usages]";
        public const string parameters = "[sys].[parameters]";
        public const string partition_functions = "[sys].[partition_functions]";
        public const string partition_parameters = "[sys].[partition_parameters]";
        public const string partition_range_values = "[sys].[partition_range_values]";
        public const string partition_schemes = "[sys].[partition_schemes]";
        public const string partitions = "[sys].[partitions]";
        public const string plan_guides = "[sys].[plan_guides]";
        public const string procedures = "[sys].[procedures]";
        public const string registered_search_properties = "[sys].[registered_search_properties]";
        public const string registered_search_property_lists = "[sys].[registered_search_property_lists]";
        public const string remote_logins = "[sys].[remote_logins]";
        public const string remote_service_bindings = "[sys].[remote_service_bindings]";
        public const string resource_governor_configuration = "[sys].[resource_governor_configuration]";
        public const string resource_governor_resource_pool_affinity = "[sys].[resource_governor_resource_pool_affinity]";
        public const string resource_governor_resource_pools = "[sys].[resource_governor_resource_pools]";
        public const string resource_governor_workload_groups = "[sys].[resource_governor_workload_groups]";
        public const string routes = "[sys].[routes]";
        public const string schemas = "[sys].[schemas]";
        public const string securable_classes = "[sys].[securable_classes]";
        public const string selective_xml_index_namespaces = "[sys].[selective_xml_index_namespaces]";
        public const string selective_xml_index_paths = "[sys].[selective_xml_index_paths]";
        public const string sequences = "[sys].[sequences]";
        public const string server_assembly_modules = "[sys].[server_assembly_modules]";
        public const string server_audit_specification_details = "[sys].[server_audit_specification_details]";
        public const string server_audit_specifications = "[sys].[server_audit_specifications]";
        public const string server_audits = "[sys].[server_audits]";
        public const string server_event_notifications = "[sys].[server_event_notifications]";
        public const string server_event_session_actions = "[sys].[server_event_session_actions]";
        public const string server_event_session_events = "[sys].[server_event_session_events]";
        public const string server_event_session_fields = "[sys].[server_event_session_fields]";
        public const string server_event_session_targets = "[sys].[server_event_session_targets]";
        public const string server_event_sessions = "[sys].[server_event_sessions]";
        public const string server_events = "[sys].[server_events]";
        public const string server_file_audits = "[sys].[server_file_audits]";
        public const string server_permissions = "[sys].[server_permissions]";
        public const string server_principal_credentials = "[sys].[server_principal_credentials]";
        public const string server_principals = "[sys].[server_principals]";
        public const string server_role_members = "[sys].[server_role_members]";
        public const string server_sql_modules = "[sys].[server_sql_modules]";
        public const string server_trigger_events = "[sys].[server_trigger_events]";
        public const string server_triggers = "[sys].[server_triggers]";
        public const string servers = "[sys].[servers]";
        public const string service_broker_endpoints = "[sys].[service_broker_endpoints]";
        public const string service_contract_message_usages = "[sys].[service_contract_message_usages]";
        public const string service_contract_usages = "[sys].[service_contract_usages]";
        public const string service_contracts = "[sys].[service_contracts]";
        public const string service_message_types = "[sys].[service_message_types]";
        public const string service_queue_usages = "[sys].[service_queue_usages]";
        public const string service_queues = "[sys].[service_queues]";
        public const string services = "[sys].[services]";
        public const string soap_endpoints = "[sys].[soap_endpoints]";
        public const string spatial_index_tessellations = "[sys].[spatial_index_tessellations]";
        public const string spatial_indexes = "[sys].[spatial_indexes]";
        public const string spatial_reference_systems = "[sys].[spatial_reference_systems]";
        public const string sql_dependencies = "[sys].[sql_dependencies]";
        public const string sql_expression_dependencies = "[sys].[sql_expression_dependencies]";
        public const string sql_logins = "[sys].[sql_logins]";
        public const string sql_modules = "[sys].[sql_modules]";
        public const string stats = "[sys].[stats]";
        public const string stats_columns = "[sys].[stats_columns]";
        public const string symmetric_keys = "[sys].[symmetric_keys]";
        public const string synonyms = "[sys].[synonyms]";
        public const string sysaltfiles = "[sys].[sysaltfiles]";
        public const string syscacheobjects = "[sys].[syscacheobjects]";
        public const string syscharsets = "[sys].[syscharsets]";
        public const string syscolumns = "[sys].[syscolumns]";
        public const string syscomments = "[sys].[syscomments]";
        public const string sysconfigures = "[sys].[sysconfigures]";
        public const string sysconstraints = "[sys].[sysconstraints]";
        public const string syscurconfigs = "[sys].[syscurconfigs]";
        public const string syscursorcolumns = "[sys].[syscursorcolumns]";
        public const string syscursorrefs = "[sys].[syscursorrefs]";
        public const string syscursors = "[sys].[syscursors]";
        public const string syscursortables = "[sys].[syscursortables]";
        public const string sysdatabases = "[sys].[sysdatabases]";
        public const string sysdepends = "[sys].[sysdepends]";
        public const string sysdevices = "[sys].[sysdevices]";
        public const string sysfilegroups = "[sys].[sysfilegroups]";
        public const string sysfiles = "[sys].[sysfiles]";
        public const string sysforeignkeys = "[sys].[sysforeignkeys]";
        public const string sysfulltextcatalogs = "[sys].[sysfulltextcatalogs]";
        public const string sysindexes = "[sys].[sysindexes]";
        public const string sysindexkeys = "[sys].[sysindexkeys]";
        public const string syslanguages = "[sys].[syslanguages]";
        public const string syslockinfo = "[sys].[syslockinfo]";
        public const string syslogins = "[sys].[syslogins]";
        public const string sysmembers = "[sys].[sysmembers]";
        public const string sysmessages = "[sys].[sysmessages]";
        public const string sysobjects = "[sys].[sysobjects]";
        public const string sysoledbusers = "[sys].[sysoledbusers]";
        public const string sysopentapes = "[sys].[sysopentapes]";
        public const string sysperfinfo = "[sys].[sysperfinfo]";
        public const string syspermissions = "[sys].[syspermissions]";
        public const string sysprocesses = "[sys].[sysprocesses]";
        public const string sysprotects = "[sys].[sysprotects]";
        public const string sysreferences = "[sys].[sysreferences]";
        public const string sysremotelogins = "[sys].[sysremotelogins]";
        public const string sysservers = "[sys].[sysservers]";
        public const string system_columns = "[sys].[system_columns]";
        public const string system_components_surface_area_configuration = "[sys].[system_components_surface_area_configuration]";
        public const string system_internals_allocation_units = "[sys].[system_internals_allocation_units]";
        public const string system_internals_partition_columns = "[sys].[system_internals_partition_columns]";
        public const string system_internals_partitions = "[sys].[system_internals_partitions]";
        public const string system_objects = "[sys].[system_objects]";
        public const string system_parameters = "[sys].[system_parameters]";
        public const string system_sql_modules = "[sys].[system_sql_modules]";
        public const string system_views = "[sys].[system_views]";
        public const string systypes = "[sys].[systypes]";
        public const string sysusers = "[sys].[sysusers]";
        public const string table_types = "[sys].[table_types]";
        public const string tables = "[sys].[tables]";
        public const string tcp_endpoints = "[sys].[tcp_endpoints]";
        public const string trace_categories = "[sys].[trace_categories]";
        public const string trace_columns = "[sys].[trace_columns]";
        public const string trace_event_bindings = "[sys].[trace_event_bindings]";
        public const string trace_events = "[sys].[trace_events]";
        public const string trace_subclass_values = "[sys].[trace_subclass_values]";
        public const string traces = "[sys].[traces]";
        public const string transmission_queue = "[sys].[transmission_queue]";
        public const string trigger_event_types = "[sys].[trigger_event_types]";
        public const string trigger_events = "[sys].[trigger_events]";
        public const string triggers = "[sys].[triggers]";
        public const string type_assembly_usages = "[sys].[type_assembly_usages]";
        public const string types = "[sys].[types]";
        public const string user_token = "[sys].[user_token]";
        public const string via_endpoints = "[sys].[via_endpoints]";
        public const string views = "[sys].[views]";
        public const string xml_indexes = "[sys].[xml_indexes]";
        public const string xml_schema_attributes = "[sys].[xml_schema_attributes]";
        public const string xml_schema_collections = "[sys].[xml_schema_collections]";
        public const string xml_schema_component_placements = "[sys].[xml_schema_component_placements]";
        public const string xml_schema_components = "[sys].[xml_schema_components]";
        public const string xml_schema_elements = "[sys].[xml_schema_elements]";
        public const string xml_schema_facets = "[sys].[xml_schema_facets]";
        public const string xml_schema_model_groups = "[sys].[xml_schema_model_groups]";
        public const string xml_schema_namespaces = "[sys].[xml_schema_namespaces]";
        public const string xml_schema_types = "[sys].[xml_schema_types]";
        public const string xml_schema_wildcard_namespaces = "[sys].[xml_schema_wildcard_namespaces]";
        public const string xml_schema_wildcards = "[sys].[xml_schema_wildcards]";
    }
}
// Emission concluded at 9/30/2016 9:36:30 AM
